
;; Function createStack (createStack, funcdef_no=6, decl_uid=3054, cgraph_uid=7, symbol_order=6)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 5 n_edges 5 count 5 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 7.
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 28.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r93,l0) best DIREG, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a8 (r90,l0) best AREG, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a12 (r87,l0) best AREG, allocno GENERAL_REGS
    r86: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r86,l0) best AREG, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r82,l0) best DIREG, allocno GENERAL_REGS

  a0(r86,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a1(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a2(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a3(r93,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a5(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a6(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a7(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a8(r90,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a9(r82,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a10(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a11(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a12(r87,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000

   Insn 41(l0): point = 0
   Insn 40(l0): point = 2
   Insn 36(l0): point = 4
   Insn 33(l0): point = 6
   Insn 32(l0): point = 8
   Insn 31(l0): point = 10
   Insn 28(l0): point = 13
   Insn 27(l0): point = 15
   Insn 26(l0): point = 17
   Insn 24(l0): point = 20
   Insn 23(l0): point = 22
   Insn 22(l0): point = 24
   Insn 21(l0): point = 26
   Insn 20(l0): point = 28
   Insn 19(l0): point = 30
   Insn 18(l0): point = 32
   Insn 17(l0): point = 34
   Insn 16(l0): point = 36
   Insn 15(l0): point = 38
   Insn 14(l0): point = 40
   Insn 13(l0): point = 42
   Insn 12(l0): point = 44
   Insn 11(l0): point = 46
   Insn 9(l0): point = 48
   Insn 8(l0): point = 50
   Insn 7(l0): point = 52
   Insn 6(l0): point = 54
   Insn 5(l0): point = 56
 a0(r86): [3..4]
 a1(r85): [5..6]
 a2(r94): [9..10]
 a3(r93): [16..17]
 a4(r84): [23..24]
 a5(r92): [25..26]
 a6(r91): [29..30]
 a7(r83): [29..32]
 a8(r90): [33..34]
 a9(r82): [39..40]
 a10(r89): [41..42]
 a11(r88): [45..46]
 a12(r87): [49..50]
Compressing live ranges: from 59 to 24 - 40%
Ranges after the compression:
 a0(r86): [0..1]
 a1(r85): [2..3]
 a2(r94): [4..5]
 a3(r93): [6..7]
 a4(r84): [8..9]
 a5(r92): [10..11]
 a6(r91): [12..13]
 a7(r83): [12..13]
 a8(r90): [14..15]
 a9(r82): [16..17]
 a10(r89): [18..19]
 a11(r88): [20..21]
 a12(r87): [22..23]
  pref0:a3(r93)<-hr5@1500
  pref1:a8(r90)<-hr0@1500
  pref2:a12(r87)<-hr0@1500
  pref3:a0(r86)<-hr0@1500
  pref4:a9(r82)<-hr5@1500
  regions=1, blocks=5, points=24
    allocnos=13 (big 0), copies=0, conflicts=0, ranges=13
Disposition:
    9:r82  l0     0    7:r83  l0     1    4:r84  l0     0    1:r85  l0     0
    0:r86  l0     0   12:r87  l0     0   11:r88  l0     0   10:r89  l0     0
    8:r90  l0     0    6:r91  l0     0    5:r92  l0     0    3:r93  l0     0
    2:r94  l0     0
+++Costs: overall -5000, reg -5000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


createStack

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={5d,4u} r1={4d} r2={4d} r4={4d} r5={7d,3u} r6={1d,4u} r7={1d,7u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={1d,3u} r17={4d,1u} r18={3d} r19={1d,13u} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={4d} r37={4d} r38={3d} r39={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} 
;;    total ref usage 286{238d,48u,0e} in 28{25 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 84 87 88 89 90 91 92
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 out+0 S8 A64])
        (const_int 0 [0])) "a.c":6:14 74 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:DI 5 di)
        (const_int 24 [0x18])) "a.c":7:11 74 {*movdi_internal}
     (nil))
(call_insn 7 6 8 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fa9f2ad4800 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) "a.c":7:11 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 8 7 9 2 (set (reg/f:DI 87)
        (reg:DI 0 ax)) "a.c":7:11 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 87)
            (nil))))
(insn 9 8 11 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 out+0 S8 A64])
        (reg/f:DI 87)) "a.c":7:11 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87)
        (nil)))
(insn 11 9 12 2 (set (reg/f:DI 88)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 out+0 S8 A64])) "a.c":11:15 74 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (mem:DI (plus:DI (reg/f:DI 88)
                (const_int 8 [0x8])) [4 out_8->size+0 S8 A64])
        (const_int 10 [0xa])) "a.c":11:15 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 88)
        (nil)))
(insn 13 12 14 2 (set (reg/f:DI 89)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 out+0 S8 A64])) "a.c":12:27 74 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 82 [ _1 ])
        (mem:DI (plus:DI (reg/f:DI 89)
                (const_int 8 [0x8])) [4 out_8->size+0 S8 A64])) "a.c":12:27 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 89)
        (nil)))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (reg:DI 82 [ _1 ])) "a.c":12:17 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 82 [ _1 ])
        (nil)))
(call_insn 16 15 17 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fa9f2ad4800 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) "a.c":12:17 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 17 16 18 2 (set (reg/f:DI 90)
        (reg:DI 0 ax)) "a.c":12:17 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 90)
            (nil))))
(insn 18 17 19 2 (set (reg/f:DI 83 [ _2 ])
        (reg/f:DI 90)) "a.c":12:17 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 90)
        (nil)))
(insn 19 18 20 2 (set (reg/f:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 out+0 S8 A64])) "a.c":12:15 74 {*movdi_internal}
     (nil))
(insn 20 19 21 2 (set (mem/f:DI (reg/f:DI 91) [3 out_8->data+0 S8 A64])
        (reg/f:DI 83 [ _2 ])) "a.c":12:15 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 91)
        (expr_list:REG_DEAD (reg/f:DI 83 [ _2 ])
            (nil))))
(insn 21 20 22 2 (set (reg/f:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 out+0 S8 A64])) "a.c":13:12 74 {*movdi_internal}
     (nil))
(insn 22 21 23 2 (set (reg/f:DI 84 [ _3 ])
        (mem/f:DI (reg/f:DI 92) [3 out_8->data+0 S8 A64])) "a.c":13:12 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 92)
        (nil)))
(insn 23 22 24 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 84 [ _3 ])
            (const_int 0 [0]))) "a.c":13:8 8 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 84 [ _3 ])
        (nil)))
(jump_insn 24 23 25 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) "a.c":13:8 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 29)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 93
(note 25 24 26 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 3 (set (reg:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 out+0 S8 A64])) "a.c":14:9 74 {*movdi_internal}
     (nil))
(insn 27 26 28 3 (set (reg:DI 5 di)
        (reg:DI 93)) "a.c":14:9 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 93)
        (nil)))
(call_insn 28 27 29 3 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fa9f2acdd00 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "a.c":14:9 813 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 1, flags: (RTL)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 85 86 94
(code_label 29 28 30 4 2 (nil) [1 uses])
(note 30 29 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 4 (set (reg/f:DI 94)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 out+0 S8 A64])) "a.c":17:14 74 {*movdi_internal}
     (nil))
(insn 32 31 33 4 (set (mem:DI (plus:DI (reg/f:DI 94)
                (const_int 16 [0x10])) [4 out_8->top+0 S8 A64])
        (const_int 0 [0])) "a.c":17:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 94)
        (nil)))
(insn 33 32 36 4 (set (reg/f:DI 85 [ _14 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 out+0 S8 A64])) "a.c":18:12 74 {*movdi_internal}
     (nil))
(insn 36 33 40 4 (set (reg/f:DI 86 [ <retval> ])
        (reg/f:DI 85 [ _14 ])) "a.c":18:12 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 85 [ _14 ])
        (nil)))
(insn 40 36 41 4 (set (reg/i:DI 0 ax)
        (reg/f:DI 86 [ <retval> ])) "a.c":19:1 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 86 [ <retval> ])
        (nil)))
(insn 41 40 0 4 (use (reg/i:DI 0 ax)) "a.c":19:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function deleteStack (deleteStack, funcdef_no=7, decl_uid=3053, cgraph_uid=8, symbol_order=7)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 4 n_edges 3 count 4 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3
;; 2 succs { 3 }
;; 3 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 14.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a1 (r84,l0) best DIREG, allocno GENERAL_REGS
    r83: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r83,l0) best DIREG, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a1(r84,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a2(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a3(r83,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a5(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 20(l0): point = 0
   Insn 16(l0): point = 3
   Insn 15(l0): point = 5
   Insn 14(l0): point = 7
   Insn 13(l0): point = 9
   Insn 12(l0): point = 11
   Insn 11(l0): point = 13
   Insn 10(l0): point = 15
   Insn 9(l0): point = 17
   Insn 8(l0): point = 19
   Insn 7(l0): point = 21
   Insn 6(l0): point = 23
   Insn 2(l0): point = 25
 a0(r87): [4..5]
 a1(r84): [10..11]
 a2(r86): [12..13]
 a3(r83): [18..19]
 a4(r82): [20..21]
 a5(r85): [22..23]
Compressing live ranges: from 28 to 12 - 42%
Ranges after the compression:
 a0(r87): [0..1]
 a1(r84): [2..3]
 a2(r86): [4..5]
 a3(r83): [6..7]
 a4(r82): [8..9]
 a5(r85): [10..11]
  pref0:a1(r84)<-hr5@1500
  pref1:a3(r83)<-hr5@1500
  regions=1, blocks=4, points=12
    allocnos=6 (big 0), copies=0, conflicts=0, ranges=6
Disposition:
    4:r82  l0     0    3:r83  l0     0    1:r84  l0     0    5:r85  l0     0
    2:r86  l0     0    0:r87  l0     0
+++Costs: overall -2000, reg -2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


deleteStack

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d} r1={3d} r2={3d} r4={3d} r5={5d,3u} r6={1d,3u} r7={1d,5u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={1d,2u} r17={2d} r18={2d} r19={1d,7u} r20={3d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={3d} r37={3d} r38={2d} r39={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} 
;;    total ref usage 187{161d,26u,0e} in 13{11 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 84 85 86 87
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [5 stack+0 S8 A64])
        (reg:DI 5 di [ stack ])) "a.c":21:35 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ stack ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 85)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [5 stack+0 S8 A64])) "a.c":22:11 74 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 82 [ _1 ])
        (mem/f:DI (reg/f:DI 85) [1 *stack_5(D)+0 S8 A64])) "a.c":22:11 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 85)
        (nil)))
(insn 8 7 9 2 (set (reg/f:DI 83 [ _2 ])
        (mem/f:DI (reg/f:DI 82 [ _1 ]) [3 _1->data+0 S8 A64])) "a.c":22:18 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 82 [ _1 ])
        (nil)))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg/f:DI 83 [ _2 ])) "a.c":22:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 83 [ _2 ])
        (nil)))
(call_insn 10 9 11 2 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fa9f2acdd00 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "a.c":22:5 813 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 10 12 2 (set (reg/f:DI 86)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [5 stack+0 S8 A64])) "a.c":23:5 74 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 84 [ _3 ])
        (mem/f:DI (reg/f:DI 86) [1 *stack_5(D)+0 S8 A64])) "a.c":23:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 86)
        (nil)))
(insn 13 12 14 2 (set (reg:DI 5 di)
        (reg/f:DI 84 [ _3 ])) "a.c":23:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 84 [ _3 ])
        (nil)))
(call_insn 14 13 15 2 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fa9f2acdd00 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "a.c":23:5 813 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 15 14 16 2 (set (reg/f:DI 87)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [5 stack+0 S8 A64])) "a.c":24:12 74 {*movdi_internal}
     (nil))
(insn 16 15 19 2 (set (mem/f:DI (reg/f:DI 87) [1 *stack_5(D)+0 S8 A64])
        (const_int 0 [0])) "a.c":24:12 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87)
        (nil)))
;;  succ:       3 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 1, flags: (RTL)
;;  pred:       2 [always]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 19 16 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 0 3 (const_int 0 [0]) "a.c":25:1 843 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function resize (resize, funcdef_no=8, decl_uid=3056, cgraph_uid=9, symbol_order=8)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 17.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a1 (r86,l0) best AREG, allocno GENERAL_REGS
    r85: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r85,l0) best DIREG, allocno GENERAL_REGS
    r84: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r84,l0) best SIREG, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a1(r86,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a2(r85,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a3(r84,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a5(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a6(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a7(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a8(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:22000 INT_SSE_REGS:22000 ALL_REGS:210000 MEM:11000
  a9(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 26(l0): point = 0
   Insn 20(l0): point = 2
   Insn 19(l0): point = 4
   Insn 18(l0): point = 6
   Insn 17(l0): point = 8
   Insn 16(l0): point = 10
   Insn 15(l0): point = 12
   Insn 14(l0): point = 14
   Insn 13(l0): point = 16
   Insn 12(l0): point = 18
   Insn 11(l0): point = 20
   Insn 10(l0): point = 22
   Insn 9(l0): point = 24
   Insn 8(l0): point = 26
   Insn 7(l0): point = 28
   Insn 6(l0): point = 30
   Insn 2(l0): point = 32
 a0(r92): [3..4]
 a1(r86): [3..6]
 a2(r85): [11..14]
 a3(r84): [13..18]
 a4(r91): [15..16]
 a5(r90): [19..20]
 a6(r89): [23..24]
 a7(r83): [23..26]
 a8(r82): [27..28]
 a9(r88): [29..30]
Compressing live ranges: from 35 to 14 - 40%
Ranges after the compression:
 a0(r92): [0..1]
 a1(r86): [0..1]
 a2(r85): [2..3]
 a3(r84): [2..5]
 a4(r91): [4..5]
 a5(r90): [6..7]
 a6(r89): [8..9]
 a7(r83): [8..9]
 a8(r82): [10..11]
 a9(r88): [12..13]
  pref0:a1(r86)<-hr0@1500
  pref1:a2(r85)<-hr5@1500
  pref2:a3(r84)<-hr4@1500
  regions=1, blocks=3, points=14
    allocnos=10 (big 0), copies=0, conflicts=0, ranges=10
Disposition:
    8:r82  l0     0    7:r83  l0     1    3:r84  l0     1    2:r85  l0     0
    1:r86  l0     0    9:r88  l0     0    6:r89  l0     0    5:r90  l0     0
    4:r91  l0     0    0:r92  l0     1
+++Costs: overall -3000, reg -3000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


resize

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={2d,1u} r1={2d} r2={2d} r4={3d,1u} r5={3d,2u} r6={1d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={2d} r18={1d} r19={1d,8u} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d} r37={2d} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} 
;;    total ref usage 127{99d,28u,0e} in 17{16 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 84 85 86 88 89 90 91 92
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 stack+0 S8 A64])
        (reg:DI 5 di [ stack ])) "a.c":28:29 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ stack ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 88)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 stack+0 S8 A64])) "a.c":29:17 74 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 82 [ _1 ])
        (mem:DI (plus:DI (reg/f:DI 88)
                (const_int 8 [0x8])) [4 stack_8(D)->size+0 S8 A64])) "a.c":29:17 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 88)
        (nil)))
(insn 8 7 9 2 (parallel [
            (set (reg:DI 83 [ _2 ])
                (plus:DI (reg:DI 82 [ _1 ])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "a.c":29:17 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 82 [ _1 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 9 8 10 2 (set (reg/f:DI 89)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 stack+0 S8 A64])) "a.c":29:17 74 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (mem:DI (plus:DI (reg/f:DI 89)
                (const_int 8 [0x8])) [4 stack_8(D)->size+0 S8 A64])
        (reg:DI 83 [ _2 ])) "a.c":29:17 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 89)
        (expr_list:REG_DEAD (reg:DI 83 [ _2 ])
            (nil))))
(insn 11 10 12 2 (set (reg/f:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 stack+0 S8 A64])) "a.c":30:45 74 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 84 [ _3 ])
        (mem:DI (plus:DI (reg/f:DI 90)
                (const_int 8 [0x8])) [4 stack_8(D)->size+0 S8 A64])) "a.c":30:45 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 90)
        (nil)))
(insn 13 12 14 2 (set (reg/f:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 stack+0 S8 A64])) "a.c":30:32 74 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg/f:DI 85 [ _4 ])
        (mem/f:DI (reg/f:DI 91) [3 stack_8(D)->data+0 S8 A64])) "a.c":30:32 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 91)
        (nil)))
(insn 15 14 16 2 (set (reg:DI 4 si)
        (reg:DI 84 [ _3 ])) "a.c":30:19 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 84 [ _3 ])
        (nil)))
(insn 16 15 17 2 (set (reg:DI 5 di)
        (reg/f:DI 85 [ _4 ])) "a.c":30:19 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 85 [ _4 ])
        (nil)))
(call_insn 17 16 18 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7fa9f2ad7600 realloc>) [0 __builtin_realloc S1 A8])
            (const_int 0 [0]))) "a.c":30:19 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 18 17 19 2 (set (reg/f:DI 86 [ _5 ])
        (reg:DI 0 ax)) "a.c":30:19 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 19 18 20 2 (set (reg/f:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 stack+0 S8 A64])) "a.c":30:17 74 {*movdi_internal}
     (nil))
(insn 20 19 26 2 (set (mem/f:DI (reg/f:DI 92) [3 stack_8(D)->data+0 S8 A64])
        (reg/f:DI 86 [ _5 ])) "a.c":30:17 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 92)
        (expr_list:REG_DEAD (reg/f:DI 86 [ _5 ])
            (nil))))
(insn 26 20 0 2 (const_int 0 [0]) "a.c":34:1 843 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function push (push, funcdef_no=9, decl_uid=3059, cgraph_uid=10, symbol_order=9)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 6 n_edges 6 count 6 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 5 }
;; 5 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 18.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a10 (r93,l0) best DIREG, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a16 (r89,l0) best SIREG, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a1(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a2(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:22000 INT_SSE_REGS:22000 ALL_REGS:210000 MEM:11000
  a3(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a5(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a6(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a7(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a8(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a9(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a10(r93,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a11(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a12(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a13(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a14(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a15(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:7000
  a16(r89,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:7000

   Insn 36(l0): point = 0
   Insn 32(l0): point = 3
   Insn 31(l0): point = 5
   Insn 30(l0): point = 7
   Insn 29(l0): point = 9
   Insn 28(l0): point = 11
   Insn 27(l0): point = 13
   Insn 26(l0): point = 15
   Insn 25(l0): point = 17
   Insn 24(l0): point = 19
   Insn 23(l0): point = 21
   Insn 22(l0): point = 23
   Insn 21(l0): point = 25
   Insn 18(l0): point = 28
   Insn 17(l0): point = 30
   Insn 16(l0): point = 32
   Insn 14(l0): point = 35
   Insn 13(l0): point = 37
   Insn 12(l0): point = 39
   Insn 11(l0): point = 41
   Insn 10(l0): point = 43
   Insn 9(l0): point = 45
   Insn 5(l0): point = 47
   Insn 4(l0): point = 49
   Insn 3(l0): point = 51
   Insn 2(l0): point = 53
 a0(r98): [4..5]
 a1(r88): [4..7]
 a2(r87): [8..9]
 a3(r97): [10..11]
 a4(r86): [14..17]
 a5(r96): [14..15]
 a6(r85): [18..19]
 a7(r84): [18..23]
 a8(r95): [20..21]
 a9(r94): [24..25]
 a10(r93): [31..32]
 a11(r83): [38..39]
 a12(r82): [38..43]
 a13(r92): [40..41]
 a14(r91): [44..45]
 a15(r90): [48..49]
 a16(r89): [50..51]
Compressing live ranges: from 56 to 26 - 46%
Ranges after the compression:
 a0(r98): [0..1]
 a1(r88): [0..1]
 a2(r87): [2..3]
 a3(r97): [4..5]
 a4(r86): [6..7]
 a5(r96): [6..7]
 a6(r85): [8..9]
 a7(r84): [8..11]
 a8(r95): [10..11]
 a9(r94): [12..13]
 a10(r93): [14..15]
 a11(r83): [16..17]
 a12(r82): [16..19]
 a13(r92): [18..19]
 a14(r91): [20..21]
 a15(r90): [22..23]
 a16(r89): [24..25]
  pref0:a10(r93)<-hr5@1500
  pref1:a16(r89)<-hr4@1500
  regions=1, blocks=6, points=26
    allocnos=17 (big 0), copies=0, conflicts=0, ranges=17
Disposition:
   12:r82  l0     1   11:r83  l0     0    7:r84  l0     1    6:r85  l0     0
    4:r86  l0     1    2:r87  l0     0    1:r88  l0     1   16:r89  l0     0
   15:r90  l0     0   14:r91  l0     0   13:r92  l0     0   10:r93  l0     0
    9:r94  l0     0    8:r95  l0     0    5:r96  l0     0    3:r97  l0     0
    0:r98  l0     0
+++Costs: overall -2000, reg -2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


push

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={2d,1u} r5={3d,2u} r6={1d,5u} r7={1d,6u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,4u} r17={4d,1u} r18={1d} r19={1d,15u} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d} r37={2d} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} 
;;    total ref usage 158{107d,51u,0e} in 26{25 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 82 83 89 90 91 92
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 stack+0 S8 A64])
        (reg:DI 5 di [ stack ])) "a.c":36:39 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ stack ])
        (nil)))
(insn 3 2 4 2 (set (reg:SI 89)
        (reg:SI 4 si [ value ])) "a.c":36:39 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ value ])
        (nil)))
(insn 4 3 5 2 (set (reg:QI 90)
        (subreg:QI (reg:SI 89) 0)) "a.c":36:39 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 89)
        (nil)))
(insn 5 4 6 2 (set (mem/c:QI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 value+0 S1 A32])
        (reg:QI 90)) "a.c":36:39 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 90)
        (nil)))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg/f:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 stack+0 S8 A64])) "a.c":37:14 74 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 82 [ _1 ])
        (mem:DI (plus:DI (reg/f:DI 91)
                (const_int 16 [0x10])) [4 stack_10(D)->top+0 S8 A64])) "a.c":37:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 91)
        (nil)))
(insn 11 10 12 2 (set (reg/f:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 stack+0 S8 A64])) "a.c":37:28 74 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 83 [ _2 ])
        (mem:DI (plus:DI (reg/f:DI 92)
                (const_int 8 [0x8])) [4 stack_10(D)->size+0 S8 A64])) "a.c":37:28 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 92)
        (nil)))
(insn 13 12 14 2 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 82 [ _1 ])
            (reg:DI 83 [ _2 ]))) "a.c":37:8 12 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 83 [ _2 ])
        (expr_list:REG_DEAD (reg:DI 82 [ _1 ])
            (nil))))
(jump_insn 14 13 15 2 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) "a.c":37:8 806 {*jcc}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil))
 -> 19)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 93
(note 15 14 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 3 (set (reg:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 stack+0 S8 A64])) "a.c":38:9 74 {*movdi_internal}
     (nil))
(insn 17 16 18 3 (set (reg:DI 5 di)
        (reg:DI 93)) "a.c":38:9 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 93)
        (nil)))
(call_insn 18 17 19 3 (call (mem:QI (symbol_ref:DI ("resize") [flags 0x3]  <function_decl 0x7fa9f27c4200 resize>) [0 resize S1 A8])
        (const_int 0 [0])) "a.c":38:9 813 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 84 85 86 87 88 94 95 96 97 98
(code_label 19 18 20 4 7 (nil) [1 uses])
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg/f:DI 94)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 stack+0 S8 A64])) "a.c":40:10 74 {*movdi_internal}
     (nil))
(insn 22 21 23 4 (set (reg/f:DI 84 [ _3 ])
        (mem/f:DI (reg/f:DI 94) [3 stack_10(D)->data+0 S8 A64])) "a.c":40:10 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 94)
        (nil)))
(insn 23 22 24 4 (set (reg/f:DI 95)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 stack+0 S8 A64])) "a.c":40:22 74 {*movdi_internal}
     (nil))
(insn 24 23 25 4 (set (reg:DI 85 [ _4 ])
        (mem:DI (plus:DI (reg/f:DI 95)
                (const_int 16 [0x10])) [4 stack_10(D)->top+0 S8 A64])) "a.c":40:22 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 95)
        (nil)))
(insn 25 24 26 4 (parallel [
            (set (reg/f:DI 86 [ _5 ])
                (plus:DI (reg/f:DI 84 [ _3 ])
                    (reg:DI 85 [ _4 ])))
            (clobber (reg:CC 17 flags))
        ]) "a.c":40:16 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 85 [ _4 ])
        (expr_list:REG_DEAD (reg/f:DI 84 [ _3 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 26 25 27 4 (set (reg:QI 96)
        (mem/c:QI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [0 value+0 S1 A32])) "a.c":40:29 77 {*movqi_internal}
     (nil))
(insn 27 26 28 4 (set (mem:QI (reg/f:DI 86 [ _5 ]) [0 *_5+0 S1 A8])
        (reg:QI 96)) "a.c":40:29 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 96)
        (expr_list:REG_DEAD (reg/f:DI 86 [ _5 ])
            (nil))))
(insn 28 27 29 4 (set (reg/f:DI 97)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 stack+0 S8 A64])) "a.c":41:10 74 {*movdi_internal}
     (nil))
(insn 29 28 30 4 (set (reg:DI 87 [ _6 ])
        (mem:DI (plus:DI (reg/f:DI 97)
                (const_int 16 [0x10])) [4 stack_10(D)->top+0 S8 A64])) "a.c":41:10 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 97)
        (nil)))
(insn 30 29 31 4 (parallel [
            (set (reg:DI 88 [ _7 ])
                (plus:DI (reg:DI 87 [ _6 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "a.c":41:15 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 87 [ _6 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 31 30 32 4 (set (reg/f:DI 98)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 stack+0 S8 A64])) "a.c":41:15 74 {*movdi_internal}
     (nil))
(insn 32 31 35 4 (set (mem:DI (plus:DI (reg/f:DI 98)
                (const_int 16 [0x10])) [4 stack_10(D)->top+0 S8 A64])
        (reg:DI 88 [ _7 ])) "a.c":41:15 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 98)
        (expr_list:REG_DEAD (reg:DI 88 [ _7 ])
            (nil))))
;;  succ:       5 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL)
;;  pred:       4 [always]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 35 32 36 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 0 5 (const_int 0 [0]) "a.c":42:1 843 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function pop (pop, funcdef_no=10, decl_uid=3061, cgraph_uid=11, symbol_order=10)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r89,l0) best AREG, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r89,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:7000
  a1(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:7000
  a2(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a3(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a4(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a5(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a6(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a7(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a8(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a9(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:22000 INT_SSE_REGS:22000 ALL_REGS:210000 MEM:11000
  a10(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 27(l0): point = 0
   Insn 26(l0): point = 2
   Insn 22(l0): point = 4
   Insn 19(l0): point = 6
   Insn 18(l0): point = 8
   Insn 17(l0): point = 10
   Insn 16(l0): point = 12
   Insn 15(l0): point = 14
   Insn 14(l0): point = 16
   Insn 13(l0): point = 18
   Insn 12(l0): point = 20
   Insn 11(l0): point = 22
   Insn 10(l0): point = 24
   Insn 9(l0): point = 26
   Insn 2(l0): point = 28
 a0(r89): [3..4]
 a1(r88): [5..6]
 a2(r87): [7..8]
 a3(r86): [9..10]
 a4(r85): [9..14]
 a5(r94): [11..12]
 a6(r93): [15..16]
 a7(r92): [19..20]
 a8(r84): [19..22]
 a9(r83): [23..24]
 a10(r91): [25..26]
Compressing live ranges: from 31 to 18 - 58%
Ranges after the compression:
 a0(r89): [0..1]
 a1(r88): [2..3]
 a2(r87): [4..5]
 a3(r86): [6..7]
 a4(r85): [6..9]
 a5(r94): [8..9]
 a6(r93): [10..11]
 a7(r92): [12..13]
 a8(r84): [12..13]
 a9(r83): [14..15]
 a10(r91): [16..17]
  pref0:a0(r89)<-hr0@1500
  regions=1, blocks=3, points=18
    allocnos=11 (big 0), copies=0, conflicts=0, ranges=11
Disposition:
    9:r83  l0     0    8:r84  l0     1    4:r85  l0     1    3:r86  l0     0
    2:r87  l0     0    1:r88  l0     0    0:r89  l0     0   10:r91  l0     0
    7:r92  l0     0    6:r93  l0     0    5:r94  l0     0
+++Costs: overall -1000, reg -1000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


pop

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,2u} r7={1d,2u} r16={1d,1u} r17={2d} r19={1d,7u} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r36={1d} r37={1d} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} 
;;    total ref usage 59{33d,26u,0e} in 15{15 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 17 [flags] 83 84 85 86 87 88 89 91 92 93 94
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 stack+0 S8 A64])
        (reg:DI 5 di [ stack ])) "a.c":45:26 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ stack ])
        (nil)))
(note 3 2 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 3 10 2 (set (reg/f:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 stack+0 S8 A64])) "a.c":49:10 74 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 83 [ _2 ])
        (mem:DI (plus:DI (reg/f:DI 91)
                (const_int 16 [0x10])) [4 stack_8(D)->top+0 S8 A64])) "a.c":49:10 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 91)
        (nil)))
(insn 11 10 12 2 (parallel [
            (set (reg:DI 84 [ _3 ])
                (plus:DI (reg:DI 83 [ _2 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "a.c":49:15 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 83 [ _2 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 12 11 13 2 (set (reg/f:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 stack+0 S8 A64])) "a.c":49:15 74 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (mem:DI (plus:DI (reg/f:DI 92)
                (const_int 16 [0x10])) [4 stack_8(D)->top+0 S8 A64])
        (reg:DI 84 [ _3 ])) "a.c":49:15 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 92)
        (expr_list:REG_DEAD (reg:DI 84 [ _3 ])
            (nil))))
(insn 14 13 15 2 (set (reg/f:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 stack+0 S8 A64])) "a.c":50:17 74 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg/f:DI 85 [ _4 ])
        (mem/f:DI (reg/f:DI 93) [3 stack_8(D)->data+0 S8 A64])) "a.c":50:17 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 93)
        (nil)))
(insn 16 15 17 2 (set (reg/f:DI 94)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 stack+0 S8 A64])) "a.c":50:29 74 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:DI 86 [ _5 ])
        (mem:DI (plus:DI (reg/f:DI 94)
                (const_int 16 [0x10])) [4 stack_8(D)->top+0 S8 A64])) "a.c":50:29 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 94)
        (nil)))
(insn 18 17 19 2 (parallel [
            (set (reg/f:DI 87 [ _6 ])
                (plus:DI (reg/f:DI 85 [ _4 ])
                    (reg:DI 86 [ _5 ])))
            (clobber (reg:CC 17 flags))
        ]) "a.c":50:23 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 86 [ _5 ])
        (expr_list:REG_DEAD (reg/f:DI 85 [ _4 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 19 18 22 2 (set (reg:QI 88 [ _10 ])
        (mem:QI (reg/f:DI 87 [ _6 ]) [0 *_6+0 S1 A8])) "a.c":50:23 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87 [ _6 ])
        (nil)))
(insn 22 19 26 2 (set (reg:QI 89 [ <retval> ])
        (reg:QI 88 [ _10 ])) "a.c":50:23 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 88 [ _10 ])
        (nil)))
(insn 26 22 27 2 (set (reg/i:QI 0 ax)
        (reg:QI 89 [ <retval> ])) "a.c":51:1 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 89 [ <retval> ])
        (nil)))
(insn 27 26 0 2 (use (reg/i:QI 0 ax)) "a.c":51:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function peek (peek, funcdef_no=11, decl_uid=3063, cgraph_uid=12, symbol_order=11)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r88,l0) best AREG, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r88,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:7000
  a1(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:7000
  a2(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a3(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a4(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a5(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:22000 INT_SSE_REGS:22000 ALL_REGS:210000 MEM:11000
  a6(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a7(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 23(l0): point = 0
   Insn 22(l0): point = 2
   Insn 18(l0): point = 4
   Insn 15(l0): point = 6
   Insn 14(l0): point = 8
   Insn 13(l0): point = 10
   Insn 12(l0): point = 12
   Insn 11(l0): point = 14
   Insn 10(l0): point = 16
   Insn 9(l0): point = 18
   Insn 2(l0): point = 20
 a0(r88): [3..4]
 a1(r87): [5..6]
 a2(r86): [7..8]
 a3(r85): [9..10]
 a4(r83): [9..16]
 a5(r84): [11..12]
 a6(r91): [13..14]
 a7(r90): [17..18]
Compressing live ranges: from 23 to 14 - 60%
Ranges after the compression:
 a0(r88): [0..1]
 a1(r87): [2..3]
 a2(r86): [4..5]
 a3(r85): [6..7]
 a4(r83): [6..11]
 a5(r84): [8..9]
 a6(r91): [10..11]
 a7(r90): [12..13]
  pref0:a0(r88)<-hr0@1500
  regions=1, blocks=3, points=14
    allocnos=8 (big 0), copies=0, conflicts=0, ranges=8
Disposition:
    4:r83  l0     1    5:r84  l0     0    3:r85  l0     0    2:r86  l0     0
    1:r87  l0     0    0:r88  l0     0    7:r90  l0     0    6:r91  l0     0
+++Costs: overall -1000, reg -1000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


peek

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 17 [flags]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,2u} r7={1d,2u} r16={1d,1u} r17={2d} r19={1d,5u} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r36={1d} r37={1d} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r90={1d,1u} r91={1d,1u} 
;;    total ref usage 51{30d,21u,0e} in 11{11 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 17 [flags] 83 84 85 86 87 88 90 91
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 stack+0 S8 A64])
        (reg:DI 5 di [ stack ])) "a.c":52:33 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ stack ])
        (nil)))
(note 3 2 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 3 10 2 (set (reg/f:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 stack+0 S8 A64])) "a.c":56:17 74 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 83 [ _2 ])
        (mem/f:DI (reg/f:DI 90) [3 stack_7(D)->data+0 S8 A64])) "a.c":56:17 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 90)
        (nil)))
(insn 11 10 12 2 (set (reg/f:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 stack+0 S8 A64])) "a.c":56:29 74 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 84 [ _3 ])
        (mem:DI (plus:DI (reg/f:DI 91)
                (const_int 16 [0x10])) [4 stack_7(D)->top+0 S8 A64])) "a.c":56:29 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 91)
        (nil)))
(insn 13 12 14 2 (parallel [
            (set (reg:DI 85 [ _4 ])
                (plus:DI (reg:DI 84 [ _3 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "a.c":56:23 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 84 [ _3 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 14 13 15 2 (parallel [
            (set (reg/f:DI 86 [ _5 ])
                (plus:DI (reg/f:DI 83 [ _2 ])
                    (reg:DI 85 [ _4 ])))
            (clobber (reg:CC 17 flags))
        ]) "a.c":56:23 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 85 [ _4 ])
        (expr_list:REG_DEAD (reg/f:DI 83 [ _2 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 15 14 18 2 (set (reg:QI 87 [ _8 ])
        (mem:QI (reg/f:DI 86 [ _5 ]) [0 *_5+0 S1 A8])) "a.c":56:23 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 86 [ _5 ])
        (nil)))
(insn 18 15 22 2 (set (reg:QI 88 [ <retval> ])
        (reg:QI 87 [ _8 ])) "a.c":56:23 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 87 [ _8 ])
        (nil)))
(insn 22 18 23 2 (set (reg/i:QI 0 ax)
        (reg:QI 88 [ <retval> ])) "a.c":57:1 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 88 [ <retval> ])
        (nil)))
(insn 23 22 0 2 (use (reg/i:QI 0 ax)) "a.c":57:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function createFStack (createFStack, funcdef_no=12, decl_uid=3071, cgraph_uid=13, symbol_order=12)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 5 n_edges 5 count 5 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 7.
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 29.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r94,l0) best DIREG, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a8 (r91,l0) best AREG, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a13 (r88,l0) best AREG, allocno GENERAL_REGS
    r87: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r87,l0) best AREG, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r83,l0) best DIREG, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r87,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a1(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a2(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a3(r94,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a5(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a6(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a7(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a8(r91,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a9(r83,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a10(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a11(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a12(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a13(r88,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000

   Insn 42(l0): point = 0
   Insn 41(l0): point = 2
   Insn 37(l0): point = 4
   Insn 34(l0): point = 6
   Insn 33(l0): point = 8
   Insn 32(l0): point = 10
   Insn 29(l0): point = 13
   Insn 28(l0): point = 15
   Insn 27(l0): point = 17
   Insn 25(l0): point = 20
   Insn 24(l0): point = 22
   Insn 23(l0): point = 24
   Insn 22(l0): point = 26
   Insn 21(l0): point = 28
   Insn 20(l0): point = 30
   Insn 19(l0): point = 32
   Insn 18(l0): point = 34
   Insn 17(l0): point = 36
   Insn 16(l0): point = 38
   Insn 15(l0): point = 40
   Insn 14(l0): point = 42
   Insn 13(l0): point = 44
   Insn 12(l0): point = 46
   Insn 11(l0): point = 48
   Insn 9(l0): point = 50
   Insn 8(l0): point = 52
   Insn 7(l0): point = 54
   Insn 6(l0): point = 56
   Insn 5(l0): point = 58
 a0(r87): [3..4]
 a1(r86): [5..6]
 a2(r95): [9..10]
 a3(r94): [16..17]
 a4(r85): [23..24]
 a5(r93): [25..26]
 a6(r92): [29..30]
 a7(r84): [29..32]
 a8(r91): [33..34]
 a9(r83): [39..40]
 a10(r82): [41..42]
 a11(r90): [43..44]
 a12(r89): [47..48]
 a13(r88): [51..52]
Compressing live ranges: from 61 to 26 - 42%
Ranges after the compression:
 a0(r87): [0..1]
 a1(r86): [2..3]
 a2(r95): [4..5]
 a3(r94): [6..7]
 a4(r85): [8..9]
 a5(r93): [10..11]
 a6(r92): [12..13]
 a7(r84): [12..13]
 a8(r91): [14..15]
 a9(r83): [16..17]
 a10(r82): [18..19]
 a11(r90): [20..21]
 a12(r89): [22..23]
 a13(r88): [24..25]
  pref0:a3(r94)<-hr5@1500
  pref1:a8(r91)<-hr0@1500
  pref2:a13(r88)<-hr0@1500
  pref3:a0(r87)<-hr0@1500
  pref4:a9(r83)<-hr5@1500
  regions=1, blocks=5, points=26
    allocnos=14 (big 0), copies=0, conflicts=0, ranges=14
Disposition:
   10:r82  l0     0    9:r83  l0     0    7:r84  l0     1    4:r85  l0     0
    1:r86  l0     0    0:r87  l0     0   13:r88  l0     0   12:r89  l0     0
   11:r90  l0     0    8:r91  l0     0    6:r92  l0     0    5:r93  l0     0
    3:r94  l0     0    2:r95  l0     0
+++Costs: overall -5000, reg -5000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


createFStack

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={5d,4u} r1={4d} r2={4d} r4={4d} r5={7d,3u} r6={1d,4u} r7={1d,7u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r16={1d,3u} r17={5d,1u} r18={3d} r19={1d,13u} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={4d} r37={4d} r38={3d} r39={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} 
;;    total ref usage 289{240d,49u,0e} in 29{26 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 84 85 88 89 90 91 92 93
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 out+0 S8 A64])
        (const_int 0 [0])) "a.c":64:14 74 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (reg:DI 5 di)
        (const_int 24 [0x18])) "a.c":65:11 74 {*movdi_internal}
     (nil))
(call_insn 7 6 8 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fa9f2ad4800 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) "a.c":65:11 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 8 7 9 2 (set (reg/f:DI 88)
        (reg:DI 0 ax)) "a.c":65:11 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 88)
            (nil))))
(insn 9 8 11 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 out+0 S8 A64])
        (reg/f:DI 88)) "a.c":65:11 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 88)
        (nil)))
(insn 11 9 12 2 (set (reg/f:DI 89)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 out+0 S8 A64])) "a.c":69:15 74 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (mem:DI (plus:DI (reg/f:DI 89)
                (const_int 8 [0x8])) [4 out_9->size+0 S8 A64])
        (const_int 10 [0xa])) "a.c":69:15 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 89)
        (nil)))
(insn 13 12 14 2 (set (reg/f:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 out+0 S8 A64])) "a.c":70:27 74 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 82 [ _1 ])
        (mem:DI (plus:DI (reg/f:DI 90)
                (const_int 8 [0x8])) [4 out_9->size+0 S8 A64])) "a.c":70:27 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 90)
        (nil)))
(insn 15 14 16 2 (parallel [
            (set (reg:DI 83 [ _2 ])
                (ashift:DI (reg:DI 82 [ _1 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "a.c":70:17 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 82 [ _1 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 16 15 17 2 (set (reg:DI 5 di)
        (reg:DI 83 [ _2 ])) "a.c":70:17 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 83 [ _2 ])
        (nil)))
(call_insn 17 16 18 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fa9f2ad4800 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) "a.c":70:17 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 18 17 19 2 (set (reg/f:DI 91)
        (reg:DI 0 ax)) "a.c":70:17 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 91)
            (nil))))
(insn 19 18 20 2 (set (reg/f:DI 84 [ _3 ])
        (reg/f:DI 91)) "a.c":70:17 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 91)
        (nil)))
(insn 20 19 21 2 (set (reg/f:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 out+0 S8 A64])) "a.c":70:15 74 {*movdi_internal}
     (nil))
(insn 21 20 22 2 (set (mem/f:DI (reg/f:DI 92) [8 out_9->data+0 S8 A64])
        (reg/f:DI 84 [ _3 ])) "a.c":70:15 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 92)
        (expr_list:REG_DEAD (reg/f:DI 84 [ _3 ])
            (nil))))
(insn 22 21 23 2 (set (reg/f:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 out+0 S8 A64])) "a.c":71:12 74 {*movdi_internal}
     (nil))
(insn 23 22 24 2 (set (reg/f:DI 85 [ _4 ])
        (mem/f:DI (reg/f:DI 93) [8 out_9->data+0 S8 A64])) "a.c":71:12 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 93)
        (nil)))
(insn 24 23 25 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 85 [ _4 ])
            (const_int 0 [0]))) "a.c":71:8 8 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 85 [ _4 ])
        (nil)))
(jump_insn 25 24 26 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) "a.c":71:8 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 30)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 94
(note 26 25 27 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 3 (set (reg:DI 94)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 out+0 S8 A64])) "a.c":72:9 74 {*movdi_internal}
     (nil))
(insn 28 27 29 3 (set (reg:DI 5 di)
        (reg:DI 94)) "a.c":72:9 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 94)
        (nil)))
(call_insn 29 28 30 3 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fa9f2acdd00 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "a.c":72:9 813 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 1, flags: (RTL)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 86 87 95
(code_label 30 29 31 4 13 (nil) [1 uses])
(note 31 30 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 4 (set (reg/f:DI 95)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 out+0 S8 A64])) "a.c":75:14 74 {*movdi_internal}
     (nil))
(insn 33 32 34 4 (set (mem:DI (plus:DI (reg/f:DI 95)
                (const_int 16 [0x10])) [4 out_9->top+0 S8 A64])
        (const_int 0 [0])) "a.c":75:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 95)
        (nil)))
(insn 34 33 37 4 (set (reg/f:DI 86 [ _15 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 out+0 S8 A64])) "a.c":76:12 74 {*movdi_internal}
     (nil))
(insn 37 34 41 4 (set (reg/f:DI 87 [ <retval> ])
        (reg/f:DI 86 [ _15 ])) "a.c":76:12 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 86 [ _15 ])
        (nil)))
(insn 41 37 42 4 (set (reg/i:DI 0 ax)
        (reg/f:DI 87 [ <retval> ])) "a.c":77:1 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87 [ <retval> ])
        (nil)))
(insn 42 41 0 4 (use (reg/i:DI 0 ax)) "a.c":77:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function deleteFStack (deleteFStack, funcdef_no=13, decl_uid=3070, cgraph_uid=14, symbol_order=13)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 4 n_edges 3 count 4 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3
;; 2 succs { 3 }
;; 3 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 14.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a1 (r84,l0) best DIREG, allocno GENERAL_REGS
    r83: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r83,l0) best DIREG, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a1(r84,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a2(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a3(r83,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a5(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 20(l0): point = 0
   Insn 16(l0): point = 3
   Insn 15(l0): point = 5
   Insn 14(l0): point = 7
   Insn 13(l0): point = 9
   Insn 12(l0): point = 11
   Insn 11(l0): point = 13
   Insn 10(l0): point = 15
   Insn 9(l0): point = 17
   Insn 8(l0): point = 19
   Insn 7(l0): point = 21
   Insn 6(l0): point = 23
   Insn 2(l0): point = 25
 a0(r87): [4..5]
 a1(r84): [10..11]
 a2(r86): [12..13]
 a3(r83): [18..19]
 a4(r82): [20..21]
 a5(r85): [22..23]
Compressing live ranges: from 28 to 12 - 42%
Ranges after the compression:
 a0(r87): [0..1]
 a1(r84): [2..3]
 a2(r86): [4..5]
 a3(r83): [6..7]
 a4(r82): [8..9]
 a5(r85): [10..11]
  pref0:a1(r84)<-hr5@1500
  pref1:a3(r83)<-hr5@1500
  regions=1, blocks=4, points=12
    allocnos=6 (big 0), copies=0, conflicts=0, ranges=6
Disposition:
    4:r82  l0     0    3:r83  l0     0    1:r84  l0     0    5:r85  l0     0
    2:r86  l0     0    0:r87  l0     0
+++Costs: overall -2000, reg -2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


deleteFStack

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d} r1={3d} r2={3d} r4={3d} r5={5d,3u} r6={1d,3u} r7={1d,5u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={1d,2u} r17={2d} r18={2d} r19={1d,7u} r20={3d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={3d} r37={3d} r38={2d} r39={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} 
;;    total ref usage 187{161d,26u,0e} in 13{11 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 84 85 86 87
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [9 stack+0 S8 A64])
        (reg:DI 5 di [ stack ])) "a.c":79:36 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ stack ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 85)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [9 stack+0 S8 A64])) "a.c":80:11 74 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 82 [ _1 ])
        (mem/f:DI (reg/f:DI 85) [6 *stack_5(D)+0 S8 A64])) "a.c":80:11 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 85)
        (nil)))
(insn 8 7 9 2 (set (reg/f:DI 83 [ _2 ])
        (mem/f:DI (reg/f:DI 82 [ _1 ]) [8 _1->data+0 S8 A64])) "a.c":80:18 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 82 [ _1 ])
        (nil)))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg/f:DI 83 [ _2 ])) "a.c":80:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 83 [ _2 ])
        (nil)))
(call_insn 10 9 11 2 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fa9f2acdd00 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "a.c":80:5 813 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 10 12 2 (set (reg/f:DI 86)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [9 stack+0 S8 A64])) "a.c":81:5 74 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 84 [ _3 ])
        (mem/f:DI (reg/f:DI 86) [6 *stack_5(D)+0 S8 A64])) "a.c":81:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 86)
        (nil)))
(insn 13 12 14 2 (set (reg:DI 5 di)
        (reg/f:DI 84 [ _3 ])) "a.c":81:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 84 [ _3 ])
        (nil)))
(call_insn 14 13 15 2 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fa9f2acdd00 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "a.c":81:5 813 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 15 14 16 2 (set (reg/f:DI 87)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [9 stack+0 S8 A64])) "a.c":82:12 74 {*movdi_internal}
     (nil))
(insn 16 15 19 2 (set (mem/f:DI (reg/f:DI 87) [6 *stack_5(D)+0 S8 A64])
        (const_int 0 [0])) "a.c":82:12 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87)
        (nil)))
;;  succ:       3 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 1, flags: (RTL)
;;  pred:       2 [always]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 19 16 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 0 3 (const_int 0 [0]) "a.c":83:1 843 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function Fresize (Fresize, funcdef_no=14, decl_uid=3073, cgraph_uid=15, symbol_order=14)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 18.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a1 (r87,l0) best AREG, allocno GENERAL_REGS
    r86: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r86,l0) best DIREG, allocno GENERAL_REGS
    r85: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r85,l0) best SIREG, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a1(r87,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a2(r86,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a3(r85,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a4(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a5(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a6(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a7(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a8(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a9(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:22000 INT_SSE_REGS:22000 ALL_REGS:210000 MEM:11000
  a10(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 27(l0): point = 0
   Insn 21(l0): point = 2
   Insn 20(l0): point = 4
   Insn 19(l0): point = 6
   Insn 18(l0): point = 8
   Insn 17(l0): point = 10
   Insn 16(l0): point = 12
   Insn 15(l0): point = 14
   Insn 14(l0): point = 16
   Insn 13(l0): point = 18
   Insn 12(l0): point = 20
   Insn 11(l0): point = 22
   Insn 10(l0): point = 24
   Insn 9(l0): point = 26
   Insn 8(l0): point = 28
   Insn 7(l0): point = 30
   Insn 6(l0): point = 32
   Insn 2(l0): point = 34
 a0(r93): [3..4]
 a1(r87): [3..6]
 a2(r86): [11..14]
 a3(r85): [13..18]
 a4(r92): [15..16]
 a5(r84): [19..20]
 a6(r91): [21..22]
 a7(r90): [25..26]
 a8(r83): [25..28]
 a9(r82): [29..30]
 a10(r89): [31..32]
Compressing live ranges: from 37 to 16 - 43%
Ranges after the compression:
 a0(r93): [0..1]
 a1(r87): [0..1]
 a2(r86): [2..3]
 a3(r85): [2..5]
 a4(r92): [4..5]
 a5(r84): [6..7]
 a6(r91): [8..9]
 a7(r90): [10..11]
 a8(r83): [10..11]
 a9(r82): [12..13]
 a10(r89): [14..15]
  pref0:a1(r87)<-hr0@1500
  pref1:a2(r86)<-hr5@1500
  pref2:a3(r85)<-hr4@1500
  regions=1, blocks=3, points=16
    allocnos=11 (big 0), copies=0, conflicts=0, ranges=11
Disposition:
    9:r82  l0     0    8:r83  l0     1    5:r84  l0     0    3:r85  l0     1
    2:r86  l0     0    1:r87  l0     0   10:r89  l0     0    7:r90  l0     0
    6:r91  l0     0    4:r92  l0     0    0:r93  l0     1
+++Costs: overall -3000, reg -3000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


Fresize

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={2d,1u} r1={2d} r2={2d} r4={3d,1u} r5={3d,2u} r6={1d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={3d} r18={1d} r19={1d,8u} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d} r37={2d} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} 
;;    total ref usage 130{101d,29u,0e} in 18{17 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 84 85 86 87 89 90 91 92 93
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 stack+0 S8 A64])
        (reg:DI 5 di [ stack ])) "a.c":86:30 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ stack ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 89)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 stack+0 S8 A64])) "a.c":87:17 74 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 82 [ _1 ])
        (mem:DI (plus:DI (reg/f:DI 89)
                (const_int 8 [0x8])) [4 stack_9(D)->size+0 S8 A64])) "a.c":87:17 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 89)
        (nil)))
(insn 8 7 9 2 (parallel [
            (set (reg:DI 83 [ _2 ])
                (plus:DI (reg:DI 82 [ _1 ])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) "a.c":87:17 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 82 [ _1 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 9 8 10 2 (set (reg/f:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 stack+0 S8 A64])) "a.c":87:17 74 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (mem:DI (plus:DI (reg/f:DI 90)
                (const_int 8 [0x8])) [4 stack_9(D)->size+0 S8 A64])
        (reg:DI 83 [ _2 ])) "a.c":87:17 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 90)
        (expr_list:REG_DEAD (reg:DI 83 [ _2 ])
            (nil))))
(insn 11 10 12 2 (set (reg/f:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 stack+0 S8 A64])) "a.c":88:45 74 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 84 [ _3 ])
        (mem:DI (plus:DI (reg/f:DI 91)
                (const_int 8 [0x8])) [4 stack_9(D)->size+0 S8 A64])) "a.c":88:45 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 91)
        (nil)))
(insn 13 12 14 2 (parallel [
            (set (reg:DI 85 [ _4 ])
                (ashift:DI (reg:DI 84 [ _3 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "a.c":88:19 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 84 [ _3 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 14 13 15 2 (set (reg/f:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 stack+0 S8 A64])) "a.c":88:32 74 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg/f:DI 86 [ _5 ])
        (mem/f:DI (reg/f:DI 92) [8 stack_9(D)->data+0 S8 A64])) "a.c":88:32 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 92)
        (nil)))
(insn 16 15 17 2 (set (reg:DI 4 si)
        (reg:DI 85 [ _4 ])) "a.c":88:19 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 85 [ _4 ])
        (nil)))
(insn 17 16 18 2 (set (reg:DI 5 di)
        (reg/f:DI 86 [ _5 ])) "a.c":88:19 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 86 [ _5 ])
        (nil)))
(call_insn 18 17 19 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7fa9f2ad7600 realloc>) [0 __builtin_realloc S1 A8])
            (const_int 0 [0]))) "a.c":88:19 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 19 18 20 2 (set (reg/f:DI 87 [ _6 ])
        (reg:DI 0 ax)) "a.c":88:19 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 20 19 21 2 (set (reg/f:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 stack+0 S8 A64])) "a.c":88:17 74 {*movdi_internal}
     (nil))
(insn 21 20 27 2 (set (mem/f:DI (reg/f:DI 93) [8 stack_9(D)->data+0 S8 A64])
        (reg/f:DI 87 [ _6 ])) "a.c":88:17 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 93)
        (expr_list:REG_DEAD (reg/f:DI 87 [ _6 ])
            (nil))))
(insn 27 21 0 2 (const_int 0 [0]) "a.c":92:1 843 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function Fpush (Fpush, funcdef_no=15, decl_uid=3076, cgraph_uid=16, symbol_order=15)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 6 n_edges 6 count 6 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 5 }
;; 5 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 16.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a5 (r95,l0) best SSE_REGS, allocno SSE_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a11 (r92,l0) best DIREG, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a1(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a2(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:22000 INT_SSE_REGS:22000 ALL_REGS:210000 MEM:11000
  a3(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a5(r95,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 FP_TOP_REG:24000 FP_SECOND_REG:24000 FLOAT_REGS:24000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:24000 FLOAT_INT_REGS:24000 INT_SSE_REGS:24000 FLOAT_INT_SSE_REGS:24000 MEM:12000
  a6(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a7(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a8(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a9(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a10(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a11(r92,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a12(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a13(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a14(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a15(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 35(l0): point = 0
   Insn 31(l0): point = 3
   Insn 30(l0): point = 5
   Insn 29(l0): point = 7
   Insn 28(l0): point = 9
   Insn 27(l0): point = 11
   Insn 26(l0): point = 13
   Insn 25(l0): point = 15
   Insn 24(l0): point = 17
   Insn 23(l0): point = 19
   Insn 22(l0): point = 21
   Insn 21(l0): point = 23
   Insn 20(l0): point = 25
   Insn 19(l0): point = 27
   Insn 16(l0): point = 30
   Insn 15(l0): point = 32
   Insn 14(l0): point = 34
   Insn 12(l0): point = 37
   Insn 11(l0): point = 39
   Insn 10(l0): point = 41
   Insn 9(l0): point = 43
   Insn 8(l0): point = 45
   Insn 7(l0): point = 47
   Insn 3(l0): point = 49
   Insn 2(l0): point = 51
 a0(r97): [4..5]
 a1(r89): [4..7]
 a2(r88): [8..9]
 a3(r96): [10..11]
 a4(r87): [14..17]
 a5(r95): [14..15]
 a6(r86): [18..19]
 a7(r84): [18..25]
 a8(r85): [20..21]
 a9(r94): [22..23]
 a10(r93): [26..27]
 a11(r92): [33..34]
 a12(r83): [40..41]
 a13(r82): [40..45]
 a14(r91): [42..43]
 a15(r90): [46..47]
Compressing live ranges: from 54 to 24 - 44%
Ranges after the compression:
 a0(r97): [0..1]
 a1(r89): [0..1]
 a2(r88): [2..3]
 a3(r96): [4..5]
 a4(r87): [6..7]
 a5(r95): [6..7]
 a6(r86): [8..9]
 a7(r84): [8..13]
 a8(r85): [10..11]
 a9(r94): [12..13]
 a10(r93): [14..15]
 a11(r92): [16..17]
 a12(r83): [18..19]
 a13(r82): [18..21]
 a14(r91): [20..21]
 a15(r90): [22..23]
  pref0:a11(r92)<-hr5@1500
  regions=1, blocks=6, points=24
    allocnos=16 (big 0), copies=0, conflicts=0, ranges=16
Disposition:
   13:r82  l0     1   12:r83  l0     0    7:r84  l0     1    8:r85  l0     0
    6:r86  l0     0    4:r87  l0     0    2:r88  l0     0    1:r89  l0     1
   15:r90  l0     0   14:r91  l0     0   11:r92  l0     0   10:r93  l0     0
    9:r94  l0     0    5:r95  l0    20    3:r96  l0     0    0:r97  l0     0
+++Costs: overall -1000, reg -1000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


Fpush

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [xmm0]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,5u} r7={1d,6u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,4u} r17={5d,1u} r18={1d} r19={1d,15u} r20={2d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d} r37={2d} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} 
;;    total ref usage 157{107d,50u,0e} in 25{24 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0]
;; lr  def 	 17 [flags] 82 83 90 91
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 stack+0 S8 A64])
        (reg:DI 5 di [ stack ])) "a.c":94:42 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ stack ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [10 value+0 S8 A64])
        (reg:DF 20 xmm0 [ value ])) "a.c":94:42 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0 [ value ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 stack+0 S8 A64])) "a.c":95:14 74 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 82 [ _1 ])
        (mem:DI (plus:DI (reg/f:DI 90)
                (const_int 16 [0x10])) [4 stack_11(D)->top+0 S8 A64])) "a.c":95:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 90)
        (nil)))
(insn 9 8 10 2 (set (reg/f:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 stack+0 S8 A64])) "a.c":95:28 74 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 83 [ _2 ])
        (mem:DI (plus:DI (reg/f:DI 91)
                (const_int 8 [0x8])) [4 stack_11(D)->size+0 S8 A64])) "a.c":95:28 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 91)
        (nil)))
(insn 11 10 12 2 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 82 [ _1 ])
            (reg:DI 83 [ _2 ]))) "a.c":95:8 12 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 83 [ _2 ])
        (expr_list:REG_DEAD (reg:DI 82 [ _1 ])
            (nil))))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 17)
            (pc))) "a.c":95:8 806 {*jcc}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil))
 -> 17)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 92
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 stack+0 S8 A64])) "a.c":96:9 74 {*movdi_internal}
     (nil))
(insn 15 14 16 3 (set (reg:DI 5 di)
        (reg:DI 92)) "a.c":96:9 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 92)
        (nil)))
(call_insn 16 15 17 3 (call (mem:QI (symbol_ref:DI ("Fresize") [flags 0x3]  <function_decl 0x7fa9f27c4800 Fresize>) [0 Fresize S1 A8])
        (const_int 0 [0])) "a.c":96:9 813 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 84 85 86 87 88 89 93 94 95 96 97
(code_label 17 16 18 4 18 (nil) [1 uses])
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (set (reg/f:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 stack+0 S8 A64])) "a.c":98:10 74 {*movdi_internal}
     (nil))
(insn 20 19 21 4 (set (reg/f:DI 84 [ _3 ])
        (mem/f:DI (reg/f:DI 93) [8 stack_11(D)->data+0 S8 A64])) "a.c":98:10 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 93)
        (nil)))
(insn 21 20 22 4 (set (reg/f:DI 94)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 stack+0 S8 A64])) "a.c":98:22 74 {*movdi_internal}
     (nil))
(insn 22 21 23 4 (set (reg:DI 85 [ _4 ])
        (mem:DI (plus:DI (reg/f:DI 94)
                (const_int 16 [0x10])) [4 stack_11(D)->top+0 S8 A64])) "a.c":98:22 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 94)
        (nil)))
(insn 23 22 24 4 (parallel [
            (set (reg:DI 86 [ _5 ])
                (ashift:DI (reg:DI 85 [ _4 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "a.c":98:16 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 85 [ _4 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 24 23 25 4 (parallel [
            (set (reg/f:DI 87 [ _6 ])
                (plus:DI (reg/f:DI 84 [ _3 ])
                    (reg:DI 86 [ _5 ])))
            (clobber (reg:CC 17 flags))
        ]) "a.c":98:16 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 86 [ _5 ])
        (expr_list:REG_DEAD (reg/f:DI 84 [ _3 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 25 24 26 4 (set (reg:DF 95)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [10 value+0 S8 A64])) "a.c":98:29 135 {*movdf_internal}
     (nil))
(insn 26 25 27 4 (set (mem:DF (reg/f:DI 87 [ _6 ]) [10 *_6+0 S8 A64])
        (reg:DF 95)) "a.c":98:29 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 95)
        (expr_list:REG_DEAD (reg/f:DI 87 [ _6 ])
            (nil))))
(insn 27 26 28 4 (set (reg/f:DI 96)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 stack+0 S8 A64])) "a.c":99:10 74 {*movdi_internal}
     (nil))
(insn 28 27 29 4 (set (reg:DI 88 [ _7 ])
        (mem:DI (plus:DI (reg/f:DI 96)
                (const_int 16 [0x10])) [4 stack_11(D)->top+0 S8 A64])) "a.c":99:10 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 96)
        (nil)))
(insn 29 28 30 4 (parallel [
            (set (reg:DI 89 [ _8 ])
                (plus:DI (reg:DI 88 [ _7 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "a.c":99:15 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 88 [ _7 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 30 29 31 4 (set (reg/f:DI 97)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 stack+0 S8 A64])) "a.c":99:15 74 {*movdi_internal}
     (nil))
(insn 31 30 34 4 (set (mem:DI (plus:DI (reg/f:DI 97)
                (const_int 16 [0x10])) [4 stack_11(D)->top+0 S8 A64])
        (reg:DI 89 [ _8 ])) "a.c":99:15 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 97)
        (expr_list:REG_DEAD (reg:DI 89 [ _8 ])
            (nil))))
;;  succ:       5 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL)
;;  pred:       4 [always]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 34 31 35 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 0 5 (const_int 0 [0]) "a.c":100:1 843 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function Fpop (Fpop, funcdef_no=16, decl_uid=3078, cgraph_uid=17, symbol_order=16)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a0 (r90,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r89: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a1 (r89,l0) best SSE_REGS, allocno SSE_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r90,l0) costs: AREG:6000 DREG:6000 CREG:6000 BREG:6000 SIREG:6000 DIREG:6000 AD_REGS:6000 CLOBBERED_REGS:6000 Q_REGS:6000 TLS_GOTBASE_REGS:6000 GENERAL_REGS:6000 FP_TOP_REG:19000 FP_SECOND_REG:19000 FLOAT_REGS:19000 SSE_FIRST_REG:19000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:19000 FLOAT_INT_REGS:19000 INT_SSE_REGS:19000 FLOAT_INT_SSE_REGS:19000 MEM:7000
  a1(r89,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 FP_TOP_REG:18000 FP_SECOND_REG:18000 FLOAT_REGS:18000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:18000 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 MEM:7000
  a2(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a3(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a4(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a5(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a6(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a7(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a8(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a9(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a10(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:22000 INT_SSE_REGS:22000 ALL_REGS:210000 MEM:11000
  a11(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 28(l0): point = 0
   Insn 27(l0): point = 2
   Insn 23(l0): point = 4
   Insn 20(l0): point = 6
   Insn 19(l0): point = 8
   Insn 18(l0): point = 10
   Insn 17(l0): point = 12
   Insn 16(l0): point = 14
   Insn 15(l0): point = 16
   Insn 14(l0): point = 18
   Insn 13(l0): point = 20
   Insn 12(l0): point = 22
   Insn 11(l0): point = 24
   Insn 10(l0): point = 26
   Insn 9(l0): point = 28
   Insn 2(l0): point = 30
 a0(r90): [3..4]
 a1(r89): [5..6]
 a2(r88): [7..8]
 a3(r87): [9..10]
 a4(r85): [9..16]
 a5(r86): [11..12]
 a6(r95): [13..14]
 a7(r94): [17..18]
 a8(r93): [21..22]
 a9(r84): [21..24]
 a10(r83): [25..26]
 a11(r92): [27..28]
Compressing live ranges: from 33 to 20 - 60%
Ranges after the compression:
 a0(r90): [0..1]
 a1(r89): [2..3]
 a2(r88): [4..5]
 a3(r87): [6..7]
 a4(r85): [6..11]
 a5(r86): [8..9]
 a6(r95): [10..11]
 a7(r94): [12..13]
 a8(r93): [14..15]
 a9(r84): [14..15]
 a10(r83): [16..17]
 a11(r92): [18..19]
  pref0:a0(r90)<-hr20@1538
  regions=1, blocks=3, points=20
    allocnos=12 (big 0), copies=0, conflicts=0, ranges=12
Disposition:
   10:r83  l0     0    9:r84  l0     1    4:r85  l0     1    5:r86  l0     0
    3:r87  l0     0    2:r88  l0     0    1:r89  l0    20    0:r90  l0     0
   11:r92  l0     0    8:r93  l0     0    7:r94  l0     0    6:r95  l0     0
+++Costs: overall -1000, reg -1000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


Fpop

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame] 20 [xmm0]
;;  regs ever live 	 5 [di] 6 [bp] 17 [flags] 20 [xmm0]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,2u} r7={1d,2u} r16={1d,1u} r17={3d} r19={1d,7u} r20={2d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r36={1d} r37={1d} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} 
;;    total ref usage 62{35d,27u,0e} in 16{16 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 20 [xmm0] 83 84 85 86 87 88 89 90 92 93 94 95
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 stack+0 S8 A64])
        (reg:DI 5 di [ stack ])) "a.c":103:29 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ stack ])
        (nil)))
(note 3 2 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 3 10 2 (set (reg/f:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 stack+0 S8 A64])) "a.c":107:10 74 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 83 [ _2 ])
        (mem:DI (plus:DI (reg/f:DI 92)
                (const_int 16 [0x10])) [4 stack_9(D)->top+0 S8 A64])) "a.c":107:10 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 92)
        (nil)))
(insn 11 10 12 2 (parallel [
            (set (reg:DI 84 [ _3 ])
                (plus:DI (reg:DI 83 [ _2 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "a.c":107:15 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 83 [ _2 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 12 11 13 2 (set (reg/f:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 stack+0 S8 A64])) "a.c":107:15 74 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (mem:DI (plus:DI (reg/f:DI 93)
                (const_int 16 [0x10])) [4 stack_9(D)->top+0 S8 A64])
        (reg:DI 84 [ _3 ])) "a.c":107:15 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 93)
        (expr_list:REG_DEAD (reg:DI 84 [ _3 ])
            (nil))))
(insn 14 13 15 2 (set (reg/f:DI 94)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 stack+0 S8 A64])) "a.c":108:17 74 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg/f:DI 85 [ _4 ])
        (mem/f:DI (reg/f:DI 94) [8 stack_9(D)->data+0 S8 A64])) "a.c":108:17 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 94)
        (nil)))
(insn 16 15 17 2 (set (reg/f:DI 95)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 stack+0 S8 A64])) "a.c":108:29 74 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:DI 86 [ _5 ])
        (mem:DI (plus:DI (reg/f:DI 95)
                (const_int 16 [0x10])) [4 stack_9(D)->top+0 S8 A64])) "a.c":108:29 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 95)
        (nil)))
(insn 18 17 19 2 (parallel [
            (set (reg:DI 87 [ _6 ])
                (ashift:DI (reg:DI 86 [ _5 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "a.c":108:23 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 86 [ _5 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 19 18 20 2 (parallel [
            (set (reg/f:DI 88 [ _7 ])
                (plus:DI (reg/f:DI 85 [ _4 ])
                    (reg:DI 87 [ _6 ])))
            (clobber (reg:CC 17 flags))
        ]) "a.c":108:23 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 87 [ _6 ])
        (expr_list:REG_DEAD (reg/f:DI 85 [ _4 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 20 19 23 2 (set (reg:DF 89 [ _11 ])
        (mem:DF (reg/f:DI 88 [ _7 ]) [10 *_7+0 S8 A64])) "a.c":108:23 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg/f:DI 88 [ _7 ])
        (nil)))
(insn 23 20 27 2 (set (reg:DF 90 [ <retval> ])
        (reg:DF 89 [ _11 ])) "a.c":108:23 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 89 [ _11 ])
        (nil)))
(insn 27 23 28 2 (set (reg/i:DF 20 xmm0)
        (reg:DF 90 [ <retval> ])) "a.c":109:1 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 90 [ <retval> ])
        (nil)))
(insn 28 27 0 2 (use (reg/i:DF 20 xmm0)) "a.c":109:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0]


;; Function Fpeek (Fpeek, funcdef_no=17, decl_uid=3080, cgraph_uid=18, symbol_order=17)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a0 (r89,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r88: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a1 (r88,l0) best SSE_REGS, allocno SSE_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r89,l0) costs: AREG:6000 DREG:6000 CREG:6000 BREG:6000 SIREG:6000 DIREG:6000 AD_REGS:6000 CLOBBERED_REGS:6000 Q_REGS:6000 TLS_GOTBASE_REGS:6000 GENERAL_REGS:6000 FP_TOP_REG:19000 FP_SECOND_REG:19000 FLOAT_REGS:19000 SSE_FIRST_REG:19000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:19000 FLOAT_INT_REGS:19000 INT_SSE_REGS:19000 FLOAT_INT_SSE_REGS:19000 MEM:7000
  a1(r88,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 FP_TOP_REG:18000 FP_SECOND_REG:18000 FLOAT_REGS:18000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:18000 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 MEM:7000
  a2(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a3(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a4(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a5(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:10000
  a6(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a7(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a8(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 24(l0): point = 0
   Insn 23(l0): point = 2
   Insn 19(l0): point = 4
   Insn 16(l0): point = 6
   Insn 15(l0): point = 8
   Insn 14(l0): point = 10
   Insn 13(l0): point = 12
   Insn 12(l0): point = 14
   Insn 11(l0): point = 16
   Insn 10(l0): point = 18
   Insn 9(l0): point = 20
   Insn 2(l0): point = 22
 a0(r89): [3..4]
 a1(r88): [5..6]
 a2(r87): [7..8]
 a3(r86): [9..10]
 a4(r83): [9..18]
 a5(r85): [11..12]
 a6(r84): [13..14]
 a7(r92): [15..16]
 a8(r91): [19..20]
Compressing live ranges: from 25 to 16 - 64%
Ranges after the compression:
 a0(r89): [0..1]
 a1(r88): [2..3]
 a2(r87): [4..5]
 a3(r86): [6..7]
 a4(r83): [6..13]
 a5(r85): [8..9]
 a6(r84): [10..11]
 a7(r92): [12..13]
 a8(r91): [14..15]
  pref0:a0(r89)<-hr20@1538
  regions=1, blocks=3, points=16
    allocnos=9 (big 0), copies=0, conflicts=0, ranges=9
Disposition:
    4:r83  l0     1    6:r84  l0     0    5:r85  l0     0    3:r86  l0     0
    2:r87  l0     0    1:r88  l0    20    0:r89  l0     0    8:r91  l0     0
    7:r92  l0     0
+++Costs: overall -1000, reg -1000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


Fpeek

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame] 20 [xmm0]
;;  regs ever live 	 5 [di] 6 [bp] 17 [flags] 20 [xmm0]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d,1u} r6={1d,2u} r7={1d,2u} r16={1d,1u} r17={3d} r19={1d,5u} r20={2d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r36={1d} r37={1d} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r91={1d,1u} r92={1d,1u} 
;;    total ref usage 54{32d,22u,0e} in 12{12 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 20 [xmm0] 83 84 85 86 87 88 89 91 92
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 stack+0 S8 A64])
        (reg:DI 5 di [ stack ])) "a.c":110:36 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ stack ])
        (nil)))
(note 3 2 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 3 10 2 (set (reg/f:DI 91)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 stack+0 S8 A64])) "a.c":114:17 74 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 83 [ _2 ])
        (mem/f:DI (reg/f:DI 91) [8 stack_8(D)->data+0 S8 A64])) "a.c":114:17 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 91)
        (nil)))
(insn 11 10 12 2 (set (reg/f:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [6 stack+0 S8 A64])) "a.c":114:29 74 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 84 [ _3 ])
        (mem:DI (plus:DI (reg/f:DI 92)
                (const_int 16 [0x10])) [4 stack_8(D)->top+0 S8 A64])) "a.c":114:29 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 92)
        (nil)))
(insn 13 12 14 2 (parallel [
            (set (reg:DI 85 [ _4 ])
                (ashift:DI (reg:DI 84 [ _3 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "a.c":114:23 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 84 [ _3 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 14 13 15 2 (parallel [
            (set (reg:DI 86 [ _5 ])
                (plus:DI (reg:DI 85 [ _4 ])
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) "a.c":114:23 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 85 [ _4 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 15 14 16 2 (parallel [
            (set (reg/f:DI 87 [ _6 ])
                (plus:DI (reg/f:DI 83 [ _2 ])
                    (reg:DI 86 [ _5 ])))
            (clobber (reg:CC 17 flags))
        ]) "a.c":114:23 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 86 [ _5 ])
        (expr_list:REG_DEAD (reg/f:DI 83 [ _2 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 16 15 19 2 (set (reg:DF 88 [ _9 ])
        (mem:DF (reg/f:DI 87 [ _6 ]) [10 *_6+0 S8 A64])) "a.c":114:23 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg/f:DI 87 [ _6 ])
        (nil)))
(insn 19 16 23 2 (set (reg:DF 89 [ <retval> ])
        (reg:DF 88 [ _9 ])) "a.c":114:23 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 88 [ _9 ])
        (nil)))
(insn 23 19 24 2 (set (reg/i:DF 20 xmm0)
        (reg:DF 89 [ <retval> ])) "a.c":115:1 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 89 [ <retval> ])
        (nil)))
(insn 24 23 0 2 (use (reg/i:DF 20 xmm0)) "a.c":115:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0]

