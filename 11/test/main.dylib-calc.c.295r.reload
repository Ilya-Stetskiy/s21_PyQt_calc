
;; Function printer (printer, funcdef_no=6, decl_uid=4464, cgraph_uid=7, symbol_order=6)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) rBwBz {*call_value}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3

********** Pseudo live ranges #1: **********

  BB 3
   Insn 12: point = 0, n_alt = -1
  BB 2
   Insn 8: point = 0, n_alt = 0
   Insn 7: point = 0, n_alt = -2
   Insn 6: point = 1, n_alt = 3
   Insn 2: point = 2, n_alt = 5
 r82: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r82: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns


printer

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={3d,1u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,5u} r7={1d,4u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d,1u} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d} r37={2d} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} 
;;    total ref usage 100{87d,13u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 str+0 S8 A64])
        (reg:DI 5 di [ str ])) "calc.c":12:1 74 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [82])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [1 str+0 S8 A64])) "calc.c":13:5 74 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [82])) "calc.c":13:5 74 {*movdi_internal}
     (nil))
(call_insn 8 7 11 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f09f183f800 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "calc.c":13:5 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       3 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 1, flags: (RTL, MODIFIED)
;;  pred:       2 [always]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 11 8 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (const_int 0 [0]) "calc.c":14:1 843 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 13 12 0 NOTE_INSN_DELETED)

;; Function precision (precision, funcdef_no=7, decl_uid=4467, cgraph_uid=8, symbol_order=7)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=628,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=615,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            alt=8,overall=626,losers=2 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=23,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 2:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 6:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 7:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=1,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=1,overall=8,losers=1,rld_nregs=2
	 Choosing alt 1 in insn 8:  (0) x  (1) 0  (2) xm {*fop_df_comm}
      Creating newreg=92 from oldreg=86, assigning class SSE_REGS to r92
    8: r92:DF=r92:DF*r87:DF
      REG_DEAD r87:DF
      REG_DEAD r86:DF
    Inserting insn reload before:
   26: r92:DF=r86:DF
    Inserting insn reload after:
   27: r82:DF=r92:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=630,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=626,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=615,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=616,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=15,overall=14,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
            alt=18,overall=17,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=20,overall=1,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 27:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1215,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=21,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=608,losers=1,rld_nregs=1
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=13,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=609,losers=1 -- refuse
          alt=21,overall=0,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 9:  (0) v  (1) r {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=617,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=9,overall=627,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=22,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 11:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 12:  (0) v  (1) m {*movdf_internal}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 13:  (0) x  (1) 0  (2) xm {*fop_df_1}
      Creating newreg=93 from oldreg=83, assigning class SSE_REGS to r93
   13: r93:DF=r93:DF/r89:DF
      REG_DEAD r89:DF
      REG_DEAD r83:DF
    Inserting insn reload before:
   28: r93:DF=r83:DF
    Inserting insn reload after:
   29: r88:DF=r93:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=630,losers=4,rld_nregs=2
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1213,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=16,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=613,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=13,losers=1,rld_nregs=0
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=16: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=14,losers=1 -- refuse
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=19,overall=17,losers=2 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=20,overall=607,losers=1 -- refuse
            0 Non pseudo reload: reject++
          alt=21,overall=1,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 28:  (0) v  (1) r {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 14:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 15:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=630,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=626,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=615,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=619,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=20,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 18:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1215,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=21,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=608,losers=1,rld_nregs=1
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=13,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=609,losers=1 -- refuse
          alt=21,overall=0,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 22:  (0) v  (1) r {*movdf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 23: point = 0, n_alt = -1
   Insn 22: point = 0, n_alt = 21
   Insn 18: point = 1, n_alt = 20
   Insn 15: point = 3, n_alt = 14
   Insn 14: point = 4, n_alt = 15
   Insn 29: point = 5, n_alt = -2
	Hard reg 20 is preferable by r93 with profit 1000
   Insn 13: point = 7, n_alt = 2
   Insn 28: point = 9, n_alt = 21
	Hard reg 20 is preferable by r93 with profit 1000
	Hard reg 0 is preferable by r93 with profit 1000
   Insn 12: point = 11, n_alt = 14
   Insn 11: point = 12, n_alt = 20
   Insn 10: point = 13, n_alt = 0
   Insn 9: point = 13, n_alt = 21
   Insn 27: point = 14, n_alt = 20
	Hard reg 0 is preferable by r92 with profit 1000
   Insn 8: point = 16, n_alt = 1
   Insn 26: point = 18, n_alt = -2
	Hard reg 0 is preferable by r92 with profit 1000
	Hard reg 21 is preferable by r92 with profit 1000
   Insn 7: point = 20, n_alt = 14
   Insn 6: point = 21, n_alt = 14
   Insn 2: point = 22, n_alt = 15
 r82: [13..14]
 r83: [10..12]
 r84: [2..3]
 r85: [0..1]
 r86: [19..21]
 r87: [17..20]
 r88: [4..5]
 r89: [8..11]
 r92: [15..18]
 r93: [6..9]
Compressing live ranges: from 22 to 16 - 72%
Ranges after the compression:
 r82: [10..11]
 r83: [8..9]
 r84: [2..3]
 r85: [0..1]
 r86: [14..15]
 r87: [12..15]
 r88: [4..5]
 r89: [6..9]
 r92: [12..13]
 r93: [6..7]

********** Assignment #1: **********

	 Assigning to 92 (cl=SSE_REGS, orig=86, freq=3000, tfirst=92, tfreq=3000)...
	   Assign 21 to reload r92 (freq=3000)
	 Assigning to 93 (cl=SSE_REGS, orig=83, freq=3000, tfirst=93, tfreq=3000)...
	   Assign 20 to reload r93 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=16, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 9
changing reg in insn 11
changing reg in insn 15
changing reg in insn 18
changing reg in insn 18
changing reg in insn 22
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 14
changing reg in insn 12
changing reg in insn 13
deleting insn with uid = 26.
deleting insn with uid = 29.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.


precision

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame] 20 [xmm0]
;;  regs ever live 	 0 [ax] 6 [bp] 7 [sp] 20 [xmm0] 21 [xmm1]
;;  ref usage 	r0={5d,3u} r1={2d} r2={2d} r4={2d} r5={2d} r6={1d,6u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d,1u} r20={8d,9u} r21={5d,3u} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d} r37={2d} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} 
;;    total ref usage 122{97d,25u,0e} in 16{15 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 84 85 86 87 88 89
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 number+0 S8 A64])
        (reg:DF 20 xmm0 [ number ])) "calc.c":16:1 135 {*movdf_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DF 21 xmm1 [86])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 number+0 S8 A64])) "calc.c":18:21 135 {*movdf_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DF 20 xmm0 [87])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S8 A64])) "calc.c":18:21 135 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+2 [0x0.c8p+7])
        (nil)))
(insn 8 7 27 2 (set (reg:DF 21 xmm1 [86])
        (mult:DF (reg:DF 21 xmm1 [86])
            (reg:DF 20 xmm0 [87]))) "calc.c":18:21 981 {*fop_df_comm}
     (nil))
(insn 27 8 9 2 (set (reg:DF 0 ax [orig:82 _1 ] [82])
        (reg:DF 21 xmm1 [86])) "calc.c":18:21 135 {*movdf_internal}
     (nil))
(insn 9 27 10 2 (set (reg:DF 20 xmm0)
        (reg:DF 0 ax [orig:82 _1 ] [82])) "calc.c":18:21 135 {*movdf_internal}
     (nil))
(call_insn/u 10 9 11 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("round") [flags 0x41]  <function_decl 0x7f09f180cc00 round>) [0 __builtin_round S1 A8])
            (const_int 0 [0]))) "calc.c":18:21 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 11 10 12 2 (set (reg:DF 0 ax [orig:83 _2 ] [83])
        (reg:DF 20 xmm0)) "calc.c":18:21 135 {*movdf_internal}
     (nil))
(insn 12 11 28 2 (set (reg:DF 21 xmm1 [89])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S8 A64])) "calc.c":18:19 135 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+2 [0x0.c8p+7])
        (nil)))
(insn 28 12 13 2 (set (reg:DF 20 xmm0 [orig:83 _2 ] [83])
        (reg:DF 0 ax [orig:83 _2 ] [83])) "calc.c":18:19 135 {*movdf_internal}
     (nil))
(insn 13 28 14 2 (set (reg:DF 20 xmm0 [orig:83 _2 ] [83])
        (div:DF (reg:DF 20 xmm0 [orig:83 _2 ] [83])
            (reg:DF 21 xmm1 [89]))) "calc.c":18:19 985 {*fop_df_1}
     (nil))
(insn 14 13 15 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 number+0 S8 A64])
        (reg:DF 20 xmm0 [88])) "calc.c":18:19 135 {*movdf_internal}
     (nil))
(insn 15 14 18 2 (set (reg:DF 20 xmm0 [orig:84 _5 ] [84])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 number+0 S8 A64])) "calc.c":18:19 135 {*movdf_internal}
     (nil))
(insn 18 15 22 2 (set (reg:DF 0 ax [orig:85 <retval> ] [85])
        (reg:DF 20 xmm0 [orig:84 _5 ] [84])) "calc.c":18:19 135 {*movdf_internal}
     (nil))
(insn 22 18 23 2 (set (reg/i:DF 20 xmm0)
        (reg:DF 0 ax [orig:85 <retval> ] [85])) "calc.c":19:1 135 {*movdf_internal}
     (nil))
(insn 23 22 25 2 (use (reg/i:DF 20 xmm0)) "calc.c":19:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0]

(note 25 23 0 NOTE_INSN_DELETED)

;; Function what_the_func (what_the_func, funcdef_no=8, decl_uid=4470, cgraph_uid=9, symbol_order=8)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 7:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) r {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 15:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 21:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) r {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 29:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 35:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) r {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 43:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 49:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) r {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 57:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 63:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 66:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (0) r {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 71:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 76:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 77:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) r {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 85:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 91:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) r {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 99:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 104:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 105:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 110:  (0) r {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 113:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 118:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 119:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (0) r {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 127:  (0) m  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 130:  (0) q  (1) m {*movqi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4 5
EBB 6 7
EBB 8 9
EBB 10 11
EBB 12 13
EBB 14 15
EBB 16 17
EBB 18 19
EBB 20

********** Pseudo live ranges #1: **********

  BB 20
   Insn 138: point = 0, n_alt = -1
   Insn 137: point = 0, n_alt = -2
   Insn 133: point = 1, n_alt = -2
   Insn 130: point = 3, n_alt = 4
  BB 17
   Insn 154: point = 4, n_alt = -1
   Insn 113: point = 4, n_alt = 8
  BB 15
   Insn 152: point = 4, n_alt = -1
   Insn 99: point = 4, n_alt = 8
  BB 13
   Insn 150: point = 4, n_alt = -1
   Insn 85: point = 4, n_alt = 8
  BB 11
   Insn 148: point = 4, n_alt = -1
   Insn 71: point = 4, n_alt = 8
  BB 9
   Insn 146: point = 4, n_alt = -1
   Insn 57: point = 4, n_alt = 8
  BB 7
   Insn 144: point = 4, n_alt = -1
   Insn 43: point = 4, n_alt = 8
  BB 5
   Insn 142: point = 4, n_alt = -1
   Insn 29: point = 4, n_alt = 8
  BB 3
   Insn 140: point = 4, n_alt = -1
   Insn 15: point = 4, n_alt = 8
  BB 19
   Insn 127: point = 4, n_alt = 8
  BB 18
   Insn 125: point = 4, n_alt = -1
   Insn 124: point = 4, n_alt = 0
   Insn 123: point = 5, n_alt = -2
   Insn 122: point = 6, n_alt = 0
   Insn 121: point = 6, n_alt = -2
   Insn 120: point = 7, n_alt = -2
   Insn 119: point = 8, n_alt = 4
   Insn 118: point = 9, n_alt = 3
  BB 16
   Insn 111: point = 10, n_alt = -1
   Insn 110: point = 10, n_alt = 0
   Insn 109: point = 11, n_alt = -2
   Insn 108: point = 12, n_alt = 0
   Insn 107: point = 12, n_alt = -2
   Insn 106: point = 13, n_alt = -2
   Insn 105: point = 14, n_alt = 4
   Insn 104: point = 15, n_alt = 3
  BB 14
   Insn 97: point = 16, n_alt = -1
   Insn 96: point = 16, n_alt = 0
   Insn 95: point = 17, n_alt = -2
   Insn 94: point = 18, n_alt = 0
   Insn 93: point = 18, n_alt = -2
   Insn 92: point = 19, n_alt = -2
   Insn 91: point = 20, n_alt = 4
   Insn 90: point = 21, n_alt = 3
  BB 12
   Insn 83: point = 22, n_alt = -1
   Insn 82: point = 22, n_alt = 0
   Insn 81: point = 23, n_alt = -2
   Insn 80: point = 24, n_alt = 0
   Insn 79: point = 24, n_alt = -2
   Insn 78: point = 25, n_alt = -2
   Insn 77: point = 26, n_alt = 4
   Insn 76: point = 27, n_alt = 3
  BB 10
   Insn 69: point = 28, n_alt = -1
   Insn 68: point = 28, n_alt = 0
   Insn 67: point = 29, n_alt = -2
   Insn 66: point = 30, n_alt = 0
   Insn 65: point = 30, n_alt = -2
   Insn 64: point = 31, n_alt = -2
   Insn 63: point = 32, n_alt = 4
   Insn 62: point = 33, n_alt = 3
  BB 8
   Insn 55: point = 34, n_alt = -1
   Insn 54: point = 34, n_alt = 0
   Insn 53: point = 35, n_alt = -2
   Insn 52: point = 36, n_alt = 0
   Insn 51: point = 36, n_alt = -2
   Insn 50: point = 37, n_alt = -2
   Insn 49: point = 38, n_alt = 4
   Insn 48: point = 39, n_alt = 3
  BB 6
   Insn 41: point = 40, n_alt = -1
   Insn 40: point = 40, n_alt = 0
   Insn 39: point = 41, n_alt = -2
   Insn 38: point = 42, n_alt = 0
   Insn 37: point = 42, n_alt = -2
   Insn 36: point = 43, n_alt = -2
   Insn 35: point = 44, n_alt = 4
   Insn 34: point = 45, n_alt = 3
  BB 4
   Insn 27: point = 46, n_alt = -1
   Insn 26: point = 46, n_alt = 0
   Insn 25: point = 47, n_alt = -2
   Insn 24: point = 48, n_alt = 0
   Insn 23: point = 48, n_alt = -2
   Insn 22: point = 49, n_alt = -2
   Insn 21: point = 50, n_alt = 4
   Insn 20: point = 51, n_alt = 3
  BB 2
   Insn 13: point = 52, n_alt = -1
   Insn 12: point = 52, n_alt = 0
   Insn 11: point = 53, n_alt = -2
   Insn 10: point = 54, n_alt = 0
   Insn 9: point = 54, n_alt = -2
   Insn 8: point = 55, n_alt = -2
   Insn 7: point = 56, n_alt = 4
   Insn 6: point = 57, n_alt = 3
   Insn 2: point = 58, n_alt = 5
 r82: [52..53]
 r83: [46..47]
 r84: [40..41]
 r85: [34..35]
 r86: [28..29]
 r87: [22..23]
 r88: [16..17]
 r89: [10..11]
 r90: [4..5]
 r91: [2..3]
 r92: [0..1]
 r93: [54..57]
 r94: [55..56]
 r95: [48..51]
 r96: [49..50]
 r97: [42..45]
 r98: [43..44]
 r99: [36..39]
 r100: [37..38]
 r101: [30..33]
 r102: [31..32]
 r103: [24..27]
 r104: [25..26]
 r105: [18..21]
 r106: [19..20]
 r107: [12..15]
 r108: [13..14]
 r109: [6..9]
 r110: [7..8]
Compressing live ranges: from 58 to 40 - 68%
Ranges after the compression:
 r82: [36..37]
 r83: [32..33]
 r84: [28..29]
 r85: [24..25]
 r86: [20..21]
 r87: [16..17]
 r88: [12..13]
 r89: [8..9]
 r90: [4..5]
 r91: [2..3]
 r92: [0..1]
 r93: [38..39]
 r94: [38..39]
 r95: [34..35]
 r96: [34..35]
 r97: [30..31]
 r98: [30..31]
 r99: [26..27]
 r100: [26..27]
 r101: [22..23]
 r102: [22..23]
 r103: [18..19]
 r104: [18..19]
 r105: [14..15]
 r106: [14..15]
 r107: [10..11]
 r108: [10..11]
 r109: [6..7]
 r110: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 12
changing reg in insn 25
changing reg in insn 26
changing reg in insn 39
changing reg in insn 40
changing reg in insn 53
changing reg in insn 54
changing reg in insn 67
changing reg in insn 68
changing reg in insn 81
changing reg in insn 82
changing reg in insn 95
changing reg in insn 96
changing reg in insn 109
changing reg in insn 110
changing reg in insn 123
changing reg in insn 124
changing reg in insn 130
changing reg in insn 133
changing reg in insn 133
changing reg in insn 137
changing reg in insn 6
changing reg in insn 9
changing reg in insn 7
changing reg in insn 8
changing reg in insn 20
changing reg in insn 23
changing reg in insn 21
changing reg in insn 22
changing reg in insn 34
changing reg in insn 37
changing reg in insn 35
changing reg in insn 36
changing reg in insn 48
changing reg in insn 51
changing reg in insn 49
changing reg in insn 50
changing reg in insn 62
changing reg in insn 65
changing reg in insn 63
changing reg in insn 64
changing reg in insn 76
changing reg in insn 79
changing reg in insn 77
changing reg in insn 78
changing reg in insn 90
changing reg in insn 93
changing reg in insn 91
changing reg in insn 92
changing reg in insn 104
changing reg in insn 107
changing reg in insn 105
changing reg in insn 106
changing reg in insn 118
changing reg in insn 121
changing reg in insn 119
changing reg in insn 120
deleting insn with uid = 11.
deleting insn with uid = 25.
deleting insn with uid = 39.
deleting insn with uid = 53.
deleting insn with uid = 67.
deleting insn with uid = 81.
deleting insn with uid = 95.
deleting insn with uid = 109.
deleting insn with uid = 123.
deleting insn with uid = 133.
deleting insn with uid = 137.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 38.
verify found no changes in insn with uid = 52.
verify found no changes in insn with uid = 66.
verify found no changes in insn with uid = 80.
verify found no changes in insn with uid = 94.
verify found no changes in insn with uid = 108.
verify found no changes in insn with uid = 122.


what_the_func

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={20d,20u} r1={19d,9u} r2={10d} r4={19d,9u} r5={19d,10u} r6={1d,40u} r7={1d,29u} r8={9d} r9={9d} r10={9d} r11={9d} r12={9d} r13={9d} r14={9d} r15={9d} r17={18d,9u} r18={9d} r19={1d,1u} r20={10d} r21={10d} r22={10d} r23={10d} r24={10d} r25={10d} r26={10d} r27={10d} r28={9d} r29={9d} r30={9d} r31={9d} r32={9d} r33={9d} r34={9d} r35={9d} r36={10d} r37={10d} r38={9d} r39={9d} r44={9d} r45={9d} r46={9d} r47={9d} r48={9d} r49={9d} r50={9d} r51={9d} r52={9d} r53={9d} r54={9d} r55={9d} r56={9d} r57={9d} r58={9d} r59={9d} r60={9d} r61={9d} r62={9d} r63={9d} r64={9d} r65={9d} r66={9d} r67={9d} r68={9d} r69={9d} r70={9d} r71={9d} r72={9d} r73={9d} r74={9d} r75={9d} 
;;    total ref usage 794{667d,127u,0e} in 83{74 regular + 9 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 93 94
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 func+0 S8 A64])
        (reg:DI 5 di [ func ])) "calc.c":22:1 74 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 func+0 S8 A64])) "calc.c":24:9 74 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 1 dx [94])
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f09f16b1d80 *.LC1>)) "calc.c":24:9 74 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [94])) "calc.c":24:9 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f09f16b1d80 *.LC1>)
        (nil)))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [93])) "calc.c":24:9 74 {*movdi_internal}
     (nil))
(call_insn/i 10 9 12 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strstr") [flags 0x41]  <function_decl 0x7f09f183b900 strstr>) [0 __builtin_strstr S1 A8])
            (const_int 0 [0]))) "calc.c":24:9 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 12 10 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:82 _1 ] [82])
            (const_int 0 [0]))) "calc.c":24:8 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 18)
            (pc))) "calc.c":24:8 806 {*jcc}
     (nil)
 -> 18)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 140 3 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [0 value+0 S1 A8])
        (const_int 65 [0x41])) "calc.c":25:15 77 {*movqi_internal}
     (nil))
(jump_insn 140 15 141 3 (set (pc)
        (label_ref 128)) 807 {jump}
     (nil)
 -> 128)
;;  succ:       20 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 141 140 18)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 83 95 96
(code_label 18 141 19 4 5 (nil) [1 uses])
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 4 (set (reg:DI 0 ax [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 func+0 S8 A64])) "calc.c":26:14 74 {*movdi_internal}
     (nil))
(insn 21 20 22 4 (set (reg:DI 1 dx [96])
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f09f16b1e10 *.LC2>)) "calc.c":26:14 74 {*movdi_internal}
     (nil))
(insn 22 21 23 4 (set (reg:DI 4 si)
        (reg:DI 1 dx [96])) "calc.c":26:14 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f09f16b1e10 *.LC2>)
        (nil)))
(insn 23 22 24 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [95])) "calc.c":26:14 74 {*movdi_internal}
     (nil))
(call_insn/i 24 23 26 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strstr") [flags 0x41]  <function_decl 0x7f09f183b900 strstr>) [0 __builtin_strstr S1 A8])
            (const_int 0 [0]))) "calc.c":26:14 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 26 24 27 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:83 _2 ] [83])
            (const_int 0 [0]))) "calc.c":26:13 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 27 26 28 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 32)
            (pc))) "calc.c":26:13 806 {*jcc}
     (nil)
 -> 32)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 28 27 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 142 5 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [0 value+0 S1 A8])
        (const_int 66 [0x42])) "calc.c":27:15 77 {*movqi_internal}
     (nil))
(jump_insn 142 29 143 5 (set (pc)
        (label_ref 128)) 807 {jump}
     (nil)
 -> 128)
;;  succ:       20 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 143 142 32)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 84 97 98
(code_label 32 143 33 6 7 (nil) [1 uses])
(note 33 32 34 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 6 (set (reg:DI 0 ax [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 func+0 S8 A64])) "calc.c":28:14 74 {*movdi_internal}
     (nil))
(insn 35 34 36 6 (set (reg:DI 1 dx [98])
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f09f16b1ea0 *.LC3>)) "calc.c":28:14 74 {*movdi_internal}
     (nil))
(insn 36 35 37 6 (set (reg:DI 4 si)
        (reg:DI 1 dx [98])) "calc.c":28:14 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f09f16b1ea0 *.LC3>)
        (nil)))
(insn 37 36 38 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [97])) "calc.c":28:14 74 {*movdi_internal}
     (nil))
(call_insn/i 38 37 40 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strstr") [flags 0x41]  <function_decl 0x7f09f183b900 strstr>) [0 __builtin_strstr S1 A8])
            (const_int 0 [0]))) "calc.c":28:14 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 40 38 41 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:84 _3 ] [84])
            (const_int 0 [0]))) "calc.c":28:13 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 41 40 42 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 46)
            (pc))) "calc.c":28:13 806 {*jcc}
     (nil)
 -> 46)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 42 41 43 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 144 7 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [0 value+0 S1 A8])
        (const_int 67 [0x43])) "calc.c":29:15 77 {*movqi_internal}
     (nil))
(jump_insn 144 43 145 7 (set (pc)
        (label_ref 128)) 807 {jump}
     (nil)
 -> 128)
;;  succ:       20 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 145 144 46)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 85 99 100
(code_label 46 145 47 8 8 (nil) [1 uses])
(note 47 46 48 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 8 (set (reg:DI 0 ax [99])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 func+0 S8 A64])) "calc.c":30:14 74 {*movdi_internal}
     (nil))
(insn 49 48 50 8 (set (reg:DI 1 dx [100])
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f09f16b1f30 *.LC4>)) "calc.c":30:14 74 {*movdi_internal}
     (nil))
(insn 50 49 51 8 (set (reg:DI 4 si)
        (reg:DI 1 dx [100])) "calc.c":30:14 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f09f16b1f30 *.LC4>)
        (nil)))
(insn 51 50 52 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [99])) "calc.c":30:14 74 {*movdi_internal}
     (nil))
(call_insn/i 52 51 54 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strstr") [flags 0x41]  <function_decl 0x7f09f183b900 strstr>) [0 __builtin_strstr S1 A8])
            (const_int 0 [0]))) "calc.c":30:14 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 54 52 55 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:85 _4 ] [85])
            (const_int 0 [0]))) "calc.c":30:13 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 55 54 56 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 60)
            (pc))) "calc.c":30:13 806 {*jcc}
     (nil)
 -> 60)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 56 55 57 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 146 9 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [0 value+0 S1 A8])
        (const_int 68 [0x44])) "calc.c":31:15 77 {*movqi_internal}
     (nil))
(jump_insn 146 57 147 9 (set (pc)
        (label_ref 128)) 807 {jump}
     (nil)
 -> 128)
;;  succ:       20 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 147 146 60)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 86 101 102
(code_label 60 147 61 10 9 (nil) [1 uses])
(note 61 60 62 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 10 (set (reg:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 func+0 S8 A64])) "calc.c":32:14 74 {*movdi_internal}
     (nil))
(insn 63 62 64 10 (set (reg:DI 1 dx [102])
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f09f16da000 *.LC5>)) "calc.c":32:14 74 {*movdi_internal}
     (nil))
(insn 64 63 65 10 (set (reg:DI 4 si)
        (reg:DI 1 dx [102])) "calc.c":32:14 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f09f16da000 *.LC5>)
        (nil)))
(insn 65 64 66 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [101])) "calc.c":32:14 74 {*movdi_internal}
     (nil))
(call_insn/i 66 65 68 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strstr") [flags 0x41]  <function_decl 0x7f09f183b900 strstr>) [0 __builtin_strstr S1 A8])
            (const_int 0 [0]))) "calc.c":32:14 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 68 66 69 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:86 _5 ] [86])
            (const_int 0 [0]))) "calc.c":32:13 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 69 68 70 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 74)
            (pc))) "calc.c":32:13 806 {*jcc}
     (nil)
 -> 74)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 70 69 71 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 148 11 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [0 value+0 S1 A8])
        (const_int 69 [0x45])) "calc.c":33:15 77 {*movqi_internal}
     (nil))
(jump_insn 148 71 149 11 (set (pc)
        (label_ref 128)) 807 {jump}
     (nil)
 -> 128)
;;  succ:       20 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 149 148 74)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 87 103 104
(code_label 74 149 75 12 10 (nil) [1 uses])
(note 75 74 76 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 77 12 (set (reg:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 func+0 S8 A64])) "calc.c":34:14 74 {*movdi_internal}
     (nil))
(insn 77 76 78 12 (set (reg:DI 1 dx [104])
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f09f16da090 *.LC6>)) "calc.c":34:14 74 {*movdi_internal}
     (nil))
(insn 78 77 79 12 (set (reg:DI 4 si)
        (reg:DI 1 dx [104])) "calc.c":34:14 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f09f16da090 *.LC6>)
        (nil)))
(insn 79 78 80 12 (set (reg:DI 5 di)
        (reg:DI 0 ax [103])) "calc.c":34:14 74 {*movdi_internal}
     (nil))
(call_insn/i 80 79 82 12 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strstr") [flags 0x41]  <function_decl 0x7f09f183b900 strstr>) [0 __builtin_strstr S1 A8])
            (const_int 0 [0]))) "calc.c":34:14 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 82 80 83 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:87 _6 ] [87])
            (const_int 0 [0]))) "calc.c":34:13 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 83 82 84 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 88)
            (pc))) "calc.c":34:13 806 {*jcc}
     (nil)
 -> 88)
;;  succ:       13 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 84 83 85 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 150 13 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [0 value+0 S1 A8])
        (const_int 70 [0x46])) "calc.c":35:15 77 {*movqi_internal}
     (nil))
(jump_insn 150 85 151 13 (set (pc)
        (label_ref 128)) 807 {jump}
     (nil)
 -> 128)
;;  succ:       20 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 151 150 88)
;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       12
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 88 105 106
(code_label 88 151 89 14 11 (nil) [1 uses])
(note 89 88 90 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 91 14 (set (reg:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 func+0 S8 A64])) "calc.c":36:14 74 {*movdi_internal}
     (nil))
(insn 91 90 92 14 (set (reg:DI 1 dx [106])
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f09f16da120 *.LC7>)) "calc.c":36:14 74 {*movdi_internal}
     (nil))
(insn 92 91 93 14 (set (reg:DI 4 si)
        (reg:DI 1 dx [106])) "calc.c":36:14 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f09f16da120 *.LC7>)
        (nil)))
(insn 93 92 94 14 (set (reg:DI 5 di)
        (reg:DI 0 ax [105])) "calc.c":36:14 74 {*movdi_internal}
     (nil))
(call_insn/i 94 93 96 14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strstr") [flags 0x41]  <function_decl 0x7f09f183b900 strstr>) [0 __builtin_strstr S1 A8])
            (const_int 0 [0]))) "calc.c":36:14 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 96 94 97 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:88 _7 ] [88])
            (const_int 0 [0]))) "calc.c":36:13 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 97 96 98 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 102)
            (pc))) "calc.c":36:13 806 {*jcc}
     (nil)
 -> 102)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 98 97 99 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 152 15 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [0 value+0 S1 A8])
        (const_int 71 [0x47])) "calc.c":37:15 77 {*movqi_internal}
     (nil))
(jump_insn 152 99 153 15 (set (pc)
        (label_ref 128)) 807 {jump}
     (nil)
 -> 128)
;;  succ:       20 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 153 152 102)
;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       14
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 89 107 108
(code_label 102 153 103 16 12 (nil) [1 uses])
(note 103 102 104 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 104 103 105 16 (set (reg:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 func+0 S8 A64])) "calc.c":38:14 74 {*movdi_internal}
     (nil))
(insn 105 104 106 16 (set (reg:DI 1 dx [108])
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f09f16da1b0 *.LC8>)) "calc.c":38:14 74 {*movdi_internal}
     (nil))
(insn 106 105 107 16 (set (reg:DI 4 si)
        (reg:DI 1 dx [108])) "calc.c":38:14 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f09f16da1b0 *.LC8>)
        (nil)))
(insn 107 106 108 16 (set (reg:DI 5 di)
        (reg:DI 0 ax [107])) "calc.c":38:14 74 {*movdi_internal}
     (nil))
(call_insn/i 108 107 110 16 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strstr") [flags 0x41]  <function_decl 0x7f09f183b900 strstr>) [0 __builtin_strstr S1 A8])
            (const_int 0 [0]))) "calc.c":38:14 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 110 108 111 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:89 _8 ] [89])
            (const_int 0 [0]))) "calc.c":38:13 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 111 110 112 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 116)
            (pc))) "calc.c":38:13 806 {*jcc}
     (nil)
 -> 116)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 112 111 113 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 113 112 154 17 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [0 value+0 S1 A8])
        (const_int 72 [0x48])) "calc.c":39:15 77 {*movqi_internal}
     (nil))
(jump_insn 154 113 155 17 (set (pc)
        (label_ref 128)) 807 {jump}
     (nil)
 -> 128)
;;  succ:       20 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 155 154 116)
;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       16
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 90 109 110
(code_label 116 155 117 18 13 (nil) [1 uses])
(note 117 116 118 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 118 117 119 18 (set (reg:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 func+0 S8 A64])) "calc.c":40:14 74 {*movdi_internal}
     (nil))
(insn 119 118 120 18 (set (reg:DI 1 dx [110])
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f09f16da240 *.LC9>)) "calc.c":40:14 74 {*movdi_internal}
     (nil))
(insn 120 119 121 18 (set (reg:DI 4 si)
        (reg:DI 1 dx [110])) "calc.c":40:14 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f09f16da240 *.LC9>)
        (nil)))
(insn 121 120 122 18 (set (reg:DI 5 di)
        (reg:DI 0 ax [109])) "calc.c":40:14 74 {*movdi_internal}
     (nil))
(call_insn/i 122 121 124 18 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strstr") [flags 0x41]  <function_decl 0x7f09f183b900 strstr>) [0 __builtin_strstr S1 A8])
            (const_int 0 [0]))) "calc.c":40:14 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 124 122 125 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:90 _9 ] [90])
            (const_int 0 [0]))) "calc.c":40:13 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 125 124 126 18 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 128)
            (pc))) "calc.c":40:13 806 {*jcc}
     (nil)
 -> 128)
;;  succ:       19 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 126 125 127 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 127 126 128 19 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [0 value+0 S1 A8])
        (const_int 73 [0x49])) "calc.c":41:15 77 {*movqi_internal}
     (nil))
;;  succ:       20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 1, flags: (RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;;              3 [always] 
;;              5 [always] 
;;              7 [always] 
;;              9 [always] 
;;              11 [always] 
;;              13 [always] 
;;              15 [always] 
;;              18
;;              17 [always] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 91 92
(code_label 128 127 129 20 6 (nil) [9 uses])
(note 129 128 130 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 130 129 138 20 (set (reg:QI 0 ax [orig:91 _23 ] [91])
        (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -1 [0xffffffffffffffff])) [0 value+0 S1 A8])) "calc.c":43:12 77 {*movqi_internal}
     (nil))
(insn 138 130 156 20 (use (reg/i:QI 0 ax)) "calc.c":44:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 156 138 0 NOTE_INSN_DELETED)

;; Function calc (calc, funcdef_no=9, decl_uid=4475, cgraph_uid=10, symbol_order=9)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=48, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 4:  (0) =Q  (1) Q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 5:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=617,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=9,overall=627,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=22,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 12:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 13:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 15:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) rm  (1) re {*cmpsi_1}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 22:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 25:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) rBw {*tablejump_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 33:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1215,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=21,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=608,losers=1,rld_nregs=1
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=13,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=609,losers=1 -- refuse
          alt=21,overall=0,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 34:  (0) v  (1) r {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=617,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=9,overall=627,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=22,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 36:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 37:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 42:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1215,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=21,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=608,losers=1,rld_nregs=1
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=13,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=609,losers=1 -- refuse
          alt=21,overall=0,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 43:  (0) v  (1) r {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=617,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=9,overall=627,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=22,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 45:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 46:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 51:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1215,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=21,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=608,losers=1,rld_nregs=1
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=13,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=609,losers=1 -- refuse
          alt=21,overall=0,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 52:  (0) v  (1) r {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=617,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=9,overall=627,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=22,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 54:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 55:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 60:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1215,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=21,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=608,losers=1,rld_nregs=1
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=13,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=609,losers=1 -- refuse
          alt=21,overall=0,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 61:  (0) v  (1) r {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=617,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=9,overall=627,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=22,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 63:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 64:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 69:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1215,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=21,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=608,losers=1,rld_nregs=1
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=13,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=609,losers=1 -- refuse
          alt=21,overall=0,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 70:  (0) v  (1) r {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 71:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=617,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=9,overall=627,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=22,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 72:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 73:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 78:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1215,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=21,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=608,losers=1,rld_nregs=1
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=13,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=609,losers=1 -- refuse
          alt=21,overall=0,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 79:  (0) v  (1) r {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=617,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=9,overall=627,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=22,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 81:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 82:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 87:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1215,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=21,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=608,losers=1,rld_nregs=1
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=13,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=609,losers=1 -- refuse
          alt=21,overall=0,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 88:  (0) v  (1) r {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=617,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=9,overall=627,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=22,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 90:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 91:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 96:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1215,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=21,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=608,losers=1,rld_nregs=1
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=13,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=609,losers=1 -- refuse
          alt=21,overall=0,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 97:  (0) v  (1) r {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=617,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=9,overall=627,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=22,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 99:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 100:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 105:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1215,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=21,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=608,losers=1,rld_nregs=1
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=13,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=609,losers=1 -- refuse
          alt=21,overall=0,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 106:  (0) v  (1) r {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=617,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=9,overall=627,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=22,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 108:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 109:  (0) ?m  (1) rC {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=617,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=9,overall=627,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=22,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 117:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 118:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 119:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 130:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) rm  (1) re {*cmpsi_1}
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 135:  (0) r  (1) rmWz {*zero_extendsidi2}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 136:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 137:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 140:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) rBw {*tablejump_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 148:  (0) rm  (1) re {*cmpsi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 155:  (0) v  (1) m {*movdf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 156:  (0) x  (1) 0  (2) xm {*fop_df_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 157:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 162:  (0) v  (1) m {*movdf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 163:  (0) x  (1) 0  (2) xm {*fop_df_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 164:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 169:  (0) v  (1) m {*movdf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 170:  (0) x  (1) 0  (2) xm {*fop_df_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 171:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 176:  (0) v  (1) m {*movdf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 177:  (0) x  (1) 0  (2) xm {*fop_df_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 178:  (0) m  (1) v {*movdf_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 183:  (0) v  (1) m {truncdfsf2}
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=3,overall=7,losers=1,rld_nregs=1
	 Choosing alt 3 in insn 184:  (0) v  (1) m {truncdfsf2}
      Creating newreg=143 from oldreg=85, assigning class ALL_SSE_REGS to r143
  184: r143:SF=float_trunc([frame:DI-0x10])
    Inserting insn reload after:
  261: r85:SF=r143:SF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=630,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=626,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=615,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=4,overall=625,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=5: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=7,overall=616,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=14,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            1 Non pseudo reload: reject++
          alt=9,overall=1,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 261:  (0) ?r  (1) v {*movsf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=1215,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=4,overall=21,losers=1,rld_nregs=0
            alt=5: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=606,losers=1,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=8,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=9,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=10,overall=0,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 186:  (0) ?v  (1) r {*movsf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 187:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 190:  (0) v  (1) v {*extendsfdf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 191:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 196:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 197:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1215,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=21,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=608,losers=1,rld_nregs=1
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=13,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=609,losers=1 -- refuse
          alt=21,overall=0,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 199:  (0) v  (1) r {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 200:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=617,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=9,overall=627,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=22,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 201:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 202:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 211:  (0) ?r  (1) rm {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 212:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1215,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=21,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=608,losers=1,rld_nregs=1
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=13,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=609,losers=1 -- refuse
          alt=21,overall=0,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 213:  (0) v  (1) r {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 215:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13 14 15 16
EBB 17 18
EBB 19
EBB 20
EBB 21
EBB 22
EBB 23
EBB 24
EBB 27
EBB 25 28
EBB 26 29

********** Pseudo live ranges #1: **********

  BB 29
   Insn 259: point = 0, n_alt = -1
  BB 26
   Insn 215: point = 0, n_alt = 0
   Insn 214: point = 0, n_alt = -2
   Insn 213: point = 1, n_alt = 21
   Insn 212: point = 2, n_alt = 3
   Insn 211: point = 3, n_alt = 8
  BB 12
   Insn 236: point = 4, n_alt = -1
   Insn 109: point = 4, n_alt = 9
   Insn 108: point = 5, n_alt = 20
   Insn 107: point = 6, n_alt = 0
   Insn 106: point = 6, n_alt = 21
   Insn 105: point = 7, n_alt = 8
  BB 11
   Insn 234: point = 8, n_alt = -1
   Insn 100: point = 8, n_alt = 9
   Insn 99: point = 9, n_alt = 20
   Insn 98: point = 10, n_alt = 0
   Insn 97: point = 10, n_alt = 21
   Insn 96: point = 11, n_alt = 8
  BB 10
   Insn 232: point = 12, n_alt = -1
   Insn 91: point = 12, n_alt = 9
   Insn 90: point = 13, n_alt = 20
   Insn 89: point = 14, n_alt = 0
   Insn 88: point = 14, n_alt = 21
   Insn 87: point = 15, n_alt = 8
  BB 9
   Insn 230: point = 16, n_alt = -1
   Insn 82: point = 16, n_alt = 9
   Insn 81: point = 17, n_alt = 20
   Insn 80: point = 18, n_alt = 0
   Insn 79: point = 18, n_alt = 21
   Insn 78: point = 19, n_alt = 8
  BB 8
   Insn 228: point = 20, n_alt = -1
   Insn 73: point = 20, n_alt = 9
   Insn 72: point = 21, n_alt = 20
   Insn 71: point = 22, n_alt = 0
   Insn 70: point = 22, n_alt = 21
   Insn 69: point = 23, n_alt = 8
  BB 7
   Insn 226: point = 24, n_alt = -1
   Insn 64: point = 24, n_alt = 9
   Insn 63: point = 25, n_alt = 20
   Insn 62: point = 26, n_alt = 0
   Insn 61: point = 26, n_alt = 21
   Insn 60: point = 27, n_alt = 8
  BB 6
   Insn 224: point = 28, n_alt = -1
   Insn 55: point = 28, n_alt = 9
   Insn 54: point = 29, n_alt = 20
   Insn 53: point = 30, n_alt = 0
   Insn 52: point = 30, n_alt = 21
   Insn 51: point = 31, n_alt = 8
  BB 5
   Insn 222: point = 32, n_alt = -1
   Insn 46: point = 32, n_alt = 9
   Insn 45: point = 33, n_alt = 20
   Insn 44: point = 34, n_alt = 0
   Insn 43: point = 34, n_alt = 21
   Insn 42: point = 35, n_alt = 8
  BB 4
   Insn 220: point = 36, n_alt = -1
   Insn 37: point = 36, n_alt = 9
   Insn 36: point = 37, n_alt = 20
   Insn 35: point = 38, n_alt = 0
   Insn 34: point = 38, n_alt = 21
   Insn 33: point = 39, n_alt = 8
  BB 3
   Insn 27: point = 40, n_alt = 0
   Insn 26: point = 41, n_alt = 0
   Insn 25: point = 43, n_alt = 4
   Insn 24: point = 44, n_alt = 0
   Insn 23: point = 46, n_alt = 0
   Insn 22: point = 48, n_alt = 4
   Insn 21: point = 49, n_alt = 1
   Insn 20: point = 51, n_alt = 3
  BB 28
   Insn 257: point = 54, n_alt = -1
  BB 25
  BB 27
   Insn 255: point = 54, n_alt = -1
  BB 18
   Insn 239: point = 54, n_alt = -1
  BB 23
   Insn 249: point = 54, n_alt = -1
   Insn 191: point = 54, n_alt = 15
   Insn 190: point = 55, n_alt = 2
   Insn 188: point = 57, n_alt = -2
   Insn 187: point = 58, n_alt = 0
   Insn 186: point = 58, n_alt = 10
   Insn 185: point = 59, n_alt = -2
   Insn 261: point = 60, n_alt = 9
	Hard reg 0 is preferable by r143 with profit 1000
   Insn 184: point = 62, n_alt = 3
   Insn 183: point = 63, n_alt = 3
  BB 17
   Insn 149: point = 64, n_alt = -1
   Insn 148: point = 64, n_alt = 0
  BB 22
   Insn 247: point = 66, n_alt = -1
   Insn 178: point = 66, n_alt = 15
   Insn 177: point = 67, n_alt = 2
   Insn 176: point = 69, n_alt = 14
  BB 21
   Insn 245: point = 70, n_alt = -1
   Insn 171: point = 70, n_alt = 15
   Insn 170: point = 71, n_alt = 1
   Insn 169: point = 73, n_alt = 14
  BB 20
   Insn 243: point = 74, n_alt = -1
   Insn 164: point = 74, n_alt = 15
   Insn 163: point = 75, n_alt = 2
   Insn 162: point = 77, n_alt = 14
  BB 19
   Insn 241: point = 78, n_alt = -1
   Insn 157: point = 78, n_alt = 15
   Insn 156: point = 79, n_alt = 1
   Insn 155: point = 81, n_alt = 14
  BB 24
   Insn 251: point = 82, n_alt = -1
   Insn 202: point = 82, n_alt = 9
   Insn 201: point = 83, n_alt = 20
   Insn 200: point = 84, n_alt = 0
   Insn 199: point = 84, n_alt = 21
   Insn 198: point = 85, n_alt = -2
   Insn 197: point = 86, n_alt = 8
   Insn 196: point = 87, n_alt = 14
  BB 16
   Insn 142: point = 88, n_alt = 0
   Insn 141: point = 89, n_alt = 0
   Insn 140: point = 91, n_alt = 4
   Insn 139: point = 92, n_alt = 0
   Insn 138: point = 94, n_alt = 0
   Insn 137: point = 96, n_alt = 4
   Insn 136: point = 97, n_alt = 1
   Insn 135: point = 99, n_alt = 3
  BB 15
   Insn 134: point = 102, n_alt = -1
   Insn 133: point = 102, n_alt = 0
   Insn 130: point = 102, n_alt = 0
  BB 14
   Insn 128: point = 105, n_alt = -1
   Insn 127: point = 105, n_alt = 0
  BB 13
   Insn 123: point = 106, n_alt = -1
   Insn 122: point = 106, n_alt = 0
   Insn 119: point = 106, n_alt = 0
   Insn 118: point = 107, n_alt = 9
   Insn 117: point = 108, n_alt = 20
   Insn 116: point = 109, n_alt = 0
   Insn 115: point = 109, n_alt = -2
   Insn 114: point = 110, n_alt = 3
  BB 2
   Insn 19: point = 111, n_alt = -1
   Insn 18: point = 111, n_alt = 0
   Insn 15: point = 111, n_alt = 0
   Insn 14: point = 113, n_alt = 0
   Insn 13: point = 114, n_alt = 9
   Insn 12: point = 115, n_alt = 20
   Insn 11: point = 116, n_alt = 0
   Insn 10: point = 116, n_alt = -2
   Insn 9: point = 117, n_alt = 3
   Insn 5: point = 118, n_alt = 8
   Insn 4: point = 119, n_alt = 0
   Insn 3: point = 121, n_alt = -2
   Insn 2: point = 122, n_alt = 5
 r82: [112..113]
 r83: [103..106] [64..65]
 r84: [59..63]
 r85: [58..60]
 r86: [56..57]
 r87: [120..121]
 r88: [118..119]
 r89: [116..117]
 r90: [114..115]
 r91: [111..111] [52..53]
 r92: [50..51]
 r93: [47..49]
 r94: [47..48]
 r95: [45..46]
 r96: [42..44]
 r97: [40..41]
 r98: [42..43]
 r99: [38..39]
 r100: [36..37]
 r101: [34..35]
 r102: [32..33]
 r103: [30..31]
 r104: [28..29]
 r105: [26..27]
 r106: [24..25]
 r107: [22..23]
 r108: [20..21]
 r109: [18..19]
 r110: [16..17]
 r111: [14..15]
 r112: [12..13]
 r113: [10..11]
 r114: [8..9]
 r115: [6..7]
 r116: [4..5]
 r117: [109..110]
 r118: [107..108]
 r119: [100..102]
 r120: [98..99]
 r121: [95..97]
 r122: [95..96]
 r123: [93..94]
 r124: [90..92]
 r125: [88..89]
 r126: [90..91]
 r127: [78..79]
 r128: [80..81]
 r129: [74..75]
 r130: [76..77]
 r131: [70..71]
 r132: [72..73]
 r133: [66..67]
 r134: [68..69]
 r136: [54..55]
 r137: [85..87]
 r138: [84..86]
 r139: [82..83]
 r140: [1..3]
 r141: [0..2]
 r143: [61..62]
Compressing live ranges: from 122 to 109 - 89%
Ranges after the compression:
 r82: [99..100]
 r83: [92..93] [58..59]
 r84: [54..57]
 r85: [54..55]
 r86: [52..53]
 r87: [107..108]
 r88: [105..106]
 r89: [103..104]
 r90: [101..102]
 r91: [98..98] [48..49]
 r92: [46..47]
 r93: [44..45]
 r94: [44..45]
 r95: [42..43]
 r96: [40..41]
 r97: [38..39]
 r98: [40..41]
 r99: [36..37]
 r100: [34..35]
 r101: [32..33]
 r102: [30..31]
 r103: [28..29]
 r104: [26..27]
 r105: [24..25]
 r106: [22..23]
 r107: [20..21]
 r108: [18..19]
 r109: [16..17]
 r110: [14..15]
 r111: [12..13]
 r112: [10..11]
 r113: [8..9]
 r114: [6..7]
 r115: [4..5]
 r116: [2..3]
 r117: [96..97]
 r118: [94..95]
 r119: [90..91]
 r120: [88..89]
 r121: [86..87]
 r122: [86..87]
 r123: [84..85]
 r124: [82..83]
 r125: [80..81]
 r126: [82..83]
 r127: [72..73]
 r128: [74..75]
 r129: [68..69]
 r130: [70..71]
 r131: [64..65]
 r132: [66..67]
 r133: [60..61]
 r134: [62..63]
 r136: [50..51]
 r137: [78..79]
 r138: [78..79]
 r139: [76..77]
 r140: [0..1]
 r141: [0..1]
 r143: [56..57]

********** Assignment #1: **********

	 Assigning to 143 (cl=ALL_SSE_REGS, orig=85, freq=2000, tfirst=143, tfreq=2000)...
	   Assign 22 to reload r143 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=48, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 14
changing reg in insn 15
changing reg in insn 119
changing reg in insn 148
changing reg in insn 130
changing reg in insn 127
changing reg in insn 122
changing reg in insn 183
changing reg in insn 185
changing reg in insn 186
changing reg in insn 188
changing reg in insn 190
changing reg in insn 3
changing reg in insn 4
changing reg in insn 5
changing reg in insn 9
changing reg in insn 10
changing reg in insn 12
changing reg in insn 13
changing reg in insn 15
changing reg in insn 20
changing reg in insn 18
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 23
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 25
changing reg in insn 26
changing reg in insn 33
changing reg in insn 34
changing reg in insn 36
changing reg in insn 37
changing reg in insn 42
changing reg in insn 43
changing reg in insn 45
changing reg in insn 46
changing reg in insn 51
changing reg in insn 52
changing reg in insn 54
changing reg in insn 55
changing reg in insn 60
changing reg in insn 61
changing reg in insn 63
changing reg in insn 64
changing reg in insn 69
changing reg in insn 70
changing reg in insn 72
changing reg in insn 73
changing reg in insn 78
changing reg in insn 79
changing reg in insn 81
changing reg in insn 82
changing reg in insn 87
changing reg in insn 88
changing reg in insn 90
changing reg in insn 91
changing reg in insn 96
changing reg in insn 97
changing reg in insn 99
changing reg in insn 100
changing reg in insn 105
changing reg in insn 106
changing reg in insn 108
changing reg in insn 109
changing reg in insn 114
changing reg in insn 115
changing reg in insn 117
changing reg in insn 118
changing reg in insn 130
changing reg in insn 135
changing reg in insn 133
changing reg in insn 135
changing reg in insn 136
changing reg in insn 136
changing reg in insn 138
changing reg in insn 137
changing reg in insn 138
changing reg in insn 138
changing reg in insn 139
changing reg in insn 139
changing reg in insn 141
changing reg in insn 141
changing reg in insn 142
changing reg in insn 140
changing reg in insn 141
changing reg in insn 156
changing reg in insn 157
changing reg in insn 155
changing reg in insn 156
changing reg in insn 163
changing reg in insn 164
changing reg in insn 162
changing reg in insn 163
changing reg in insn 170
changing reg in insn 171
changing reg in insn 169
changing reg in insn 170
changing reg in insn 177
changing reg in insn 178
changing reg in insn 176
changing reg in insn 177
changing reg in insn 190
changing reg in insn 191
changing reg in insn 196
changing reg in insn 198
changing reg in insn 197
changing reg in insn 199
changing reg in insn 201
changing reg in insn 202
changing reg in insn 211
changing reg in insn 213
changing reg in insn 212
changing reg in insn 214
deleting insn with uid = 4.
deleting insn with uid = 188.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 35.
verify found no changes in insn with uid = 44.
verify found no changes in insn with uid = 53.
verify found no changes in insn with uid = 62.
verify found no changes in insn with uid = 71.
verify found no changes in insn with uid = 80.
verify found no changes in insn with uid = 89.
verify found no changes in insn with uid = 98.
verify found no changes in insn with uid = 107.
verify found no changes in insn with uid = 116.
verify found no changes in insn with uid = 187.
verify found no changes in insn with uid = 200.
verify found no changes in insn with uid = 215.


calc

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [xmm0] 21 [xmm1] 22 [xmm2]
;;  ref usage 	r0={56d,46u} r1={20d,5u} r2={15d} r4={15d,1u} r5={18d,4u} r6={1d,75u} r7={1d,43u} r8={14d} r9={14d} r10={14d} r11={14d} r12={14d} r13={14d} r14={14d} r15={14d} r17={25d,5u} r18={14d} r19={1d,1u} r20={38d,36u} r21={17d,2u} r22={16d,1u} r23={15d} r24={15d} r25={15d} r26={15d} r27={15d} r28={14d} r29={14d} r30={14d} r31={14d} r32={14d} r33={14d} r34={14d} r35={14d} r36={15d} r37={15d} r38={14d} r39={14d} r44={14d} r45={14d} r46={14d} r47={14d} r48={14d} r49={14d} r50={14d} r51={14d} r52={14d} r53={14d} r54={14d} r55={14d} r56={14d} r57={14d} r58={14d} r59={14d} r60={14d} r61={14d} r62={14d} r63={14d} r64={14d} r65={14d} r66={14d} r67={14d} r68={14d} r69={14d} r70={14d} r71={14d} r72={14d} r73={14d} r74={14d} r75={14d} 
;;    total ref usage 1261{1042d,219u,0e} in 139{125 regular + 14 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 87 88 89 90 91
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 Stack_double+0 S8 A64])
        (reg:DI 5 di [ Stack_double ])) "calc.c":46:1 74 {*movdi_internal}
     (nil))
(insn 3 2 5 2 (set (reg:SI 0 ax [87])
        (reg:SI 4 si [ func ])) "calc.c":46:1 75 {*movsi_internal}
     (nil))
(insn 5 3 6 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 func+0 S1 A32])
        (reg:QI 0 ax [88])) "calc.c":46:1 77 {*movqi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg:DI 0 ax [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 Stack_double+0 S8 A64])) "calc.c":48:26 74 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [89])) "calc.c":48:26 74 {*movdi_internal}
     (nil))
(call_insn 11 10 12 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("Fpop") [flags 0x41]  <function_decl 0x7f09f164ee00 Fpop>) [0 Fpop S1 A8])
            (const_int 0 [0]))) "calc.c":48:26 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 12 11 13 2 (set (reg:DF 0 ax [90])
        (reg:DF 20 xmm0)) "calc.c":48:26 135 {*movdf_internal}
     (nil))
(insn 13 12 14 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64])
        (reg:DF 0 ax [90])) "calc.c":48:26 135 {*movdf_internal}
     (nil))
(insn 14 13 15 2 (set (reg:SI 0 ax [orig:82 _1 ] [82])
        (sign_extend:SI (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [0 func+0 S1 A32]))) "calc.c":49:5 153 {extendqisi2}
     (nil))
(insn 15 14 18 2 (parallel [
            (set (reg:SI 0 ax [91])
                (plus:SI (reg:SI 0 ax [orig:82 _1 ] [82])
                    (const_int -65 [0xffffffffffffffbf])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":49:5 209 {*addsi_1}
     (nil))
(insn 18 15 19 2 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [91])
            (const_int 8 [0x8]))) "calc.c":49:5 11 {*cmpsi_1}
     (nil))
(jump_insn 19 18 218 2 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 112)
            (pc))) "calc.c":49:5 806 {*jcc}
     (nil)
 -> 112)
;;  succ:       13
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 91

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 91
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 91
;; lr  def 	 17 [flags] 92 93 94 95 96 97 98
(note 218 19 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 20 218 21 3 (set (reg:DI 0 ax [92])
        (zero_extend:DI (reg:SI 0 ax [91]))) "calc.c":49:5 138 {*zero_extendsidi2}
     (nil))
(insn 21 20 22 3 (parallel [
            (set (reg:DI 1 dx [93])
                (ashift:DI (reg:DI 0 ax [92])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":49:5 656 {*ashldi3_1}
     (nil))
(insn 22 21 23 3 (set (reg:DI 0 ax [94])
        (label_ref:DI 28)) "calc.c":49:5 74 {*movdi_internal}
     (insn_list:REG_LABEL_OPERAND 28 (nil)))
(insn 23 22 24 3 (set (reg:SI 0 ax [95])
        (mem/u/c:SI (plus:DI (reg:DI 1 dx [93])
                (reg:DI 0 ax [94])) [0  S4 A8])) "calc.c":49:5 75 {*movsi_internal}
     (nil))
(insn 24 23 25 3 (set (reg:DI 0 ax [96])
        (sign_extend:DI (reg:SI 0 ax [95]))) "calc.c":49:5 147 {*extendsidi2_rex64}
     (nil))
(insn 25 24 26 3 (set (reg:DI 1 dx [98])
        (label_ref:DI 28)) "calc.c":49:5 74 {*movdi_internal}
     (insn_list:REG_LABEL_OPERAND 28 (nil)))
(insn 26 25 27 3 (parallel [
            (set (reg:DI 0 ax [97])
                (plus:DI (reg:DI 0 ax [96])
                    (reg:DI 1 dx [98])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":49:5 210 {*adddi_1}
     (nil))
(jump_insn 27 26 28 3 (parallel [
            (set (pc)
                (reg:DI 0 ax [97]))
            (use (label_ref 28))
        ]) "calc.c":49:5 811 {*tablejump_1}
     (nil)
 -> 28)
;;  succ:       12 [11.1% (adjusted)] 
;;              4 [11.1% (adjusted)] 
;;              5 [11.1% (adjusted)] 
;;              6 [11.1% (adjusted)] 
;;              7 [11.1% (adjusted)] 
;;              8 [11.1% (adjusted)] 
;;              9 [11.1% (adjusted)] 
;;              10 [11.1% (adjusted)] 
;;              11 [11.1% (adjusted)] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; Insn is not within a basic block
(code_label 28 27 29 18 (nil) [3 uses])
;; Insn is not within a basic block
(jump_table_data 29 28 30 (addr_diff_vec:SI (label_ref:DI 28)
         [
            (label_ref:DI 31)
            (label_ref:DI 40)
            (label_ref:DI 49)
            (label_ref:DI 58)
            (label_ref:DI 67)
            (label_ref:DI 76)
            (label_ref:DI 85)
            (label_ref:DI 94)
            (label_ref:DI 103)
        ]
        (const_int 0 [0])
        (const_int 0 [0])))
(barrier 30 29 31)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 [11.1% (adjusted)] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 99 100
(code_label 31 30 32 4 26 (nil) [1 uses])
(note 32 31 33 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 4 (set (reg:DF 0 ax [99])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64])) "calc.c":52:15 135 {*movdf_internal}
     (nil))
(insn 34 33 35 4 (set (reg:DF 20 xmm0)
        (reg:DF 0 ax [99])) "calc.c":52:15 135 {*movdf_internal}
     (nil))
(call_insn/u 35 34 36 4 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x7f09f17d3700 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) "calc.c":52:15 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 36 35 37 4 (set (reg:DF 0 ax [100])
        (reg:DF 20 xmm0)) "calc.c":52:15 135 {*movdf_internal}
     (nil))
(insn 37 36 220 4 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])
        (reg:DF 0 ax [100])) "calc.c":52:15 135 {*movdf_internal}
     (nil))
(jump_insn 220 37 221 4 (set (pc)
        (label_ref 209)) "calc.c":53:9 807 {jump}
     (nil)
 -> 209)
;;  succ:       26 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 221 220 40)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3 [11.1% (adjusted)] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 101 102
(code_label 40 221 41 5 25 (nil) [1 uses])
(note 41 40 42 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 5 (set (reg:DF 0 ax [101])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64])) "calc.c":55:15 135 {*movdf_internal}
     (nil))
(insn 43 42 44 5 (set (reg:DF 20 xmm0)
        (reg:DF 0 ax [101])) "calc.c":55:15 135 {*movdf_internal}
     (nil))
(call_insn/u 44 43 45 5 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x7f09f1814a00 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) "calc.c":55:15 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 45 44 46 5 (set (reg:DF 0 ax [102])
        (reg:DF 20 xmm0)) "calc.c":55:15 135 {*movdf_internal}
     (nil))
(insn 46 45 222 5 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])
        (reg:DF 0 ax [102])) "calc.c":55:15 135 {*movdf_internal}
     (nil))
(jump_insn 222 46 223 5 (set (pc)
        (label_ref 209)) "calc.c":56:9 807 {jump}
     (nil)
 -> 209)
;;  succ:       26 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 223 222 49)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       3 [11.1% (adjusted)] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 103 104
(code_label 49 223 50 6 24 (nil) [1 uses])
(note 50 49 51 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 6 (set (reg:DF 0 ax [103])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64])) "calc.c":58:15 135 {*movdf_internal}
     (nil))
(insn 52 51 53 6 (set (reg:DF 20 xmm0)
        (reg:DF 0 ax [103])) "calc.c":58:15 135 {*movdf_internal}
     (nil))
(call_insn/u 53 52 54 6 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("tan") [flags 0x41]  <function_decl 0x7f09f1819c00 tan>) [0 __builtin_tan S1 A8])
            (const_int 0 [0]))) "calc.c":58:15 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 54 53 55 6 (set (reg:DF 0 ax [104])
        (reg:DF 20 xmm0)) "calc.c":58:15 135 {*movdf_internal}
     (nil))
(insn 55 54 224 6 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])
        (reg:DF 0 ax [104])) "calc.c":58:15 135 {*movdf_internal}
     (nil))
(jump_insn 224 55 225 6 (set (pc)
        (label_ref 209)) "calc.c":59:9 807 {jump}
     (nil)
 -> 209)
;;  succ:       26 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 225 224 58)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       3 [11.1% (adjusted)] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 105 106
(code_label 58 225 59 7 23 (nil) [1 uses])
(note 59 58 60 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 7 (set (reg:DF 0 ax [105])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64])) "calc.c":61:15 135 {*movdf_internal}
     (nil))
(insn 61 60 62 7 (set (reg:DF 20 xmm0)
        (reg:DF 0 ax [105])) "calc.c":61:15 135 {*movdf_internal}
     (nil))
(call_insn 62 61 63 7 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("acos") [flags 0x41]  <function_decl 0x7f09f1787500 acos>) [0 __builtin_acos S1 A8])
            (const_int 0 [0]))) "calc.c":61:15 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 63 62 64 7 (set (reg:DF 0 ax [106])
        (reg:DF 20 xmm0)) "calc.c":61:15 135 {*movdf_internal}
     (nil))
(insn 64 63 226 7 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])
        (reg:DF 0 ax [106])) "calc.c":61:15 135 {*movdf_internal}
     (nil))
(jump_insn 226 64 227 7 (set (pc)
        (label_ref 209)) "calc.c":62:9 807 {jump}
     (nil)
 -> 209)
;;  succ:       26 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 227 226 67)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       3 [11.1% (adjusted)] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 107 108
(code_label 67 227 68 8 22 (nil) [1 uses])
(note 68 67 69 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 8 (set (reg:DF 0 ax [107])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64])) "calc.c":64:15 135 {*movdf_internal}
     (nil))
(insn 70 69 71 8 (set (reg:DF 20 xmm0)
        (reg:DF 0 ax [107])) "calc.c":64:15 135 {*movdf_internal}
     (nil))
(call_insn 71 70 72 8 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("asin") [flags 0x41]  <function_decl 0x7f09f17cb300 asin>) [0 __builtin_asin S1 A8])
            (const_int 0 [0]))) "calc.c":64:15 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 72 71 73 8 (set (reg:DF 0 ax [108])
        (reg:DF 20 xmm0)) "calc.c":64:15 135 {*movdf_internal}
     (nil))
(insn 73 72 228 8 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])
        (reg:DF 0 ax [108])) "calc.c":64:15 135 {*movdf_internal}
     (nil))
(jump_insn 228 73 229 8 (set (pc)
        (label_ref 209)) "calc.c":65:9 807 {jump}
     (nil)
 -> 209)
;;  succ:       26 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 229 228 76)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       3 [11.1% (adjusted)] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 109 110
(code_label 76 229 77 9 21 (nil) [1 uses])
(note 77 76 78 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 78 77 79 9 (set (reg:DF 0 ax [109])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64])) "calc.c":67:15 135 {*movdf_internal}
     (nil))
(insn 79 78 80 9 (set (reg:DF 20 xmm0)
        (reg:DF 0 ax [109])) "calc.c":67:15 135 {*movdf_internal}
     (nil))
(call_insn/u 80 79 81 9 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan") [flags 0x41]  <function_decl 0x7f09f17cbf00 atan>) [0 __builtin_atan S1 A8])
            (const_int 0 [0]))) "calc.c":67:15 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 81 80 82 9 (set (reg:DF 0 ax [110])
        (reg:DF 20 xmm0)) "calc.c":67:15 135 {*movdf_internal}
     (nil))
(insn 82 81 230 9 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])
        (reg:DF 0 ax [110])) "calc.c":67:15 135 {*movdf_internal}
     (nil))
(jump_insn 230 82 231 9 (set (pc)
        (label_ref 209)) "calc.c":68:9 807 {jump}
     (nil)
 -> 209)
;;  succ:       26 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 231 230 85)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       3 [11.1% (adjusted)] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 111 112
(code_label 85 231 86 10 20 (nil) [1 uses])
(note 86 85 87 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 88 10 (set (reg:DF 0 ax [111])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64])) "calc.c":70:15 135 {*movdf_internal}
     (nil))
(insn 88 87 89 10 (set (reg:DF 20 xmm0)
        (reg:DF 0 ax [111])) "calc.c":70:15 135 {*movdf_internal}
     (nil))
(call_insn 89 88 90 10 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x7f09f1816c00 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) "calc.c":70:15 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 90 89 91 10 (set (reg:DF 0 ax [112])
        (reg:DF 20 xmm0)) "calc.c":70:15 135 {*movdf_internal}
     (nil))
(insn 91 90 232 10 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])
        (reg:DF 0 ax [112])) "calc.c":70:15 135 {*movdf_internal}
     (nil))
(jump_insn 232 91 233 10 (set (pc)
        (label_ref 209)) "calc.c":71:9 807 {jump}
     (nil)
 -> 209)
;;  succ:       26 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 233 232 94)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       3 [11.1% (adjusted)] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 113 114
(code_label 94 233 95 11 19 (nil) [1 uses])
(note 95 94 96 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 96 95 97 11 (set (reg:DF 0 ax [113])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64])) "calc.c":73:15 135 {*movdf_internal}
     (nil))
(insn 97 96 98 11 (set (reg:DF 20 xmm0)
        (reg:DF 0 ax [113])) "calc.c":73:15 135 {*movdf_internal}
     (nil))
(call_insn 98 97 99 11 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("log") [flags 0x41]  <function_decl 0x7f09f17f9e00 log>) [0 __builtin_log S1 A8])
            (const_int 0 [0]))) "calc.c":73:15 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 99 98 100 11 (set (reg:DF 0 ax [114])
        (reg:DF 20 xmm0)) "calc.c":73:15 135 {*movdf_internal}
     (nil))
(insn 100 99 234 11 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])
        (reg:DF 0 ax [114])) "calc.c":73:15 135 {*movdf_internal}
     (nil))
(jump_insn 234 100 235 11 (set (pc)
        (label_ref 209)) "calc.c":74:9 807 {jump}
     (nil)
 -> 209)
;;  succ:       26 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 235 234 103)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       3 [11.1% (adjusted)] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 115 116
(code_label 103 235 104 12 17 (nil) [1 uses])
(note 104 103 105 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 12 (set (reg:DF 0 ax [115])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64])) "calc.c":76:15 135 {*movdf_internal}
     (nil))
(insn 106 105 107 12 (set (reg:DF 20 xmm0)
        (reg:DF 0 ax [115])) "calc.c":76:15 135 {*movdf_internal}
     (nil))
(call_insn 107 106 108 12 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("log10") [flags 0x41]  <function_decl 0x7f09f17fa000 log10>) [0 __builtin_log10 S1 A8])
            (const_int 0 [0]))) "calc.c":76:15 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 108 107 109 12 (set (reg:DF 0 ax [116])
        (reg:DF 20 xmm0)) "calc.c":76:15 135 {*movdf_internal}
     (nil))
(insn 109 108 236 12 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])
        (reg:DF 0 ax [116])) "calc.c":76:15 135 {*movdf_internal}
     (nil))
(jump_insn 236 109 237 12 (set (pc)
        (label_ref 209)) "calc.c":77:9 807 {jump}
     (nil)
 -> 209)
;;  succ:       26 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 237 236 112)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 83 117 118
(code_label 112 237 113 13 16 (nil) [1 uses])
(note 113 112 114 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 114 113 115 13 (set (reg:DI 0 ax [117])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 Stack_double+0 S8 A64])) "calc.c":82:29 74 {*movdi_internal}
     (nil))
(insn 115 114 116 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [117])) "calc.c":82:29 74 {*movdi_internal}
     (nil))
(call_insn 116 115 117 13 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("Fpop") [flags 0x41]  <function_decl 0x7f09f164ee00 Fpop>) [0 Fpop S1 A8])
            (const_int 0 [0]))) "calc.c":82:29 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 117 116 118 13 (set (reg:DF 0 ax [118])
        (reg:DF 20 xmm0)) "calc.c":82:29 135 {*movdf_internal}
     (nil))
(insn 118 117 119 13 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 left_token+0 S8 A64])
        (reg:DF 0 ax [118])) "calc.c":82:29 135 {*movdf_internal}
     (nil))
(insn 119 118 122 13 (set (reg:SI 0 ax [orig:83 _2 ] [83])
        (sign_extend:SI (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])) [0 func+0 S1 A32]))) "calc.c":84:9 153 {extendqisi2}
     (nil))
(insn 122 119 123 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:83 _2 ] [83])
            (const_int 47 [0x2f]))) 11 {*cmpsi_1}
     (nil))
(jump_insn 123 122 124 13 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 146)
            (pc))) 806 {*jcc}
     (nil)
 -> 146)
;;  succ:       14 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83
;; lr  def 	 17 [flags]
(note 124 123 127 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 127 124 128 14 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:83 _2 ] [83])
            (const_int 37 [0x25]))) 11 {*cmpsi_1}
     (nil))
(jump_insn 128 127 129 14 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 254)
            (pc))) 806 {*jcc}
     (nil)
 -> 254)
;;  succ:       27
;;              15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83
;; lr  def 	 17 [flags] 119
(note 129 128 130 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 130 129 133 15 (parallel [
            (set (reg:SI 0 ax [119])
                (plus:SI (reg:SI 0 ax [orig:83 _2 ] [83])
                    (const_int -37 [0xffffffffffffffdb])))
            (clobber (reg:CC 17 flags))
        ]) 209 {*addsi_1}
     (nil))
(insn 133 130 134 15 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [119])
            (const_int 10 [0xa]))) 11 {*cmpsi_1}
     (nil))
(jump_insn 134 133 219 15 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 254)
            (pc))) 806 {*jcc}
     (nil)
 -> 254)
;;  succ:       27
;;              16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 119

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 119
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 119
;; lr  def 	 17 [flags] 120 121 122 123 124 125 126
(note 219 134 135 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 135 219 136 16 (set (reg:DI 0 ax [120])
        (zero_extend:DI (reg:SI 0 ax [119]))) 138 {*zero_extendsidi2}
     (nil))
(insn 136 135 137 16 (parallel [
            (set (reg:DI 1 dx [121])
                (ashift:DI (reg:DI 0 ax [120])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 656 {*ashldi3_1}
     (nil))
(insn 137 136 138 16 (set (reg:DI 0 ax [122])
        (label_ref:DI 143)) 74 {*movdi_internal}
     (insn_list:REG_LABEL_OPERAND 143 (nil)))
(insn 138 137 139 16 (set (reg:SI 0 ax [123])
        (mem/u/c:SI (plus:DI (reg:DI 1 dx [121])
                (reg:DI 0 ax [122])) [0  S4 A8])) 75 {*movsi_internal}
     (nil))
(insn 139 138 140 16 (set (reg:DI 0 ax [124])
        (sign_extend:DI (reg:SI 0 ax [123]))) 147 {*extendsidi2_rex64}
     (nil))
(insn 140 139 141 16 (set (reg:DI 1 dx [126])
        (label_ref:DI 143)) 74 {*movdi_internal}
     (insn_list:REG_LABEL_OPERAND 143 (nil)))
(insn 141 140 142 16 (parallel [
            (set (reg:DI 0 ax [125])
                (plus:DI (reg:DI 0 ax [124])
                    (reg:DI 1 dx [126])))
            (clobber (reg:CC 17 flags))
        ]) 210 {*adddi_1}
     (nil))
(jump_insn 142 141 143 16 (parallel [
            (set (pc)
                (reg:DI 0 ax [125]))
            (use (label_ref 143))
        ]) 811 {*tablejump_1}
     (nil)
 -> 143)
;;  succ:       27 [37.5% (adjusted)] 
;;              24 [12.5% (adjusted)] 
;;              21 [12.5% (adjusted)] 
;;              19 [12.5% (adjusted)] 
;;              20 [12.5% (adjusted)] 
;;              22 [12.5% (adjusted)] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; Insn is not within a basic block
(code_label 143 142 144 31 (nil) [3 uses])
;; Insn is not within a basic block
(jump_table_data 144 143 145 (addr_diff_vec:SI (label_ref:DI 143)
         [
            (label_ref:DI 194)
            (label_ref:DI 254)
            (label_ref:DI 254)
            (label_ref:DI 254)
            (label_ref:DI 254)
            (label_ref:DI 167)
            (label_ref:DI 153)
            (label_ref:DI 254)
            (label_ref:DI 160)
            (label_ref:DI 254)
            (label_ref:DI 174)
        ]
        (const_int 0 [0])
        (const_int 0 [0])))
(barrier 145 144 146)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       13
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83
;; lr  def 	 17 [flags]
(code_label 146 145 147 17 28 (nil) [1 uses])
(note 147 146 148 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 148 147 149 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:83 _2 ] [83])
            (const_int 94 [0x5e]))) 11 {*cmpsi_1}
     (nil))
(jump_insn 149 148 238 17 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 181)
            (pc))) 806 {*jcc}
     (nil)
 -> 181)
;;  succ:       18 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 238 149 239 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(jump_insn 239 238 240 18 (set (pc)
        (label_ref:DI 254)) "calc.c":107:13 807 {jump}
     (nil)
 -> 254)
;;  succ:       27 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 240 239 153)
;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       16 [12.5% (adjusted)] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 127 128
(code_label 153 240 154 19 33 (nil) [1 uses])
(note 154 153 155 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 155 154 156 19 (set (reg:DF 20 xmm0 [128])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64])) "calc.c":87:17 135 {*movdf_internal}
     (nil))
(insn 156 155 157 19 (set (reg:DF 20 xmm0 [127])
        (plus:DF (reg:DF 20 xmm0 [128])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [2 left_token+0 S8 A64]))) "calc.c":87:17 981 {*fop_df_comm}
     (nil))
(insn 157 156 241 19 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])
        (reg:DF 20 xmm0 [127])) "calc.c":87:17 135 {*movdf_internal}
     (nil))
(jump_insn 241 157 242 19 (set (pc)
        (label_ref 207)) "calc.c":88:13 807 {jump}
     (nil)
 -> 207)
;;  succ:       25 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 242 241 160)
;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       16 [12.5% (adjusted)] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 129 130
(code_label 160 242 161 20 32 (nil) [1 uses])
(note 161 160 162 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 162 161 163 20 (set (reg:DF 20 xmm0 [130])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 left_token+0 S8 A64])) "calc.c":90:17 135 {*movdf_internal}
     (nil))
(insn 163 162 164 20 (set (reg:DF 20 xmm0 [129])
        (minus:DF (reg:DF 20 xmm0 [130])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64]))) "calc.c":90:17 985 {*fop_df_1}
     (nil))
(insn 164 163 243 20 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])
        (reg:DF 20 xmm0 [129])) "calc.c":90:17 135 {*movdf_internal}
     (nil))
(jump_insn 243 164 244 20 (set (pc)
        (label_ref 207)) "calc.c":91:13 807 {jump}
     (nil)
 -> 207)
;;  succ:       25 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 244 243 167)
;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       16 [12.5% (adjusted)] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 131 132
(code_label 167 244 168 21 34 (nil) [1 uses])
(note 168 167 169 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 169 168 170 21 (set (reg:DF 20 xmm0 [132])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64])) "calc.c":93:17 135 {*movdf_internal}
     (nil))
(insn 170 169 171 21 (set (reg:DF 20 xmm0 [131])
        (mult:DF (reg:DF 20 xmm0 [132])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [2 left_token+0 S8 A64]))) "calc.c":93:17 981 {*fop_df_comm}
     (nil))
(insn 171 170 245 21 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])
        (reg:DF 20 xmm0 [131])) "calc.c":93:17 135 {*movdf_internal}
     (nil))
(jump_insn 245 171 246 21 (set (pc)
        (label_ref 207)) "calc.c":94:13 807 {jump}
     (nil)
 -> 207)
;;  succ:       25 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 246 245 174)
;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       16 [12.5% (adjusted)] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 133 134
(code_label 174 246 175 22 30 (nil) [1 uses])
(note 175 174 176 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 176 175 177 22 (set (reg:DF 20 xmm0 [134])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 left_token+0 S8 A64])) "calc.c":96:17 135 {*movdf_internal}
     (nil))
(insn 177 176 178 22 (set (reg:DF 20 xmm0 [133])
        (div:DF (reg:DF 20 xmm0 [134])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64]))) "calc.c":96:17 985 {*fop_df_1}
     (nil))
(insn 178 177 247 22 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])
        (reg:DF 20 xmm0 [133])) "calc.c":96:17 135 {*movdf_internal}
     (nil))
(jump_insn 247 178 248 22 (set (pc)
        (label_ref 207)) "calc.c":97:13 807 {jump}
     (nil)
 -> 207)
;;  succ:       25 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 248 247 181)
;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       17
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 84 85 86 136
(code_label 181 248 182 23 36 (nil) [1 uses])
(note 182 181 183 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 183 182 184 23 (set (reg:SF 20 xmm0 [orig:84 _3 ] [84])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [2 left_token+0 S8 A64]))) "calc.c":99:19 159 {truncdfsf2}
     (nil))
(insn 184 183 261 23 (set (reg:SF 22 xmm2 [orig:85 _4 ] [85])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64]))) "calc.c":99:19 159 {truncdfsf2}
     (nil))
(insn 261 184 185 23 (set (reg:SF 0 ax [orig:85 _4 ] [85])
        (reg:SF 22 xmm2 [orig:85 _4 ] [85])) "calc.c":99:19 136 {*movsf_internal}
     (nil))
(insn 185 261 186 23 (set (reg:SF 21 xmm1)
        (reg:SF 20 xmm0 [orig:84 _3 ] [84])) "calc.c":99:19 136 {*movsf_internal}
     (nil))
(insn 186 185 187 23 (set (reg:SF 20 xmm0)
        (reg:SF 0 ax [orig:85 _4 ] [85])) "calc.c":99:19 136 {*movsf_internal}
     (nil))
(call_insn 187 186 190 23 (set (reg:SF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("powf") [flags 0x41]  <function_decl 0x7f09f1809300 powf>) [0 __builtin_powf S1 A8])
            (const_int 0 [0]))) "calc.c":99:19 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SF (use (reg:SF 20 xmm0))
        (expr_list:SF (use (reg:SF 21 xmm1))
            (nil))))
(insn 190 187 191 23 (set (reg:DF 20 xmm0 [136])
        (float_extend:DF (reg:SF 20 xmm0 [orig:86 _5 ] [86]))) "calc.c":99:17 156 {*extendsfdf2}
     (nil))
(insn 191 190 249 23 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])
        (reg:DF 20 xmm0 [136])) "calc.c":99:17 135 {*movdf_internal}
     (nil))
(jump_insn 249 191 250 23 (set (pc)
        (label_ref 207)) "calc.c":100:13 807 {jump}
     (nil)
 -> 207)
;;  succ:       25 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 250 249 194)
;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 27, flags: (RTL, MODIFIED)
;;  pred:       16 [12.5% (adjusted)] 
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 137 138 139
(code_label 194 250 195 24 35 (nil) [1 uses])
(note 195 194 196 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 196 195 197 24 (set (reg:DF 20 xmm0 [137])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 left_token+0 S8 A64])) "calc.c":102:19 135 {*movdf_internal}
     (nil))
(insn 197 196 198 24 (set (reg:DF 0 ax [138])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64])) "calc.c":102:19 135 {*movdf_internal}
     (nil))
(insn 198 197 199 24 (set (reg:DF 21 xmm1)
        (reg:DF 20 xmm0 [137])) "calc.c":102:19 135 {*movdf_internal}
     (nil))
(insn 199 198 200 24 (set (reg:DF 20 xmm0)
        (reg:DF 0 ax [138])) "calc.c":102:19 135 {*movdf_internal}
     (nil))
(call_insn 200 199 201 24 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("fmod") [flags 0x41]  <function_decl 0x7f09f17e6f00 fmod>) [0 __builtin_fmod S1 A8])
            (const_int 0 [0]))) "calc.c":102:19 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (expr_list:DF (use (reg:DF 21 xmm1))
            (nil))))
(insn 201 200 202 24 (set (reg:DF 0 ax [139])
        (reg:DF 20 xmm0)) "calc.c":102:19 135 {*movdf_internal}
     (nil))
(insn 202 201 251 24 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])
        (reg:DF 0 ax [139])) "calc.c":102:19 135 {*movdf_internal}
     (nil))
(jump_insn 251 202 252 24 (set (pc)
        (label_ref 207)) "calc.c":103:13 807 {jump}
     (nil)
 -> 207)
;;  succ:       25 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 252 251 254)
;; basic block 27, loop depth 0, maybe hot
;;  prev block 24, next block 25, flags: (RTL, MODIFIED)
;;  pred:       14
;;              18 [always] 
;;              16 [37.5% (adjusted)] 
;;              15
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 254 252 253 27 38 (nil) [9 uses])
(note 253 254 255 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 255 253 207 27 (const_int 0 [0]) "calc.c":107:13 843 {nop}
     (nil))
;;  succ:       25 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 25, loop depth 0, maybe hot
;;  prev block 27, next block 28, flags: (RTL, MODIFIED)
;;  pred:       24 [always] 
;;              19 [always] 
;;              20 [always] 
;;              21 [always] 
;;              22 [always] 
;;              23 [always] 
;;              27 [always]  (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 207 255 208 25 37 (nil) [6 uses])
(note 208 207 256 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
;;  succ:       28 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 28, loop depth 0, maybe hot
;;  prev block 25, next block 26, flags: (RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 256 208 257 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 257 256 209 28 (const_int 0 [0]) "calc.c":110:5 843 {nop}
     (nil))
;;  succ:       26 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 26, loop depth 0, maybe hot
;;  prev block 28, next block 29, flags: (RTL, MODIFIED)
;;  pred:       28 [always]  (FALLTHRU)
;;              4 [always] 
;;              5 [always] 
;;              6 [always] 
;;              7 [always] 
;;              8 [always] 
;;              9 [always] 
;;              10 [always] 
;;              11 [always] 
;;              12 [always] 
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 140 141
(code_label 209 257 210 26 27 (nil) [9 uses])
(note 210 209 211 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 211 210 212 26 (set (reg:DF 1 dx [140])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])) "calc.c":113:5 135 {*movdf_internal}
     (nil))
(insn 212 211 213 26 (set (reg:DI 0 ax [141])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [3 Stack_double+0 S8 A64])) "calc.c":113:5 74 {*movdi_internal}
     (nil))
(insn 213 212 214 26 (set (reg:DF 20 xmm0)
        (reg:DF 1 dx [140])) "calc.c":113:5 135 {*movdf_internal}
     (nil))
(insn 214 213 215 26 (set (reg:DI 5 di)
        (reg:DI 0 ax [141])) "calc.c":113:5 74 {*movdi_internal}
     (nil))
(call_insn 215 214 258 26 (call (mem:QI (symbol_ref:DI ("Fpush") [flags 0x41]  <function_decl 0x7f09f164ed00 Fpush>) [0 Fpush S1 A8])
        (const_int 0 [0])) "calc.c":113:5 813 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DF (use (reg:DF 20 xmm0))
            (nil))))
;;  succ:       29 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 29, loop depth 0, maybe hot
;;  prev block 26, next block 1, flags: (RTL, MODIFIED)
;;  pred:       26 [always]  (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 258 215 259 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 259 258 260 29 (const_int 0 [0]) "calc.c":115:1 843 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 260 259 0 NOTE_INSN_DELETED)

;; Function push_func (push_func, funcdef_no=10, decl_uid=4504, cgraph_uid=11, symbol_order=10)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =Q  (1) Q {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 6:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) qm {extendqisi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) =Q  (1) Q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) =r  (1) qm {extendqisi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) =r  (1) qm {extendqisi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 48:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 52:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 57:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 65:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 78:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) =r  (1) qm {extendqisi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 83:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 87:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 97:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 99:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) =r  (1) qm {extendqisi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 102:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 106:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 111:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 112:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 116:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 120:  (0) =r  (1) qm {extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 122:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) =r  (1) qm {extendqisi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 127:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =Q  (1) Q {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 133:  (0) =r  (1) qm {extendqisi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 134:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 137:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5 6
EBB 7
EBB 8 9 10
EBB 11
EBB 12
EBB 13 14
EBB 15
EBB 17
EBB 16

********** Pseudo live ranges #1: **********

  BB 16
  BB 17
   Insn 154: point = 0, n_alt = -1
  BB 4
   Insn 142: point = 0, n_alt = -1
   Insn 32: point = 0, n_alt = 0
   Insn 31: point = 0, n_alt = -2
   Insn 30: point = 1, n_alt = -2
   Insn 29: point = 2, n_alt = 3
   Insn 28: point = 3, n_alt = 0
   Insn 27: point = 5, n_alt = 0
   Insn 26: point = 7, n_alt = 0
   Insn 25: point = 8, n_alt = 0
   Insn 24: point = 8, n_alt = -2
   Insn 23: point = 9, n_alt = -2
   Insn 22: point = 10, n_alt = 3
   Insn 21: point = 11, n_alt = 0
  BB 15
   Insn 137: point = 12, n_alt = 0
   Insn 136: point = 12, n_alt = -2
   Insn 135: point = 13, n_alt = -2
   Insn 134: point = 14, n_alt = 3
   Insn 133: point = 15, n_alt = 0
   Insn 132: point = 17, n_alt = 0
   Insn 131: point = 19, n_alt = 0
   Insn 130: point = 20, n_alt = 0
   Insn 129: point = 20, n_alt = -2
   Insn 128: point = 21, n_alt = -2
   Insn 127: point = 22, n_alt = 3
   Insn 126: point = 23, n_alt = 0
  BB 13
   Insn 114: point = 24, n_alt = -1
   Insn 113: point = 24, n_alt = 0
   Insn 112: point = 25, n_alt = 3
   Insn 111: point = 27, n_alt = 3
  BB 11
   Insn 148: point = 28, n_alt = -1
  BB 12
   Insn 108: point = 28, n_alt = 0
   Insn 107: point = 28, n_alt = -2
   Insn 106: point = 29, n_alt = 3
   Insn 105: point = 30, n_alt = 0
   Insn 104: point = 30, n_alt = -2
   Insn 103: point = 31, n_alt = -2
   Insn 102: point = 32, n_alt = 3
   Insn 101: point = 33, n_alt = 0
   Insn 100: point = 35, n_alt = -2
   Insn 99: point = 36, n_alt = 0
   Insn 98: point = 36, n_alt = -2
   Insn 97: point = 37, n_alt = 3
  BB 14
   Insn 123: point = 38, n_alt = -1
   Insn 122: point = 38, n_alt = 0
   Insn 120: point = 39, n_alt = 0
   Insn 119: point = 41, n_alt = -2
   Insn 118: point = 42, n_alt = 0
   Insn 117: point = 42, n_alt = -2
   Insn 116: point = 43, n_alt = 3
  BB 10
   Insn 146: point = 44, n_alt = -1
   Insn 89: point = 44, n_alt = 0
   Insn 88: point = 44, n_alt = -2
   Insn 87: point = 45, n_alt = 3
   Insn 86: point = 46, n_alt = 0
   Insn 85: point = 46, n_alt = -2
   Insn 84: point = 47, n_alt = -2
   Insn 83: point = 48, n_alt = 3
   Insn 82: point = 49, n_alt = 0
   Insn 81: point = 51, n_alt = -2
   Insn 80: point = 52, n_alt = 0
   Insn 79: point = 52, n_alt = -2
   Insn 78: point = 53, n_alt = 3
  BB 9
   Insn 76: point = 54, n_alt = -1
   Insn 75: point = 54, n_alt = 0
   Insn 74: point = 55, n_alt = -2
   Insn 73: point = 56, n_alt = 0
   Insn 72: point = 56, n_alt = -2
   Insn 71: point = 57, n_alt = 3
   Insn 70: point = 58, n_alt = 0
   Insn 69: point = 58, n_alt = -2
   Insn 68: point = 59, n_alt = 3
   Insn 67: point = 60, n_alt = 0
   Insn 66: point = 60, n_alt = -2
   Insn 65: point = 61, n_alt = 3
  BB 8
   Insn 63: point = 62, n_alt = -1
   Insn 62: point = 62, n_alt = 0
   Insn 60: point = 63, n_alt = -2
   Insn 59: point = 64, n_alt = 0
   Insn 58: point = 64, n_alt = -2
   Insn 57: point = 65, n_alt = 3
  BB 6
   Insn 144: point = 66, n_alt = -1
  BB 5
   Insn 38: point = 66, n_alt = -1
   Insn 37: point = 66, n_alt = 0
  BB 3
   Insn 18: point = 66, n_alt = -1
   Insn 17: point = 66, n_alt = 0
  BB 2
   Insn 15: point = 66, n_alt = -1
   Insn 14: point = 66, n_alt = 0
   Insn 13: point = 67, n_alt = 3
   Insn 12: point = 69, n_alt = 3
   Insn 6: point = 70, n_alt = 8
   Insn 5: point = 71, n_alt = 0
   Insn 8: point = 73, n_alt = 5
   Insn 7: point = 73, n_alt = 1
   Insn 4: point = 73, n_alt = -2
   Insn 3: point = 74, n_alt = 5
   Insn 2: point = 74, n_alt = 5
  BB 7
   Insn 54: point = 74, n_alt = 0
   Insn 53: point = 74, n_alt = -2
   Insn 52: point = 75, n_alt = 3
   Insn 51: point = 76, n_alt = 0
   Insn 50: point = 76, n_alt = -2
   Insn 49: point = 77, n_alt = -2
   Insn 48: point = 78, n_alt = 3
   Insn 47: point = 79, n_alt = 0
   Insn 46: point = 81, n_alt = -2
   Insn 45: point = 82, n_alt = 0
   Insn 44: point = 82, n_alt = -2
   Insn 43: point = 83, n_alt = 3
 r82: [66..67]
 r83: [9..11]
 r84: [4..5]
 r85: [1..3]
 r86: [80..81]
 r87: [77..79]
 r88: [62..63]
 r89: [54..55]
 r90: [50..51]
 r91: [47..49]
 r92: [34..35]
 r93: [31..33]
 r94: [24..25]
 r95: [40..41]
 r96: [38..39]
 r97: [21..23]
 r98: [16..17]
 r99: [13..15]
 r100: [72..73]
 r101: [70..71]
 r102: [68..69]
 r103: [8..10]
 r104: [6..7]
 r105: [0..2]
 r106: [82..83]
 r107: [76..78]
 r108: [74..75]
 r109: [64..65]
 r110: [60..61]
 r111: [58..59]
 r112: [56..57]
 r113: [52..53]
 r114: [46..48]
 r115: [44..45]
 r116: [36..37]
 r117: [30..32]
 r118: [28..29]
 r119: [26..27]
 r120: [42..43]
 r121: [20..22]
 r122: [18..19]
 r123: [12..14]
Compressing live ranges: from 84 to 70 - 83%
Ranges after the compression:
 r82: [54..55]
 r83: [6..7]
 r84: [2..3]
 r85: [0..1]
 r86: [66..67]
 r87: [64..65]
 r88: [50..51]
 r89: [42..43]
 r90: [38..39]
 r91: [36..37]
 r92: [24..25]
 r93: [22..23]
 r94: [16..17]
 r95: [30..31]
 r96: [28..29]
 r97: [14..15]
 r98: [10..11]
 r99: [8..9]
 r100: [60..61]
 r101: [58..59]
 r102: [56..57]
 r103: [6..7]
 r104: [4..5]
 r105: [0..1]
 r106: [68..69]
 r107: [64..65]
 r108: [62..63]
 r109: [52..53]
 r110: [48..49]
 r111: [46..47]
 r112: [44..45]
 r113: [40..41]
 r114: [36..37]
 r115: [34..35]
 r116: [26..27]
 r117: [22..23]
 r118: [20..21]
 r119: [18..19]
 r120: [32..33]
 r121: [14..15]
 r122: [12..13]
 r123: [8..9]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=32, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 13
changing reg in insn 14
changing reg in insn 21
changing reg in insn 23
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 30
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 49
changing reg in insn 60
changing reg in insn 62
changing reg in insn 74
changing reg in insn 75
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 84
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 103
changing reg in insn 112
changing reg in insn 113
changing reg in insn 119
changing reg in insn 120
changing reg in insn 120
changing reg in insn 122
changing reg in insn 126
changing reg in insn 128
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 135
changing reg in insn 4
changing reg in insn 5
changing reg in insn 6
changing reg in insn 12
changing reg in insn 13
changing reg in insn 22
changing reg in insn 24
changing reg in insn 26
changing reg in insn 29
changing reg in insn 31
changing reg in insn 43
changing reg in insn 44
changing reg in insn 48
changing reg in insn 50
changing reg in insn 52
changing reg in insn 53
changing reg in insn 57
changing reg in insn 58
changing reg in insn 65
changing reg in insn 66
changing reg in insn 68
changing reg in insn 69
changing reg in insn 71
changing reg in insn 72
changing reg in insn 78
changing reg in insn 79
changing reg in insn 83
changing reg in insn 85
changing reg in insn 87
changing reg in insn 88
changing reg in insn 97
changing reg in insn 98
changing reg in insn 102
changing reg in insn 104
changing reg in insn 106
changing reg in insn 107
changing reg in insn 111
changing reg in insn 112
changing reg in insn 116
changing reg in insn 117
changing reg in insn 127
changing reg in insn 129
changing reg in insn 131
changing reg in insn 134
changing reg in insn 136
deleting insn with uid = 5.
deleting insn with uid = 27.
deleting insn with uid = 46.
deleting insn with uid = 60.
deleting insn with uid = 74.
deleting insn with uid = 81.
deleting insn with uid = 100.
deleting insn with uid = 119.
deleting insn with uid = 132.
starting the processing of deferred insns
ending the processing of deferred insns


push_func

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 36 [r8]
;;  ref usage 	r0={45d,32u} r1={26d,8u} r2={19d,1u} r4={26d,8u} r5={37d,19u} r6={1d,49u} r7={1d,35u} r8={18d} r9={18d} r10={18d} r11={18d} r12={18d} r13={18d} r14={18d} r15={18d} r17={25d,7u} r18={18d} r19={1d,1u} r20={19d} r21={19d} r22={19d} r23={19d} r24={19d} r25={19d} r26={19d} r27={19d} r28={18d} r29={18d} r30={18d} r31={18d} r32={18d} r33={18d} r34={18d} r35={18d} r36={19d,1u} r37={19d} r38={18d} r39={18d} r44={18d} r45={18d} r46={18d} r47={18d} r48={18d} r49={18d} r50={18d} r51={18d} r52={18d} r53={18d} r54={18d} r55={18d} r56={18d} r57={18d} r58={18d} r59={18d} r60={18d} r61={18d} r62={18d} r63={18d} r64={18d} r65={18d} r66={18d} r67={18d} r68={18d} r69={18d} r70={18d} r71={18d} r72={18d} r73={18d} r74={18d} r75={18d} 
;;    total ref usage 1450{1289d,161u,0e} in 100{82 regular + 18 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8]
;; lr  def 	 17 [flags] 82 100 101 102
(note 10 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 10 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [4 stack+0 S8 A64])
        (reg:DI 5 di [ stack ])) "calc.c":117:1 74 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [4 stack_prior+0 S8 A64])
        (reg:DI 4 si [ stack_prior ])) "calc.c":117:1 74 {*movdi_internal}
     (nil))
(insn 4 3 7 2 (set (reg:SI 0 ax [100])
        (reg:SI 1 dx [ spec ])) "calc.c":117:1 75 {*movsi_internal}
     (nil))
(insn 7 4 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [5 priority+0 S4 A32])
        (reg:SI 2 cx [ priority ])) "calc.c":117:1 75 {*movsi_internal}
     (nil))
(insn 8 7 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 Stack_double+0 S8 A64])
        (reg:DI 36 r8 [ Stack_double ])) "calc.c":117:1 74 {*movdi_internal}
     (nil))
(insn 6 8 9 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 spec+0 S1 A32])
        (reg:QI 0 ax [101])) "calc.c":117:1 77 {*movqi_internal}
     (nil))
(note 9 6 12 2 NOTE_INSN_FUNCTION_BEG)
(insn 12 9 13 2 (set (reg/f:DI 0 ax [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [4 stack+0 S8 A64])) "calc.c":119:14 74 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 0 ax [orig:82 _1 ] [82])
        (mem:DI (plus:DI (reg/f:DI 0 ax [102])
                (const_int 16 [0x10])) [7 stack_24(D)->top+0 S8 A64])) "calc.c":119:14 74 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:82 _1 ] [82])
            (const_int 0 [0]))) "calc.c":119:8 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) "calc.c":119:8 806 {*jcc}
     (nil)
 -> 19)
;;  succ:       4
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 spec+0 S1 A32])
            (const_int 40 [0x28]))) "calc.c":119:25 9 {*cmpqi_1}
     (nil))
(jump_insn 18 17 19 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 35)
            (pc))) "calc.c":119:25 806 {*jcc}
     (nil)
 -> 35)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 83 84 85 103 104 105
(code_label 19 18 20 4 40 (nil) [1 uses])
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg:SI 1 dx [orig:83 _2 ] [83])
        (sign_extend:SI (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 spec+0 S1 A32]))) "calc.c":121:9 153 {extendqisi2}
     (nil))
(insn 22 21 23 4 (set (reg:DI 0 ax [103])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [4 stack+0 S8 A64])) "calc.c":121:9 74 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:SI 4 si)
        (reg:SI 1 dx [orig:83 _2 ] [83])) "calc.c":121:9 75 {*movsi_internal}
     (nil))
(insn 24 23 25 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [103])) "calc.c":121:9 74 {*movdi_internal}
     (nil))
(call_insn 25 24 26 4 (call (mem:QI (symbol_ref:DI ("push") [flags 0x41]  <function_decl 0x7f09f164e700 push>) [0 push S1 A8])
        (const_int 0 [0])) "calc.c":121:9 813 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 26 25 28 4 (set (reg:SI 0 ax [104])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [5 priority+0 S4 A32])) "calc.c":122:9 75 {*movsi_internal}
     (nil))
(insn 28 26 29 4 (set (reg:SI 1 dx [orig:85 _4 ] [85])
        (sign_extend:SI (reg:QI 0 ax [orig:84 _3 ] [84]))) "calc.c":122:9 153 {extendqisi2}
     (nil))
(insn 29 28 30 4 (set (reg:DI 0 ax [105])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [4 stack_prior+0 S8 A64])) "calc.c":122:9 74 {*movdi_internal}
     (nil))
(insn 30 29 31 4 (set (reg:SI 4 si)
        (reg:SI 1 dx [orig:85 _4 ] [85])) "calc.c":122:9 75 {*movsi_internal}
     (nil))
(insn 31 30 32 4 (set (reg:DI 5 di)
        (reg:DI 0 ax [105])) "calc.c":122:9 74 {*movdi_internal}
     (nil))
(call_insn 32 31 142 4 (call (mem:QI (symbol_ref:DI ("push") [flags 0x41]  <function_decl 0x7f09f164e700 push>) [0 push S1 A8])
        (const_int 0 [0])) "calc.c":122:9 813 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(jump_insn 142 32 143 4 (set (pc)
        (label_ref:DI 153)) "calc.c":150:1 807 {jump}
     (nil)
 -> 153)
;;  succ:       17 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 143 142 35)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 35 143 36 5 41 (nil) [1 uses])
(note 36 35 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 spec+0 S1 A32])
            (const_int 41 [0x29]))) "calc.c":124:13 9 {*cmpqi_1}
     (nil))
(jump_insn 38 37 39 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 92)
            (pc))) "calc.c":124:13 806 {*jcc}
     (nil)
 -> 92)
;;  succ:       6 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 39 38 144 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(jump_insn 144 39 145 6 (set (pc)
        (label_ref 55)) "calc.c":126:15 807 {jump}
     (nil)
 -> 55)
;;  succ:       8 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 145 144 61)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       8
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 86 87 106 107 108
(code_label 61 145 42 7 45 (nil) [1 uses])
(note 42 61 43 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 44 7 (set (reg:DI 0 ax [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [4 stack+0 S8 A64])) "calc.c":128:32 74 {*movdi_internal}
     (nil))
(insn 44 43 45 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [106])) "calc.c":128:32 74 {*movdi_internal}
     (nil))
(call_insn 45 44 47 7 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("pop") [flags 0x41]  <function_decl 0x7f09f164e800 pop>) [0 pop S1 A8])
            (const_int 0 [0]))) "calc.c":128:32 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 47 45 48 7 (set (reg:SI 1 dx [orig:87 _6 ] [87])
        (sign_extend:SI (reg:QI 0 ax [orig:86 _5 ] [86]))) "calc.c":128:13 153 {extendqisi2}
     (nil))
(insn 48 47 49 7 (set (reg:DI 0 ax [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 Stack_double+0 S8 A64])) "calc.c":128:13 74 {*movdi_internal}
     (nil))
(insn 49 48 50 7 (set (reg:SI 4 si)
        (reg:SI 1 dx [orig:87 _6 ] [87])) "calc.c":128:13 75 {*movsi_internal}
     (nil))
(insn 50 49 51 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [107])) "calc.c":128:13 74 {*movdi_internal}
     (nil))
(call_insn 51 50 52 7 (call (mem:QI (symbol_ref:DI ("calc") [flags 0x3]  <function_decl 0x7f09f1657800 calc>) [0 calc S1 A8])
        (const_int 0 [0])) "calc.c":128:13 813 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 52 51 53 7 (set (reg:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [4 stack_prior+0 S8 A64])) "calc.c":129:13 74 {*movdi_internal}
     (nil))
(insn 53 52 54 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [108])) "calc.c":129:13 74 {*movdi_internal}
     (nil))
(call_insn 54 53 55 7 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("pop") [flags 0x41]  <function_decl 0x7f09f164e800 pop>) [0 pop S1 A8])
            (const_int 0 [0]))) "calc.c":129:13 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              6 [always] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 88 109
(code_label 55 54 56 8 44 (nil) [1 uses])
(note 56 55 57 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 58 8 (set (reg:DI 0 ax [109])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [4 stack+0 S8 A64])) "calc.c":126:16 74 {*movdi_internal}
     (nil))
(insn 58 57 59 8 (set (reg:DI 5 di)
        (reg:DI 0 ax [109])) "calc.c":126:16 74 {*movdi_internal}
     (nil))
(call_insn 59 58 62 8 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("peek") [flags 0x41]  <function_decl 0x7f09f164e900 peek>) [0 peek S1 A8])
            (const_int 0 [0]))) "calc.c":126:16 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 62 59 63 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:88 _7 ] [88])
            (const_int 40 [0x28]))) "calc.c":126:28 9 {*cmpqi_1}
     (nil))
(jump_insn 63 62 64 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 61)
            (pc))) "calc.c":126:28 806 {*jcc}
     (nil)
 -> 61)
;;  succ:       7
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 89 110 111 112
(note 64 63 65 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 9 (set (reg:DI 0 ax [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [4 stack+0 S8 A64])) "calc.c":131:9 74 {*movdi_internal}
     (nil))
(insn 66 65 67 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [110])) "calc.c":131:9 74 {*movdi_internal}
     (nil))
(call_insn 67 66 68 9 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("pop") [flags 0x41]  <function_decl 0x7f09f164e800 pop>) [0 pop S1 A8])
            (const_int 0 [0]))) "calc.c":131:9 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 68 67 69 9 (set (reg:DI 0 ax [111])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [4 stack_prior+0 S8 A64])) "calc.c":132:9 74 {*movdi_internal}
     (nil))
(insn 69 68 70 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [111])) "calc.c":132:9 74 {*movdi_internal}
     (nil))
(call_insn 70 69 71 9 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("pop") [flags 0x41]  <function_decl 0x7f09f164e800 pop>) [0 pop S1 A8])
            (const_int 0 [0]))) "calc.c":132:9 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 71 70 72 9 (set (reg:DI 0 ax [112])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [4 stack_prior+0 S8 A64])) "calc.c":133:13 74 {*movdi_internal}
     (nil))
(insn 72 71 73 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [112])) "calc.c":133:13 74 {*movdi_internal}
     (nil))
(call_insn 73 72 75 9 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("peek") [flags 0x41]  <function_decl 0x7f09f164e900 peek>) [0 peek S1 A8])
            (const_int 0 [0]))) "calc.c":133:13 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 75 73 76 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:89 _8 ] [89])
            (const_int 5 [0x5]))) "calc.c":133:12 9 {*cmpqi_1}
     (nil))
(jump_insn 76 75 77 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 153)
            (pc))) "calc.c":133:12 806 {*jcc}
     (nil)
 -> 153)
;;  succ:       10 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 90 91 113 114 115
(note 77 76 78 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 78 77 79 10 (set (reg:DI 0 ax [113])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [4 stack+0 S8 A64])) "calc.c":135:32 74 {*movdi_internal}
     (nil))
(insn 79 78 80 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [113])) "calc.c":135:32 74 {*movdi_internal}
     (nil))
(call_insn 80 79 82 10 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("pop") [flags 0x41]  <function_decl 0x7f09f164e800 pop>) [0 pop S1 A8])
            (const_int 0 [0]))) "calc.c":135:32 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 82 80 83 10 (set (reg:SI 1 dx [orig:91 _10 ] [91])
        (sign_extend:SI (reg:QI 0 ax [orig:90 _9 ] [90]))) "calc.c":135:13 153 {extendqisi2}
     (nil))
(insn 83 82 84 10 (set (reg:DI 0 ax [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 Stack_double+0 S8 A64])) "calc.c":135:13 74 {*movdi_internal}
     (nil))
(insn 84 83 85 10 (set (reg:SI 4 si)
        (reg:SI 1 dx [orig:91 _10 ] [91])) "calc.c":135:13 75 {*movsi_internal}
     (nil))
(insn 85 84 86 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [114])) "calc.c":135:13 74 {*movdi_internal}
     (nil))
(call_insn 86 85 87 10 (call (mem:QI (symbol_ref:DI ("calc") [flags 0x3]  <function_decl 0x7f09f1657800 calc>) [0 calc S1 A8])
        (const_int 0 [0])) "calc.c":135:13 813 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 87 86 88 10 (set (reg:DI 0 ax [115])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [4 stack_prior+0 S8 A64])) "calc.c":136:13 74 {*movdi_internal}
     (nil))
(insn 88 87 89 10 (set (reg:DI 5 di)
        (reg:DI 0 ax [115])) "calc.c":136:13 74 {*movdi_internal}
     (nil))
(call_insn 89 88 146 10 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("pop") [flags 0x41]  <function_decl 0x7f09f164e800 pop>) [0 pop S1 A8])
            (const_int 0 [0]))) "calc.c":136:13 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 146 89 147 10 (set (pc)
        (label_ref:DI 153)) "calc.c":150:1 807 {jump}
     (nil)
 -> 153)
;;  succ:       17 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 147 146 92)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 92 147 93 11 43 (nil) [1 uses])
(note 93 92 148 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(jump_insn 148 93 149 11 (set (pc)
        (label_ref 109)) "calc.c":142:15 807 {jump}
     (nil)
 -> 109)
;;  succ:       13 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 149 148 121)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       14
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 92 93 116 117 118
(code_label 121 149 96 12 48 (nil) [1 uses])
(note 96 121 97 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 97 96 98 12 (set (reg:DI 0 ax [116])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [4 stack+0 S8 A64])) "calc.c":144:32 74 {*movdi_internal}
     (nil))
(insn 98 97 99 12 (set (reg:DI 5 di)
        (reg:DI 0 ax [116])) "calc.c":144:32 74 {*movdi_internal}
     (nil))
(call_insn 99 98 101 12 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("pop") [flags 0x41]  <function_decl 0x7f09f164e800 pop>) [0 pop S1 A8])
            (const_int 0 [0]))) "calc.c":144:32 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 101 99 102 12 (set (reg:SI 1 dx [orig:93 _12 ] [93])
        (sign_extend:SI (reg:QI 0 ax [orig:92 _11 ] [92]))) "calc.c":144:13 153 {extendqisi2}
     (nil))
(insn 102 101 103 12 (set (reg:DI 0 ax [117])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [3 Stack_double+0 S8 A64])) "calc.c":144:13 74 {*movdi_internal}
     (nil))
(insn 103 102 104 12 (set (reg:SI 4 si)
        (reg:SI 1 dx [orig:93 _12 ] [93])) "calc.c":144:13 75 {*movsi_internal}
     (nil))
(insn 104 103 105 12 (set (reg:DI 5 di)
        (reg:DI 0 ax [117])) "calc.c":144:13 74 {*movdi_internal}
     (nil))
(call_insn 105 104 106 12 (call (mem:QI (symbol_ref:DI ("calc") [flags 0x3]  <function_decl 0x7f09f1657800 calc>) [0 calc S1 A8])
        (const_int 0 [0])) "calc.c":144:13 813 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 106 105 107 12 (set (reg:DI 0 ax [118])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [4 stack_prior+0 S8 A64])) "calc.c":145:13 74 {*movdi_internal}
     (nil))
(insn 107 106 108 12 (set (reg:DI 5 di)
        (reg:DI 0 ax [118])) "calc.c":145:13 74 {*movdi_internal}
     (nil))
(call_insn 108 107 109 12 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("pop") [flags 0x41]  <function_decl 0x7f09f164e800 pop>) [0 pop S1 A8])
            (const_int 0 [0]))) "calc.c":145:13 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       13 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU,DFS_BACK)
;;              11 [always] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 94 119
(code_label 109 108 110 13 46 (nil) [1 uses])
(note 110 109 111 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 111 110 112 13 (set (reg/f:DI 0 ax [119])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [4 stack+0 S8 A64])) "calc.c":142:21 74 {*movdi_internal}
     (nil))
(insn 112 111 113 13 (set (reg:DI 0 ax [orig:94 _13 ] [94])
        (mem:DI (plus:DI (reg/f:DI 0 ax [119])
                (const_int 16 [0x10])) [7 stack_24(D)->top+0 S8 A64])) "calc.c":142:21 74 {*movdi_internal}
     (nil))
(insn 113 112 114 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:94 _13 ] [94])
            (const_int 0 [0]))) "calc.c":142:32 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 114 113 115 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 124)
            (pc))) "calc.c":142:32 806 {*jcc}
     (nil)
 -> 124)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 95 96 120
(note 115 114 116 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 14 (set (reg:DI 0 ax [120])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [4 stack_prior+0 S8 A64])) "calc.c":142:47 74 {*movdi_internal}
     (nil))
(insn 117 116 118 14 (set (reg:DI 5 di)
        (reg:DI 0 ax [120])) "calc.c":142:47 74 {*movdi_internal}
     (nil))
(call_insn 118 117 120 14 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("peek") [flags 0x41]  <function_decl 0x7f09f164e900 peek>) [0 peek S1 A8])
            (const_int 0 [0]))) "calc.c":142:47 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 120 118 122 14 (set (reg:SI 0 ax [orig:96 _15 ] [96])
        (sign_extend:SI (reg:QI 0 ax [orig:95 _14 ] [95]))) "calc.c":142:47 153 {extendqisi2}
     (nil))
(insn 122 120 123 14 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [5 priority+0 S4 A32])
            (reg:SI 0 ax [orig:96 _15 ] [96]))) "calc.c":142:32 11 {*cmpsi_1}
     (nil))
(jump_insn 123 122 124 14 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 121)
            (pc))) "calc.c":142:32 806 {*jcc}
     (nil)
 -> 121)
;;  succ:       12
;;              15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 17, flags: (RTL, MODIFIED)
;;  pred:       13
;;              14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 97 98 99 121 122 123
(code_label 124 123 125 15 47 (nil) [1 uses])
(note 125 124 126 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 126 125 127 15 (set (reg:SI 1 dx [orig:97 _16 ] [97])
        (sign_extend:SI (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 spec+0 S1 A32]))) "calc.c":147:9 153 {extendqisi2}
     (nil))
(insn 127 126 128 15 (set (reg:DI 0 ax [121])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [4 stack+0 S8 A64])) "calc.c":147:9 74 {*movdi_internal}
     (nil))
(insn 128 127 129 15 (set (reg:SI 4 si)
        (reg:SI 1 dx [orig:97 _16 ] [97])) "calc.c":147:9 75 {*movsi_internal}
     (nil))
(insn 129 128 130 15 (set (reg:DI 5 di)
        (reg:DI 0 ax [121])) "calc.c":147:9 74 {*movdi_internal}
     (nil))
(call_insn 130 129 131 15 (call (mem:QI (symbol_ref:DI ("push") [flags 0x41]  <function_decl 0x7f09f164e700 push>) [0 push S1 A8])
        (const_int 0 [0])) "calc.c":147:9 813 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 131 130 133 15 (set (reg:SI 0 ax [122])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [5 priority+0 S4 A32])) "calc.c":148:9 75 {*movsi_internal}
     (nil))
(insn 133 131 134 15 (set (reg:SI 1 dx [orig:99 _18 ] [99])
        (sign_extend:SI (reg:QI 0 ax [orig:98 _17 ] [98]))) "calc.c":148:9 153 {extendqisi2}
     (nil))
(insn 134 133 135 15 (set (reg:DI 0 ax [123])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [4 stack_prior+0 S8 A64])) "calc.c":148:9 74 {*movdi_internal}
     (nil))
(insn 135 134 136 15 (set (reg:SI 4 si)
        (reg:SI 1 dx [orig:99 _18 ] [99])) "calc.c":148:9 75 {*movsi_internal}
     (nil))
(insn 136 135 137 15 (set (reg:DI 5 di)
        (reg:DI 0 ax [123])) "calc.c":148:9 74 {*movdi_internal}
     (nil))
(call_insn 137 136 153 15 (call (mem:QI (symbol_ref:DI ("push") [flags 0x41]  <function_decl 0x7f09f164e700 push>) [0 push S1 A8])
        (const_int 0 [0])) "calc.c":148:9 813 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       17 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 17, loop depth 0, maybe hot
;;  prev block 15, next block 16, flags: (RTL, MODIFIED)
;;  pred:       9
;;              10 [always] 
;;              15 [always]  (FALLTHRU)
;;              4 [always] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 153 137 152 17 49 (nil) [3 uses])
(note 152 153 154 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 154 152 140 17 (const_int 0 [0]) "calc.c":150:1 843 {nop}
     (nil))
;;  succ:       16 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 17, next block 1, flags: (RTL, MODIFIED)
;;  pred:       17 [always]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 140 154 141 16 39 (nil) [0 uses])
(note 141 140 155 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 155 141 0 NOTE_INSN_DELETED)

;; Function not_main (not_main, funcdef_no=11, decl_uid=4513, cgraph_uid=12, symbol_order=11)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=448, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=416, prev_offset=0)
Can eliminate 19 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 4:  (0) =m  (1) m  (2) =&r {stack_protect_set_1_di}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 9:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) m  (1) rn {*movhi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 15:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) m  (1) rn {*movhi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 21:  (0) m  (1) re {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 25:  (0) m  (1) re {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 29:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 31:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 37
	 Choosing alt 0 in insn 37:  (0) =rm  (1) %0  (2) re {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 38:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 46
	 Choosing alt 0 in insn 46:  (0) =rm  (1) %0  (2) re {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 47:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 55
	 Choosing alt 0 in insn 55:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=617,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=9,overall=627,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=22,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 58:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 59:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 60:  (0) rm  (1) re {*cmpsi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 63:  (0) v  (1) m {*movdf_internal}
            alt=0: Bad operand -- refuse
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 64:  (0) v  (1) vm {movv2df_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =x  (1) 0  (2) xBm {*negdf2_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 66:  (0) m  (1) v {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 69:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 70:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1215,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=21,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=608,losers=1,rld_nregs=1
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=13,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=609,losers=1 -- refuse
          alt=21,overall=0,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 71:  (0) v  (1) r {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=617,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=9,overall=627,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=22,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 77:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1215,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=21,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=608,losers=1,rld_nregs=1
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=13,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=609,losers=1 -- refuse
          alt=21,overall=0,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 78:  (0) v  (1) r {*movdf_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 79:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 81:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 86:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 91
	 Choosing alt 0 in insn 91:  (0) =rm  (1) %0  (2) re {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 92:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 95:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 98:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 100
	 Choosing alt 0 in insn 100:  (0) =rm  (1) %0  (2) re {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 101:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 105:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 110:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 111
	 Choosing alt 0 in insn 111:  (0) =rm  (1) %0  (2) re {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 112:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 113:  (0) qm  (1) qn {*cmpqi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 116:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 118:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 121:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 123:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 124:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 125:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 128:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 129:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 130
	 Choosing alt 0 in insn 130:  (0) =rm  (1) %0  (2) re {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 131:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) =r  (1) qm {extendqisi2}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 133:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 136:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 141:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 142:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 143
	 Choosing alt 0 in insn 143:  (0) =rm  (1) %0  (2) re {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 144:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 148:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 149:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 150:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 152:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 153:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 157:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 162:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 163:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 164
	 Choosing alt 0 in insn 164:  (0) =rm  (1) %0  (2) re {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 165:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 166:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 169:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 170:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 171
	 Choosing alt 0 in insn 171:  (0) =rm  (1) %0  (2) re {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 172:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 177:  (0) ?mr {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 180:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 181:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 182:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 183
	 Choosing alt 0 in insn 183:  (0) =rm  (1) %0  (2) re {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 184:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 185:  (0) =r  (1) qm {extendqisi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 186:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 187:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 189:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 193:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 194:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 199:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 200:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 201
	 Choosing alt 0 in insn 201:  (0) =rm  (1) %0  (2) re {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 202:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 203:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 206:  (0) rm  (1) re {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 209:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 214:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 219:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 226:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 227:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 228
	 Choosing alt 0 in insn 228:  (0) =rm  (1) %0  (2) re {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 229:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 230:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 233:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 234:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 235
	 Choosing alt 0 in insn 235:  (0) =rm  (1) %0  (2) re {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 236:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 237:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 241:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 242:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 243:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 244
	 Choosing alt 0 in insn 244:  (0) =rm  (1) %0  (2) re {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 245:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 246:  (0) =r  (1) qm {extendqisi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 247:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 248:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 250:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 254:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 255:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 260:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 261:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 262
	 Choosing alt 0 in insn 262:  (0) =rm  (1) %0  (2) re {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 263:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 264:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 267:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 268:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 269:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 270
	 Choosing alt 0 in insn 270:  (0) =rm  (1) %0  (2) re {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 271:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 272:  (0) =r  (1) qm {extendqisi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 273:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 274:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 276:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 280:  (0) rBwBz {*call}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 281:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 284:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 285:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 286
	 Choosing alt 0 in insn 286:  (0) =rm  (1) %0  (2) re {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 287:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 288:  (0) =r  (1) qm {extendqisi2}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 289:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 292:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (0) r {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 297:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 298:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 302:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 303:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 304
	 Choosing alt 0 in insn 304:  (0) =rm  (1) %0  (2) re {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 305:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 306:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 307:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=5,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=6,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=7,overall=27,losers=2 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 308:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 309:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 310:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 313:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 314:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 315
	 Choosing alt 0 in insn 315:  (0) =rm  (1) %0  (2) re {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 316:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 318:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 321:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 322:  (0) =*a  (1) *0 {*extendsidi2_rex64}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 323:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 324:  (0) r  (1) rem {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 325:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 327:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 329:  (0) =r  (1) qm {extendqisi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 330:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 331:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 333:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 337:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 340:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 341:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 342
	 Choosing alt 0 in insn 342:  (0) =rm  (1) %0  (2) re {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 343:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 344:  (0) qm  (1) qn {*cmpqi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 347:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 348:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 349
	 Choosing alt 0 in insn 349:  (0) =rm  (1) %0  (2) re {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 350:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 351:  (0) qm  (1) qn {*cmpqi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 355:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 356:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 357:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 358:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 359
	 Choosing alt 0 in insn 359:  (0) =rm  (1) %0  (2) re {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 360:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 361:  (0) =r  (1) qm {extendqisi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 362:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 363:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 365:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 369:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 372:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 373:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 374
	 Choosing alt 0 in insn 374:  (0) =rm  (1) %0  (2) re {*adddi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 375:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 376:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 383:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 386:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 388:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 391:  (0) rm  (1) re {*cmpdi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 395:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 397:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 398:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 399:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 400:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 401:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 402:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 406:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 408:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 410:  (0) =r  (1) qm {extendqisi2}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 412:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 414:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 415:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 416:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 418:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 420:  (0) =r  (1) qm {extendqisi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 421:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 424:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 425:  (0) =rm  (1) %0  (2) re {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 429:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 430:  (0) r  (1) rm {*cmpdi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 433:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 435:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 436:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 437:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 439:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=617,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=9,overall=627,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=22,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 440:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 441:  (0) ?m  (1) rC {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 442:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 443:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 444:  (0) rm  (1) re {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 447:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 449:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=617,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=9,overall=627,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=22,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 450:  (0) r  (1) v {*movdf_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 451:  (0) r  (1) r  (2) le {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1215,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=21,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=608,losers=1,rld_nregs=1
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=13,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=609,losers=1 -- refuse
          alt=21,overall=0,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 452:  (0) v  (1) r {*movdf_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 453:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 456:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 457:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 462:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 463:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 466:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 467:  (1) rBwBz {*call_value}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 470:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 472:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 473:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 475:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 476:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 478:  (0) rBwBz {*call}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 479:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1215,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=21,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=608,losers=1,rld_nregs=1
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=13,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=609,losers=1 -- refuse
          alt=21,overall=0,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 480:  (0) v  (1) r {*movdf_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 481:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 483:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 484:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 485:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=630,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=626,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=615,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=619,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=20,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 488:  (0) r  (1) v {*movdf_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 492:  (1) m  (2) m  (3) =&r {stack_protect_test_1_di}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 494:  (0) rBwBz {*call}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1215,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=21,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=608,losers=1,rld_nregs=1
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=13,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=609,losers=1 -- refuse
          alt=21,overall=0,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 497:  (0) v  (1) r {*movdf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3 4 5 6
EBB 7
EBB 8
EBB 9 10
EBB 11 12
EBB 13 14 15
EBB 16 17
EBB 18 19
EBB 20 21 22
EBB 23
EBB 24
EBB 25 26
EBB 27
EBB 28 29
EBB 30 31
EBB 32
EBB 33 34
EBB 35 36
EBB 37
EBB 38 39
EBB 40 50
EBB 51
EBB 41
EBB 42
EBB 43 44 45
EBB 46
EBB 47 48
EBB 49

********** Pseudo live ranges #1: **********

  BB 48
   Insn 494: point = 0, n_alt = 0
  BB 49
   Insn 498: point = 0, n_alt = -1
   Insn 497: point = 0, n_alt = 21
  BB 47
   Insn 493: point = 2, n_alt = -1
   Insn 492: point = 2, n_alt = 0
   Insn 488: point = 4, n_alt = 20
   Insn 485: point = 6, n_alt = 14
   Insn 484: point = 7, n_alt = 0
   Insn 483: point = 7, n_alt = 3
   Insn 482: point = 7, n_alt = -2
   Insn 481: point = 8, n_alt = 4
   Insn 480: point = 9, n_alt = 21
   Insn 479: point = 10, n_alt = 8
   Insn 478: point = 11, n_alt = 0
   Insn 477: point = 11, n_alt = -2
   Insn 476: point = 12, n_alt = 3
   Insn 475: point = 13, n_alt = 0
   Insn 474: point = 13, n_alt = -2
   Insn 473: point = 14, n_alt = 3
   Insn 472: point = 15, n_alt = 0
   Insn 471: point = 15, n_alt = -2
   Insn 470: point = 16, n_alt = 3
  BB 45
   Insn 522: point = 17, n_alt = -1
   Insn 457: point = 17, n_alt = 0
   Insn 456: point = 17, n_alt = 3
   Insn 455: point = 17, n_alt = -2
   Insn 454: point = 18, n_alt = -2
   Insn 453: point = 19, n_alt = 4
   Insn 452: point = 20, n_alt = 21
   Insn 451: point = 21, n_alt = 3
   Insn 450: point = 22, n_alt = 20
   Insn 449: point = 23, n_alt = 0
   Insn 448: point = 23, n_alt = -2
   Insn 447: point = 24, n_alt = 3
  BB 46
   Insn 467: point = 25, n_alt = 0
   Insn 466: point = 25, n_alt = 3
   Insn 465: point = 25, n_alt = -2
   Insn 464: point = 26, n_alt = -2
   Insn 463: point = 27, n_alt = 4
   Insn 462: point = 28, n_alt = 3
  BB 44
   Insn 445: point = 29, n_alt = -1
   Insn 444: point = 29, n_alt = 0
   Insn 443: point = 30, n_alt = 3
   Insn 442: point = 32, n_alt = 3
   Insn 441: point = 33, n_alt = 9
   Insn 440: point = 34, n_alt = 20
   Insn 439: point = 35, n_alt = 0
   Insn 438: point = 35, n_alt = -2
   Insn 437: point = 36, n_alt = 3
   Insn 436: point = 37, n_alt = 0
   Insn 435: point = 37, n_alt = 3
   Insn 434: point = 37, n_alt = -2
   Insn 433: point = 38, n_alt = 4
  BB 43
   Insn 431: point = 39, n_alt = -1
   Insn 430: point = 39, n_alt = 1
   Insn 429: point = 40, n_alt = 3
  BB 41
   Insn 520: point = 41, n_alt = -1
   Insn 402: point = 41, n_alt = 5
   Insn 401: point = 41, n_alt = 5
   Insn 400: point = 42, n_alt = 3
   Insn 399: point = 44, n_alt = 3
   Insn 398: point = 45, n_alt = 0
   Insn 397: point = 45, n_alt = 3
   Insn 396: point = 45, n_alt = -2
   Insn 395: point = 46, n_alt = 4
  BB 50
   Insn 525: point = 47, n_alt = -1
  BB 51
   Insn 529: point = 47, n_alt = -1
  BB 38
   Insn 377: point = 47, n_alt = -1
   Insn 376: point = 47, n_alt = 0
   Insn 375: point = 48, n_alt = 4
   Insn 374: point = 50, n_alt = 0
   Insn 373: point = 52, n_alt = 3
   Insn 372: point = 53, n_alt = 3
  BB 37
   Insn 369: point = 54, n_alt = 0
   Insn 368: point = 54, n_alt = -2
   Insn 367: point = 55, n_alt = -2
   Insn 366: point = 56, n_alt = -2
   Insn 365: point = 57, n_alt = 0
   Insn 364: point = 57, n_alt = -2
   Insn 363: point = 58, n_alt = 3
   Insn 362: point = 59, n_alt = 3
   Insn 361: point = 60, n_alt = 0
   Insn 360: point = 62, n_alt = 4
   Insn 359: point = 64, n_alt = 0
   Insn 358: point = 66, n_alt = 3
   Insn 357: point = 67, n_alt = 3
   Insn 356: point = 68, n_alt = 3
   Insn 355: point = 69, n_alt = 1
  BB 36
   Insn 352: point = 69, n_alt = -1
   Insn 351: point = 69, n_alt = 0
   Insn 350: point = 70, n_alt = 4
   Insn 349: point = 72, n_alt = 0
   Insn 348: point = 74, n_alt = 3
   Insn 347: point = 75, n_alt = 3
  BB 35
   Insn 345: point = 76, n_alt = -1
   Insn 344: point = 76, n_alt = 0
   Insn 343: point = 77, n_alt = 4
   Insn 342: point = 79, n_alt = 0
   Insn 341: point = 81, n_alt = 3
   Insn 340: point = 82, n_alt = 3
  BB 34
   Insn 337: point = 83, n_alt = 0
   Insn 336: point = 83, n_alt = -2
   Insn 335: point = 84, n_alt = -2
   Insn 334: point = 85, n_alt = -2
   Insn 333: point = 86, n_alt = 0
   Insn 332: point = 86, n_alt = -2
   Insn 331: point = 87, n_alt = 3
   Insn 330: point = 88, n_alt = 3
   Insn 329: point = 89, n_alt = 0
   Insn 328: point = 91, n_alt = -2
   Insn 327: point = 92, n_alt = 0
   Insn 326: point = 92, n_alt = -2
   Insn 325: point = 93, n_alt = 3
   Insn 324: point = 94, n_alt = 3
   Insn 323: point = 95, n_alt = 8
   Insn 322: point = 96, n_alt = 0
   Insn 321: point = 98, n_alt = 0
  BB 33
   Insn 319: point = 99, n_alt = -1
   Insn 318: point = 99, n_alt = 0
   Insn 316: point = 100, n_alt = 4
   Insn 315: point = 102, n_alt = 0
   Insn 314: point = 104, n_alt = 3
   Insn 313: point = 105, n_alt = 3
  BB 31
   Insn 518: point = 106, n_alt = -1
   Insn 298: point = 106, n_alt = 1
   Insn 297: point = 106, n_alt = 1
  BB 32
   Insn 310: point = 106, n_alt = 0
   Insn 309: point = 106, n_alt = 0
   Insn 308: point = 106, n_alt = 8
   Insn 307: point = 107, n_alt = 0
   Insn 306: point = 109, n_alt = 0
   Insn 305: point = 110, n_alt = 4
   Insn 304: point = 112, n_alt = 0
   Insn 303: point = 114, n_alt = 3
   Insn 302: point = 115, n_alt = 3
  BB 30
   Insn 295: point = 116, n_alt = -1
   Insn 294: point = 116, n_alt = 0
   Insn 293: point = 117, n_alt = -2
   Insn 292: point = 118, n_alt = 0
   Insn 291: point = 118, n_alt = -2
   Insn 290: point = 119, n_alt = -2
   Insn 289: point = 120, n_alt = 3
   Insn 288: point = 121, n_alt = 0
   Insn 287: point = 123, n_alt = 4
   Insn 286: point = 125, n_alt = 0
   Insn 285: point = 127, n_alt = 3
   Insn 284: point = 128, n_alt = 3
  BB 27
   Insn 516: point = 129, n_alt = -1
   Insn 255: point = 129, n_alt = 1
   Insn 254: point = 129, n_alt = 0
   Insn 253: point = 129, n_alt = -2
   Insn 252: point = 130, n_alt = -2
   Insn 251: point = 131, n_alt = -2
   Insn 250: point = 132, n_alt = 0
   Insn 249: point = 132, n_alt = -2
   Insn 248: point = 133, n_alt = 3
   Insn 247: point = 134, n_alt = 3
   Insn 246: point = 135, n_alt = 0
   Insn 245: point = 137, n_alt = 4
   Insn 244: point = 139, n_alt = 0
   Insn 243: point = 141, n_alt = 3
   Insn 242: point = 142, n_alt = 3
   Insn 241: point = 143, n_alt = 3
  BB 19
   Insn 508: point = 144, n_alt = -1
   Insn 194: point = 144, n_alt = 1
   Insn 193: point = 144, n_alt = 0
   Insn 192: point = 144, n_alt = -2
   Insn 191: point = 145, n_alt = -2
   Insn 190: point = 146, n_alt = -2
   Insn 189: point = 147, n_alt = 0
   Insn 188: point = 147, n_alt = -2
   Insn 187: point = 148, n_alt = 3
   Insn 186: point = 149, n_alt = 3
   Insn 185: point = 150, n_alt = 0
   Insn 184: point = 152, n_alt = 4
   Insn 183: point = 154, n_alt = 0
   Insn 182: point = 156, n_alt = 3
   Insn 181: point = 157, n_alt = 3
   Insn 180: point = 158, n_alt = 3
  BB 15
   Insn 506: point = 159, n_alt = -1
   Insn 157: point = 159, n_alt = 1
   Insn 156: point = 159, n_alt = 0
   Insn 155: point = 159, n_alt = -2
   Insn 154: point = 160, n_alt = -2
   Insn 153: point = 161, n_alt = 0
   Insn 152: point = 161, n_alt = 0
   Insn 151: point = 161, n_alt = -2
   Insn 150: point = 162, n_alt = 3
   Insn 149: point = 163, n_alt = 3
   Insn 148: point = 164, n_alt = 3
  BB 29
   Insn 281: point = 165, n_alt = 1
   Insn 280: point = 165, n_alt = 0
   Insn 279: point = 165, n_alt = -2
   Insn 278: point = 166, n_alt = -2
   Insn 277: point = 167, n_alt = -2
   Insn 276: point = 168, n_alt = 0
   Insn 275: point = 168, n_alt = -2
   Insn 274: point = 169, n_alt = 3
   Insn 273: point = 170, n_alt = 3
   Insn 272: point = 171, n_alt = 0
   Insn 271: point = 173, n_alt = 4
   Insn 270: point = 175, n_alt = 0
   Insn 269: point = 177, n_alt = 3
   Insn 268: point = 178, n_alt = 3
   Insn 267: point = 179, n_alt = 3
  BB 28
   Insn 265: point = 180, n_alt = -1
   Insn 264: point = 180, n_alt = 0
   Insn 263: point = 181, n_alt = 4
   Insn 262: point = 183, n_alt = 0
   Insn 261: point = 185, n_alt = 3
   Insn 260: point = 186, n_alt = 3
  BB 26
   Insn 238: point = 187, n_alt = -1
   Insn 237: point = 187, n_alt = 0
   Insn 236: point = 188, n_alt = 4
   Insn 235: point = 190, n_alt = 0
   Insn 234: point = 192, n_alt = 3
   Insn 233: point = 193, n_alt = 3
  BB 25
   Insn 231: point = 194, n_alt = -1
   Insn 230: point = 194, n_alt = 0
   Insn 229: point = 195, n_alt = 4
   Insn 228: point = 197, n_alt = 0
   Insn 227: point = 199, n_alt = 3
   Insn 226: point = 200, n_alt = 3
  BB 24
   Insn 514: point = 201, n_alt = -1
   Insn 219: point = 201, n_alt = 1
  BB 23
   Insn 512: point = 201, n_alt = -1
   Insn 214: point = 201, n_alt = 1
  BB 22
   Insn 510: point = 201, n_alt = -1
   Insn 209: point = 201, n_alt = 1
  BB 21
   Insn 207: point = 201, n_alt = -1
   Insn 206: point = 201, n_alt = 0
  BB 20
   Insn 204: point = 201, n_alt = -1
   Insn 203: point = 201, n_alt = 0
   Insn 202: point = 202, n_alt = 4
   Insn 201: point = 204, n_alt = 0
   Insn 200: point = 206, n_alt = 3
   Insn 199: point = 207, n_alt = 3
  BB 18
   Insn 178: point = 208, n_alt = -1
   Insn 177: point = 208, n_alt = 1
  BB 17
   Insn 174: point = 208, n_alt = -1
   Insn 173: point = 208, n_alt = 0
   Insn 172: point = 209, n_alt = 4
   Insn 171: point = 211, n_alt = 0
   Insn 170: point = 213, n_alt = 3
   Insn 169: point = 214, n_alt = 3
  BB 16
   Insn 167: point = 215, n_alt = -1
   Insn 166: point = 215, n_alt = 0
   Insn 165: point = 216, n_alt = 4
   Insn 164: point = 218, n_alt = 0
   Insn 163: point = 220, n_alt = 3
   Insn 162: point = 221, n_alt = 3
  BB 14
   Insn 146: point = 222, n_alt = -1
   Insn 145: point = 222, n_alt = 0
   Insn 144: point = 223, n_alt = 4
   Insn 143: point = 225, n_alt = 0
   Insn 142: point = 227, n_alt = 3
   Insn 141: point = 228, n_alt = 3
  BB 13
   Insn 139: point = 229, n_alt = -1
   Insn 138: point = 229, n_alt = 0
   Insn 137: point = 230, n_alt = -2
   Insn 136: point = 231, n_alt = 0
   Insn 135: point = 231, n_alt = -2
   Insn 134: point = 232, n_alt = -2
   Insn 133: point = 233, n_alt = 3
   Insn 132: point = 234, n_alt = 0
   Insn 131: point = 236, n_alt = 4
   Insn 130: point = 238, n_alt = 0
   Insn 129: point = 240, n_alt = 3
   Insn 128: point = 241, n_alt = 3
  BB 12
   Insn 125: point = 242, n_alt = 1
   Insn 124: point = 242, n_alt = 0
   Insn 123: point = 242, n_alt = 3
   Insn 122: point = 242, n_alt = -2
   Insn 121: point = 243, n_alt = 4
   Insn 120: point = 244, n_alt = -2
   Insn 119: point = 245, n_alt = -2
   Insn 118: point = 246, n_alt = 0
   Insn 117: point = 246, n_alt = -2
   Insn 116: point = 247, n_alt = 3
  BB 11
   Insn 114: point = 248, n_alt = -1
   Insn 113: point = 248, n_alt = 0
   Insn 112: point = 249, n_alt = 4
   Insn 111: point = 251, n_alt = 0
   Insn 110: point = 253, n_alt = 3
   Insn 109: point = 254, n_alt = 3
  BB 9
   Insn 96: point = 255, n_alt = -1
   Insn 95: point = 255, n_alt = 0
   Insn 92: point = 256, n_alt = 4
   Insn 91: point = 258, n_alt = 0
   Insn 90: point = 260, n_alt = 3
   Insn 89: point = 261, n_alt = 3
  BB 7
   Insn 504: point = 262, n_alt = -1
   Insn 82: point = 262, n_alt = 0
   Insn 81: point = 262, n_alt = 3
   Insn 80: point = 262, n_alt = -2
   Insn 79: point = 263, n_alt = 4
   Insn 78: point = 264, n_alt = 21
   Insn 77: point = 265, n_alt = 20
   Insn 76: point = 266, n_alt = 0
   Insn 75: point = 266, n_alt = -2
   Insn 74: point = 267, n_alt = 3
   Insn 73: point = 268, n_alt = 0
   Insn 72: point = 268, n_alt = -2
   Insn 71: point = 269, n_alt = 21
   Insn 70: point = 270, n_alt = 8
   Insn 69: point = 271, n_alt = 3
  BB 6
   Insn 66: point = 272, n_alt = 15
   Insn 65: point = 273, n_alt = 0
   Insn 64: point = 275, n_alt = 2
   Insn 63: point = 276, n_alt = 14
  BB 5
   Insn 61: point = 277, n_alt = -1
   Insn 60: point = 277, n_alt = 0
   Insn 59: point = 277, n_alt = 9
   Insn 58: point = 278, n_alt = 20
   Insn 57: point = 279, n_alt = 0
   Insn 56: point = 279, n_alt = -2
   Insn 55: point = 280, n_alt = 0
   Insn 54: point = 282, n_alt = 3
   Insn 53: point = 283, n_alt = 3
  BB 8
   Insn 86: point = 284, n_alt = 0
  BB 10
   Insn 106: point = 284, n_alt = -1
   Insn 105: point = 284, n_alt = 0
   Insn 101: point = 285, n_alt = 4
   Insn 100: point = 287, n_alt = 0
   Insn 99: point = 289, n_alt = 3
   Insn 98: point = 290, n_alt = 3
  BB 4
   Insn 51: point = 291, n_alt = -1
   Insn 50: point = 291, n_alt = 0
   Insn 47: point = 292, n_alt = 4
   Insn 46: point = 294, n_alt = 0
   Insn 45: point = 296, n_alt = 3
   Insn 44: point = 297, n_alt = 3
  BB 3
   Insn 42: point = 298, n_alt = -1
   Insn 41: point = 298, n_alt = 0
   Insn 38: point = 299, n_alt = 4
   Insn 37: point = 301, n_alt = 0
   Insn 36: point = 303, n_alt = 3
   Insn 35: point = 304, n_alt = 3
  BB 40
   Insn 392: point = 305, n_alt = -1
   Insn 391: point = 305, n_alt = 0
   Insn 389: point = 306, n_alt = -2
   Insn 388: point = 307, n_alt = 0
   Insn 387: point = 307, n_alt = -2
   Insn 386: point = 308, n_alt = 3
  BB 2
   Insn 502: point = 309, n_alt = -1
   Insn 31: point = 309, n_alt = 5
   Insn 30: point = 309, n_alt = 1
   Insn 29: point = 309, n_alt = 5
   Insn 28: point = 310, n_alt = -2
   Insn 27: point = 311, n_alt = 0
   Insn 26: point = 311, n_alt = 3
   Insn 25: point = 311, n_alt = 5
   Insn 24: point = 312, n_alt = -2
   Insn 23: point = 313, n_alt = 0
   Insn 22: point = 313, n_alt = 3
   Insn 21: point = 313, n_alt = 5
   Insn 20: point = 314, n_alt = -2
   Insn 19: point = 315, n_alt = 0
   Insn 18: point = 315, n_alt = 3
   Insn 17: point = 315, n_alt = 3
   Insn 16: point = 315, n_alt = 1
   Insn 15: point = 315, n_alt = 8
   Insn 14: point = 315, n_alt = 3
   Insn 13: point = 315, n_alt = 1
   Insn 12: point = 315, n_alt = 0
   Insn 11: point = 315, n_alt = 3
   Insn 10: point = 315, n_alt = -2
   Insn 9: point = 316, n_alt = 4
   Insn 8: point = 317, n_alt = -2
   Insn 7: point = 318, n_alt = 3
   Insn 4: point = 319, n_alt = 0
   Insn 2: point = 321, n_alt = 5
  BB 39
   Insn 383: point = 321, n_alt = 0
  BB 42
   Insn 425: point = 321, n_alt = 0
   Insn 424: point = 321, n_alt = 0
   Insn 423: point = 321, n_alt = -2
   Insn 422: point = 322, n_alt = -2
   Insn 421: point = 323, n_alt = 3
   Insn 420: point = 324, n_alt = 0
   Insn 419: point = 326, n_alt = -2
   Insn 418: point = 327, n_alt = 0
   Insn 417: point = 327, n_alt = -2
   Insn 416: point = 328, n_alt = 3
   Insn 415: point = 329, n_alt = 0
   Insn 414: point = 329, n_alt = 3
   Insn 413: point = 329, n_alt = -2
   Insn 412: point = 330, n_alt = 4
   Insn 411: point = 331, n_alt = -2
   Insn 410: point = 332, n_alt = 0
   Insn 409: point = 334, n_alt = -2
   Insn 408: point = 335, n_alt = 0
   Insn 407: point = 335, n_alt = -2
   Insn 406: point = 336, n_alt = 3
 r82: [313..314]
 r83: [311..312]
 r84: [309..310]
 r85: [300..301]
 r86: [298..299]
 r87: [293..294]
 r88: [291..292]
 r89: [279..280]
 r90: [268..271]
 r91: [266..267]
 r92: [264..265]
 r93: [257..258]
 r94: [255..256]
 r95: [286..287]
 r96: [284..285]
 r97: [250..251]
 r98: [248..249]
 r99: [244..245]
 r100: [237..238]
 r101: [235..236]
 r102: [232..234]
 r103: [229..230]
 r104: [224..225]
 r105: [222..223]
 r106: [161..164]
 r107: [160..163]
 r108: [159..162]
 r109: [217..218]
 r110: [215..216]
 r111: [210..211]
 r112: [208..209]
 r113: [147..158]
 r114: [153..154]
 r115: [151..152]
 r116: [146..150]
 r117: [145..149]
 r118: [144..148]
 r119: [203..204]
 r120: [201..202]
 r121: [196..197]
 r122: [194..195]
 r123: [189..190]
 r124: [187..188]
 r125: [132..143]
 r126: [138..139]
 r127: [136..137]
 r128: [131..135]
 r129: [130..134]
 r130: [129..133]
 r131: [182..183]
 r132: [180..181]
 r133: [168..179]
 r134: [174..175]
 r135: [172..173]
 r136: [167..171]
 r137: [166..170]
 r138: [165..169]
 r139: [124..125]
 r140: [122..123]
 r141: [119..121]
 r142: [116..117]
 r143: [111..112]
 r144: [106..110]
 r145: [101..102]
 r146: [99..100]
 r147: [86..94]
 r148: [90..91]
 r149: [85..89]
 r150: [84..88]
 r151: [83..87]
 r152: [78..79]
 r153: [76..77]
 r154: [71..72]
 r155: [69..70]
 r156: [57..68]
 r157: [63..64]
 r158: [61..62]
 r159: [56..60]
 r160: [55..59]
 r161: [54..58]
 r162: [49..50]
 r163: [47..48]
 r164: [305..306]
 r165: [43..44]
 r166: [335..336]
 r167: [333..334]
 r168: [331..332]
 r169: [327..328]
 r170: [325..326]
 r171: [322..324]
 r172: [321..323]
 r173: [35..36]
 r174: [31..32]
 r175: [29..30]
 r176: [23..24]
 r177: [20..22]
 r178: [5..6]
 r179: [0..4]
 r180: [317..318]
 r181: [315..316]
 r182: [302..304]
 r183: [302..303]
 r184: [295..297]
 r185: [295..296]
 r186: [281..283]
 r187: [281..282]
 r188: [277..278]
 r189: [272..273]
 r190: [274..276]
 r191: [274..275]
 r192: [269..270]
 r193: [262..263]
 r194: [259..261]
 r195: [259..260]
 r196: [288..290]
 r197: [288..289]
 r198: [252..254]
 r199: [252..253]
 r200: [246..247]
 r201: [242..243]
 r202: [239..241]
 r203: [239..240]
 r204: [231..233]
 r205: [226..228]
 r206: [226..227]
 r207: [219..221]
 r208: [219..220]
 r209: [212..214]
 r210: [212..213]
 r211: [155..157]
 r212: [155..156]
 r213: [205..207]
 r214: [205..206]
 r215: [198..200]
 r216: [198..199]
 r217: [191..193]
 r218: [191..192]
 r219: [140..142]
 r220: [140..141]
 r221: [184..186]
 r222: [184..185]
 r223: [176..178]
 r224: [176..177]
 r225: [126..128]
 r226: [126..127]
 r227: [118..120]
 r228: [113..115]
 r229: [113..114]
 r230: [106..107]
 r231: [108..109]
 r232: [103..105]
 r233: [103..104]
 r234: [95..96]
 r235: [97..98]
 r236: [92..93]
 r237: [80..82]
 r238: [80..81]
 r239: [73..75]
 r240: [73..74]
 r241: [65..67]
 r242: [65..66]
 r243: [51..53]
 r244: [51..52]
 r245: [307..308]
 r246: [45..46]
 r247: [41..42]
 r248: [329..330]
 r249: [39..40]
 r250: [37..38]
 r251: [33..34]
 r252: [17..21]
 r253: [18..19]
 r254: [25..28]
 r255: [26..27]
 r256: [15..16]
 r257: [13..14]
 r258: [11..12]
 r259: [9..10]
 r260: [7..8]
 r262: [319..320]
 r263: [2..3]
Compressing live ranges: from 337 to 262 - 77%
Ranges after the compression:
 r82: [240..241]
 r83: [238..239]
 r84: [236..237]
 r85: [228..229]
 r86: [226..227]
 r87: [222..223]
 r88: [220..221]
 r89: [210..211]
 r90: [202..203]
 r91: [200..201]
 r92: [198..199]
 r93: [192..193]
 r94: [190..191]
 r95: [216..217]
 r96: [214..215]
 r97: [186..187]
 r98: [184..185]
 r99: [180..181]
 r100: [174..175]
 r101: [172..173]
 r102: [170..171]
 r103: [168..169]
 r104: [164..165]
 r105: [162..163]
 r106: [116..117]
 r107: [116..117]
 r108: [116..117]
 r109: [158..159]
 r110: [156..157]
 r111: [152..153]
 r112: [150..151]
 r113: [108..115]
 r114: [112..113]
 r115: [110..111]
 r116: [108..109]
 r117: [108..109]
 r118: [108..109]
 r119: [146..147]
 r120: [144..145]
 r121: [140..141]
 r122: [138..139]
 r123: [134..135]
 r124: [132..133]
 r125: [100..107]
 r126: [104..105]
 r127: [102..103]
 r128: [100..101]
 r129: [100..101]
 r130: [100..101]
 r131: [128..129]
 r132: [126..127]
 r133: [118..125]
 r134: [122..123]
 r135: [120..121]
 r136: [118..119]
 r137: [118..119]
 r138: [118..119]
 r139: [96..97]
 r140: [94..95]
 r141: [92..93]
 r142: [90..91]
 r143: [86..87]
 r144: [82..85]
 r145: [78..79]
 r146: [76..77]
 r147: [66..71]
 r148: [68..69]
 r149: [66..67]
 r150: [66..67]
 r151: [66..67]
 r152: [62..63]
 r153: [60..61]
 r154: [56..57]
 r155: [54..55]
 r156: [46..53]
 r157: [50..51]
 r158: [48..49]
 r159: [46..47]
 r160: [46..47]
 r161: [46..47]
 r162: [42..43]
 r163: [40..41]
 r164: [232..233]
 r165: [36..37]
 r166: [260..261]
 r167: [258..259]
 r168: [256..257]
 r169: [252..253]
 r170: [250..251]
 r171: [248..249]
 r172: [248..249]
 r173: [28..29]
 r174: [24..25]
 r175: [22..23]
 r176: [18..19]
 r177: [16..17]
 r178: [2..3]
 r179: [0..1]
 r180: [244..245]
 r181: [242..243]
 r182: [230..231]
 r183: [230..231]
 r184: [224..225]
 r185: [224..225]
 r186: [212..213]
 r187: [212..213]
 r188: [208..209]
 r189: [204..205]
 r190: [206..207]
 r191: [206..207]
 r192: [202..203]
 r193: [196..197]
 r194: [194..195]
 r195: [194..195]
 r196: [218..219]
 r197: [218..219]
 r198: [188..189]
 r199: [188..189]
 r200: [182..183]
 r201: [178..179]
 r202: [176..177]
 r203: [176..177]
 r204: [170..171]
 r205: [166..167]
 r206: [166..167]
 r207: [160..161]
 r208: [160..161]
 r209: [154..155]
 r210: [154..155]
 r211: [114..115]
 r212: [114..115]
 r213: [148..149]
 r214: [148..149]
 r215: [142..143]
 r216: [142..143]
 r217: [136..137]
 r218: [136..137]
 r219: [106..107]
 r220: [106..107]
 r221: [130..131]
 r222: [130..131]
 r223: [124..125]
 r224: [124..125]
 r225: [98..99]
 r226: [98..99]
 r227: [92..93]
 r228: [88..89]
 r229: [88..89]
 r230: [82..83]
 r231: [84..85]
 r232: [80..81]
 r233: [80..81]
 r234: [72..73]
 r235: [74..75]
 r236: [70..71]
 r237: [64..65]
 r238: [64..65]
 r239: [58..59]
 r240: [58..59]
 r241: [52..53]
 r242: [52..53]
 r243: [44..45]
 r244: [44..45]
 r245: [234..235]
 r246: [38..39]
 r247: [34..35]
 r248: [254..255]
 r249: [32..33]
 r250: [30..31]
 r251: [26..27]
 r252: [14..17]
 r253: [14..15]
 r254: [20..21]
 r255: [20..21]
 r256: [12..13]
 r257: [10..11]
 r258: [8..9]
 r259: [6..7]
 r260: [4..5]
 r262: [246..247]
 r263: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=448, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=416, prev_offset=0)
Can eliminate 19 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 20
changing reg in insn 21
changing reg in insn 24
changing reg in insn 25
changing reg in insn 28
changing reg in insn 29
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 41
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 50
changing reg in insn 55
changing reg in insn 56
changing reg in insn 69
changing reg in insn 72
changing reg in insn 74
changing reg in insn 75
changing reg in insn 77
changing reg in insn 78
changing reg in insn 91
changing reg in insn 92
changing reg in insn 92
changing reg in insn 95
changing reg in insn 100
changing reg in insn 101
changing reg in insn 101
changing reg in insn 105
changing reg in insn 111
changing reg in insn 112
changing reg in insn 112
changing reg in insn 113
changing reg in insn 119
changing reg in insn 120
changing reg in insn 130
changing reg in insn 131
changing reg in insn 131
changing reg in insn 132
changing reg in insn 132
changing reg in insn 134
changing reg in insn 137
changing reg in insn 138
changing reg in insn 143
changing reg in insn 144
changing reg in insn 144
changing reg in insn 145
changing reg in insn 148
changing reg in insn 151
changing reg in insn 149
changing reg in insn 154
changing reg in insn 150
changing reg in insn 155
changing reg in insn 164
changing reg in insn 165
changing reg in insn 165
changing reg in insn 166
changing reg in insn 171
changing reg in insn 172
changing reg in insn 172
changing reg in insn 173
changing reg in insn 180
changing reg in insn 188
changing reg in insn 183
changing reg in insn 184
changing reg in insn 184
changing reg in insn 185
changing reg in insn 185
changing reg in insn 190
changing reg in insn 186
changing reg in insn 191
changing reg in insn 187
changing reg in insn 192
changing reg in insn 201
changing reg in insn 202
changing reg in insn 202
changing reg in insn 203
changing reg in insn 228
changing reg in insn 229
changing reg in insn 229
changing reg in insn 230
changing reg in insn 235
changing reg in insn 236
changing reg in insn 236
changing reg in insn 237
changing reg in insn 241
changing reg in insn 249
changing reg in insn 244
changing reg in insn 245
changing reg in insn 245
changing reg in insn 246
changing reg in insn 246
changing reg in insn 251
changing reg in insn 247
changing reg in insn 252
changing reg in insn 248
changing reg in insn 253
changing reg in insn 262
changing reg in insn 263
changing reg in insn 263
changing reg in insn 264
changing reg in insn 267
changing reg in insn 275
changing reg in insn 270
changing reg in insn 271
changing reg in insn 271
changing reg in insn 272
changing reg in insn 272
changing reg in insn 277
changing reg in insn 273
changing reg in insn 278
changing reg in insn 274
changing reg in insn 279
changing reg in insn 286
changing reg in insn 287
changing reg in insn 287
changing reg in insn 288
changing reg in insn 288
changing reg in insn 290
changing reg in insn 293
changing reg in insn 294
changing reg in insn 304
changing reg in insn 305
changing reg in insn 305
changing reg in insn 308
changing reg in insn 315
changing reg in insn 316
changing reg in insn 316
changing reg in insn 318
changing reg in insn 324
changing reg in insn 332
changing reg in insn 328
changing reg in insn 329
changing reg in insn 329
changing reg in insn 334
changing reg in insn 330
changing reg in insn 335
changing reg in insn 331
changing reg in insn 336
changing reg in insn 342
changing reg in insn 343
changing reg in insn 343
changing reg in insn 344
changing reg in insn 349
changing reg in insn 350
changing reg in insn 350
changing reg in insn 351
changing reg in insn 356
changing reg in insn 364
changing reg in insn 359
changing reg in insn 360
changing reg in insn 360
changing reg in insn 361
changing reg in insn 361
changing reg in insn 366
changing reg in insn 362
changing reg in insn 367
changing reg in insn 363
changing reg in insn 368
changing reg in insn 374
changing reg in insn 375
changing reg in insn 375
changing reg in insn 376
changing reg in insn 389
changing reg in insn 391
changing reg in insn 399
changing reg in insn 400
changing reg in insn 406
changing reg in insn 407
changing reg in insn 409
changing reg in insn 410
changing reg in insn 410
changing reg in insn 411
changing reg in insn 416
changing reg in insn 417
changing reg in insn 419
changing reg in insn 420
changing reg in insn 420
changing reg in insn 422
changing reg in insn 421
changing reg in insn 423
changing reg in insn 437
changing reg in insn 438
changing reg in insn 442
changing reg in insn 443
changing reg in insn 443
changing reg in insn 444
changing reg in insn 447
changing reg in insn 448
changing reg in insn 450
changing reg in insn 452
changing reg in insn 485
changing reg in insn 488
changing reg in insn 488
changing reg in insn 497
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 35
changing reg in insn 36
changing reg in insn 44
changing reg in insn 45
changing reg in insn 53
changing reg in insn 54
changing reg in insn 58
changing reg in insn 59
changing reg in insn 65
changing reg in insn 66
changing reg in insn 63
changing reg in insn 65
changing reg in insn 65
changing reg in insn 64
changing reg in insn 65
changing reg in insn 70
changing reg in insn 71
changing reg in insn 79
changing reg in insn 80
changing reg in insn 89
changing reg in insn 90
changing reg in insn 98
changing reg in insn 99
changing reg in insn 109
changing reg in insn 110
changing reg in insn 116
changing reg in insn 117
changing reg in insn 121
changing reg in insn 122
changing reg in insn 128
changing reg in insn 129
changing reg in insn 133
changing reg in insn 135
changing reg in insn 141
changing reg in insn 142
changing reg in insn 162
changing reg in insn 163
changing reg in insn 169
changing reg in insn 170
changing reg in insn 181
changing reg in insn 182
changing reg in insn 199
changing reg in insn 200
changing reg in insn 226
changing reg in insn 227
changing reg in insn 233
changing reg in insn 234
changing reg in insn 242
changing reg in insn 243
changing reg in insn 260
changing reg in insn 261
changing reg in insn 268
changing reg in insn 269
changing reg in insn 284
changing reg in insn 285
changing reg in insn 289
changing reg in insn 291
changing reg in insn 302
changing reg in insn 303
changing reg in insn 307
changing reg in insn 308
changing reg in insn 306
changing reg in insn 307
changing reg in insn 313
changing reg in insn 314
changing reg in insn 322
changing reg in insn 323
changing reg in insn 321
changing reg in insn 322
changing reg in insn 325
changing reg in insn 326
changing reg in insn 340
changing reg in insn 341
changing reg in insn 347
changing reg in insn 348
changing reg in insn 357
changing reg in insn 358
changing reg in insn 372
changing reg in insn 373
changing reg in insn 386
changing reg in insn 387
changing reg in insn 395
changing reg in insn 396
changing reg in insn 400
changing reg in insn 401
changing reg in insn 412
changing reg in insn 413
changing reg in insn 429
changing reg in insn 430
changing reg in insn 433
changing reg in insn 434
changing reg in insn 440
changing reg in insn 441
changing reg in insn 451
changing reg in insn 455
changing reg in insn 453
changing reg in insn 454
changing reg in insn 462
changing reg in insn 465
changing reg in insn 463
changing reg in insn 464
changing reg in insn 470
changing reg in insn 471
changing reg in insn 473
changing reg in insn 474
changing reg in insn 476
changing reg in insn 477
changing reg in insn 479
changing reg in insn 480
changing reg in insn 481
changing reg in insn 482
changing reg in insn 4
changing reg in insn 492
deleting insn with uid = 20.
deleting insn with uid = 24.
deleting insn with uid = 28.
deleting insn with uid = 119.
deleting insn with uid = 137.
deleting insn with uid = 154.
deleting insn with uid = 190.
deleting insn with uid = 191.
deleting insn with uid = 251.
deleting insn with uid = 252.
deleting insn with uid = 277.
deleting insn with uid = 278.
deleting insn with uid = 293.
deleting insn with uid = 328.
deleting insn with uid = 334.
deleting insn with uid = 335.
deleting insn with uid = 366.
deleting insn with uid = 367.
deleting insn with uid = 389.
deleting insn with uid = 409.
deleting insn with uid = 419.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 57.
verify found no changes in insn with uid = 73.
verify found no changes in insn with uid = 76.
verify found no changes in insn with uid = 82.
verify found no changes in insn with uid = 118.
verify found no changes in insn with uid = 124.
verify found no changes in insn with uid = 136.
verify found no changes in insn with uid = 156.
verify found no changes in insn with uid = 193.
verify found no changes in insn with uid = 254.
verify found no changes in insn with uid = 280.
verify found no changes in insn with uid = 292.
verify found no changes in insn with uid = 327.
verify found no changes in insn with uid = 337.
verify found no changes in insn with uid = 369.
verify found no changes in insn with uid = 388.
verify found no changes in insn with uid = 398.
verify found no changes in insn with uid = 408.
verify found no changes in insn with uid = 415.
verify found no changes in insn with uid = 418.
verify found no changes in insn with uid = 424.
verify found no changes in insn with uid = 436.
verify found no changes in insn with uid = 439.
verify found no changes in insn with uid = 449.
verify found no changes in insn with uid = 457.
verify found no changes in insn with uid = 467.
verify found no changes in insn with uid = 472.
verify found no changes in insn with uid = 475.
verify found no changes in insn with uid = 478.
verify found no changes in insn with uid = 484.
verify found no changes in insn with uid = 494.


not_main

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame] 20 [xmm0]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [xmm0] 21 [xmm1] 36 [r8]
;;  ref usage 	r0={166d,139u} r1={75d,38u} r2={46d,10u} r3={1d,1u} r4={50d,14u} r5={67d,32u} r6={1d,190u} r7={1d,86u} r8={35d} r9={35d} r10={35d} r11={35d} r12={35d} r13={35d} r14={35d} r15={35d} r17={100d,25u} r18={35d} r19={1d,1u,48e} r20={44d,13u,1e} r21={37d,1u} r22={36d} r23={36d} r24={36d} r25={36d} r26={36d} r27={36d} r28={35d} r29={35d} r30={35d} r31={35d} r32={35d} r33={35d} r34={35d} r35={35d} r36={42d,6u} r37={36d} r38={35d} r39={35d} r44={35d} r45={35d} r46={35d} r47={35d} r48={35d} r49={35d} r50={35d} r51={35d} r52={35d} r53={35d} r54={35d} r55={35d} r56={35d} r57={35d} r58={35d} r59={35d} r60={35d} r61={35d} r62={35d} r63={35d} r64={35d} r65={35d} r66={35d} r67={35d} r68={35d} r69={35d} r70={35d} r71={35d} r72={35d} r73={35d} r74={35d} r75={35d} 
;;    total ref usage 3273{2668d,556u,49e} in 372{337 regular + 35 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 84 180 181 262
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [1 input+0 S8 A64])
        (reg:DI 5 di [ input ])) "calc.c":153:1 74 {*movdi_internal}
     (nil))
(note 3 2 4 2 NOTE_INSN_FUNCTION_BEG)
(insn 4 3 7 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [8 D.4773+0 S8 A64])
                (unspec:DI [
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_SET))
            (set (reg:DI 0 ax [262])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":153:1 1159 {stack_protect_set_1_di}
     (nil))
(insn 7 4 8 2 (set (reg:DI 0 ax [180])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [1 input+0 S8 A64])) "calc.c":154:5 74 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 4 si)
        (reg:DI 0 ax [180])) "calc.c":154:5 74 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 0 ax [181])
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f09f16f8990 *.LC10>)) "calc.c":154:5 74 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [181])) "calc.c":154:5 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f09f16f8990 *.LC10>)
        (nil)))
(insn 11 10 12 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "calc.c":154:5 77 {*movqi_internal}
     (nil))
(call_insn 12 11 13 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f09f183f100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "calc.c":154:5 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 13 12 14 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -327 [0xfffffffffffffeb9])) [0 signs+0 S4 A8])
        (const_int 791293227 [0x2f2a2d2b])) "calc.c":156:10 75 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -323 [0xfffffffffffffebd])) [0 signs+4 S2 A8])
        (const_int 27998 [0x6d5e])) "calc.c":156:10 76 {*movhi_internal}
     (nil))
(insn 15 14 16 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -321 [0xfffffffffffffebf])) [0 signs+6 S1 A8])
        (const_int 0 [0])) "calc.c":156:10 77 {*movqi_internal}
     (nil))
(insn 16 15 17 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -333 [0xfffffffffffffeb3])) [0 flfunc+0 S4 A8])
        (const_int 1953719137 [0x74736361])) "calc.c":157:10 75 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (set (mem/c:HI (plus:DI (reg/f:DI 6 bp)
                (const_int -329 [0xfffffffffffffeb7])) [0 flfunc+4 S2 A8])
        (const_int 108 [0x6c])) "calc.c":157:10 76 {*movhi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "calc.c":163:22 77 {*movqi_internal}
     (nil))
(call_insn 19 18 21 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("createStack") [flags 0x41]  <function_decl 0x7f09f164e500 createStack>) [0 createStack S1 A8])
            (const_int 0 [0]))) "calc.c":163:22 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (nil)))
(insn 21 19 22 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -400 [0xfffffffffffffe70])) [4 stack+0 S8 A128])
        (reg/f:DI 0 ax [orig:82 _1 ] [82])) "calc.c":163:14 74 {*movdi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "calc.c":164:28 77 {*movqi_internal}
     (nil))
(call_insn 23 22 25 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("createStack") [flags 0x41]  <function_decl 0x7f09f164e500 createStack>) [0 createStack S1 A8])
            (const_int 0 [0]))) "calc.c":164:28 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (nil)))
(insn 25 23 26 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -392 [0xfffffffffffffe78])) [4 stack_prior+0 S8 A64])
        (reg/f:DI 0 ax [orig:83 _2 ] [83])) "calc.c":164:14 74 {*movdi_internal}
     (nil))
(insn 26 25 27 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "calc.c":165:29 77 {*movqi_internal}
     (nil))
(call_insn 27 26 29 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("createFStack") [flags 0x41]  <function_decl 0x7f09f164eb00 createFStack>) [0 createFStack S1 A8])
            (const_int 0 [0]))) "calc.c":165:29 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (nil)))
(insn 29 27 30 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [3 stack_double+0 S8 A128])
        (reg/f:DI 0 ax [orig:84 _3 ] [84])) "calc.c":165:14 74 {*movdi_internal}
     (nil))
(insn 30 29 31 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -408 [0xfffffffffffffe68])) [5 last_sign+0 S4 A64])
        (const_int 3 [0x3])) "calc.c":166:9 75 {*movsi_internal}
     (nil))
(insn 31 30 502 2 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])
        (const_int 0 [0])) "calc.c":168:17 74 {*movdi_internal}
     (nil))
(jump_insn 502 31 503 2 (set (pc)
        (label_ref 384)) "calc.c":168:5 807 {jump}
     (nil)
 -> 384)
;;  succ:       40 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 503 502 390)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       40
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 85 86 182 183
(code_label 390 503 34 3 74 (nil) [1 uses])
(note 34 390 35 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 3 (set (reg/f:DI 1 dx [182])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [1 input+0 S8 A64])) "calc.c":170:18 74 {*movdi_internal}
     (nil))
(insn 36 35 37 3 (set (reg:DI 0 ax [183])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])) "calc.c":170:18 74 {*movdi_internal}
     (nil))
(insn 37 36 38 3 (parallel [
            (set (reg/f:DI 0 ax [orig:85 _4 ] [85])
                (plus:DI (reg:DI 0 ax [183])
                    (reg/f:DI 1 dx [182])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":170:18 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
        (nil)))
(insn 38 37 41 3 (set (reg:QI 0 ax [orig:86 _5 ] [86])
        (mem:QI (reg/f:DI 0 ax [orig:85 _4 ] [85]) [0 *_4+0 S1 A8])) "calc.c":170:18 77 {*movqi_internal}
     (nil))
(insn 41 38 42 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:QI 0 ax [orig:86 _5 ] [86])
            (const_int 47 [0x2f]))) "calc.c":170:12 9 {*cmpqi_1}
     (nil))
(jump_insn 42 41 43 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 126)
            (pc))) "calc.c":170:12 806 {*jcc}
     (nil)
 -> 126)
;;  succ:       4 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 87 88 184 185
(note 43 42 44 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 4 (set (reg/f:DI 1 dx [184])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [1 input+0 S8 A64])) "calc.c":170:37 74 {*movdi_internal}
     (nil))
(insn 45 44 46 4 (set (reg:DI 0 ax [185])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])) "calc.c":170:37 74 {*movdi_internal}
     (nil))
(insn 46 45 47 4 (parallel [
            (set (reg/f:DI 0 ax [orig:87 _6 ] [87])
                (plus:DI (reg:DI 0 ax [185])
                    (reg/f:DI 1 dx [184])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":170:37 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
        (nil)))
(insn 47 46 50 4 (set (reg:QI 0 ax [orig:88 _7 ] [88])
        (mem:QI (reg/f:DI 0 ax [orig:87 _6 ] [87]) [0 *_6+0 S1 A8])) "calc.c":170:37 77 {*movqi_internal}
     (nil))
(insn 50 47 51 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:QI 0 ax [orig:88 _7 ] [88])
            (const_int 57 [0x39]))) "calc.c":170:29 9 {*cmpqi_1}
     (nil))
(jump_insn 51 50 52 4 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 126)
            (pc))) "calc.c":170:29 806 {*jcc}
     (nil)
 -> 126)
;;  succ:       5 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 89 186 187 188
(note 52 51 53 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 5 (set (reg/f:DI 1 dx [186])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [1 input+0 S8 A64])) "calc.c":173:27 74 {*movdi_internal}
     (nil))
(insn 54 53 55 5 (set (reg:DI 0 ax [187])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])) "calc.c":173:27 74 {*movdi_internal}
     (nil))
(insn 55 54 56 5 (parallel [
            (set (reg/f:DI 0 ax [orig:89 _8 ] [89])
                (plus:DI (reg:DI 0 ax [187])
                    (reg/f:DI 1 dx [186])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":173:27 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
        (nil)))
(insn 56 55 57 5 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:89 _8 ] [89])) "calc.c":173:22 74 {*movdi_internal}
     (nil))
(call_insn/i 57 56 58 5 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":173:22 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 58 57 59 5 (set (reg:DF 0 ax [188])
        (reg:DF 20 xmm0)) "calc.c":173:22 135 {*movdf_internal}
     (nil))
(insn 59 58 60 5 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -376 [0xfffffffffffffe88])) [2 values+0 S8 A64])
        (reg:DF 0 ax [188])) "calc.c":173:22 135 {*movdf_internal}
     (nil))
(insn 60 59 61 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -408 [0xfffffffffffffe68])) [5 last_sign+0 S4 A64])
            (const_int 2 [0x2]))) "calc.c":174:16 11 {*cmpsi_1}
     (nil))
(jump_insn 61 60 62 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) "calc.c":174:16 806 {*jcc}
     (nil)
 -> 67)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 189 190 191
(note 62 61 63 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 6 (set (reg:DF 20 xmm0 [190])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -376 [0xfffffffffffffe88])) [2 values+0 S8 A64])) "calc.c":174:37 135 {*movdf_internal}
     (nil))
(insn 64 63 65 6 (set (reg:V2DF 21 xmm1 [191])
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S16 A128])) "calc.c":174:37 1448 {movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF -0.0 [-0x0.0p+0])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 65 64 66 6 (parallel [
            (set (reg:DF 20 xmm0 [189])
                (neg:DF (reg:DF 20 xmm0 [190])))
            (use (reg:V2DF 21 xmm1 [191]))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":174:37 613 {*negdf2_1}
     (expr_list:REG_EQUAL (neg:DF (reg:DF 20 xmm0 [190]))
        (nil)))
(insn 66 65 67 6 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -376 [0xfffffffffffffe88])) [2 values+0 S8 A64])
        (reg:DF 20 xmm0 [189])) "calc.c":174:37 135 {*movdf_internal}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 90 91 92 192 193
(code_label 67 66 68 7 53 (nil) [1 uses])
(note 68 67 69 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 7 (set (reg/f:DI 0 ax [orig:90 stack_double.0_9 ] [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [3 stack_double+0 S8 A128])) "calc.c":175:13 74 {*movdi_internal}
     (nil))
(insn 70 69 71 7 (set (reg:DF 1 dx [192])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -376 [0xfffffffffffffe88])) [2 values+0 S8 A64])) "calc.c":175:13 135 {*movdf_internal}
     (nil))
(insn 71 70 72 7 (set (reg:DF 20 xmm0)
        (reg:DF 1 dx [192])) "calc.c":175:13 135 {*movdf_internal}
     (nil))
(insn 72 71 73 7 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:90 stack_double.0_9 ] [90])) "calc.c":175:13 74 {*movdi_internal}
     (nil))
(call_insn 73 72 74 7 (call (mem:QI (symbol_ref:DI ("Fpush") [flags 0x41]  <function_decl 0x7f09f164ed00 Fpush>) [0 Fpush S1 A8])
        (const_int 0 [0])) "calc.c":175:13 813 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DF (use (reg:DF 20 xmm0))
            (nil))))
(insn 74 73 75 7 (set (reg/f:DI 0 ax [orig:91 stack_double.1_10 ] [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [3 stack_double+0 S8 A128])) "calc.c":176:13 74 {*movdi_internal}
     (nil))
(insn 75 74 76 7 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:91 stack_double.1_10 ] [91])) "calc.c":176:13 74 {*movdi_internal}
     (nil))
(call_insn 76 75 77 7 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("Fpeek") [flags 0x41]  <function_decl 0x7f09f164ef00 Fpeek>) [0 Fpeek S1 A8])
            (const_int 0 [0]))) "calc.c":176:13 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 77 76 78 7 (set (reg:DF 0 ax [orig:92 _11 ] [92])
        (reg:DF 20 xmm0)) "calc.c":176:13 135 {*movdf_internal}
     (nil))
(insn 78 77 79 7 (set (reg:DF 20 xmm0)
        (reg:DF 0 ax [orig:92 _11 ] [92])) "calc.c":176:13 135 {*movdf_internal}
     (nil))
(insn 79 78 80 7 (set (reg:DI 0 ax [193])
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7f09f16f8a20 *.LC12>)) "calc.c":176:13 74 {*movdi_internal}
     (nil))
(insn 80 79 81 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [193])) "calc.c":176:13 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7f09f16f8a20 *.LC12>)
        (nil)))
(insn 81 80 82 7 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) "calc.c":176:13 77 {*movqi_internal}
     (nil))
(call_insn 82 81 504 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f09f183f100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "calc.c":176:13 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DF (use (reg:DF 20 xmm0))
                (nil)))))
(jump_insn 504 82 505 7 (set (pc)
        (label_ref 87)) "calc.c":177:19 807 {jump}
     (nil)
 -> 87)
;;  succ:       9 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 505 504 102)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       10
;;              11
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 102 505 85 8 56 (nil) [2 uses])
(note 85 102 86 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 87 8 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])
                (plus:DI (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":178:18 210 {*adddi_1}
     (nil))
;;  succ:       9 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU,DFS_BACK)
;;              7 [always] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 93 94 194 195
(code_label 87 86 88 9 54 (nil) [1 uses])
(note 88 87 89 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 89 88 90 9 (set (reg/f:DI 1 dx [194])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [1 input+0 S8 A64])) "calc.c":177:27 74 {*movdi_internal}
     (nil))
(insn 90 89 91 9 (set (reg:DI 0 ax [195])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])) "calc.c":177:27 74 {*movdi_internal}
     (nil))
(insn 91 90 92 9 (parallel [
            (set (reg/f:DI 0 ax [orig:93 _12 ] [93])
                (plus:DI (reg:DI 0 ax [195])
                    (reg/f:DI 1 dx [194])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":177:27 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
        (nil)))
(insn 92 91 95 9 (set (reg:QI 0 ax [orig:94 _13 ] [94])
        (mem:QI (reg/f:DI 0 ax [orig:93 _12 ] [93]) [0 *_12+0 S1 A8])) "calc.c":177:27 77 {*movqi_internal}
     (nil))
(insn 95 92 96 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:QI 0 ax [orig:94 _13 ] [94])
            (const_int 47 [0x2f]))) "calc.c":177:58 9 {*cmpqi_1}
     (nil))
(jump_insn 96 95 97 9 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 107)
            (pc))) "calc.c":177:58 806 {*jcc}
     (nil)
 -> 107)
;;  succ:       10 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 95 96 196 197
(note 97 96 98 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 98 97 99 10 (set (reg/f:DI 1 dx [196])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [1 input+0 S8 A64])) "calc.c":177:46 74 {*movdi_internal}
     (nil))
(insn 99 98 100 10 (set (reg:DI 0 ax [197])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])) "calc.c":177:46 74 {*movdi_internal}
     (nil))
(insn 100 99 101 10 (parallel [
            (set (reg/f:DI 0 ax [orig:95 _14 ] [95])
                (plus:DI (reg:DI 0 ax [197])
                    (reg/f:DI 1 dx [196])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":177:46 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
        (nil)))
(insn 101 100 105 10 (set (reg:QI 0 ax [orig:96 _15 ] [96])
        (mem:QI (reg/f:DI 0 ax [orig:95 _14 ] [95]) [0 *_14+0 S1 A8])) "calc.c":177:46 77 {*movqi_internal}
     (nil))
(insn 105 101 106 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:QI 0 ax [orig:96 _15 ] [96])
            (const_int 57 [0x39]))) "calc.c":177:38 9 {*cmpqi_1}
     (nil))
(jump_insn 106 105 107 10 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 102)
            (pc))) "calc.c":177:38 806 {*jcc}
     (nil)
 -> 102)
;;  succ:       8
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       9
;;              10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 97 98 198 199
(code_label 107 106 108 11 55 (nil) [1 uses])
(note 108 107 109 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 109 108 110 11 (set (reg/f:DI 1 dx [198])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [1 input+0 S8 A64])) "calc.c":177:66 74 {*movdi_internal}
     (nil))
(insn 110 109 111 11 (set (reg:DI 0 ax [199])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])) "calc.c":177:66 74 {*movdi_internal}
     (nil))
(insn 111 110 112 11 (parallel [
            (set (reg/f:DI 0 ax [orig:97 _16 ] [97])
                (plus:DI (reg:DI 0 ax [199])
                    (reg/f:DI 1 dx [198])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":177:66 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
        (nil)))
(insn 112 111 113 11 (set (reg:QI 0 ax [orig:98 _17 ] [98])
        (mem:QI (reg/f:DI 0 ax [orig:97 _16 ] [97]) [0 *_16+0 S1 A8])) "calc.c":177:66 77 {*movqi_internal}
     (nil))
(insn 113 112 114 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:98 _17 ] [98])
            (const_int 46 [0x2e]))) "calc.c":177:58 9 {*cmpqi_1}
     (nil))
(jump_insn 114 113 115 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 102)
            (pc))) "calc.c":177:58 806 {*jcc}
     (nil)
 -> 102)
;;  succ:       8
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 99 200 201
(note 115 114 116 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 12 (parallel [
            (set (reg:DI 0 ax [200])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -320 [0xfffffffffffffec0])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":179:13 210 {*adddi_1}
     (nil))
(insn 117 116 118 12 (set (reg:DI 5 di)
        (reg:DI 0 ax [200])) "calc.c":179:13 74 {*movdi_internal}
     (nil))
(call_insn/i 118 117 120 12 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x7f09f1838700 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) "calc.c":179:13 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 120 118 121 12 (set (reg:DI 4 si)
        (reg:DI 0 ax [orig:99 _18 ] [99])) "calc.c":179:13 74 {*movdi_internal}
     (nil))
(insn 121 120 122 12 (set (reg:DI 0 ax [201])
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f09f16f8ab0 *.LC13>)) "calc.c":179:13 74 {*movdi_internal}
     (nil))
(insn 122 121 123 12 (set (reg:DI 5 di)
        (reg:DI 0 ax [201])) "calc.c":179:13 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f09f16f8ab0 *.LC13>)
        (nil)))
(insn 123 122 124 12 (set (reg:QI 0 ax)
        (const_int 0 [0])) "calc.c":179:13 77 {*movqi_internal}
     (nil))
(call_insn 124 123 125 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f09f183f100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "calc.c":179:13 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 125 124 126 12 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -408 [0xfffffffffffffe68])) [5 last_sign+0 S4 A64])
        (const_int 0 [0])) "calc.c":180:22 75 {*movsi_internal}
     (nil))
;;  succ:       13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       3
;;              4
;;              12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 100 101 102 103 202 203 204
(code_label 126 125 127 13 52 (nil) [2 uses])
(note 127 126 128 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 128 127 129 13 (set (reg/f:DI 1 dx [202])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [1 input+0 S8 A64])) "calc.c":182:32 74 {*movdi_internal}
     (nil))
(insn 129 128 130 13 (set (reg:DI 0 ax [203])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])) "calc.c":182:32 74 {*movdi_internal}
     (nil))
(insn 130 129 131 13 (parallel [
            (set (reg/f:DI 0 ax [orig:100 _19 ] [100])
                (plus:DI (reg:DI 0 ax [203])
                    (reg/f:DI 1 dx [202])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":182:32 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
        (nil)))
(insn 131 130 132 13 (set (reg:QI 0 ax [orig:101 _20 ] [101])
        (mem:QI (reg/f:DI 0 ax [orig:100 _19 ] [100]) [0 *_19+0 S1 A8])) "calc.c":182:32 77 {*movqi_internal}
     (nil))
(insn 132 131 133 13 (set (reg:SI 1 dx [orig:102 _21 ] [102])
        (sign_extend:SI (reg:QI 0 ax [orig:101 _20 ] [101]))) "calc.c":182:13 153 {extendqisi2}
     (nil))
(insn 133 132 134 13 (parallel [
            (set (reg:DI 0 ax [204])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -327 [0xfffffffffffffeb9])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":182:13 210 {*adddi_1}
     (nil))
(insn 134 133 135 13 (set (reg:SI 4 si)
        (reg:SI 1 dx [orig:102 _21 ] [102])) "calc.c":182:13 75 {*movsi_internal}
     (nil))
(insn 135 134 136 13 (set (reg:DI 5 di)
        (reg:DI 0 ax [204])) "calc.c":182:13 74 {*movdi_internal}
     (nil))
(call_insn/i 136 135 138 13 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strchr") [flags 0x41]  <function_decl 0x7f09f1835b00 strchr>) [0 __builtin_strchr S1 A8])
            (const_int 0 [0]))) "calc.c":182:13 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 138 136 139 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:103 _22 ] [103])
            (const_int 0 [0]))) "calc.c":182:12 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 139 138 140 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 282)
            (pc))) "calc.c":182:12 806 {*jcc}
     (nil)
 -> 282)
;;  succ:       14 (FALLTHRU)
;;              30
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 104 105 205 206
(note 140 139 141 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 141 140 142 14 (set (reg/f:DI 1 dx [205])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [1 input+0 S8 A64])) "calc.c":184:22 74 {*movdi_internal}
     (nil))
(insn 142 141 143 14 (set (reg:DI 0 ax [206])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])) "calc.c":184:22 74 {*movdi_internal}
     (nil))
(insn 143 142 144 14 (parallel [
            (set (reg/f:DI 0 ax [orig:104 _23 ] [104])
                (plus:DI (reg:DI 0 ax [206])
                    (reg/f:DI 1 dx [205])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":184:22 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
        (nil)))
(insn 144 143 145 14 (set (reg:QI 0 ax [orig:105 _24 ] [105])
        (mem:QI (reg/f:DI 0 ax [orig:104 _23 ] [104]) [0 *_23+0 S1 A8])) "calc.c":184:22 77 {*movqi_internal}
     (nil))
(insn 145 144 146 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:105 _24 ] [105])
            (const_int 109 [0x6d]))) "calc.c":184:16 9 {*cmpqi_1}
     (nil))
(jump_insn 146 145 147 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 160)
            (pc))) "calc.c":184:16 806 {*jcc}
     (nil)
 -> 160)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 106 107 108
(note 147 146 148 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 148 147 149 15 (set (reg/f:DI 1 dx [orig:106 stack_double.2_25 ] [106])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [3 stack_double+0 S8 A128])) "calc.c":186:17 74 {*movdi_internal}
     (nil))
(insn 149 148 150 15 (set (reg/f:DI 4 si [orig:107 stack_prior.3_26 ] [107])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -392 [0xfffffffffffffe78])) [4 stack_prior+0 S8 A64])) "calc.c":186:17 74 {*movdi_internal}
     (nil))
(insn 150 149 151 15 (set (reg/f:DI 0 ax [orig:108 stack.4_27 ] [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -400 [0xfffffffffffffe70])) [4 stack+0 S8 A128])) "calc.c":186:17 74 {*movdi_internal}
     (nil))
(insn 151 150 152 15 (set (reg:DI 36 r8)
        (reg/f:DI 1 dx [orig:106 stack_double.2_25 ] [106])) "calc.c":186:17 74 {*movdi_internal}
     (nil))
(insn 152 151 153 15 (set (reg:SI 2 cx)
        (const_int 2 [0x2])) "calc.c":186:17 75 {*movsi_internal}
     (nil))
(insn 153 152 155 15 (set (reg:SI 1 dx)
        (const_int 37 [0x25])) "calc.c":186:17 75 {*movsi_internal}
     (nil))
(insn 155 153 156 15 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:108 stack.4_27 ] [108])) "calc.c":186:17 74 {*movdi_internal}
     (nil))
(call_insn 156 155 157 15 (call (mem:QI (symbol_ref:DI ("push_func") [flags 0x3]  <function_decl 0x7f09f1657a00 push_func>) [0 push_func S1 A8])
        (const_int 0 [0])) "calc.c":186:17 813 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (nil)))))))
(insn 157 156 506 15 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -408 [0xfffffffffffffe68])) [5 last_sign+0 S4 A64])
        (const_int 3 [0x3])) "calc.c":187:26 75 {*movsi_internal}
     (nil))
(jump_insn 506 157 507 15 (set (pc)
        (label_ref 282)) 807 {jump}
     (nil)
 -> 282)
;;  succ:       30 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 507 506 160)
;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       14
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 109 110 207 208
(code_label 160 507 161 16 58 (nil) [1 uses])
(note 161 160 162 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 162 161 163 16 (set (reg/f:DI 1 dx [207])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [1 input+0 S8 A64])) "calc.c":189:27 74 {*movdi_internal}
     (nil))
(insn 163 162 164 16 (set (reg:DI 0 ax [208])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])) "calc.c":189:27 74 {*movdi_internal}
     (nil))
(insn 164 163 165 16 (parallel [
            (set (reg/f:DI 0 ax [orig:109 _28 ] [109])
                (plus:DI (reg:DI 0 ax [208])
                    (reg/f:DI 1 dx [207])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":189:27 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
        (nil)))
(insn 165 164 166 16 (set (reg:QI 0 ax [orig:110 _29 ] [110])
        (mem:QI (reg/f:DI 0 ax [orig:109 _28 ] [109]) [0 *_28+0 S1 A8])) "calc.c":189:27 77 {*movqi_internal}
     (nil))
(insn 166 165 167 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:110 _29 ] [110])
            (const_int 43 [0x2b]))) "calc.c":189:21 9 {*cmpqi_1}
     (nil))
(jump_insn 167 166 168 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 175)
            (pc))) "calc.c":189:21 806 {*jcc}
     (nil)
 -> 175)
;;  succ:       18
;;              17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 111 112 209 210
(note 168 167 169 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 169 168 170 17 (set (reg/f:DI 1 dx [209])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [1 input+0 S8 A64])) "calc.c":189:46 74 {*movdi_internal}
     (nil))
(insn 170 169 171 17 (set (reg:DI 0 ax [210])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])) "calc.c":189:46 74 {*movdi_internal}
     (nil))
(insn 171 170 172 17 (parallel [
            (set (reg/f:DI 0 ax [orig:111 _30 ] [111])
                (plus:DI (reg:DI 0 ax [210])
                    (reg/f:DI 1 dx [209])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":189:46 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
        (nil)))
(insn 172 171 173 17 (set (reg:QI 0 ax [orig:112 _31 ] [112])
        (mem:QI (reg/f:DI 0 ax [orig:111 _30 ] [111]) [0 *_30+0 S1 A8])) "calc.c":189:46 77 {*movqi_internal}
     (nil))
(insn 173 172 174 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:112 _31 ] [112])
            (const_int 45 [0x2d]))) "calc.c":189:38 9 {*cmpqi_1}
     (nil))
(jump_insn 174 173 175 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 224)
            (pc))) "calc.c":189:38 806 {*jcc}
     (nil)
 -> 224)
;;  succ:       18 (FALLTHRU)
;;              25
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       16
;;              17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 175 174 176 18 59 (nil) [1 uses])
(note 176 175 177 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 177 176 178 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -408 [0xfffffffffffffe68])) [5 last_sign+0 S4 A64])
            (const_int 0 [0]))) "calc.c":190:20 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 178 177 179 18 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 197)
            (pc))) "calc.c":190:20 806 {*jcc}
     (nil)
 -> 197)
;;  succ:       19 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 113 114 115 116 117 118 211 212
(note 179 178 180 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 180 179 181 19 (set (reg/f:DI 2 cx [orig:113 stack_double.5_32 ] [113])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [3 stack_double+0 S8 A128])) "calc.c":190:37 74 {*movdi_internal}
     (nil))
(insn 181 180 182 19 (set (reg/f:DI 1 dx [211])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [1 input+0 S8 A64])) "calc.c":190:72 74 {*movdi_internal}
     (nil))
(insn 182 181 183 19 (set (reg:DI 0 ax [212])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])) "calc.c":190:72 74 {*movdi_internal}
     (nil))
(insn 183 182 184 19 (parallel [
            (set (reg/f:DI 0 ax [orig:114 _33 ] [114])
                (plus:DI (reg:DI 0 ax [212])
                    (reg/f:DI 1 dx [211])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":190:72 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
        (nil)))
(insn 184 183 185 19 (set (reg:QI 0 ax [orig:115 _34 ] [115])
        (mem:QI (reg/f:DI 0 ax [orig:114 _33 ] [114]) [0 *_33+0 S1 A8])) "calc.c":190:72 77 {*movqi_internal}
     (nil))
(insn 185 184 186 19 (set (reg:SI 1 dx [orig:116 _35 ] [116])
        (sign_extend:SI (reg:QI 0 ax [orig:115 _34 ] [115]))) "calc.c":190:37 153 {extendqisi2}
     (nil))
(insn 186 185 187 19 (set (reg/f:DI 4 si [orig:117 stack_prior.6_36 ] [117])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -392 [0xfffffffffffffe78])) [4 stack_prior+0 S8 A64])) "calc.c":190:37 74 {*movdi_internal}
     (nil))
(insn 187 186 188 19 (set (reg/f:DI 0 ax [orig:118 stack.7_37 ] [118])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -400 [0xfffffffffffffe70])) [4 stack+0 S8 A128])) "calc.c":190:37 74 {*movdi_internal}
     (nil))
(insn 188 187 189 19 (set (reg:DI 36 r8)
        (reg/f:DI 2 cx [orig:113 stack_double.5_32 ] [113])) "calc.c":190:37 74 {*movdi_internal}
     (nil))
(insn 189 188 192 19 (set (reg:SI 2 cx)
        (const_int 1 [0x1])) "calc.c":190:37 75 {*movsi_internal}
     (nil))
(insn 192 189 193 19 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:118 stack.7_37 ] [118])) "calc.c":190:37 74 {*movdi_internal}
     (nil))
(call_insn 193 192 194 19 (call (mem:QI (symbol_ref:DI ("push_func") [flags 0x3]  <function_decl 0x7f09f1657a00 push_func>) [0 push_func S1 A8])
        (const_int 0 [0])) "calc.c":190:37 813 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (nil)))))))
(insn 194 193 508 19 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -408 [0xfffffffffffffe68])) [5 last_sign+0 S4 A64])
        (const_int 3 [0x3])) "calc.c":190:103 75 {*movsi_internal}
     (nil))
(jump_insn 508 194 509 19 (set (pc)
        (label_ref 282)) "calc.c":190:20 807 {jump}
     (nil)
 -> 282)
;;  succ:       30 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 509 508 197)
;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       18
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 119 120 213 214
(code_label 197 509 198 20 61 (nil) [1 uses])
(note 198 197 199 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 199 198 200 20 (set (reg/f:DI 1 dx [213])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [1 input+0 S8 A64])) "calc.c":191:30 74 {*movdi_internal}
     (nil))
(insn 200 199 201 20 (set (reg:DI 0 ax [214])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])) "calc.c":191:30 74 {*movdi_internal}
     (nil))
(insn 201 200 202 20 (parallel [
            (set (reg/f:DI 0 ax [orig:119 _38 ] [119])
                (plus:DI (reg:DI 0 ax [214])
                    (reg/f:DI 1 dx [213])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":191:30 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
        (nil)))
(insn 202 201 203 20 (set (reg:QI 0 ax [orig:120 _39 ] [120])
        (mem:QI (reg/f:DI 0 ax [orig:119 _38 ] [119]) [0 *_38+0 S1 A8])) "calc.c":191:30 77 {*movqi_internal}
     (nil))
(insn 203 202 204 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:120 _39 ] [120])
            (const_int 45 [0x2d]))) "calc.c":191:24 9 {*cmpqi_1}
     (nil))
(jump_insn 204 203 205 20 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 217)
            (pc))) "calc.c":191:24 806 {*jcc}
     (nil)
 -> 217)
;;  succ:       21 (FALLTHRU)
;;              24
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 205 204 206 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 206 205 207 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -408 [0xfffffffffffffe68])) [5 last_sign+0 S4 A64])
            (const_int 2 [0x2]))) "calc.c":192:24 11 {*cmpsi_1}
     (nil))
(jump_insn 207 206 208 21 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 212)
            (pc))) "calc.c":192:24 806 {*jcc}
     (nil)
 -> 212)
;;  succ:       22 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 208 207 209 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 209 208 510 22 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -408 [0xfffffffffffffe68])) [5 last_sign+0 S4 A64])
        (const_int 1 [0x1])) "calc.c":192:50 75 {*movsi_internal}
     (nil))
(jump_insn 510 209 511 22 (set (pc)
        (label_ref 282)) "calc.c":190:20 807 {jump}
     (nil)
 -> 282)
;;  succ:       30 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 511 510 212)
;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       21
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 212 511 213 23 64 (nil) [1 uses])
(note 213 212 214 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 214 213 512 23 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -408 [0xfffffffffffffe68])) [5 last_sign+0 S4 A64])
        (const_int 2 [0x2])) "calc.c":193:35 75 {*movsi_internal}
     (nil))
(jump_insn 512 214 513 23 (set (pc)
        (label_ref 282)) "calc.c":190:20 807 {jump}
     (nil)
 -> 282)
;;  succ:       30 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 513 512 217)
;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       20
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 217 513 218 24 63 (nil) [1 uses])
(note 218 217 219 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 219 218 514 24 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -408 [0xfffffffffffffe68])) [5 last_sign+0 S4 A64])
        (const_int 1 [0x1])) "calc.c":195:31 75 {*movsi_internal}
     (nil))
(jump_insn 514 219 515 24 (set (pc)
        (label_ref 282)) "calc.c":190:20 807 {jump}
     (nil)
 -> 282)
;;  succ:       30 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 515 514 224)
;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL, MODIFIED)
;;  pred:       17
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 121 122 215 216
(code_label 224 515 225 25 60 (nil) [1 uses])
(note 225 224 226 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 226 225 227 25 (set (reg/f:DI 1 dx [215])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [1 input+0 S8 A64])) "calc.c":196:27 74 {*movdi_internal}
     (nil))
(insn 227 226 228 25 (set (reg:DI 0 ax [216])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])) "calc.c":196:27 74 {*movdi_internal}
     (nil))
(insn 228 227 229 25 (parallel [
            (set (reg/f:DI 0 ax [orig:121 _40 ] [121])
                (plus:DI (reg:DI 0 ax [216])
                    (reg/f:DI 1 dx [215])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":196:27 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
        (nil)))
(insn 229 228 230 25 (set (reg:QI 0 ax [orig:122 _41 ] [122])
        (mem:QI (reg/f:DI 0 ax [orig:121 _40 ] [121]) [0 *_40+0 S1 A8])) "calc.c":196:27 77 {*movqi_internal}
     (nil))
(insn 230 229 231 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:122 _41 ] [122])
            (const_int 42 [0x2a]))) "calc.c":196:21 9 {*cmpqi_1}
     (nil))
(jump_insn 231 230 232 25 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 239)
            (pc))) "calc.c":196:21 806 {*jcc}
     (nil)
 -> 239)
;;  succ:       27
;;              26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 123 124 217 218
(note 232 231 233 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 233 232 234 26 (set (reg/f:DI 1 dx [217])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [1 input+0 S8 A64])) "calc.c":196:46 74 {*movdi_internal}
     (nil))
(insn 234 233 235 26 (set (reg:DI 0 ax [218])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])) "calc.c":196:46 74 {*movdi_internal}
     (nil))
(insn 235 234 236 26 (parallel [
            (set (reg/f:DI 0 ax [orig:123 _42 ] [123])
                (plus:DI (reg:DI 0 ax [218])
                    (reg/f:DI 1 dx [217])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":196:46 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
        (nil)))
(insn 236 235 237 26 (set (reg:QI 0 ax [orig:124 _43 ] [124])
        (mem:QI (reg/f:DI 0 ax [orig:123 _42 ] [123]) [0 *_42+0 S1 A8])) "calc.c":196:46 77 {*movqi_internal}
     (nil))
(insn 237 236 238 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:124 _43 ] [124])
            (const_int 47 [0x2f]))) "calc.c":196:38 9 {*cmpqi_1}
     (nil))
(jump_insn 238 237 239 26 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 258)
            (pc))) "calc.c":196:38 806 {*jcc}
     (nil)
 -> 258)
;;  succ:       27 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 27, loop depth 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL, MODIFIED)
;;  pred:       25
;;              26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 125 126 127 128 129 130 219 220
(code_label 239 238 240 27 65 (nil) [1 uses])
(note 240 239 241 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 241 240 242 27 (set (reg/f:DI 2 cx [orig:125 stack_double.8_44 ] [125])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [3 stack_double+0 S8 A128])) "calc.c":197:18 74 {*movdi_internal}
     (nil))
(insn 242 241 243 27 (set (reg/f:DI 1 dx [219])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [1 input+0 S8 A64])) "calc.c":197:53 74 {*movdi_internal}
     (nil))
(insn 243 242 244 27 (set (reg:DI 0 ax [220])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])) "calc.c":197:53 74 {*movdi_internal}
     (nil))
(insn 244 243 245 27 (parallel [
            (set (reg/f:DI 0 ax [orig:126 _45 ] [126])
                (plus:DI (reg:DI 0 ax [220])
                    (reg/f:DI 1 dx [219])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":197:53 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
        (nil)))
(insn 245 244 246 27 (set (reg:QI 0 ax [orig:127 _46 ] [127])
        (mem:QI (reg/f:DI 0 ax [orig:126 _45 ] [126]) [0 *_45+0 S1 A8])) "calc.c":197:53 77 {*movqi_internal}
     (nil))
(insn 246 245 247 27 (set (reg:SI 1 dx [orig:128 _47 ] [128])
        (sign_extend:SI (reg:QI 0 ax [orig:127 _46 ] [127]))) "calc.c":197:18 153 {extendqisi2}
     (nil))
(insn 247 246 248 27 (set (reg/f:DI 4 si [orig:129 stack_prior.9_48 ] [129])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -392 [0xfffffffffffffe78])) [4 stack_prior+0 S8 A64])) "calc.c":197:18 74 {*movdi_internal}
     (nil))
(insn 248 247 249 27 (set (reg/f:DI 0 ax [orig:130 stack.10_49 ] [130])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -400 [0xfffffffffffffe70])) [4 stack+0 S8 A128])) "calc.c":197:18 74 {*movdi_internal}
     (nil))
(insn 249 248 250 27 (set (reg:DI 36 r8)
        (reg/f:DI 2 cx [orig:125 stack_double.8_44 ] [125])) "calc.c":197:18 74 {*movdi_internal}
     (nil))
(insn 250 249 253 27 (set (reg:SI 2 cx)
        (const_int 3 [0x3])) "calc.c":197:18 75 {*movsi_internal}
     (nil))
(insn 253 250 254 27 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:130 stack.10_49 ] [130])) "calc.c":197:18 74 {*movdi_internal}
     (nil))
(call_insn 254 253 255 27 (call (mem:QI (symbol_ref:DI ("push_func") [flags 0x3]  <function_decl 0x7f09f1657a00 push_func>) [0 push_func S1 A8])
        (const_int 0 [0])) "calc.c":197:18 813 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (nil)))))))
(insn 255 254 516 27 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -408 [0xfffffffffffffe68])) [5 last_sign+0 S4 A64])
        (const_int 3 [0x3])) "calc.c":197:84 75 {*movsi_internal}
     (nil))
(jump_insn 516 255 517 27 (set (pc)
        (label_ref 282)) "calc.c":197:84 807 {jump}
     (nil)
 -> 282)
;;  succ:       30 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 517 516 258)
;; basic block 28, loop depth 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL, MODIFIED)
;;  pred:       26
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 131 132 221 222
(code_label 258 517 259 28 66 (nil) [1 uses])
(note 259 258 260 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 260 259 261 28 (set (reg/f:DI 1 dx [221])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [1 input+0 S8 A64])) "calc.c":198:27 74 {*movdi_internal}
     (nil))
(insn 261 260 262 28 (set (reg:DI 0 ax [222])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])) "calc.c":198:27 74 {*movdi_internal}
     (nil))
(insn 262 261 263 28 (parallel [
            (set (reg/f:DI 0 ax [orig:131 _50 ] [131])
                (plus:DI (reg:DI 0 ax [222])
                    (reg/f:DI 1 dx [221])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":198:27 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
        (nil)))
(insn 263 262 264 28 (set (reg:QI 0 ax [orig:132 _51 ] [132])
        (mem:QI (reg/f:DI 0 ax [orig:131 _50 ] [131]) [0 *_50+0 S1 A8])) "calc.c":198:27 77 {*movqi_internal}
     (nil))
(insn 264 263 265 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:132 _51 ] [132])
            (const_int 94 [0x5e]))) "calc.c":198:21 9 {*cmpqi_1}
     (nil))
(jump_insn 265 264 266 28 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 282)
            (pc))) "calc.c":198:21 806 {*jcc}
     (nil)
 -> 282)
;;  succ:       29 (FALLTHRU)
;;              30
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 29, loop depth 0, maybe hot
;;  prev block 28, next block 30, flags: (RTL, MODIFIED)
;;  pred:       28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 133 134 135 136 137 138 223 224
(note 266 265 267 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 267 266 268 29 (set (reg/f:DI 2 cx [orig:133 stack_double.11_52 ] [133])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [3 stack_double+0 S8 A128])) "calc.c":199:18 74 {*movdi_internal}
     (nil))
(insn 268 267 269 29 (set (reg/f:DI 1 dx [223])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [1 input+0 S8 A64])) "calc.c":199:53 74 {*movdi_internal}
     (nil))
(insn 269 268 270 29 (set (reg:DI 0 ax [224])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])) "calc.c":199:53 74 {*movdi_internal}
     (nil))
(insn 270 269 271 29 (parallel [
            (set (reg/f:DI 0 ax [orig:134 _53 ] [134])
                (plus:DI (reg:DI 0 ax [224])
                    (reg/f:DI 1 dx [223])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":199:53 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
        (nil)))
(insn 271 270 272 29 (set (reg:QI 0 ax [orig:135 _54 ] [135])
        (mem:QI (reg/f:DI 0 ax [orig:134 _53 ] [134]) [0 *_53+0 S1 A8])) "calc.c":199:53 77 {*movqi_internal}
     (nil))
(insn 272 271 273 29 (set (reg:SI 1 dx [orig:136 _55 ] [136])
        (sign_extend:SI (reg:QI 0 ax [orig:135 _54 ] [135]))) "calc.c":199:18 153 {extendqisi2}
     (nil))
(insn 273 272 274 29 (set (reg/f:DI 4 si [orig:137 stack_prior.12_56 ] [137])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -392 [0xfffffffffffffe78])) [4 stack_prior+0 S8 A64])) "calc.c":199:18 74 {*movdi_internal}
     (nil))
(insn 274 273 275 29 (set (reg/f:DI 0 ax [orig:138 stack.13_57 ] [138])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -400 [0xfffffffffffffe70])) [4 stack+0 S8 A128])) "calc.c":199:18 74 {*movdi_internal}
     (nil))
(insn 275 274 276 29 (set (reg:DI 36 r8)
        (reg/f:DI 2 cx [orig:133 stack_double.11_52 ] [133])) "calc.c":199:18 74 {*movdi_internal}
     (nil))
(insn 276 275 279 29 (set (reg:SI 2 cx)
        (const_int 4 [0x4])) "calc.c":199:18 75 {*movsi_internal}
     (nil))
(insn 279 276 280 29 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:138 stack.13_57 ] [138])) "calc.c":199:18 74 {*movdi_internal}
     (nil))
(call_insn 280 279 281 29 (call (mem:QI (symbol_ref:DI ("push_func") [flags 0x3]  <function_decl 0x7f09f1657a00 push_func>) [0 push_func S1 A8])
        (const_int 0 [0])) "calc.c":199:18 813 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (nil)))))))
(insn 281 280 282 29 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -408 [0xfffffffffffffe68])) [5 last_sign+0 S4 A64])
        (const_int 3 [0x3])) "calc.c":199:84 75 {*movsi_internal}
     (nil))
;;  succ:       30 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 30, loop depth 0, maybe hot
;;  prev block 29, next block 31, flags: (RTL, MODIFIED)
;;  pred:       13
;;              22 [always] 
;;              23 [always] 
;;              24 [always] 
;;              28
;;              29 (FALLTHRU)
;;              15 [always] 
;;              19 [always] 
;;              27 [always] 
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 139 140 141 142 225 226 227
(code_label 282 281 283 30 57 (nil) [8 uses])
(note 283 282 284 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 284 283 285 30 (set (reg/f:DI 1 dx [225])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [1 input+0 S8 A64])) "calc.c":201:33 74 {*movdi_internal}
     (nil))
(insn 285 284 286 30 (set (reg:DI 0 ax [226])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])) "calc.c":201:33 74 {*movdi_internal}
     (nil))
(insn 286 285 287 30 (parallel [
            (set (reg/f:DI 0 ax [orig:139 _58 ] [139])
                (plus:DI (reg:DI 0 ax [226])
                    (reg/f:DI 1 dx [225])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":201:33 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
        (nil)))
(insn 287 286 288 30 (set (reg:QI 0 ax [orig:140 _59 ] [140])
        (mem:QI (reg/f:DI 0 ax [orig:139 _58 ] [139]) [0 *_58+0 S1 A8])) "calc.c":201:33 77 {*movqi_internal}
     (nil))
(insn 288 287 289 30 (set (reg:SI 1 dx [orig:141 _60 ] [141])
        (sign_extend:SI (reg:QI 0 ax [orig:140 _59 ] [140]))) "calc.c":201:13 153 {extendqisi2}
     (nil))
(insn 289 288 290 30 (parallel [
            (set (reg:DI 0 ax [227])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -333 [0xfffffffffffffeb3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":201:13 210 {*adddi_1}
     (nil))
(insn 290 289 291 30 (set (reg:SI 4 si)
        (reg:SI 1 dx [orig:141 _60 ] [141])) "calc.c":201:13 75 {*movsi_internal}
     (nil))
(insn 291 290 292 30 (set (reg:DI 5 di)
        (reg:DI 0 ax [227])) "calc.c":201:13 74 {*movdi_internal}
     (nil))
(call_insn/i 292 291 294 30 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strchr") [flags 0x41]  <function_decl 0x7f09f1835b00 strchr>) [0 __builtin_strchr S1 A8])
            (const_int 0 [0]))) "calc.c":201:13 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 294 292 295 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:142 _61 ] [142])
            (const_int 0 [0]))) "calc.c":201:12 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 295 294 296 30 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 338)
            (pc))) "calc.c":201:12 806 {*jcc}
     (nil)
 -> 338)
;;  succ:       31 (FALLTHRU)
;;              35
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 31, loop depth 0, maybe hot
;;  prev block 30, next block 32, flags: (RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 296 295 297 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 297 296 298 31 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -408 [0xfffffffffffffe68])) [5 last_sign+0 S4 A64])
        (const_int 0 [0])) "calc.c":202:19 75 {*movsi_internal}
     (nil))
(insn 298 297 518 31 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -404 [0xfffffffffffffe6c])) [5 j+0 S4 A32])
        (const_int 0 [0])) "calc.c":203:17 75 {*movsi_internal}
     (nil))
(jump_insn 518 298 519 31 (set (pc)
        (label_ref 311)) "calc.c":204:13 807 {jump}
     (nil)
 -> 311)
;;  succ:       33 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 519 518 317)
;; basic block 32, loop depth 0, maybe hot
;;  prev block 31, next block 33, flags: (RTL, MODIFIED)
;;  pred:       33
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 143 144 228 229 230 231
(code_label 317 519 301 32 69 (nil) [1 uses])
(note 301 317 302 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 302 301 303 32 (set (reg/f:DI 1 dx [228])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [1 input+0 S8 A64])) "calc.c":206:32 74 {*movdi_internal}
     (nil))
(insn 303 302 304 32 (set (reg:DI 0 ax [229])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])) "calc.c":206:32 74 {*movdi_internal}
     (nil))
(insn 304 303 305 32 (parallel [
            (set (reg/f:DI 0 ax [orig:143 _62 ] [143])
                (plus:DI (reg:DI 0 ax [229])
                    (reg/f:DI 1 dx [228])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":206:32 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
        (nil)))
(insn 305 304 306 32 (set (reg:QI 1 dx [orig:144 _63 ] [144])
        (mem:QI (reg/f:DI 0 ax [orig:143 _62 ] [143]) [0 *_62+0 S1 A8])) "calc.c":206:32 77 {*movqi_internal}
     (nil))
(insn 306 305 307 32 (set (reg:SI 0 ax [231])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -404 [0xfffffffffffffe6c])) [5 j+0 S4 A32])) "calc.c":206:25 75 {*movsi_internal}
     (nil))
(insn 307 306 308 32 (set (reg:DI 0 ax [230])
        (sign_extend:DI (reg:SI 0 ax [231]))) "calc.c":206:25 147 {*extendsidi2_rex64}
     (nil))
(insn 308 307 309 32 (set (mem:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [230]))
                (const_int -320 [0xfffffffffffffec0])) [0 temp[j_109]+0 S1 A8])
        (reg:QI 1 dx [orig:144 _63 ] [144])) "calc.c":206:25 77 {*movqi_internal}
     (nil))
(insn 309 308 310 32 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -404 [0xfffffffffffffe6c])) [5 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -404 [0xfffffffffffffe6c])) [5 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":207:18 209 {*addsi_1}
     (nil))
(insn 310 309 311 32 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])
                (plus:DI (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":204:38 210 {*adddi_1}
     (nil))
;;  succ:       33 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 33, loop depth 0, maybe hot
;;  prev block 32, next block 34, flags: (RTL, MODIFIED)
;;  pred:       32 (FALLTHRU,DFS_BACK)
;;              31 [always] 
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 145 146 232 233
(code_label 311 310 312 33 68 (nil) [1 uses])
(note 312 311 313 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 313 312 314 33 (set (reg/f:DI 1 dx [232])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [1 input+0 S8 A64])) "calc.c":204:25 74 {*movdi_internal}
     (nil))
(insn 314 313 315 33 (set (reg:DI 0 ax [233])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])) "calc.c":204:25 74 {*movdi_internal}
     (nil))
(insn 315 314 316 33 (parallel [
            (set (reg/f:DI 0 ax [orig:145 _64 ] [145])
                (plus:DI (reg:DI 0 ax [233])
                    (reg/f:DI 1 dx [232])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":204:25 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
        (nil)))
(insn 316 315 318 33 (set (reg:QI 0 ax [orig:146 _65 ] [146])
        (mem:QI (reg/f:DI 0 ax [orig:145 _64 ] [145]) [0 *_64+0 S1 A8])) "calc.c":204:25 77 {*movqi_internal}
     (nil))
(insn 318 316 319 33 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:146 _65 ] [146])
            (const_int 40 [0x28]))) "calc.c":204:29 9 {*cmpqi_1}
     (nil))
(jump_insn 319 318 320 33 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 317)
            (pc))) "calc.c":204:29 806 {*jcc}
     (nil)
 -> 317)
;;  succ:       32
;;              34 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 34, loop depth 0, maybe hot
;;  prev block 33, next block 35, flags: (RTL, MODIFIED)
;;  pred:       33 (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 147 148 149 150 151 234 235 236
(note 320 319 321 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 321 320 322 34 (set (reg:SI 0 ax [235])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -404 [0xfffffffffffffe6c])) [5 j+0 S4 A32])) "calc.c":209:21 75 {*movsi_internal}
     (nil))
(insn 322 321 323 34 (set (reg:DI 0 ax [234])
        (sign_extend:DI (reg:SI 0 ax [235]))) "calc.c":209:21 147 {*extendsidi2_rex64}
     (nil))
(insn 323 322 324 34 (set (mem:QI (plus:DI (plus:DI (reg/f:DI 6 bp)
                    (reg:DI 0 ax [234]))
                (const_int -320 [0xfffffffffffffec0])) [0 temp[j_109]+0 S1 A8])
        (const_int 0 [0])) "calc.c":209:21 77 {*movqi_internal}
     (nil))
(insn 324 323 325 34 (set (reg/f:DI 3 bx [orig:147 stack_double.14_66 ] [147])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [3 stack_double+0 S8 A128])) "calc.c":212:13 74 {*movdi_internal}
     (nil))
(insn 325 324 326 34 (parallel [
            (set (reg:DI 0 ax [236])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -320 [0xfffffffffffffec0])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":212:43 210 {*adddi_1}
     (nil))
(insn 326 325 327 34 (set (reg:DI 5 di)
        (reg:DI 0 ax [236])) "calc.c":212:43 74 {*movdi_internal}
     (nil))
(call_insn 327 326 329 34 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("what_the_func") [flags 0x3]  <function_decl 0x7f09f1657400 what_the_func>) [0 what_the_func S1 A8])
            (const_int 0 [0]))) "calc.c":212:43 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 329 327 330 34 (set (reg:SI 1 dx [orig:149 _68 ] [149])
        (sign_extend:SI (reg:QI 0 ax [orig:148 _67 ] [148]))) "calc.c":212:13 153 {extendqisi2}
     (nil))
(insn 330 329 331 34 (set (reg/f:DI 4 si [orig:150 stack_prior.15_69 ] [150])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -392 [0xfffffffffffffe78])) [4 stack_prior+0 S8 A64])) "calc.c":212:13 74 {*movdi_internal}
     (nil))
(insn 331 330 332 34 (set (reg/f:DI 0 ax [orig:151 stack.16_70 ] [151])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -400 [0xfffffffffffffe70])) [4 stack+0 S8 A128])) "calc.c":212:13 74 {*movdi_internal}
     (nil))
(insn 332 331 333 34 (set (reg:DI 36 r8)
        (reg/f:DI 3 bx [orig:147 stack_double.14_66 ] [147])) "calc.c":212:13 74 {*movdi_internal}
     (nil))
(insn 333 332 336 34 (set (reg:SI 2 cx)
        (const_int 5 [0x5])) "calc.c":212:13 75 {*movsi_internal}
     (nil))
(insn 336 333 337 34 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:151 stack.16_70 ] [151])) "calc.c":212:13 74 {*movdi_internal}
     (nil))
(call_insn 337 336 338 34 (call (mem:QI (symbol_ref:DI ("push_func") [flags 0x3]  <function_decl 0x7f09f1657a00 push_func>) [0 push_func S1 A8])
        (const_int 0 [0])) "calc.c":212:13 813 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (nil)))))))
;;  succ:       35 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 35, loop depth 0, maybe hot
;;  prev block 34, next block 36, flags: (RTL, MODIFIED)
;;  pred:       30
;;              34 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 152 153 237 238
(code_label 338 337 339 35 67 (nil) [1 uses])
(note 339 338 340 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 340 339 341 35 (set (reg/f:DI 1 dx [237])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [1 input+0 S8 A64])) "calc.c":214:18 74 {*movdi_internal}
     (nil))
(insn 341 340 342 35 (set (reg:DI 0 ax [238])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])) "calc.c":214:18 74 {*movdi_internal}
     (nil))
(insn 342 341 343 35 (parallel [
            (set (reg/f:DI 0 ax [orig:152 _71 ] [152])
                (plus:DI (reg:DI 0 ax [238])
                    (reg/f:DI 1 dx [237])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":214:18 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
        (nil)))
(insn 343 342 344 35 (set (reg:QI 0 ax [orig:153 _72 ] [153])
        (mem:QI (reg/f:DI 0 ax [orig:152 _71 ] [152]) [0 *_71+0 S1 A8])) "calc.c":214:18 77 {*movqi_internal}
     (nil))
(insn 344 343 345 35 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:153 _72 ] [153])
            (const_int 40 [0x28]))) "calc.c":214:12 9 {*cmpqi_1}
     (nil))
(jump_insn 345 344 346 35 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 353)
            (pc))) "calc.c":214:12 806 {*jcc}
     (nil)
 -> 353)
;;  succ:       37
;;              36 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 36, loop depth 0, maybe hot
;;  prev block 35, next block 37, flags: (RTL, MODIFIED)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 154 155 239 240
(note 346 345 347 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 347 346 348 36 (set (reg/f:DI 1 dx [239])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [1 input+0 S8 A64])) "calc.c":214:37 74 {*movdi_internal}
     (nil))
(insn 348 347 349 36 (set (reg:DI 0 ax [240])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])) "calc.c":214:37 74 {*movdi_internal}
     (nil))
(insn 349 348 350 36 (parallel [
            (set (reg/f:DI 0 ax [orig:154 _73 ] [154])
                (plus:DI (reg:DI 0 ax [240])
                    (reg/f:DI 1 dx [239])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":214:37 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
        (nil)))
(insn 350 349 351 36 (set (reg:QI 0 ax [orig:155 _74 ] [155])
        (mem:QI (reg/f:DI 0 ax [orig:154 _73 ] [154]) [0 *_73+0 S1 A8])) "calc.c":214:37 77 {*movqi_internal}
     (nil))
(insn 351 350 352 36 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:155 _74 ] [155])
            (const_int 41 [0x29]))) "calc.c":214:29 9 {*cmpqi_1}
     (nil))
(jump_insn 352 351 353 36 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 370)
            (pc))) "calc.c":214:29 806 {*jcc}
     (nil)
 -> 370)
;;  succ:       37 (FALLTHRU)
;;              38
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 37, loop depth 0, maybe hot
;;  prev block 36, next block 38, flags: (RTL, MODIFIED)
;;  pred:       35
;;              36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 156 157 158 159 160 161 241 242
(code_label 353 352 354 37 70 (nil) [1 uses])
(note 354 353 355 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 355 354 356 37 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -408 [0xfffffffffffffe68])) [5 last_sign+0 S4 A64])
        (const_int 3 [0x3])) "calc.c":215:19 75 {*movsi_internal}
     (nil))
(insn 356 355 357 37 (set (reg/f:DI 2 cx [orig:156 stack_double.17_75 ] [156])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [3 stack_double+0 S8 A128])) "calc.c":216:13 74 {*movdi_internal}
     (nil))
(insn 357 356 358 37 (set (reg/f:DI 1 dx [241])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [1 input+0 S8 A64])) "calc.c":216:48 74 {*movdi_internal}
     (nil))
(insn 358 357 359 37 (set (reg:DI 0 ax [242])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])) "calc.c":216:48 74 {*movdi_internal}
     (nil))
(insn 359 358 360 37 (parallel [
            (set (reg/f:DI 0 ax [orig:157 _76 ] [157])
                (plus:DI (reg:DI 0 ax [242])
                    (reg/f:DI 1 dx [241])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":216:48 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
        (nil)))
(insn 360 359 361 37 (set (reg:QI 0 ax [orig:158 _77 ] [158])
        (mem:QI (reg/f:DI 0 ax [orig:157 _76 ] [157]) [0 *_76+0 S1 A8])) "calc.c":216:48 77 {*movqi_internal}
     (nil))
(insn 361 360 362 37 (set (reg:SI 1 dx [orig:159 _78 ] [159])
        (sign_extend:SI (reg:QI 0 ax [orig:158 _77 ] [158]))) "calc.c":216:13 153 {extendqisi2}
     (nil))
(insn 362 361 363 37 (set (reg/f:DI 4 si [orig:160 stack_prior.18_79 ] [160])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -392 [0xfffffffffffffe78])) [4 stack_prior+0 S8 A64])) "calc.c":216:13 74 {*movdi_internal}
     (nil))
(insn 363 362 364 37 (set (reg/f:DI 0 ax [orig:161 stack.19_80 ] [161])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -400 [0xfffffffffffffe70])) [4 stack+0 S8 A128])) "calc.c":216:13 74 {*movdi_internal}
     (nil))
(insn 364 363 365 37 (set (reg:DI 36 r8)
        (reg/f:DI 2 cx [orig:156 stack_double.17_75 ] [156])) "calc.c":216:13 74 {*movdi_internal}
     (nil))
(insn 365 364 368 37 (set (reg:SI 2 cx)
        (const_int 0 [0])) "calc.c":216:13 75 {*movsi_internal}
     (nil))
(insn 368 365 369 37 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:161 stack.19_80 ] [161])) "calc.c":216:13 74 {*movdi_internal}
     (nil))
(call_insn 369 368 370 37 (call (mem:QI (symbol_ref:DI ("push_func") [flags 0x3]  <function_decl 0x7f09f1657a00 push_func>) [0 push_func S1 A8])
        (const_int 0 [0])) "calc.c":216:13 813 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (nil)))))))
;;  succ:       38 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 38, loop depth 0, maybe hot
;;  prev block 37, next block 39, flags: (RTL, MODIFIED)
;;  pred:       36
;;              37 (FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 162 163 243 244
(code_label 370 369 371 38 71 (nil) [1 uses])
(note 371 370 372 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 372 371 373 38 (set (reg/f:DI 1 dx [243])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [1 input+0 S8 A64])) "calc.c":218:18 74 {*movdi_internal}
     (nil))
(insn 373 372 374 38 (set (reg:DI 0 ax [244])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])) "calc.c":218:18 74 {*movdi_internal}
     (nil))
(insn 374 373 375 38 (parallel [
            (set (reg/f:DI 0 ax [orig:162 _81 ] [162])
                (plus:DI (reg:DI 0 ax [244])
                    (reg/f:DI 1 dx [243])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":218:18 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
        (nil)))
(insn 375 374 376 38 (set (reg:QI 0 ax [orig:163 _82 ] [163])
        (mem:QI (reg/f:DI 0 ax [orig:162 _81 ] [162]) [0 *_81+0 S1 A8])) "calc.c":218:18 77 {*movqi_internal}
     (nil))
(insn 376 375 377 38 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:163 _82 ] [163])
            (const_int 61 [0x3d]))) "calc.c":218:12 9 {*cmpqi_1}
     (nil))
(jump_insn 377 376 382 38 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 528)
            (pc))) "calc.c":218:12 806 {*jcc}
     (nil)
 -> 528)
;;  succ:       51
;;              39 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 39, loop depth 0, maybe hot
;;  prev block 38, next block 40, flags: (RTL, MODIFIED)
;;  pred:       38 (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 382 377 383 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 383 382 384 39 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])
                (plus:DI (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":168:44 210 {*adddi_1}
     (nil))
;;  succ:       40 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 40, loop depth 0, maybe hot
;;  prev block 39, next block 50, flags: (RTL, MODIFIED)
;;  pred:       39 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 164 245
(code_label 384 383 385 40 51 (nil) [1 uses])
(note 385 384 386 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 386 385 387 40 (set (reg:DI 0 ax [245])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -424 [0xfffffffffffffe58])) [1 input+0 S8 A64])) "calc.c":168:28 74 {*movdi_internal}
     (nil))
(insn 387 386 388 40 (set (reg:DI 5 di)
        (reg:DI 0 ax [245])) "calc.c":168:28 74 {*movdi_internal}
     (nil))
(call_insn/i 388 387 391 40 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x7f09f1838700 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) "calc.c":168:28 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 391 388 392 40 (set (reg:CC 17 flags)
        (compare:CC (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -368 [0xfffffffffffffe90])) [7 i+0 S8 A128])
            (reg:DI 0 ax [orig:164 _83 ] [164]))) "calc.c":168:26 12 {*cmpdi_1}
     (nil))
(jump_insn 392 391 524 40 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 390)
            (pc))) "calc.c":168:26 806 {*jcc}
     (nil)
 -> 390)
;;  succ:       3
;;              50 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 50, loop depth 0, maybe hot
;;  prev block 40, next block 51, flags: (RTL, MODIFIED)
;;  pred:       40 (FALLTHRU)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 524 392 525 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(jump_insn 525 524 526 50 (set (pc)
        (label_ref 393)) 807 {jump}
     (nil)
 -> 393)
;;  succ:       41 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 526 525 528)
;; basic block 51, loop depth 0, maybe hot
;;  prev block 50, next block 41, flags: (RTL, MODIFIED)
;;  pred:       38
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 528 526 527 51 81 (nil) [1 uses])
(note 527 528 529 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 529 527 393 51 (const_int 0 [0]) "calc.c":219:13 843 {nop}
     (nil))
;;  succ:       41 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 41, loop depth 0, maybe hot
;;  prev block 51, next block 42, flags: (RTL, MODIFIED)
;;  pred:       51 [always]  (FALLTHRU)
;;              50 [always] 
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 165 246 247
(code_label 393 529 394 41 73 (nil) [1 uses])
(note 394 393 395 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 395 394 396 41 (set (reg:DI 0 ax [246])
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f09f16f8b40 *.LC14>)) "calc.c":221:5 74 {*movdi_internal}
     (nil))
(insn 396 395 397 41 (set (reg:DI 5 di)
        (reg:DI 0 ax [246])) "calc.c":221:5 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f09f16f8b40 *.LC14>)
        (nil)))
(insn 397 396 398 41 (set (reg:QI 0 ax)
        (const_int 0 [0])) "calc.c":221:5 77 {*movqi_internal}
     (nil))
(call_insn 398 397 399 41 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f09f183f100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "calc.c":221:5 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 399 398 400 41 (set (reg/f:DI 0 ax [orig:165 stack.20_84 ] [165])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -400 [0xfffffffffffffe70])) [4 stack+0 S8 A128])) "calc.c":224:30 74 {*movdi_internal}
     (nil))
(insn 400 399 401 41 (set (reg:DI 0 ax [247])
        (mem:DI (plus:DI (reg/f:DI 0 ax [orig:165 stack.20_84 ] [165])
                (const_int 16 [0x10])) [7 stack.20_84->top+0 S8 A64])) "calc.c":224:12 74 {*movdi_internal}
     (nil))
(insn 401 400 402 41 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -352 [0xfffffffffffffea0])) [7 size_stack+0 S8 A128])
        (reg:DI 0 ax [247])) "calc.c":224:12 74 {*movdi_internal}
     (nil))
(insn 402 401 520 41 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -360 [0xfffffffffffffe98])) [7 i+0 S8 A64])
        (const_int 0 [0])) "calc.c":225:17 74 {*movdi_internal}
     (nil))
(jump_insn 520 402 521 41 (set (pc)
        (label_ref 426)) "calc.c":225:5 807 {jump}
     (nil)
 -> 426)
;;  succ:       43 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 521 520 428)
;; basic block 42, loop depth 0, maybe hot
;;  prev block 41, next block 43, flags: (RTL, MODIFIED)
;;  pred:       43
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 166 167 168 169 170 171 172 248
(code_label 428 521 405 42 76 (nil) [1 uses])
(note 405 428 406 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 406 405 407 42 (set (reg/f:DI 0 ax [orig:166 stack.21_85 ] [166])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -400 [0xfffffffffffffe70])) [4 stack+0 S8 A128])) "calc.c":227:32 74 {*movdi_internal}
     (nil))
(insn 407 406 408 42 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:166 stack.21_85 ] [166])) "calc.c":227:32 74 {*movdi_internal}
     (nil))
(call_insn 408 407 410 42 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("peek") [flags 0x41]  <function_decl 0x7f09f164e900 peek>) [0 peek S1 A8])
            (const_int 0 [0]))) "calc.c":227:32 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 410 408 411 42 (set (reg:SI 0 ax [orig:168 _87 ] [168])
        (sign_extend:SI (reg:QI 0 ax [orig:167 _86 ] [167]))) "calc.c":227:9 153 {extendqisi2}
     (nil))
(insn 411 410 412 42 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:168 _87 ] [168])) "calc.c":227:9 75 {*movsi_internal}
     (nil))
(insn 412 411 413 42 (set (reg:DI 0 ax [248])
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7f09f16f8bd0 *.LC15>)) "calc.c":227:9 74 {*movdi_internal}
     (nil))
(insn 413 412 414 42 (set (reg:DI 5 di)
        (reg:DI 0 ax [248])) "calc.c":227:9 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7f09f16f8bd0 *.LC15>)
        (nil)))
(insn 414 413 415 42 (set (reg:QI 0 ax)
        (const_int 0 [0])) "calc.c":227:9 77 {*movqi_internal}
     (nil))
(call_insn 415 414 416 42 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f09f183f100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "calc.c":227:9 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 416 415 417 42 (set (reg/f:DI 0 ax [orig:169 stack.22_88 ] [169])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -400 [0xfffffffffffffe70])) [4 stack+0 S8 A128])) "calc.c":228:28 74 {*movdi_internal}
     (nil))
(insn 417 416 418 42 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:169 stack.22_88 ] [169])) "calc.c":228:28 74 {*movdi_internal}
     (nil))
(call_insn 418 417 420 42 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("pop") [flags 0x41]  <function_decl 0x7f09f164e800 pop>) [0 pop S1 A8])
            (const_int 0 [0]))) "calc.c":228:28 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 420 418 421 42 (set (reg:SI 1 dx [orig:171 _90 ] [171])
        (sign_extend:SI (reg:QI 0 ax [orig:170 _89 ] [170]))) "calc.c":228:9 153 {extendqisi2}
     (nil))
(insn 421 420 422 42 (set (reg/f:DI 0 ax [orig:172 stack_double.23_91 ] [172])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [3 stack_double+0 S8 A128])) "calc.c":228:9 74 {*movdi_internal}
     (nil))
(insn 422 421 423 42 (set (reg:SI 4 si)
        (reg:SI 1 dx [orig:171 _90 ] [171])) "calc.c":228:9 75 {*movsi_internal}
     (nil))
(insn 423 422 424 42 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:172 stack_double.23_91 ] [172])) "calc.c":228:9 74 {*movdi_internal}
     (nil))
(call_insn 424 423 425 42 (call (mem:QI (symbol_ref:DI ("calc") [flags 0x3]  <function_decl 0x7f09f1657800 calc>) [0 calc S1 A8])
        (const_int 0 [0])) "calc.c":228:9 813 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 425 424 426 42 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -360 [0xfffffffffffffe98])) [7 i+0 S8 A64])
                (plus:DI (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -360 [0xfffffffffffffe98])) [7 i+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":225:41 210 {*adddi_1}
     (nil))
;;  succ:       43 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 43, loop depth 0, maybe hot
;;  prev block 42, next block 44, flags: (RTL, MODIFIED)
;;  pred:       42 (FALLTHRU,DFS_BACK)
;;              41 [always] 
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 249
(code_label 426 425 427 43 75 (nil) [1 uses])
(note 427 426 429 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 429 427 430 43 (set (reg:DI 0 ax [249])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -360 [0xfffffffffffffe98])) [7 i+0 S8 A64])) "calc.c":225:26 74 {*movdi_internal}
     (nil))
(insn 430 429 431 43 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 0 ax [249])
            (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -352 [0xfffffffffffffea0])) [7 size_stack+0 S8 A128]))) "calc.c":225:26 12 {*cmpdi_1}
     (nil))
(jump_insn 431 430 432 43 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 428)
            (pc))) "calc.c":225:26 806 {*jcc}
     (nil)
 -> 428)
;;  succ:       42
;;              44 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 44, loop depth 0, maybe hot
;;  prev block 43, next block 45, flags: (RTL, MODIFIED)
;;  pred:       43 (FALLTHRU)
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 173 174 175 250 251
(note 432 431 433 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 433 432 434 44 (set (reg:DI 0 ax [250])
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f09f16f8b40 *.LC14>)) "calc.c":230:5 74 {*movdi_internal}
     (nil))
(insn 434 433 435 44 (set (reg:DI 5 di)
        (reg:DI 0 ax [250])) "calc.c":230:5 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f09f16f8b40 *.LC14>)
        (nil)))
(insn 435 434 436 44 (set (reg:QI 0 ax)
        (const_int 0 [0])) "calc.c":230:5 77 {*movqi_internal}
     (nil))
(call_insn 436 435 437 44 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f09f183f100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "calc.c":230:5 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 437 436 438 44 (set (reg/f:DI 0 ax [orig:173 stack_double.24_92 ] [173])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [3 stack_double+0 S8 A128])) "calc.c":231:18 74 {*movdi_internal}
     (nil))
(insn 438 437 439 44 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:173 stack_double.24_92 ] [173])) "calc.c":231:18 74 {*movdi_internal}
     (nil))
(call_insn 439 438 440 44 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("Fpeek") [flags 0x41]  <function_decl 0x7f09f164ef00 Fpeek>) [0 Fpeek S1 A8])
            (const_int 0 [0]))) "calc.c":231:18 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 440 439 441 44 (set (reg:DF 0 ax [251])
        (reg:DF 20 xmm0)) "calc.c":231:18 135 {*movdf_internal}
     (nil))
(insn 441 440 442 44 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -344 [0xfffffffffffffea8])) [2 res+0 S8 A64])
        (reg:DF 0 ax [251])) "calc.c":231:18 135 {*movdf_internal}
     (nil))
(insn 442 441 443 44 (set (reg/f:DI 0 ax [orig:174 stack_double.25_93 ] [174])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [3 stack_double+0 S8 A128])) "calc.c":232:21 74 {*movdi_internal}
     (nil))
(insn 443 442 444 44 (set (reg:DI 0 ax [orig:175 _94 ] [175])
        (mem:DI (plus:DI (reg/f:DI 0 ax [orig:174 stack_double.25_93 ] [174])
                (const_int 16 [0x10])) [7 stack_double.25_93->top+0 S8 A64])) "calc.c":232:21 74 {*movdi_internal}
     (nil))
(insn 444 443 445 44 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:175 _94 ] [175])
            (const_int 1 [0x1]))) "calc.c":232:8 12 {*cmpdi_1}
     (nil))
(jump_insn 445 444 446 44 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 460)
            (pc))) "calc.c":232:8 806 {*jcc}
     (nil)
 -> 460)
;;  succ:       45 (FALLTHRU)
;;              46
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 45, loop depth 0, maybe hot
;;  prev block 44, next block 46, flags: (RTL, MODIFIED)
;;  pred:       44 (FALLTHRU)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 176 177 252 253
(note 446 445 447 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 447 446 448 45 (set (reg/f:DI 0 ax [orig:176 stack_double.26_95 ] [176])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -384 [0xfffffffffffffe80])) [3 stack_double+0 S8 A128])) "calc.c":233:9 74 {*movdi_internal}
     (nil))
(insn 448 447 449 45 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:176 stack_double.26_95 ] [176])) "calc.c":233:9 74 {*movdi_internal}
     (nil))
(call_insn 449 448 450 45 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("Fpop") [flags 0x41]  <function_decl 0x7f09f164ee00 Fpop>) [0 Fpop S1 A8])
            (const_int 0 [0]))) "calc.c":233:9 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 450 449 451 45 (set (reg:DF 0 ax [orig:177 _96 ] [177])
        (reg:DF 20 xmm0)) "calc.c":233:9 135 {*movdf_internal}
     (nil))
(insn 451 450 452 45 (parallel [
            (set (reg:DI 1 dx [252])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -288 [0xfffffffffffffee0])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":233:9 210 {*adddi_1}
     (nil))
(insn 452 451 453 45 (set (reg:DF 20 xmm0)
        (reg:DF 0 ax [orig:177 _96 ] [177])) "calc.c":233:9 135 {*movdf_internal}
     (nil))
(insn 453 452 454 45 (set (reg:DI 0 ax [253])
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f09f16f8c60 *.LC16>)) "calc.c":233:9 74 {*movdi_internal}
     (nil))
(insn 454 453 455 45 (set (reg:DI 4 si)
        (reg:DI 0 ax [253])) "calc.c":233:9 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f09f16f8c60 *.LC16>)
        (nil)))
(insn 455 454 456 45 (set (reg:DI 5 di)
        (reg:DI 1 dx [252])) "calc.c":233:9 74 {*movdi_internal}
     (nil))
(insn 456 455 457 45 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) "calc.c":233:9 77 {*movqi_internal}
     (nil))
(call_insn 457 456 522 45 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sprintf") [flags 0x41]  <function_decl 0x7f09f1842100 sprintf>) [0 __builtin_sprintf S1 A8])
            (const_int 0 [0]))) "calc.c":233:9 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 20 xmm0))
                    (nil))))))
(jump_insn 522 457 523 45 (set (pc)
        (label_ref 468)) 807 {jump}
     (nil)
 -> 468)
;;  succ:       47 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 523 522 460)
;; basic block 46, loop depth 0, maybe hot
;;  prev block 45, next block 47, flags: (RTL, MODIFIED)
;;  pred:       44
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 254 255
(code_label 460 523 461 46 77 (nil) [1 uses])
(note 461 460 462 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 462 461 463 46 (parallel [
            (set (reg:DI 0 ax [254])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -288 [0xfffffffffffffee0])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":235:9 210 {*adddi_1}
     (nil))
(insn 463 462 464 46 (set (reg:DI 1 dx [255])
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f09f16f8cf0 *.LC17>)) "calc.c":235:9 74 {*movdi_internal}
     (nil))
(insn 464 463 465 46 (set (reg:DI 4 si)
        (reg:DI 1 dx [255])) "calc.c":235:9 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f09f16f8cf0 *.LC17>)
        (nil)))
(insn 465 464 466 46 (set (reg:DI 5 di)
        (reg:DI 0 ax [254])) "calc.c":235:9 74 {*movdi_internal}
     (nil))
(insn 466 465 467 46 (set (reg:QI 0 ax)
        (const_int 0 [0])) "calc.c":235:9 77 {*movqi_internal}
     (nil))
(call_insn 467 466 468 46 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sprintf") [flags 0x41]  <function_decl 0x7f09f1842100 sprintf>) [0 __builtin_sprintf S1 A8])
            (const_int 0 [0]))) "calc.c":235:9 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
;;  succ:       47 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 47, loop depth 0, maybe hot
;;  prev block 46, next block 48, flags: (RTL, MODIFIED)
;;  pred:       46 (FALLTHRU)
;;              45 [always] 
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 178 179 256 257 258 259 260 263
(code_label 468 467 469 47 78 (nil) [1 uses])
(note 469 468 470 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 470 469 471 47 (parallel [
            (set (reg:DI 0 ax [256])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -400 [0xfffffffffffffe70])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":243:5 210 {*adddi_1}
     (nil))
(insn 471 470 472 47 (set (reg:DI 5 di)
        (reg:DI 0 ax [256])) "calc.c":243:5 74 {*movdi_internal}
     (nil))
(call_insn 472 471 473 47 (call (mem:QI (symbol_ref:DI ("deleteStack") [flags 0x41]  <function_decl 0x7f09f164e400 deleteStack>) [0 deleteStack S1 A8])
        (const_int 0 [0])) "calc.c":243:5 813 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 473 472 474 47 (parallel [
            (set (reg:DI 0 ax [257])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -392 [0xfffffffffffffe78])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":244:5 210 {*adddi_1}
     (nil))
(insn 474 473 475 47 (set (reg:DI 5 di)
        (reg:DI 0 ax [257])) "calc.c":244:5 74 {*movdi_internal}
     (nil))
(call_insn 475 474 476 47 (call (mem:QI (symbol_ref:DI ("deleteStack") [flags 0x41]  <function_decl 0x7f09f164e400 deleteStack>) [0 deleteStack S1 A8])
        (const_int 0 [0])) "calc.c":244:5 813 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 476 475 477 47 (parallel [
            (set (reg:DI 0 ax [258])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -384 [0xfffffffffffffe80])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":245:5 210 {*adddi_1}
     (nil))
(insn 477 476 478 47 (set (reg:DI 5 di)
        (reg:DI 0 ax [258])) "calc.c":245:5 74 {*movdi_internal}
     (nil))
(call_insn 478 477 479 47 (call (mem:QI (symbol_ref:DI ("deleteFStack") [flags 0x41]  <function_decl 0x7f09f164ea00 deleteFStack>) [0 deleteFStack S1 A8])
        (const_int 0 [0])) "calc.c":245:5 813 {*call}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 479 478 480 47 (set (reg:DF 0 ax [259])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -344 [0xfffffffffffffea8])) [2 res+0 S8 A64])) "calc.c":246:5 135 {*movdf_internal}
     (nil))
(insn 480 479 481 47 (set (reg:DF 20 xmm0)
        (reg:DF 0 ax [259])) "calc.c":246:5 135 {*movdf_internal}
     (nil))
(insn 481 480 482 47 (set (reg:DI 0 ax [260])
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f09f16f8d80 *.LC18>)) "calc.c":246:5 74 {*movdi_internal}
     (nil))
(insn 482 481 483 47 (set (reg:DI 5 di)
        (reg:DI 0 ax [260])) "calc.c":246:5 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f09f16f8d80 *.LC18>)
        (nil)))
(insn 483 482 484 47 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) "calc.c":246:5 77 {*movqi_internal}
     (nil))
(call_insn 484 483 485 47 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f09f183f100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "calc.c":246:5 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DF (use (reg:DF 20 xmm0))
                (nil)))))
(insn 485 484 488 47 (set (reg:DF 20 xmm0 [orig:178 _177 ] [178])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -344 [0xfffffffffffffea8])) [2 res+0 S8 A64])) "calc.c":247:12 135 {*movdf_internal}
     (nil))
(insn 488 485 492 47 (set (reg:DF 0 ax [orig:179 <retval> ] [179])
        (reg:DF 20 xmm0 [orig:178 _177 ] [178])) "calc.c":247:12 135 {*movdf_internal}
     (nil))
(insn 492 488 493 47 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -24 [0xffffffffffffffe8])) [8 D.4773+0 S8 A64])
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_TEST))
            (clobber (reg:DI 1 dx [263]))
        ]) "calc.c":248:1 1164 {stack_protect_test_1_di}
     (nil))
(jump_insn 493 492 500 47 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 496)
            (pc))) "calc.c":248:1 806 {*jcc}
     (nil)
 -> 496)
;;  succ:       49
;;              48 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 179

;; basic block 48, loop depth 0, maybe hot
;;  prev block 47, next block 49, flags: (RTL, MODIFIED)
;;  pred:       47 (FALLTHRU)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
(note 500 493 494 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(call_insn 494 500 495 48 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f09f16df600 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "calc.c":248:1 813 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 495 494 496)
;; basic block 49, loop depth 0, maybe hot
;;  prev block 48, next block 1, flags: (RTL, MODIFIED)
;;  pred:       47
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 179
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 179
;; lr  def 	 20 [xmm0]
(code_label 496 495 501 49 80 (nil) [1 uses])
(note 501 496 497 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 497 501 498 49 (set (reg/i:DF 20 xmm0)
        (reg:DF 0 ax [orig:179 <retval> ] [179])) "calc.c":248:1 135 {*movdf_internal}
     (nil))
(insn 498 497 530 49 (use (reg/i:DF 20 xmm0)) "calc.c":248:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0]

(note 530 498 0 NOTE_INSN_DELETED)

;; Function credit_a (credit_a, funcdef_no=12, decl_uid=4548, cgraph_uid=13, symbol_order=12)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=48, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=617,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=9,overall=627,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=22,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 12:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 13:  (0) v  (1) m {*movdf_internal}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 14:  (0) x  (1) 0  (2) xm {*fop_df_1}
      Creating newreg=111 from oldreg=82, assigning class SSE_REGS to r111
   14: r111:DF=r111:DF/r97:DF
      REG_DEAD r97:DF
      REG_DEAD r82:DF
    Inserting insn reload before:
   58: r111:DF=r82:DF
    Inserting insn reload after:
   59: r83:DF=r111:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=630,losers=4,rld_nregs=2
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1213,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=16,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=613,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=13,losers=1,rld_nregs=0
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=16: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=14,losers=1 -- refuse
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=19,overall=17,losers=2 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=20,overall=607,losers=1 -- refuse
            0 Non pseudo reload: reject++
          alt=21,overall=1,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 58:  (0) v  (1) r {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 15:  (0) v  (1) m {*movdf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 16:  (0) x  (1) 0  (2) xm {*fop_df_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 17:  (0) m  (1) v {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=626,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=616,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            alt=8,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=615,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=621,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=15,overall=1,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 21:  (0) m  (1) v {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=626,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=616,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            alt=8,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=615,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=621,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=15,overall=1,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 25:  (0) m  (1) v {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 30:  (0) v  (1) m {*movdf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 31:  (0) x  (1) 0  (2) xm {*fop_df_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
            alt=1,overall=7,losers=1 -- refuse
	 Choosing alt 1 in insn 32:  (0) x  (1) 0  (2) xm {*fop_df_comm}
      Creating newreg=112 from oldreg=85, assigning class SSE_REGS to r112
   32: r112:DF=r112:DF+r87:DF
      REG_DEAD r87:DF
      REG_DEAD r85:DF
    Inserting insn reload before:
   60: r112:DF=r85:DF
    Inserting insn reload after:
   61: r88:DF=r112:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=617,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=622,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=2,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 60:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 33:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 34:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=1,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=1,overall=8,losers=1,rld_nregs=2
	 Choosing alt 1 in insn 35:  (0) x  (1) 0  (2) xm {*fop_df_comm}
      Creating newreg=113 from oldreg=104, assigning class SSE_REGS to r113
   35: r113:DF=r113:DF+r105:DF
      REG_DEAD r105:DF
      REG_DEAD r104:DF
    Inserting insn reload before:
   62: r113:DF=r104:DF
    Inserting insn reload after:
   63: r89:DF=r113:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=630,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=626,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=615,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=616,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=15,overall=14,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
            alt=18,overall=17,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=20,overall=1,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 63:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1215,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=21,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=608,losers=1,rld_nregs=1
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=13,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=609,losers=1 -- refuse
          alt=21,overall=0,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 37:  (0) v  (1) r {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=617,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=9,overall=627,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=22,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 39:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 40:  (0) v  (1) m {*movdf_internal}
          alt=2,overall=6,losers=1,rld_nregs=1
	 Choosing alt 2 in insn 41:  (0) x  (1) 0  (2) xm {*fop_df_1}
      Creating newreg=114 from oldreg=90, assigning class SSE_REGS to r114
   41: r114:DF=r114:DF-r106:DF
      REG_DEAD r106:DF
      REG_DEAD r90:DF
    Inserting insn reload before:
   64: r114:DF=r90:DF
    Inserting insn reload after:
   65: r91:DF=r114:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=630,losers=4,rld_nregs=2
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=623,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1213,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=16,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=613,losers=1 -- refuse
            0 Non pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=13,losers=1,rld_nregs=0
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=16: Bad operand -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=14,losers=1 -- refuse
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            alt=19,overall=17,losers=2 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=20,overall=607,losers=1 -- refuse
            0 Non pseudo reload: reject++
          alt=21,overall=1,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 64:  (0) v  (1) r {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 42:  (0) v  (1) m {*movdf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 43:  (0) x  (1) 0  (2) xm {*fop_df_1}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 44:  (0) x  (1) 0  (2) xm {*fop_df_comm}
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 45
	 Choosing alt 1 in insn 45:  (0) x  (1) 0  (2) xm {*fop_df_comm}
      Creating newreg=115 from oldreg=84, assigning class SSE_REGS to r115
      Making reload reg 115 for reg 84 optional
   45: r108:DF=r93:DF*r115:DF
      REG_DEAD r93:DF
      REG_DEAD r84:DF
    Inserting insn reload before:
   66: r115:DF=r84:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=617,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=622,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=2,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 66:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 46:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 47:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=630,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=626,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=615,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=619,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=20,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 50:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1215,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=21,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=608,losers=1,rld_nregs=1
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=13,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=609,losers=1 -- refuse
          alt=21,overall=0,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 54:  (0) v  (1) r {*movdf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=116 from oldreg=85, assigning class SSE_REGS to inheritance r116
    Original reg change 85->116 (bb2):
   25: r116:DF=xmm0:DF
      REG_DEAD xmm0:DF
    Add original<-inheritance after:
   67: r85:DF=r116:DF

    Inheritance reuse change 85->116 (bb2):
   60: r112:DF=r116:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=117 from oldreg=84, assigning class SSE_REGS to inheritance r117
    Original reg change 84->117 (bb2):
   21: r117:DF=xmm0:DF
      REG_DEAD xmm0:DF
    Add original<-inheritance after:
   68: r84:DF=r117:DF

    Inheritance reuse change 84->117 (bb2):
   66: r115:DF=r117:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
    67: r85:DF=r116:DF
deleting insn with uid = 67.
	    Removing dead insn:
    68: r84:DF=r117:DF
deleting insn with uid = 68.

********** Pseudo live ranges #1: **********

  BB 2
   Insn 55: point = 0, n_alt = -1
   Insn 54: point = 0, n_alt = 21
   Insn 50: point = 1, n_alt = 20
   Insn 47: point = 3, n_alt = 14
   Insn 46: point = 4, n_alt = 15
   Insn 45: point = 5, n_alt = 1
   Insn 66: point = 7, n_alt = 14
	   Creating copy r115<-r117@1000
   Insn 44: point = 9, n_alt = 1
   Insn 43: point = 11, n_alt = 2
   Insn 42: point = 13, n_alt = 14
   Insn 65: point = 14, n_alt = -2
	Hard reg 21 is preferable by r114 with profit 1000
   Insn 41: point = 16, n_alt = 2
   Insn 64: point = 18, n_alt = 21
	Hard reg 21 is preferable by r114 with profit 1000
	Hard reg 0 is preferable by r114 with profit 1000
   Insn 40: point = 20, n_alt = 14
   Insn 39: point = 21, n_alt = 20
   Insn 38: point = 22, n_alt = 0
   Insn 37: point = 22, n_alt = 21
   Insn 36: point = 23, n_alt = -2
   Insn 63: point = 24, n_alt = 20
	Hard reg 0 is preferable by r113 with profit 1000
   Insn 35: point = 26, n_alt = 1
   Insn 62: point = 28, n_alt = -2
	Hard reg 0 is preferable by r113 with profit 1000
	Hard reg 21 is preferable by r113 with profit 1000
   Insn 34: point = 30, n_alt = 14
   Insn 33: point = 31, n_alt = 14
   Insn 61: point = 32, n_alt = -2
	Hard reg 22 is preferable by r112 with profit 1000
   Insn 32: point = 34, n_alt = 1
   Insn 60: point = 36, n_alt = 14
	   Creating copy r112<-r116@1000
   Insn 31: point = 38, n_alt = 1
   Insn 30: point = 40, n_alt = 14
   Insn 29: point = 41, n_alt = -2
   Insn 28: point = 42, n_alt = 0
   Insn 27: point = 42, n_alt = -2
   Insn 26: point = 43, n_alt = 3
   Insn 25: point = 44, n_alt = 15
	Hard reg 20 is preferable by r116 with profit 1000
   Insn 24: point = 45, n_alt = 0
   Insn 23: point = 45, n_alt = -2
   Insn 22: point = 46, n_alt = 3
   Insn 21: point = 47, n_alt = 15
	Hard reg 20 is preferable by r117 with profit 1000
   Insn 20: point = 48, n_alt = 0
   Insn 19: point = 48, n_alt = -2
   Insn 18: point = 49, n_alt = 3
   Insn 17: point = 50, n_alt = 15
   Insn 16: point = 51, n_alt = 2
   Insn 15: point = 53, n_alt = 14
   Insn 59: point = 54, n_alt = -2
	Hard reg 20 is preferable by r111 with profit 1000
   Insn 14: point = 56, n_alt = 2
   Insn 58: point = 58, n_alt = 21
	Hard reg 20 is preferable by r111 with profit 1000
	Hard reg 0 is preferable by r111 with profit 1000
   Insn 13: point = 60, n_alt = 14
   Insn 12: point = 61, n_alt = 20
   Insn 11: point = 62, n_alt = 0
   Insn 10: point = 62, n_alt = -2
   Insn 9: point = 63, n_alt = 3
   Insn 5: point = 64, n_alt = 5
   Insn 4: point = 64, n_alt = 5
   Insn 3: point = 64, n_alt = 5
   Insn 2: point = 64, n_alt = 5
 r82: [59..61]
 r83: [52..54]
 r86: [39..41]
 r87: [35..38]
 r88: [23..32]
 r89: [22..24]
 r90: [19..21]
 r91: [12..14]
 r92: [10..11]
 r93: [6..9]
 r94: [2..3]
 r95: [0..1]
 r96: [62..63]
 r97: [57..60]
 r98: [50..51]
 r99: [52..53]
 r100: [48..49]
 r101: [45..46]
 r102: [42..43]
 r103: [39..40]
 r104: [29..31]
 r105: [27..30]
 r106: [17..20]
 r107: [12..13]
 r108: [4..5]
 r111: [55..58]
 r112: [33..36]
 r113: [25..28]
 r114: [15..18]
 r115: [6..7]
 r116: [37..44]
 r117: [8..47]
Compressing live ranges: from 64 to 46 - 71%
Ranges after the compression:
 r82: [42..43]
 r83: [38..39]
 r86: [28..29]
 r87: [24..27]
 r88: [18..23]
 r89: [18..19]
 r90: [16..17]
 r91: [12..13]
 r92: [10..11]
 r93: [6..9]
 r94: [2..3]
 r95: [0..1]
 r96: [44..45]
 r97: [40..43]
 r98: [36..37]
 r99: [38..39]
 r100: [34..35]
 r101: [32..33]
 r102: [30..31]
 r103: [28..29]
 r104: [22..23]
 r105: [20..23]
 r106: [14..17]
 r107: [12..13]
 r108: [4..5]
 r111: [40..41]
 r112: [24..25]
 r113: [20..21]
 r114: [14..15]
 r115: [6..7]
 r116: [26..31]
 r117: [8..33]

********** Assignment #1: **********

	 Assigning to 111 (cl=SSE_REGS, orig=82, freq=3000, tfirst=111, tfreq=3000)...
	   Assign 20 to reload r111 (freq=3000)
	 Assigning to 116 (cl=SSE_REGS, orig=85, freq=2000, tfirst=112, tfreq=3000)...
	 Assigning to 112 (cl=SSE_REGS, orig=85, freq=3000, tfirst=112, tfreq=3000)...
	   Assign 22 to reload r112 (freq=3000)
	Hard reg 20 is preferable by r116 with profit 1000
	Hard reg 22 is preferable by r116 with profit 1000
	 Assigning to 113 (cl=SSE_REGS, orig=104, freq=3000, tfirst=113, tfreq=3000)...
	   Assign 21 to reload r113 (freq=3000)
	 Assigning to 114 (cl=SSE_REGS, orig=90, freq=3000, tfirst=114, tfreq=3000)...
	   Assign 21 to reload r114 (freq=3000)
	 Assigning to 117 (cl=SSE_REGS, orig=84, freq=2000, tfirst=115, tfreq=2000)...
	 Assigning to 115 (cl=SSE_REGS, orig=84, freq=2000, tfirst=115, tfreq=2000)...
	   Assign 23 to optional reload r115 (freq=2000)
	Hard reg 20 is preferable by r117 with profit 1000
	Hard reg 23 is preferable by r117 with profit 1000
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 2 (0.00%)
   Insn after restoring regs:
   66: r115:DF=r84:DF
      REG_DEAD r84:DF
   Insn after restoring regs:
   60: r112:DF=r85:DF
      REG_DEAD r85:DF
   Insn after restoring regs:
   25: r85:DF=xmm0:DF
      REG_DEAD xmm0:DF
   Insn after restoring regs:
   21: r84:DF=xmm0:DF
      REG_DEAD xmm0:DF
Remove optional reload reg 115
  Restoring original insn:
   45: r108:DF=r93:DF*r84:DF
      REG_DEAD r84:DF
      REG_DEAD r93:DF
  Deleting move 66
   66: r115:DF=r84:DF
      REG_DEAD r84:DF
deleting insn with uid = 66.

********** Pseudo live ranges #2: **********

  BB 2
   Insn 55: point = 0, n_alt = -1
   Insn 54: point = 0, n_alt = 21
   Insn 50: point = 1, n_alt = 20
   Insn 47: point = 3, n_alt = 14
   Insn 46: point = 4, n_alt = 15
   Insn 45: point = 5, n_alt = -1
   Insn 44: point = 7, n_alt = 1
   Insn 43: point = 9, n_alt = 2
   Insn 42: point = 11, n_alt = 14
   Insn 65: point = 12, n_alt = -2
	Hard reg 21 is preferable by r114 with profit 1000
   Insn 41: point = 14, n_alt = 2
   Insn 64: point = 16, n_alt = 21
	Hard reg 21 is preferable by r114 with profit 1000
	Hard reg 0 is preferable by r114 with profit 1000
   Insn 40: point = 18, n_alt = 14
   Insn 39: point = 19, n_alt = 20
   Insn 38: point = 20, n_alt = 0
   Insn 37: point = 20, n_alt = 21
   Insn 36: point = 21, n_alt = -2
   Insn 63: point = 22, n_alt = 20
	Hard reg 0 is preferable by r113 with profit 1000
   Insn 35: point = 24, n_alt = 1
   Insn 62: point = 26, n_alt = -2
	Hard reg 0 is preferable by r113 with profit 1000
	Hard reg 21 is preferable by r113 with profit 1000
   Insn 34: point = 28, n_alt = 14
   Insn 33: point = 29, n_alt = 14
   Insn 61: point = 30, n_alt = -2
	Hard reg 22 is preferable by r112 with profit 1000
   Insn 32: point = 32, n_alt = 1
   Insn 60: point = 34, n_alt = 14
   Insn 31: point = 36, n_alt = 1
   Insn 30: point = 38, n_alt = 14
   Insn 29: point = 39, n_alt = -2
   Insn 28: point = 40, n_alt = 0
   Insn 27: point = 40, n_alt = -2
   Insn 26: point = 41, n_alt = 3
   Insn 25: point = 42, n_alt = 15
   Insn 24: point = 43, n_alt = 0
   Insn 23: point = 43, n_alt = -2
   Insn 22: point = 44, n_alt = 3
   Insn 21: point = 45, n_alt = 15
   Insn 20: point = 46, n_alt = 0
   Insn 19: point = 46, n_alt = -2
   Insn 18: point = 47, n_alt = 3
   Insn 17: point = 48, n_alt = 15
   Insn 16: point = 49, n_alt = 2
   Insn 15: point = 51, n_alt = 14
   Insn 59: point = 52, n_alt = -2
	Hard reg 20 is preferable by r111 with profit 1000
   Insn 14: point = 54, n_alt = 2
   Insn 58: point = 56, n_alt = 21
	Hard reg 20 is preferable by r111 with profit 1000
	Hard reg 0 is preferable by r111 with profit 1000
   Insn 13: point = 58, n_alt = 14
   Insn 12: point = 59, n_alt = 20
   Insn 11: point = 60, n_alt = 0
   Insn 10: point = 60, n_alt = -2
   Insn 9: point = 61, n_alt = 3
   Insn 5: point = 62, n_alt = 5
   Insn 4: point = 62, n_alt = 5
   Insn 3: point = 62, n_alt = 5
   Insn 2: point = 62, n_alt = 5
 r82: [57..59]
 r83: [50..52]
 r84: [6..45]
 r85: [35..42]
 r86: [37..39]
 r87: [33..36]
 r88: [21..30]
 r89: [20..22]
 r90: [17..19]
 r91: [10..12]
 r92: [8..9]
 r93: [6..7]
 r94: [2..3]
 r95: [0..1]
 r96: [60..61]
 r97: [55..58]
 r98: [48..49]
 r99: [50..51]
 r100: [46..47]
 r101: [43..44]
 r102: [40..41]
 r103: [37..38]
 r104: [27..29]
 r105: [25..28]
 r106: [15..18]
 r107: [10..11]
 r108: [4..5]
 r111: [53..56]
 r112: [31..34]
 r113: [23..26]
 r114: [13..16]
Compressing live ranges: from 62 to 44 - 70%
Ranges after the compression:
 r82: [40..41]
 r83: [36..37]
 r84: [6..31]
 r85: [24..29]
 r86: [26..27]
 r87: [22..25]
 r88: [16..21]
 r89: [16..17]
 r90: [14..15]
 r91: [10..11]
 r92: [8..9]
 r93: [6..7]
 r94: [2..3]
 r95: [0..1]
 r96: [42..43]
 r97: [38..41]
 r98: [34..35]
 r99: [36..37]
 r100: [32..33]
 r101: [30..31]
 r102: [28..29]
 r103: [26..27]
 r104: [20..21]
 r105: [18..21]
 r106: [12..15]
 r107: [10..11]
 r108: [4..5]
 r111: [38..39]
 r112: [22..23]
 r113: [18..19]
 r114: [12..13]

********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 45:  (0) x  (1) 0  (2) xm {*fop_df_comm}
      Creating newreg=118 from oldreg=84, assigning class SSE_REGS to r118
      Making reload reg 118 for reg 84 optional
   45: r108:DF=r93:DF*r118:DF
      REG_DEAD r84:DF
      REG_DEAD r93:DF
    Inserting insn reload before:
   69: r118:DF=r84:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=617,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=622,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=2,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 69:  (0) v  (1) m {*movdf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=119 from oldreg=85, assigning class SSE_REGS to inheritance r119
    Original reg change 85->119 (bb2):
   25: r119:DF=xmm0:DF
      REG_DEAD xmm0:DF
    Add original<-inheritance after:
   70: r85:DF=r119:DF

    Inheritance reuse change 85->119 (bb2):
   60: r112:DF=r119:DF
      REG_DEAD r119:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=120 from oldreg=84, assigning class SSE_REGS to inheritance r120
    Original reg change 84->120 (bb2):
   21: r120:DF=xmm0:DF
      REG_DEAD xmm0:DF
    Add original<-inheritance after:
   71: r84:DF=r120:DF

    Inheritance reuse change 84->120 (bb2):
   69: r118:DF=r120:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
    70: r85:DF=r119:DF
deleting insn with uid = 70.
	    Removing dead insn:
    71: r84:DF=r120:DF
deleting insn with uid = 71.

********** Pseudo live ranges #3: **********

  BB 2
   Insn 55: point = 0, n_alt = -1
   Insn 54: point = 0, n_alt = 21
   Insn 50: point = 1, n_alt = 20
   Insn 47: point = 3, n_alt = 14
   Insn 46: point = 4, n_alt = 15
   Insn 45: point = 5, n_alt = 1
   Insn 69: point = 7, n_alt = 14
	   Creating copy r118<-r120@1000
   Insn 44: point = 9, n_alt = 1
   Insn 43: point = 11, n_alt = 2
   Insn 42: point = 13, n_alt = 14
   Insn 65: point = 14, n_alt = -2
	Hard reg 21 is preferable by r114 with profit 1000
   Insn 41: point = 16, n_alt = 2
   Insn 64: point = 18, n_alt = 21
	Hard reg 21 is preferable by r114 with profit 1000
	Hard reg 0 is preferable by r114 with profit 1000
   Insn 40: point = 20, n_alt = 14
   Insn 39: point = 21, n_alt = 20
   Insn 38: point = 22, n_alt = 0
   Insn 37: point = 22, n_alt = 21
   Insn 36: point = 23, n_alt = -2
   Insn 63: point = 24, n_alt = 20
	Hard reg 0 is preferable by r113 with profit 1000
   Insn 35: point = 26, n_alt = 1
   Insn 62: point = 28, n_alt = -2
	Hard reg 0 is preferable by r113 with profit 1000
	Hard reg 21 is preferable by r113 with profit 1000
   Insn 34: point = 30, n_alt = 14
   Insn 33: point = 31, n_alt = 14
   Insn 61: point = 32, n_alt = -2
	Hard reg 22 is preferable by r112 with profit 1000
   Insn 32: point = 34, n_alt = 1
   Insn 60: point = 36, n_alt = 14
	   Creating copy r112<-r119@1000
   Insn 31: point = 38, n_alt = 1
   Insn 30: point = 40, n_alt = 14
   Insn 29: point = 41, n_alt = -2
   Insn 28: point = 42, n_alt = 0
   Insn 27: point = 42, n_alt = -2
   Insn 26: point = 43, n_alt = 3
   Insn 25: point = 44, n_alt = 15
	Hard reg 20 is preferable by r119 with profit 1000
   Insn 24: point = 45, n_alt = 0
   Insn 23: point = 45, n_alt = -2
   Insn 22: point = 46, n_alt = 3
   Insn 21: point = 47, n_alt = 15
	Hard reg 20 is preferable by r120 with profit 1000
   Insn 20: point = 48, n_alt = 0
   Insn 19: point = 48, n_alt = -2
   Insn 18: point = 49, n_alt = 3
   Insn 17: point = 50, n_alt = 15
   Insn 16: point = 51, n_alt = 2
   Insn 15: point = 53, n_alt = 14
   Insn 59: point = 54, n_alt = -2
	Hard reg 20 is preferable by r111 with profit 1000
   Insn 14: point = 56, n_alt = 2
   Insn 58: point = 58, n_alt = 21
	Hard reg 20 is preferable by r111 with profit 1000
	Hard reg 0 is preferable by r111 with profit 1000
   Insn 13: point = 60, n_alt = 14
   Insn 12: point = 61, n_alt = 20
   Insn 11: point = 62, n_alt = 0
   Insn 10: point = 62, n_alt = -2
   Insn 9: point = 63, n_alt = 3
   Insn 5: point = 64, n_alt = 5
   Insn 4: point = 64, n_alt = 5
   Insn 3: point = 64, n_alt = 5
   Insn 2: point = 64, n_alt = 5
 r82: [59..61]
 r83: [52..54]
 r86: [39..41]
 r87: [35..38]
 r88: [23..32]
 r89: [22..24]
 r90: [19..21]
 r91: [12..14]
 r92: [10..11]
 r93: [6..9]
 r94: [2..3]
 r95: [0..1]
 r96: [62..63]
 r97: [57..60]
 r98: [50..51]
 r99: [52..53]
 r100: [48..49]
 r101: [45..46]
 r102: [42..43]
 r103: [39..40]
 r104: [29..31]
 r105: [27..30]
 r106: [17..20]
 r107: [12..13]
 r108: [4..5]
 r111: [55..58]
 r112: [33..36]
 r113: [25..28]
 r114: [15..18]
 r118: [6..7]
 r119: [37..44]
 r120: [8..47]
Compressing live ranges: from 64 to 46 - 71%
Ranges after the compression:
 r82: [42..43]
 r83: [38..39]
 r86: [28..29]
 r87: [24..27]
 r88: [18..23]
 r89: [18..19]
 r90: [16..17]
 r91: [12..13]
 r92: [10..11]
 r93: [6..9]
 r94: [2..3]
 r95: [0..1]
 r96: [44..45]
 r97: [40..43]
 r98: [36..37]
 r99: [38..39]
 r100: [34..35]
 r101: [32..33]
 r102: [30..31]
 r103: [28..29]
 r104: [22..23]
 r105: [20..23]
 r106: [14..17]
 r107: [12..13]
 r108: [4..5]
 r111: [40..41]
 r112: [24..25]
 r113: [20..21]
 r114: [14..15]
 r118: [6..7]
 r119: [26..31]
 r120: [8..33]

********** Assignment #2: **********

	 Assigning to 120 (cl=SSE_REGS, orig=84, freq=2000, tfirst=118, tfreq=2000)...
	 Assigning to 118 (cl=SSE_REGS, orig=84, freq=2000, tfirst=118, tfreq=2000)...
	   Assign 23 to optional reload r118 (freq=2000)
	Hard reg 20 is preferable by r120 with profit 1000
	Hard reg 23 is preferable by r120 with profit 1000
	 Assigning to 119 (cl=SSE_REGS, orig=85, freq=2000, tfirst=119, tfreq=2000)...
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 0 out of 2 (0.00%)
   Insn after restoring regs:
   69: r118:DF=r84:DF
      REG_DEAD r84:DF
   Insn after restoring regs:
   60: r112:DF=r85:DF
      REG_DEAD r85:DF
   Insn after restoring regs:
   25: r85:DF=xmm0:DF
      REG_DEAD xmm0:DF
   Insn after restoring regs:
   21: r84:DF=xmm0:DF
      REG_DEAD xmm0:DF
Keep optional reload reg 115
Remove optional reload reg 118
  Restoring original insn:
   45: r108:DF=r93:DF*r84:DF
      REG_DEAD r84:DF
      REG_DEAD r93:DF
  Deleting move 69
   69: r118:DF=r84:DF
      REG_DEAD r84:DF
deleting insn with uid = 69.

********** Pseudo live ranges #4: **********

  BB 2
   Insn 55: point = 0, n_alt = -1
   Insn 54: point = 0, n_alt = 21
   Insn 50: point = 1, n_alt = 20
   Insn 47: point = 3, n_alt = 14
   Insn 46: point = 4, n_alt = 15
   Insn 45: point = 5, n_alt = -1
   Insn 44: point = 7, n_alt = 1
   Insn 43: point = 9, n_alt = 2
   Insn 42: point = 11, n_alt = 14
   Insn 65: point = 12, n_alt = -2
	Hard reg 21 is preferable by r114 with profit 1000
   Insn 41: point = 14, n_alt = 2
   Insn 64: point = 16, n_alt = 21
	Hard reg 21 is preferable by r114 with profit 1000
	Hard reg 0 is preferable by r114 with profit 1000
   Insn 40: point = 18, n_alt = 14
   Insn 39: point = 19, n_alt = 20
   Insn 38: point = 20, n_alt = 0
   Insn 37: point = 20, n_alt = 21
   Insn 36: point = 21, n_alt = -2
   Insn 63: point = 22, n_alt = 20
	Hard reg 0 is preferable by r113 with profit 1000
   Insn 35: point = 24, n_alt = 1
   Insn 62: point = 26, n_alt = -2
	Hard reg 0 is preferable by r113 with profit 1000
	Hard reg 21 is preferable by r113 with profit 1000
   Insn 34: point = 28, n_alt = 14
   Insn 33: point = 29, n_alt = 14
   Insn 61: point = 30, n_alt = -2
	Hard reg 22 is preferable by r112 with profit 1000
   Insn 32: point = 32, n_alt = 1
   Insn 60: point = 34, n_alt = 14
   Insn 31: point = 36, n_alt = 1
   Insn 30: point = 38, n_alt = 14
   Insn 29: point = 39, n_alt = -2
   Insn 28: point = 40, n_alt = 0
   Insn 27: point = 40, n_alt = -2
   Insn 26: point = 41, n_alt = 3
   Insn 25: point = 42, n_alt = 15
   Insn 24: point = 43, n_alt = 0
   Insn 23: point = 43, n_alt = -2
   Insn 22: point = 44, n_alt = 3
   Insn 21: point = 45, n_alt = 15
   Insn 20: point = 46, n_alt = 0
   Insn 19: point = 46, n_alt = -2
   Insn 18: point = 47, n_alt = 3
   Insn 17: point = 48, n_alt = 15
   Insn 16: point = 49, n_alt = 2
   Insn 15: point = 51, n_alt = 14
   Insn 59: point = 52, n_alt = -2
	Hard reg 20 is preferable by r111 with profit 1000
   Insn 14: point = 54, n_alt = 2
   Insn 58: point = 56, n_alt = 21
	Hard reg 20 is preferable by r111 with profit 1000
	Hard reg 0 is preferable by r111 with profit 1000
   Insn 13: point = 58, n_alt = 14
   Insn 12: point = 59, n_alt = 20
   Insn 11: point = 60, n_alt = 0
   Insn 10: point = 60, n_alt = -2
   Insn 9: point = 61, n_alt = 3
   Insn 5: point = 62, n_alt = 5
   Insn 4: point = 62, n_alt = 5
   Insn 3: point = 62, n_alt = 5
   Insn 2: point = 62, n_alt = 5
 r82: [57..59]
 r83: [50..52]
 r84: [6..45]
 r85: [35..42]
 r86: [37..39]
 r87: [33..36]
 r88: [21..30]
 r89: [20..22]
 r90: [17..19]
 r91: [10..12]
 r92: [8..9]
 r93: [6..7]
 r94: [2..3]
 r95: [0..1]
 r96: [60..61]
 r97: [55..58]
 r98: [48..49]
 r99: [50..51]
 r100: [46..47]
 r101: [43..44]
 r102: [40..41]
 r103: [37..38]
 r104: [27..29]
 r105: [25..28]
 r106: [15..18]
 r107: [10..11]
 r108: [4..5]
 r111: [53..56]
 r112: [31..34]
 r113: [23..26]
 r114: [13..16]
Compressing live ranges: from 62 to 44 - 70%
Ranges after the compression:
 r82: [40..41]
 r83: [36..37]
 r84: [6..31]
 r85: [24..29]
 r86: [26..27]
 r87: [22..25]
 r88: [16..21]
 r89: [16..17]
 r90: [14..15]
 r91: [10..11]
 r92: [8..9]
 r93: [6..7]
 r94: [2..3]
 r95: [0..1]
 r96: [42..43]
 r97: [38..41]
 r98: [34..35]
 r99: [36..37]
 r100: [32..33]
 r101: [30..31]
 r102: [28..29]
 r103: [26..27]
 r104: [20..21]
 r105: [18..21]
 r106: [12..15]
 r107: [10..11]
 r108: [4..5]
 r111: [38..39]
 r112: [22..23]
 r113: [18..19]
 r114: [12..13]

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 45:  (0) x  (1) 0  (2) xm {*fop_df_comm}
	   Spilling non-eliminable hard regs: 6
  Slot 0 regnos (width = 0):	 84
  Slot 1 regnos (width = 0):	 85
Changing spilled pseudos to memory in insn #21
Changing spilled pseudos to memory in insn #25
Changing spilled pseudos to memory in insn #60
Changing spilled pseudos to memory in insn #45
	   Spilling non-eliminable hard regs: 6

********** Local #4: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 1 for insn #45
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) x  (1) 0  (2) xm {*fop_df_comm}
Reusing alternative 14 for insn #60
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 60:  (0) v  (1) m {*movdf_internal}
Reusing alternative 15 for insn #25
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 25:  (0) m  (1) v {*movdf_internal}
Reusing alternative 15 for insn #21
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 21:  (0) m  (1) v {*movdf_internal}
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=64, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 12
changing reg in insn 16
changing reg in insn 29
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 36
changing reg in insn 37
changing reg in insn 39
changing reg in insn 43
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 47
changing reg in insn 50
changing reg in insn 50
changing reg in insn 54
changing reg in insn 9
changing reg in insn 10
changing reg in insn 13
changing reg in insn 14
changing reg in insn 16
changing reg in insn 17
changing reg in insn 15
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 22
changing reg in insn 23
changing reg in insn 26
changing reg in insn 27
changing reg in insn 30
changing reg in insn 31
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 45
changing reg in insn 46
deleting insn with uid = 59.
deleting insn with uid = 29.
deleting insn with uid = 61.
deleting insn with uid = 62.
deleting insn with uid = 65.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 20.
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 38.


credit_a

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame] 20 [xmm0]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3]
;;  ref usage 	r0={14d,8u} r1={6d,1u} r2={6d,1u} r4={6d,1u} r5={10d,5u} r6={1d,20u} r7={1d,7u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r17={5d} r18={5d} r19={1d,1u} r20={19d,19u} r21={14d,8u} r22={8d,2u} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={5d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={6d} r37={6d} r38={5d} r39={5d} r44={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} 
;;    total ref usage 461{388d,73u,0e} in 49{44 regular + 5 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 summ+0 S8 A64])
        (reg:DI 5 di [ summ ])) "calc.c":251:1 74 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [1 years+0 S8 A64])
        (reg:DI 4 si [ years ])) "calc.c":251:1 74 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 month+0 S8 A64])
        (reg:DI 1 dx [ month ])) "calc.c":251:1 74 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [1 percent+0 S8 A64])
        (reg:DI 2 cx [ percent ])) "calc.c":251:1 74 {*movdi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [1 percent+0 S8 A64])) "calc.c":252:16 74 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [96])) "calc.c":252:16 74 {*movdi_internal}
     (nil))
(call_insn/i 11 10 12 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":252:16 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 12 11 13 2 (set (reg:DF 0 ax [orig:82 _1 ] [82])
        (reg:DF 20 xmm0)) "calc.c":252:16 135 {*movdf_internal}
     (nil))
(insn 13 12 58 2 (set (reg:DF 21 xmm1 [97])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S8 A64])) "calc.c":252:30 135 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+2 [0x0.c8p+7])
        (nil)))
(insn 58 13 14 2 (set (reg:DF 20 xmm0 [orig:82 _1 ] [82])
        (reg:DF 0 ax [orig:82 _1 ] [82])) "calc.c":252:30 135 {*movdf_internal}
     (nil))
(insn 14 58 15 2 (set (reg:DF 20 xmm0 [orig:82 _1 ] [82])
        (div:DF (reg:DF 20 xmm0 [orig:82 _1 ] [82])
            (reg:DF 21 xmm1 [97]))) "calc.c":252:30 985 {*fop_df_1}
     (nil))
(insn 15 14 16 2 (set (reg:DF 21 xmm1 [99])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC19") [flags 0x2]) [0  S8 A64])) "calc.c":252:12 135 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.2e+1 [0x0.cp+4])
        (nil)))
(insn 16 15 17 2 (set (reg:DF 20 xmm0 [98])
        (div:DF (reg:DF 20 xmm0 [orig:83 _2 ] [83])
            (reg:DF 21 xmm1 [99]))) "calc.c":252:12 985 {*fop_df_1}
     (nil))
(insn 17 16 18 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 p+0 S8 A64])
        (reg:DF 20 xmm0 [98])) "calc.c":252:12 135 {*movdf_internal}
     (nil))
(insn 18 17 19 2 (set (reg:DI 0 ax [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [1 summ+0 S8 A64])) "calc.c":253:17 74 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [100])) "calc.c":253:17 74 {*movdi_internal}
     (nil))
(call_insn/i 20 19 21 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":253:17 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 21 20 71 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [12 %sfp+-56 S8 A64])
        (reg:DF 20 xmm0)) "calc.c":253:17 135 {*movdf_internal}
     (nil))
(note 71 21 68 2 NOTE_INSN_DELETED)
(note 68 71 22 2 NOTE_INSN_DELETED)
(insn 22 68 23 2 (set (reg:DI 0 ax [101])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [1 month+0 S8 A64])) "calc.c":253:53 74 {*movdi_internal}
     (nil))
(insn 23 22 24 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [101])) "calc.c":253:53 74 {*movdi_internal}
     (nil))
(call_insn/i 24 23 25 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":253:53 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 25 24 70 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [12 %sfp+-64 S8 A64])
        (reg:DF 20 xmm0)) "calc.c":253:53 135 {*movdf_internal}
     (nil))
(note 70 25 67 2 NOTE_INSN_DELETED)
(note 67 70 26 2 NOTE_INSN_DELETED)
(insn 26 67 27 2 (set (reg:DI 0 ax [102])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [1 years+0 S8 A64])) "calc.c":253:72 74 {*movdi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [102])) "calc.c":253:72 74 {*movdi_internal}
     (nil))
(call_insn/i 28 27 30 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":253:72 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 30 28 31 2 (set (reg:DF 21 xmm1 [103])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC19") [flags 0x2]) [0  S8 A64])) "calc.c":253:70 135 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.2e+1 [0x0.cp+4])
        (nil)))
(insn 31 30 60 2 (set (reg:DF 20 xmm0 [orig:87 _6 ] [87])
        (mult:DF (reg:DF 20 xmm0 [orig:86 _5 ] [86])
            (reg:DF 21 xmm1 [103]))) "calc.c":253:70 981 {*fop_df_comm}
     (nil))
(insn 60 31 32 2 (set (reg:DF 22 xmm2 [orig:85 _4 ] [85])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [12 %sfp+-64 S8 A64])) "calc.c":253:40 135 {*movdf_internal}
     (nil))
(insn 32 60 33 2 (set (reg:DF 22 xmm2 [orig:85 _4 ] [85])
        (plus:DF (reg:DF 22 xmm2 [orig:85 _4 ] [85])
            (reg:DF 20 xmm0 [orig:87 _6 ] [87]))) "calc.c":253:40 981 {*fop_df_comm}
     (nil))
(insn 33 32 34 2 (set (reg:DF 21 xmm1 [104])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 p+0 S8 A64])) "calc.c":253:40 135 {*movdf_internal}
     (nil))
(insn 34 33 35 2 (set (reg:DF 20 xmm0 [105])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC20") [flags 0x2]) [0  S8 A64])) "calc.c":253:40 135 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 35 34 63 2 (set (reg:DF 21 xmm1 [104])
        (plus:DF (reg:DF 21 xmm1 [104])
            (reg:DF 20 xmm0 [105]))) "calc.c":253:40 981 {*fop_df_comm}
     (nil))
(insn 63 35 36 2 (set (reg:DF 0 ax [orig:89 _8 ] [89])
        (reg:DF 21 xmm1 [104])) "calc.c":253:40 135 {*movdf_internal}
     (nil))
(insn 36 63 37 2 (set (reg:DF 21 xmm1)
        (reg:DF 22 xmm2 [orig:88 _7 ] [88])) "calc.c":253:40 135 {*movdf_internal}
     (nil))
(insn 37 36 38 2 (set (reg:DF 20 xmm0)
        (reg:DF 0 ax [orig:89 _8 ] [89])) "calc.c":253:40 135 {*movdf_internal}
     (nil))
(call_insn 38 37 39 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("pow") [flags 0x41]  <function_decl 0x7f09f1807b00 pow>) [0 __builtin_pow S1 A8])
            (const_int 0 [0]))) "calc.c":253:40 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (expr_list:DF (use (reg:DF 21 xmm1))
            (nil))))
(insn 39 38 40 2 (set (reg:DF 0 ax [orig:90 _9 ] [90])
        (reg:DF 20 xmm0)) "calc.c":253:40 135 {*movdf_internal}
     (nil))
(insn 40 39 64 2 (set (reg:DF 20 xmm0 [106])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC20") [flags 0x2]) [0  S8 A64])) "calc.c":253:85 135 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 64 40 41 2 (set (reg:DF 21 xmm1 [orig:90 _9 ] [90])
        (reg:DF 0 ax [orig:90 _9 ] [90])) "calc.c":253:85 135 {*movdf_internal}
     (nil))
(insn 41 64 42 2 (set (reg:DF 21 xmm1 [orig:90 _9 ] [90])
        (minus:DF (reg:DF 21 xmm1 [orig:90 _9 ] [90])
            (reg:DF 20 xmm0 [106]))) "calc.c":253:85 985 {*fop_df_1}
     (nil))
(insn 42 41 43 2 (set (reg:DF 20 xmm0 [107])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [2 p+0 S8 A64])) "calc.c":253:37 135 {*movdf_internal}
     (nil))
(insn 43 42 44 2 (set (reg:DF 20 xmm0 [orig:92 _11 ] [92])
        (div:DF (reg:DF 20 xmm0 [107])
            (reg:DF 21 xmm1 [orig:91 _10 ] [91]))) "calc.c":253:37 985 {*fop_df_1}
     (nil))
(insn 44 43 66 2 (set (reg:DF 20 xmm0 [orig:93 _12 ] [93])
        (plus:DF (reg:DF 20 xmm0 [orig:92 _11 ] [92])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [2 p+0 S8 A64]))) "calc.c":253:33 981 {*fop_df_comm}
     (nil))
(note 66 44 69 2 NOTE_INSN_DELETED)
(note 69 66 45 2 NOTE_INSN_DELETED)
(insn 45 69 46 2 (set (reg:DF 20 xmm0 [108])
        (mult:DF (reg:DF 20 xmm0 [orig:93 _12 ] [93])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [12 %sfp+-56 S8 A64]))) "calc.c":253:15 981 {*fop_df_comm}
     (nil))
(insn 46 45 47 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 month_pay+0 S8 A64])
        (reg:DF 20 xmm0 [108])) "calc.c":253:15 135 {*movdf_internal}
     (nil))
(insn 47 46 50 2 (set (reg:DF 20 xmm0 [orig:94 _21 ] [94])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 month_pay+0 S8 A64])) "calc.c":254:12 135 {*movdf_internal}
     (nil))
(insn 50 47 54 2 (set (reg:DF 0 ax [orig:95 <retval> ] [95])
        (reg:DF 20 xmm0 [orig:94 _21 ] [94])) "calc.c":254:12 135 {*movdf_internal}
     (nil))
(insn 54 50 55 2 (set (reg/i:DF 20 xmm0)
        (reg:DF 0 ax [orig:95 <retval> ] [95])) "calc.c":255:1 135 {*movdf_internal}
     (nil))
(insn 55 54 57 2 (use (reg/i:DF 20 xmm0)) "calc.c":255:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0]

(note 57 55 0 NOTE_INSN_DELETED)

;; Function credit_d (credit_d, funcdef_no=13, decl_uid=4556, cgraph_uid=14, symbol_order=13)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=128, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=112, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=617,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=9,overall=627,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=22,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 12:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 13:  (0) ?m  (1) rC {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 18:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=1,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=1,overall=8,losers=1,rld_nregs=2
	 Choosing alt 1 in insn 19:  (0) x  (1) 0  (2) xm {*fop_df_comm}
      Creating newreg=124 from oldreg=82, assigning class SSE_REGS to r124
   19: r124:DF=r124:DF*r93:DF
      REG_DEAD r93:DF
      REG_DEAD r82:DF
    Inserting insn reload before:
  105: r124:DF=r82:DF
    Inserting insn reload after:
  106: r83:DF=r124:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=624,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            alt=8,overall=622,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=9,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=616,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=15,overall=2,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 106:  (0) m  (1) v {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (1) rBwBz {*call_value}
          alt=1,overall=6,losers=1,rld_nregs=1
            2 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
  Commutative operand exchange in insn 24
	 Choosing alt 1 in insn 24:  (0) x  (1) 0  (2) xm {*fop_df_comm}
      Creating newreg=125 from oldreg=83, assigning class SSE_REGS to r125
      Making reload reg 125 for reg 83 optional
   24: r95:DF=r84:DF+r125:DF
      REG_DEAD r84:DF
      REG_DEAD r83:DF
    Inserting insn reload before:
  107: r125:DF=r83:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=617,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=622,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=2,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 107:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 25:  (0) m  (1) v {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=617,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=9,overall=627,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=22,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 29:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 30:  (0) ?m  (1) rC {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 31:  (0) v  (1) m {*movdf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 32:  (0) x  (1) 0  (2) xm {*fop_df_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 33:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 34:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 35:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 36:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 37:  (0) v  (1) m {*movdf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 38:  (0) x  (1) 0  (2) xm {*fop_df_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 39:  (0) v  (1) m {*movdf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 40:  (0) x  (1) 0  (2) xm {*fop_df_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 41:  (0) m  (1) v {*movdf_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 42:  (0) r  (1) i {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 44:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 48:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 49:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 51:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 52:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 53:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 56:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 60:  (0) v  (1) m {*movdf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 61:  (0) x  (1) 0  (2) xm {*fop_df_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 62:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 63:  (0) v  (1) m {*movdf_internal}
            0 Non input pseudo reload: reject++
            1 Dying matched operand reload: reject++
          alt=1,overall=8,losers=1,rld_nregs=2
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=18,losers=2 -- refuse
	 Choosing alt 1 in insn 64:  (0) x  (1) 0  (2) xm {*fop_df_comm}
      Creating newreg=126 from oldreg=112, assigning class SSE_REGS to r126
   64: r126:DF=r126:DF+[frame:DI-0x20]
      REG_DEAD r112:DF
    Inserting insn reload before:
  108: r126:DF=r112:DF
    Inserting insn reload after:
  109: r86:DF=r126:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=630,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=626,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=615,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=616,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=15,overall=14,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=610,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
            alt=18,overall=17,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            1 Non pseudo costly reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            1 Non pseudo reload: reject++
          alt=20,overall=1,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 109:  (0) r  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1215,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=21,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=608,losers=1,rld_nregs=1
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=13,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=609,losers=1 -- refuse
          alt=21,overall=0,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 67:  (0) v  (1) r {*movdf_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 69:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 74:  (0) v  (1) m {*movdf_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 75:  (0) x  (1) 0  (2) xm {*fop_df_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 76:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 77:  (0) v  (1) m {*movdf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
	 Choosing alt 1 in insn 78:  (0) x  (1) 0  (2) xm {*fop_df_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 79:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 80:  (0) =rm  (1) %0  (2) re {*addsi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 83:  (0) v  (1) m {*floatsidf2}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 85:  (0) v  (1) m {*movdf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 86:  (0) v  (1) vm {*cmpidf}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 91:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 92:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=630,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=626,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=615,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=619,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=20,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 95:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1215,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=21,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=608,losers=1,rld_nregs=1
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=13,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=609,losers=1 -- refuse
          alt=21,overall=0,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 99:  (0) v  (1) r {*movdf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=127 from oldreg=83, assigning class SSE_REGS to inheritance r127
    Original reg change 83->127 (bb2):
  106: r127:DF=r124:DF
    Add original<-inheritance after:
  110: r83:DF=r127:DF

    Inheritance reuse change 83->127 (bb2):
  107: r125:DF=r127:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   110: r83:DF=r127:DF
deleting insn with uid = 110.
EBB 3
EBB 4 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 100: point = 0, n_alt = -1
   Insn 99: point = 0, n_alt = 21
   Insn 95: point = 1, n_alt = 20
   Insn 92: point = 3, n_alt = 14
   Insn 91: point = 4, n_alt = 0
   Insn 90: point = 4, n_alt = -2
   Insn 89: point = 5, n_alt = 3
  BB 4
   Insn 87: point = 6, n_alt = -1
   Insn 86: point = 6, n_alt = 1
   Insn 85: point = 7, n_alt = 14
   Insn 83: point = 8, n_alt = 2
  BB 2
   Insn 102: point = 9, n_alt = -1
   Insn 56: point = 9, n_alt = 1
   Insn 55: point = 9, n_alt = 0
   Insn 54: point = 9, n_alt = -2
   Insn 53: point = 10, n_alt = 4
   Insn 52: point = 11, n_alt = 2
   Insn 51: point = 11, n_alt = 2
   Insn 50: point = 11, n_alt = -2
   Insn 49: point = 12, n_alt = 3
   Insn 48: point = 13, n_alt = 5
   Insn 47: point = 14, n_alt = -2
   Insn 46: point = 15, n_alt = 0
   Insn 45: point = 15, n_alt = -2
   Insn 44: point = 16, n_alt = 4
   Insn 43: point = 17, n_alt = -2
   Insn 42: point = 18, n_alt = 4
   Insn 41: point = 19, n_alt = 15
   Insn 40: point = 20, n_alt = 2
   Insn 39: point = 22, n_alt = 14
   Insn 38: point = 23, n_alt = 2
   Insn 37: point = 25, n_alt = 14
   Insn 36: point = 26, n_alt = 14
   Insn 35: point = 27, n_alt = 15
   Insn 34: point = 28, n_alt = 14
   Insn 33: point = 29, n_alt = 15
   Insn 32: point = 30, n_alt = 2
   Insn 31: point = 32, n_alt = 14
   Insn 30: point = 33, n_alt = 9
   Insn 29: point = 34, n_alt = 20
   Insn 28: point = 35, n_alt = 0
   Insn 27: point = 35, n_alt = -2
   Insn 26: point = 36, n_alt = 3
   Insn 25: point = 37, n_alt = 15
   Insn 24: point = 38, n_alt = 1
   Insn 107: point = 40, n_alt = 14
	   Creating copy r125<-r127@1000
   Insn 23: point = 42, n_alt = -2
   Insn 22: point = 43, n_alt = 0
   Insn 21: point = 43, n_alt = -2
   Insn 20: point = 44, n_alt = 3
   Insn 106: point = 45, n_alt = 15
	   Creating copy r124->r127@1000
   Insn 19: point = 47, n_alt = 1
   Insn 105: point = 49, n_alt = -2
	Hard reg 20 is preferable by r124 with profit 1000
   Insn 18: point = 51, n_alt = 14
   Insn 17: point = 52, n_alt = -2
   Insn 16: point = 53, n_alt = 0
   Insn 15: point = 53, n_alt = -2
   Insn 14: point = 54, n_alt = 3
   Insn 13: point = 55, n_alt = 9
   Insn 12: point = 56, n_alt = 20
   Insn 11: point = 57, n_alt = 0
   Insn 10: point = 57, n_alt = -2
   Insn 9: point = 58, n_alt = 3
   Insn 5: point = 59, n_alt = 5
   Insn 4: point = 59, n_alt = 5
   Insn 3: point = 59, n_alt = 5
   Insn 2: point = 59, n_alt = 5
  BB 3
   Insn 80: point = 59, n_alt = 0
   Insn 79: point = 59, n_alt = 15
   Insn 78: point = 60, n_alt = 1
   Insn 77: point = 62, n_alt = 14
   Insn 76: point = 63, n_alt = 15
   Insn 75: point = 64, n_alt = 2
   Insn 74: point = 66, n_alt = 14
   Insn 73: point = 67, n_alt = 0
   Insn 72: point = 67, n_alt = 3
   Insn 71: point = 67, n_alt = -2
   Insn 70: point = 68, n_alt = -2
   Insn 69: point = 69, n_alt = 4
   Insn 68: point = 70, n_alt = -2
   Insn 67: point = 71, n_alt = 21
   Insn 66: point = 72, n_alt = 3
   Insn 65: point = 73, n_alt = 0
   Insn 109: point = 74, n_alt = 20
	Hard reg 2 is preferable by r126 with profit 1000
   Insn 64: point = 76, n_alt = 1
   Insn 108: point = 77, n_alt = -2
	Hard reg 2 is preferable by r126 with profit 1000
	Hard reg 20 is preferable by r126 with profit 1000
   Insn 63: point = 79, n_alt = 14
   Insn 62: point = 80, n_alt = 15
   Insn 61: point = 81, n_alt = 1
   Insn 60: point = 83, n_alt = 14
 r82: [50..52]
 r84: [39..42]
 r85: [21..23]
 r86: [71..74]
 r87: [6..8]
 r88: [2..3]
 r89: [0..1]
 r90: [57..58]
 r91: [55..56]
 r92: [53..54]
 r93: [48..51]
 r94: [43..44]
 r95: [37..38]
 r96: [35..36]
 r97: [33..34]
 r98: [29..30]
 r99: [31..32]
 r100: [27..28]
 r101: [24..26]
 r102: [24..25]
 r103: [19..20]
 r104: [21..22]
 r105: [17..18]
 r106: [15..16]
 r107: [13..14]
 r108: [11..12]
 r109: [9..10]
 r110: [80..81]
 r111: [82..83]
 r112: [78..79]
 r113: [70..73]
 r114: [67..72]
 r115: [68..69]
 r116: [63..64]
 r117: [65..66]
 r118: [59..60]
 r119: [61..62]
 r120: [6..7]
 r121: [4..5]
 r124: [46..49]
 r125: [39..40]
 r126: [75..77]
 r127: [41..45]
Compressing live ranges: from 84 to 72 - 85%
Ranges after the compression:
 r82: [44..45]
 r84: [36..39]
 r85: [20..21]
 r86: [62..63]
 r87: [6..7]
 r88: [2..3]
 r89: [0..1]
 r90: [50..51]
 r91: [48..49]
 r92: [46..47]
 r93: [42..45]
 r94: [40..41]
 r95: [34..35]
 r96: [32..33]
 r97: [30..31]
 r98: [26..27]
 r99: [28..29]
 r100: [24..25]
 r101: [22..23]
 r102: [22..23]
 r103: [18..19]
 r104: [20..21]
 r105: [16..17]
 r106: [14..15]
 r107: [12..13]
 r108: [10..11]
 r109: [8..9]
 r110: [68..69]
 r111: [70..71]
 r112: [66..67]
 r113: [62..63]
 r114: [60..63]
 r115: [60..61]
 r116: [56..57]
 r117: [58..59]
 r118: [52..53]
 r119: [54..55]
 r120: [6..7]
 r121: [4..5]
 r124: [42..43]
 r125: [36..37]
 r126: [64..65]
 r127: [38..41]

********** Assignment #1: **********

	 Assigning to 127 (cl=SSE_REGS, orig=83, freq=2000, tfirst=124, tfreq=3000)...
	 Assigning to 124 (cl=SSE_REGS, orig=82, freq=3000, tfirst=124, tfreq=3000)...
	   Assign 20 to reload r124 (freq=3000)
	Hard reg 20 is preferable by r127 with profit 1000
	Hard reg 20 is preferable by r125 with profit 500
	 Assigning to 125 (cl=SSE_REGS, orig=83, freq=2000, tfirst=124, tfreq=3000)...
	   Assign 22 to optional reload r125 (freq=2000)
	Hard reg 20 is preferable by r127 with profit 1000
	Hard reg 22 is preferable by r127 with profit 1000
	 Assigning to 126 (cl=SSE_REGS, orig=112, freq=3000, tfirst=126, tfreq=3000)...
	   Assign 20 to reload r126 (freq=3000)
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********

Inherit 0 out of 1 (0.00%)
   Insn after restoring regs:
  107: r125:DF=r83:DF
      REG_DEAD r83:DF
   Insn after restoring regs:
  106: r83:DF=r124:DF
      REG_DEAD r124:DF
Remove optional reload reg 125
  Restoring original insn:
   24: r95:DF=r84:DF+r83:DF
      REG_DEAD r83:DF
      REG_DEAD r84:DF
  Deleting move 107
  107: r125:DF=r83:DF
      REG_DEAD r83:DF
deleting insn with uid = 107.

********** Pseudo live ranges #2: **********

  BB 5
   Insn 100: point = 0, n_alt = -1
   Insn 99: point = 0, n_alt = 21
   Insn 95: point = 1, n_alt = 20
   Insn 92: point = 3, n_alt = 14
   Insn 91: point = 4, n_alt = 0
   Insn 90: point = 4, n_alt = -2
   Insn 89: point = 5, n_alt = 3
  BB 4
   Insn 87: point = 6, n_alt = -1
   Insn 86: point = 6, n_alt = 1
   Insn 85: point = 7, n_alt = 14
   Insn 83: point = 8, n_alt = 2
  BB 2
   Insn 102: point = 9, n_alt = -1
   Insn 56: point = 9, n_alt = 1
   Insn 55: point = 9, n_alt = 0
   Insn 54: point = 9, n_alt = -2
   Insn 53: point = 10, n_alt = 4
   Insn 52: point = 11, n_alt = 2
   Insn 51: point = 11, n_alt = 2
   Insn 50: point = 11, n_alt = -2
   Insn 49: point = 12, n_alt = 3
   Insn 48: point = 13, n_alt = 5
   Insn 47: point = 14, n_alt = -2
   Insn 46: point = 15, n_alt = 0
   Insn 45: point = 15, n_alt = -2
   Insn 44: point = 16, n_alt = 4
   Insn 43: point = 17, n_alt = -2
   Insn 42: point = 18, n_alt = 4
   Insn 41: point = 19, n_alt = 15
   Insn 40: point = 20, n_alt = 2
   Insn 39: point = 22, n_alt = 14
   Insn 38: point = 23, n_alt = 2
   Insn 37: point = 25, n_alt = 14
   Insn 36: point = 26, n_alt = 14
   Insn 35: point = 27, n_alt = 15
   Insn 34: point = 28, n_alt = 14
   Insn 33: point = 29, n_alt = 15
   Insn 32: point = 30, n_alt = 2
   Insn 31: point = 32, n_alt = 14
   Insn 30: point = 33, n_alt = 9
   Insn 29: point = 34, n_alt = 20
   Insn 28: point = 35, n_alt = 0
   Insn 27: point = 35, n_alt = -2
   Insn 26: point = 36, n_alt = 3
   Insn 25: point = 37, n_alt = 15
   Insn 24: point = 38, n_alt = -1
   Insn 23: point = 40, n_alt = -2
   Insn 22: point = 41, n_alt = 0
   Insn 21: point = 41, n_alt = -2
   Insn 20: point = 42, n_alt = 3
   Insn 106: point = 43, n_alt = 15
   Insn 19: point = 45, n_alt = 1
   Insn 105: point = 47, n_alt = -2
	Hard reg 20 is preferable by r124 with profit 1000
   Insn 18: point = 49, n_alt = 14
   Insn 17: point = 50, n_alt = -2
   Insn 16: point = 51, n_alt = 0
   Insn 15: point = 51, n_alt = -2
   Insn 14: point = 52, n_alt = 3
   Insn 13: point = 53, n_alt = 9
   Insn 12: point = 54, n_alt = 20
   Insn 11: point = 55, n_alt = 0
   Insn 10: point = 55, n_alt = -2
   Insn 9: point = 56, n_alt = 3
   Insn 5: point = 57, n_alt = 5
   Insn 4: point = 57, n_alt = 5
   Insn 3: point = 57, n_alt = 5
   Insn 2: point = 57, n_alt = 5
  BB 3
   Insn 80: point = 57, n_alt = 0
   Insn 79: point = 57, n_alt = 15
   Insn 78: point = 58, n_alt = 1
   Insn 77: point = 60, n_alt = 14
   Insn 76: point = 61, n_alt = 15
   Insn 75: point = 62, n_alt = 2
   Insn 74: point = 64, n_alt = 14
   Insn 73: point = 65, n_alt = 0
   Insn 72: point = 65, n_alt = 3
   Insn 71: point = 65, n_alt = -2
   Insn 70: point = 66, n_alt = -2
   Insn 69: point = 67, n_alt = 4
   Insn 68: point = 68, n_alt = -2
   Insn 67: point = 69, n_alt = 21
   Insn 66: point = 70, n_alt = 3
   Insn 65: point = 71, n_alt = 0
   Insn 109: point = 72, n_alt = 20
	Hard reg 2 is preferable by r126 with profit 1000
   Insn 64: point = 74, n_alt = 1
   Insn 108: point = 75, n_alt = -2
	Hard reg 2 is preferable by r126 with profit 1000
	Hard reg 20 is preferable by r126 with profit 1000
   Insn 63: point = 77, n_alt = 14
   Insn 62: point = 78, n_alt = 15
   Insn 61: point = 79, n_alt = 1
   Insn 60: point = 81, n_alt = 14
 r82: [48..50]
 r83: [39..43]
 r84: [39..40]
 r85: [21..23]
 r86: [69..72]
 r87: [6..8]
 r88: [2..3]
 r89: [0..1]
 r90: [55..56]
 r91: [53..54]
 r92: [51..52]
 r93: [46..49]
 r94: [41..42]
 r95: [37..38]
 r96: [35..36]
 r97: [33..34]
 r98: [29..30]
 r99: [31..32]
 r100: [27..28]
 r101: [24..26]
 r102: [24..25]
 r103: [19..20]
 r104: [21..22]
 r105: [17..18]
 r106: [15..16]
 r107: [13..14]
 r108: [11..12]
 r109: [9..10]
 r110: [78..79]
 r111: [80..81]
 r112: [76..77]
 r113: [68..71]
 r114: [65..70]
 r115: [66..67]
 r116: [61..62]
 r117: [63..64]
 r118: [57..58]
 r119: [59..60]
 r120: [6..7]
 r121: [4..5]
 r124: [44..47]
 r126: [73..75]
Compressing live ranges: from 82 to 70 - 85%
Ranges after the compression:
 r82: [42..43]
 r83: [36..39]
 r84: [36..37]
 r85: [20..21]
 r86: [60..61]
 r87: [6..7]
 r88: [2..3]
 r89: [0..1]
 r90: [48..49]
 r91: [46..47]
 r92: [44..45]
 r93: [40..43]
 r94: [38..39]
 r95: [34..35]
 r96: [32..33]
 r97: [30..31]
 r98: [26..27]
 r99: [28..29]
 r100: [24..25]
 r101: [22..23]
 r102: [22..23]
 r103: [18..19]
 r104: [20..21]
 r105: [16..17]
 r106: [14..15]
 r107: [12..13]
 r108: [10..11]
 r109: [8..9]
 r110: [66..67]
 r111: [68..69]
 r112: [64..65]
 r113: [60..61]
 r114: [58..61]
 r115: [58..59]
 r116: [54..55]
 r117: [56..57]
 r118: [50..51]
 r119: [52..53]
 r120: [6..7]
 r121: [4..5]
 r124: [40..41]
 r126: [62..63]

********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 24:  (0) x  (1) 0  (2) xm {*fop_df_comm}
      Creating newreg=128 from oldreg=83, assigning class SSE_REGS to r128
      Making reload reg 128 for reg 83 optional
   24: r95:DF=r84:DF+r128:DF
      REG_DEAD r83:DF
      REG_DEAD r84:DF
    Inserting insn reload before:
  111: r128:DF=r83:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=617,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=622,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=14,overall=2,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 111:  (0) v  (1) m {*movdf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      Creating newreg=129 from oldreg=83, assigning class SSE_REGS to inheritance r129
    Original reg change 83->129 (bb2):
  106: r129:DF=r124:DF
      REG_DEAD r124:DF
    Add original<-inheritance after:
  112: r83:DF=r129:DF

    Inheritance reuse change 83->129 (bb2):
  111: r128:DF=r129:DF
	  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	    Removing dead insn:
   112: r83:DF=r129:DF
deleting insn with uid = 112.
EBB 3
EBB 4 5

********** Pseudo live ranges #3: **********

  BB 5
   Insn 100: point = 0, n_alt = -1
   Insn 99: point = 0, n_alt = 21
   Insn 95: point = 1, n_alt = 20
   Insn 92: point = 3, n_alt = 14
   Insn 91: point = 4, n_alt = 0
   Insn 90: point = 4, n_alt = -2
   Insn 89: point = 5, n_alt = 3
  BB 4
   Insn 87: point = 6, n_alt = -1
   Insn 86: point = 6, n_alt = 1
   Insn 85: point = 7, n_alt = 14
   Insn 83: point = 8, n_alt = 2
  BB 2
   Insn 102: point = 9, n_alt = -1
   Insn 56: point = 9, n_alt = 1
   Insn 55: point = 9, n_alt = 0
   Insn 54: point = 9, n_alt = -2
   Insn 53: point = 10, n_alt = 4
   Insn 52: point = 11, n_alt = 2
   Insn 51: point = 11, n_alt = 2
   Insn 50: point = 11, n_alt = -2
   Insn 49: point = 12, n_alt = 3
   Insn 48: point = 13, n_alt = 5
   Insn 47: point = 14, n_alt = -2
   Insn 46: point = 15, n_alt = 0
   Insn 45: point = 15, n_alt = -2
   Insn 44: point = 16, n_alt = 4
   Insn 43: point = 17, n_alt = -2
   Insn 42: point = 18, n_alt = 4
   Insn 41: point = 19, n_alt = 15
   Insn 40: point = 20, n_alt = 2
   Insn 39: point = 22, n_alt = 14
   Insn 38: point = 23, n_alt = 2
   Insn 37: point = 25, n_alt = 14
   Insn 36: point = 26, n_alt = 14
   Insn 35: point = 27, n_alt = 15
   Insn 34: point = 28, n_alt = 14
   Insn 33: point = 29, n_alt = 15
   Insn 32: point = 30, n_alt = 2
   Insn 31: point = 32, n_alt = 14
   Insn 30: point = 33, n_alt = 9
   Insn 29: point = 34, n_alt = 20
   Insn 28: point = 35, n_alt = 0
   Insn 27: point = 35, n_alt = -2
   Insn 26: point = 36, n_alt = 3
   Insn 25: point = 37, n_alt = 15
   Insn 24: point = 38, n_alt = 1
   Insn 111: point = 40, n_alt = 14
	   Creating copy r128<-r129@1000
   Insn 23: point = 42, n_alt = -2
   Insn 22: point = 43, n_alt = 0
   Insn 21: point = 43, n_alt = -2
   Insn 20: point = 44, n_alt = 3
   Insn 106: point = 45, n_alt = 15
	   Creating copy r124->r129@1000
   Insn 19: point = 47, n_alt = 1
   Insn 105: point = 49, n_alt = -2
	Hard reg 20 is preferable by r124 with profit 1000
   Insn 18: point = 51, n_alt = 14
   Insn 17: point = 52, n_alt = -2
   Insn 16: point = 53, n_alt = 0
   Insn 15: point = 53, n_alt = -2
   Insn 14: point = 54, n_alt = 3
   Insn 13: point = 55, n_alt = 9
   Insn 12: point = 56, n_alt = 20
   Insn 11: point = 57, n_alt = 0
   Insn 10: point = 57, n_alt = -2
   Insn 9: point = 58, n_alt = 3
   Insn 5: point = 59, n_alt = 5
   Insn 4: point = 59, n_alt = 5
   Insn 3: point = 59, n_alt = 5
   Insn 2: point = 59, n_alt = 5
  BB 3
   Insn 80: point = 59, n_alt = 0
   Insn 79: point = 59, n_alt = 15
   Insn 78: point = 60, n_alt = 1
   Insn 77: point = 62, n_alt = 14
   Insn 76: point = 63, n_alt = 15
   Insn 75: point = 64, n_alt = 2
   Insn 74: point = 66, n_alt = 14
   Insn 73: point = 67, n_alt = 0
   Insn 72: point = 67, n_alt = 3
   Insn 71: point = 67, n_alt = -2
   Insn 70: point = 68, n_alt = -2
   Insn 69: point = 69, n_alt = 4
   Insn 68: point = 70, n_alt = -2
   Insn 67: point = 71, n_alt = 21
   Insn 66: point = 72, n_alt = 3
   Insn 65: point = 73, n_alt = 0
   Insn 109: point = 74, n_alt = 20
	Hard reg 2 is preferable by r126 with profit 1000
   Insn 64: point = 76, n_alt = 1
   Insn 108: point = 77, n_alt = -2
	Hard reg 2 is preferable by r126 with profit 1000
	Hard reg 20 is preferable by r126 with profit 1000
   Insn 63: point = 79, n_alt = 14
   Insn 62: point = 80, n_alt = 15
   Insn 61: point = 81, n_alt = 1
   Insn 60: point = 83, n_alt = 14
 r82: [50..52]
 r84: [39..42]
 r85: [21..23]
 r86: [71..74]
 r87: [6..8]
 r88: [2..3]
 r89: [0..1]
 r90: [57..58]
 r91: [55..56]
 r92: [53..54]
 r93: [48..51]
 r94: [43..44]
 r95: [37..38]
 r96: [35..36]
 r97: [33..34]
 r98: [29..30]
 r99: [31..32]
 r100: [27..28]
 r101: [24..26]
 r102: [24..25]
 r103: [19..20]
 r104: [21..22]
 r105: [17..18]
 r106: [15..16]
 r107: [13..14]
 r108: [11..12]
 r109: [9..10]
 r110: [80..81]
 r111: [82..83]
 r112: [78..79]
 r113: [70..73]
 r114: [67..72]
 r115: [68..69]
 r116: [63..64]
 r117: [65..66]
 r118: [59..60]
 r119: [61..62]
 r120: [6..7]
 r121: [4..5]
 r124: [46..49]
 r126: [75..77]
 r128: [39..40]
 r129: [41..45]
Compressing live ranges: from 84 to 72 - 85%
Ranges after the compression:
 r82: [44..45]
 r84: [36..39]
 r85: [20..21]
 r86: [62..63]
 r87: [6..7]
 r88: [2..3]
 r89: [0..1]
 r90: [50..51]
 r91: [48..49]
 r92: [46..47]
 r93: [42..45]
 r94: [40..41]
 r95: [34..35]
 r96: [32..33]
 r97: [30..31]
 r98: [26..27]
 r99: [28..29]
 r100: [24..25]
 r101: [22..23]
 r102: [22..23]
 r103: [18..19]
 r104: [20..21]
 r105: [16..17]
 r106: [14..15]
 r107: [12..13]
 r108: [10..11]
 r109: [8..9]
 r110: [68..69]
 r111: [70..71]
 r112: [66..67]
 r113: [62..63]
 r114: [60..63]
 r115: [60..61]
 r116: [56..57]
 r117: [58..59]
 r118: [52..53]
 r119: [54..55]
 r120: [6..7]
 r121: [4..5]
 r124: [42..43]
 r126: [64..65]
 r128: [36..37]
 r129: [38..41]

********** Assignment #2: **********

	 Assigning to 129 (cl=SSE_REGS, orig=83, freq=2000, tfirst=128, tfreq=2000)...
	 Assigning to 128 (cl=SSE_REGS, orig=83, freq=2000, tfirst=128, tfreq=2000)...
	   Assign 22 to optional reload r128 (freq=2000)
	Hard reg 22 is preferable by r129 with profit 1000
  Reassigning non-reload pseudos

********** Undoing inheritance #2: **********

Inherit 0 out of 1 (0.00%)
   Insn after restoring regs:
  111: r128:DF=r83:DF
      REG_DEAD r83:DF
   Insn after restoring regs:
  106: r83:DF=r124:DF
      REG_DEAD r124:DF
Keep optional reload reg 125
Remove optional reload reg 128
  Restoring original insn:
   24: r95:DF=r84:DF+r83:DF
      REG_DEAD r83:DF
      REG_DEAD r84:DF
  Deleting move 111
  111: r128:DF=r83:DF
      REG_DEAD r83:DF
deleting insn with uid = 111.

********** Pseudo live ranges #4: **********

  BB 5
   Insn 100: point = 0, n_alt = -1
   Insn 99: point = 0, n_alt = 21
   Insn 95: point = 1, n_alt = 20
   Insn 92: point = 3, n_alt = 14
   Insn 91: point = 4, n_alt = 0
   Insn 90: point = 4, n_alt = -2
   Insn 89: point = 5, n_alt = 3
  BB 4
   Insn 87: point = 6, n_alt = -1
   Insn 86: point = 6, n_alt = 1
   Insn 85: point = 7, n_alt = 14
   Insn 83: point = 8, n_alt = 2
  BB 2
   Insn 102: point = 9, n_alt = -1
   Insn 56: point = 9, n_alt = 1
   Insn 55: point = 9, n_alt = 0
   Insn 54: point = 9, n_alt = -2
   Insn 53: point = 10, n_alt = 4
   Insn 52: point = 11, n_alt = 2
   Insn 51: point = 11, n_alt = 2
   Insn 50: point = 11, n_alt = -2
   Insn 49: point = 12, n_alt = 3
   Insn 48: point = 13, n_alt = 5
   Insn 47: point = 14, n_alt = -2
   Insn 46: point = 15, n_alt = 0
   Insn 45: point = 15, n_alt = -2
   Insn 44: point = 16, n_alt = 4
   Insn 43: point = 17, n_alt = -2
   Insn 42: point = 18, n_alt = 4
   Insn 41: point = 19, n_alt = 15
   Insn 40: point = 20, n_alt = 2
   Insn 39: point = 22, n_alt = 14
   Insn 38: point = 23, n_alt = 2
   Insn 37: point = 25, n_alt = 14
   Insn 36: point = 26, n_alt = 14
   Insn 35: point = 27, n_alt = 15
   Insn 34: point = 28, n_alt = 14
   Insn 33: point = 29, n_alt = 15
   Insn 32: point = 30, n_alt = 2
   Insn 31: point = 32, n_alt = 14
   Insn 30: point = 33, n_alt = 9
   Insn 29: point = 34, n_alt = 20
   Insn 28: point = 35, n_alt = 0
   Insn 27: point = 35, n_alt = -2
   Insn 26: point = 36, n_alt = 3
   Insn 25: point = 37, n_alt = 15
   Insn 24: point = 38, n_alt = -1
   Insn 23: point = 40, n_alt = -2
   Insn 22: point = 41, n_alt = 0
   Insn 21: point = 41, n_alt = -2
   Insn 20: point = 42, n_alt = 3
   Insn 106: point = 43, n_alt = 15
   Insn 19: point = 45, n_alt = 1
   Insn 105: point = 47, n_alt = -2
	Hard reg 20 is preferable by r124 with profit 1000
   Insn 18: point = 49, n_alt = 14
   Insn 17: point = 50, n_alt = -2
   Insn 16: point = 51, n_alt = 0
   Insn 15: point = 51, n_alt = -2
   Insn 14: point = 52, n_alt = 3
   Insn 13: point = 53, n_alt = 9
   Insn 12: point = 54, n_alt = 20
   Insn 11: point = 55, n_alt = 0
   Insn 10: point = 55, n_alt = -2
   Insn 9: point = 56, n_alt = 3
   Insn 5: point = 57, n_alt = 5
   Insn 4: point = 57, n_alt = 5
   Insn 3: point = 57, n_alt = 5
   Insn 2: point = 57, n_alt = 5
  BB 3
   Insn 80: point = 57, n_alt = 0
   Insn 79: point = 57, n_alt = 15
   Insn 78: point = 58, n_alt = 1
   Insn 77: point = 60, n_alt = 14
   Insn 76: point = 61, n_alt = 15
   Insn 75: point = 62, n_alt = 2
   Insn 74: point = 64, n_alt = 14
   Insn 73: point = 65, n_alt = 0
   Insn 72: point = 65, n_alt = 3
   Insn 71: point = 65, n_alt = -2
   Insn 70: point = 66, n_alt = -2
   Insn 69: point = 67, n_alt = 4
   Insn 68: point = 68, n_alt = -2
   Insn 67: point = 69, n_alt = 21
   Insn 66: point = 70, n_alt = 3
   Insn 65: point = 71, n_alt = 0
   Insn 109: point = 72, n_alt = 20
	Hard reg 2 is preferable by r126 with profit 1000
   Insn 64: point = 74, n_alt = 1
   Insn 108: point = 75, n_alt = -2
	Hard reg 2 is preferable by r126 with profit 1000
	Hard reg 20 is preferable by r126 with profit 1000
   Insn 63: point = 77, n_alt = 14
   Insn 62: point = 78, n_alt = 15
   Insn 61: point = 79, n_alt = 1
   Insn 60: point = 81, n_alt = 14
 r82: [48..50]
 r83: [39..43]
 r84: [39..40]
 r85: [21..23]
 r86: [69..72]
 r87: [6..8]
 r88: [2..3]
 r89: [0..1]
 r90: [55..56]
 r91: [53..54]
 r92: [51..52]
 r93: [46..49]
 r94: [41..42]
 r95: [37..38]
 r96: [35..36]
 r97: [33..34]
 r98: [29..30]
 r99: [31..32]
 r100: [27..28]
 r101: [24..26]
 r102: [24..25]
 r103: [19..20]
 r104: [21..22]
 r105: [17..18]
 r106: [15..16]
 r107: [13..14]
 r108: [11..12]
 r109: [9..10]
 r110: [78..79]
 r111: [80..81]
 r112: [76..77]
 r113: [68..71]
 r114: [65..70]
 r115: [66..67]
 r116: [61..62]
 r117: [63..64]
 r118: [57..58]
 r119: [59..60]
 r120: [6..7]
 r121: [4..5]
 r124: [44..47]
 r126: [73..75]
Compressing live ranges: from 82 to 70 - 85%
Ranges after the compression:
 r82: [42..43]
 r83: [36..39]
 r84: [36..37]
 r85: [20..21]
 r86: [60..61]
 r87: [6..7]
 r88: [2..3]
 r89: [0..1]
 r90: [48..49]
 r91: [46..47]
 r92: [44..45]
 r93: [40..43]
 r94: [38..39]
 r95: [34..35]
 r96: [32..33]
 r97: [30..31]
 r98: [26..27]
 r99: [28..29]
 r100: [24..25]
 r101: [22..23]
 r102: [22..23]
 r103: [18..19]
 r104: [20..21]
 r105: [16..17]
 r106: [14..15]
 r107: [12..13]
 r108: [10..11]
 r109: [8..9]
 r110: [66..67]
 r111: [68..69]
 r112: [64..65]
 r113: [60..61]
 r114: [58..61]
 r115: [58..59]
 r116: [54..55]
 r117: [56..57]
 r118: [50..51]
 r119: [52..53]
 r120: [6..7]
 r121: [4..5]
 r124: [40..41]
 r126: [62..63]

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
            2 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
            alt=1,overall=6,losers=1 -- refuse
	 Choosing alt 1 in insn 24:  (0) x  (1) 0  (2) xm {*fop_df_comm}
	   Spilling non-eliminable hard regs: 6
  Slot 0 regnos (width = 0):	 83
Changing spilled pseudos to memory in insn #106
Changing spilled pseudos to memory in insn #24
	   Spilling non-eliminable hard regs: 6

********** Local #4: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 1 for insn #24
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) x  (1) 0  (2) xm {*fop_df_comm}
Reusing alternative 15 for insn #106
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 106:  (0) m  (1) v {*movdf_internal}
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=144, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=128, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 17
changing reg in insn 23
changing reg in insn 38
changing reg in insn 40
changing reg in insn 67
changing reg in insn 83
changing reg in insn 86
changing reg in insn 92
changing reg in insn 95
changing reg in insn 95
changing reg in insn 99
changing reg in insn 9
changing reg in insn 10
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 29
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 31
changing reg in insn 32
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 38
changing reg in insn 37
changing reg in insn 38
changing reg in insn 40
changing reg in insn 41
changing reg in insn 39
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 53
changing reg in insn 54
changing reg in insn 61
changing reg in insn 62
changing reg in insn 60
changing reg in insn 61
changing reg in insn 63
changing reg in insn 65
changing reg in insn 68
changing reg in insn 66
changing reg in insn 71
changing reg in insn 69
changing reg in insn 70
changing reg in insn 75
changing reg in insn 76
changing reg in insn 74
changing reg in insn 75
changing reg in insn 78
changing reg in insn 79
changing reg in insn 77
changing reg in insn 78
changing reg in insn 85
changing reg in insn 86
changing reg in insn 89
changing reg in insn 90
deleting insn with uid = 17.
deleting insn with uid = 105.
deleting insn with uid = 23.
deleting insn with uid = 47.
deleting insn with uid = 108.
deleting insn with uid = 68.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 46.
verify found no changes in insn with uid = 55.
verify found no changes in insn with uid = 73.
verify found no changes in insn with uid = 91.


credit_d

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame] 20 [xmm0]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [xmm0] 21 [xmm1] 22 [xmm2]
;;  ref usage 	r0={23d,15u} r1={11d,3u} r2={12d,4u} r4={12d,4u} r5={17d,9u} r6={1d,47u} r7={1d,13u} r8={8d} r9={8d} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r17={10d,1u} r18={8d} r19={1d,1u} r20={29d,25u} r21={13d,4u} r22={9d} r23={9d} r24={9d} r25={9d} r26={9d} r27={9d} r28={8d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={9d} r37={9d} r38={8d} r39={8d} r44={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} 
;;    total ref usage 736{610d,126u,0e} in 83{75 regular + 8 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 84 85 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [1 summ_c+0 S8 A64])
        (reg:DI 5 di [ summ_c ])) "calc.c":258:1 74 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [1 years_c+0 S8 A64])
        (reg:DI 4 si [ years_c ])) "calc.c":258:1 74 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [1 month_c+0 S8 A64])
        (reg:DI 1 dx [ month_c ])) "calc.c":258:1 74 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [1 percent_c+0 S8 A64])
        (reg:DI 2 cx [ percent_c ])) "calc.c":258:1 74 {*movdi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg:DI 0 ax [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [1 summ_c+0 S8 A64])) "calc.c":259:18 74 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [90])) "calc.c":259:18 74 {*movdi_internal}
     (nil))
(call_insn/i 11 10 12 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":259:18 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 12 11 13 2 (set (reg:DF 0 ax [91])
        (reg:DF 20 xmm0)) "calc.c":259:18 135 {*movdf_internal}
     (nil))
(insn 13 12 14 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 sum+0 S8 A64])
        (reg:DF 0 ax [91])) "calc.c":259:18 135 {*movdf_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 0 ax [92])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [1 years_c+0 S8 A64])) "calc.c":259:45 74 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [92])) "calc.c":259:45 74 {*movdi_internal}
     (nil))
(call_insn/i 16 15 18 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":259:45 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 18 16 19 2 (set (reg:DF 21 xmm1 [93])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC19") [flags 0x2]) [0  S8 A64])) "calc.c":259:43 135 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.2e+1 [0x0.cp+4])
        (nil)))
(insn 19 18 106 2 (set (reg:DF 20 xmm0 [orig:82 _1 ] [82])
        (mult:DF (reg:DF 20 xmm0 [orig:82 _1 ] [82])
            (reg:DF 21 xmm1 [93]))) "calc.c":259:43 981 {*fop_df_comm}
     (nil))
(insn 106 19 112 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [12 %sfp+-120 S8 A64])
        (reg:DF 20 xmm0 [orig:82 _1 ] [82])) "calc.c":259:43 135 {*movdf_internal}
     (nil))
(note 112 106 110 2 NOTE_INSN_DELETED)
(note 110 112 20 2 NOTE_INSN_DELETED)
(insn 20 110 21 2 (set (reg:DI 0 ax [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [1 month_c+0 S8 A64])) "calc.c":259:61 74 {*movdi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [94])) "calc.c":259:61 74 {*movdi_internal}
     (nil))
(call_insn/i 22 21 107 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":259:61 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(note 107 22 111 2 NOTE_INSN_DELETED)
(note 111 107 24 2 NOTE_INSN_DELETED)
(insn 24 111 25 2 (set (reg:DF 20 xmm0 [95])
        (plus:DF (reg:DF 20 xmm0 [orig:84 _3 ] [84])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -120 [0xffffffffffffff88])) [12 %sfp+-120 S8 A64]))) "calc.c":259:32 981 {*fop_df_comm}
     (nil))
(insn 25 24 26 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 month+0 S8 A64])
        (reg:DF 20 xmm0 [95])) "calc.c":259:32 135 {*movdf_internal}
     (nil))
(insn 26 25 27 2 (set (reg:DI 0 ax [96])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [1 percent_c+0 S8 A64])) "calc.c":259:86 74 {*movdi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [96])) "calc.c":259:86 74 {*movdi_internal}
     (nil))
(call_insn/i 28 27 29 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":259:86 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 29 28 30 2 (set (reg:DF 0 ax [97])
        (reg:DF 20 xmm0)) "calc.c":259:86 135 {*movdf_internal}
     (nil))
(insn 30 29 31 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 percent+0 S8 A64])
        (reg:DF 0 ax [97])) "calc.c":259:86 135 {*movdf_internal}
     (nil))
(insn 31 30 32 2 (set (reg:DF 20 xmm0 [99])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 sum+0 S8 A64])) "calc.c":260:12 135 {*movdf_internal}
     (nil))
(insn 32 31 33 2 (set (reg:DF 20 xmm0 [98])
        (div:DF (reg:DF 20 xmm0 [99])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -48 [0xffffffffffffffd0])) [2 month+0 S8 A64]))) "calc.c":260:12 985 {*fop_df_1}
     (nil))
(insn 33 32 34 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [2 base+0 S8 A64])
        (reg:DF 20 xmm0 [98])) "calc.c":260:12 135 {*movdf_internal}
     (nil))
(insn 34 33 35 2 (set (reg:DF 20 xmm0 [100])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 sum+0 S8 A64])) "calc.c":260:32 135 {*movdf_internal}
     (nil))
(insn 35 34 36 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 res+0 S8 A64])
        (reg:DF 20 xmm0 [100])) "calc.c":260:32 135 {*movdf_internal}
     (nil))
(insn 36 35 37 2 (set (reg:DF 20 xmm0 [101])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [2 percent+0 S8 A64])) "calc.c":260:55 135 {*movdf_internal}
     (nil))
(insn 37 36 38 2 (set (reg:DF 21 xmm1 [102])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S8 A64])) "calc.c":260:55 135 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+2 [0x0.c8p+7])
        (nil)))
(insn 38 37 39 2 (set (reg:DF 20 xmm0 [orig:85 _4 ] [85])
        (div:DF (reg:DF 20 xmm0 [101])
            (reg:DF 21 xmm1 [102]))) "calc.c":260:55 985 {*fop_df_1}
     (nil))
(insn 39 38 40 2 (set (reg:DF 21 xmm1 [104])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC19") [flags 0x2]) [0  S8 A64])) "calc.c":260:43 135 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.2e+1 [0x0.cp+4])
        (nil)))
(insn 40 39 41 2 (set (reg:DF 20 xmm0 [103])
        (div:DF (reg:DF 20 xmm0 [orig:85 _4 ] [85])
            (reg:DF 21 xmm1 [104]))) "calc.c":260:43 985 {*fop_df_1}
     (nil))
(insn 41 40 42 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [2 p+0 S8 A64])
        (reg:DF 20 xmm0 [103])) "calc.c":260:43 135 {*movdf_internal}
     (nil))
(insn 42 41 43 2 (set (reg:DI 0 ax [105])
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f09f171d3f0 *.LC21>)) "calc.c":262:12 74 {*movdi_internal}
     (nil))
(insn 43 42 44 2 (set (reg:DI 4 si)
        (reg:DI 0 ax [105])) "calc.c":262:12 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f09f171d3f0 *.LC21>)
        (nil)))
(insn 44 43 45 2 (set (reg:DI 0 ax [106])
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7f09f171d480 *.LC22>)) "calc.c":262:12 74 {*movdi_internal}
     (nil))
(insn 45 44 46 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [106])) "calc.c":262:12 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7f09f171d480 *.LC22>)
        (nil)))
(call_insn 46 45 48 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f09f1904500 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) "calc.c":262:12 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 48 46 49 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [13 data+0 S8 A64])
        (reg/f:DI 0 ax [107])) "calc.c":262:12 74 {*movdi_internal}
     (nil))
(insn 49 48 50 2 (set (reg:DI 0 ax [108])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [13 data+0 S8 A64])) "calc.c":263:5 74 {*movdi_internal}
     (nil))
(insn 50 49 51 2 (set (reg:DI 2 cx)
        (reg:DI 0 ax [108])) "calc.c":263:5 74 {*movdi_internal}
     (nil))
(insn 51 50 52 2 (set (reg:DI 1 dx)
        (const_int 15 [0xf])) "calc.c":263:5 74 {*movdi_internal}
     (nil))
(insn 52 51 53 2 (set (reg:DI 4 si)
        (const_int 1 [0x1])) "calc.c":263:5 74 {*movdi_internal}
     (nil))
(insn 53 52 54 2 (set (reg:DI 0 ax [109])
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7f09f171d510 *.LC23>)) "calc.c":263:5 74 {*movdi_internal}
     (nil))
(insn 54 53 55 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [109])) "calc.c":263:5 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7f09f171d510 *.LC23>)
        (nil)))
(call_insn 55 54 56 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7f09f183ec00 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) "calc.c":263:5 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 56 55 102 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [5 i+0 S4 A32])
        (const_int 1 [0x1])) "calc.c":264:14 75 {*movsi_internal}
     (nil))
(jump_insn 102 56 103 2 (set (pc)
        (label_ref 81)) "calc.c":264:5 807 {jump}
     (nil)
 -> 81)
;;  succ:       4 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 103 102 84)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 86 110 111 112 113 114 115 116 117 118 119
(code_label 84 103 59 3 86 (nil) [1 uses])
(note 59 84 60 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 3 (set (reg:DF 20 xmm0 [111])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 sum+0 S8 A64])) "calc.c":266:13 135 {*movdf_internal}
     (nil))
(insn 61 60 62 3 (set (reg:DF 20 xmm0 [110])
        (mult:DF (reg:DF 20 xmm0 [111])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [2 p+0 S8 A64]))) "calc.c":266:13 981 {*fop_df_comm}
     (nil))
(insn 62 61 63 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 dop+0 S8 A64])
        (reg:DF 20 xmm0 [110])) "calc.c":266:13 135 {*movdf_internal}
     (nil))
(insn 63 62 64 3 (set (reg:DF 20 xmm0 [112])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [2 dop+0 S8 A64])) "calc.c":267:9 135 {*movdf_internal}
     (nil))
(insn 64 63 109 3 (set (reg:DF 20 xmm0 [112])
        (plus:DF (reg:DF 20 xmm0 [112])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [2 base+0 S8 A64]))) "calc.c":267:9 981 {*fop_df_comm}
     (nil))
(insn 109 64 65 3 (set (reg:DF 2 cx [orig:86 _5 ] [86])
        (reg:DF 20 xmm0 [112])) "calc.c":267:9 135 {*movdf_internal}
     (nil))
(insn 65 109 66 3 (set (reg:SI 1 dx [113])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -68 [0xffffffffffffffbc])) [5 i+0 S4 A32])) "calc.c":267:9 75 {*movsi_internal}
     (nil))
(insn 66 65 67 3 (set (reg:DI 0 ax [114])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [13 data+0 S8 A64])) "calc.c":267:9 74 {*movdi_internal}
     (nil))
(insn 67 66 69 3 (set (reg:DF 20 xmm0)
        (reg:DF 2 cx [orig:86 _5 ] [86])) "calc.c":267:9 135 {*movdf_internal}
     (nil))
(insn 69 67 70 3 (set (reg:DI 2 cx [115])
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7f09f171d5a0 *.LC24>)) "calc.c":267:9 74 {*movdi_internal}
     (nil))
(insn 70 69 71 3 (set (reg:DI 4 si)
        (reg:DI 2 cx [115])) "calc.c":267:9 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7f09f171d5a0 *.LC24>)
        (nil)))
(insn 71 70 72 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [114])) "calc.c":267:9 74 {*movdi_internal}
     (nil))
(insn 72 71 73 3 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) "calc.c":267:9 77 {*movqi_internal}
     (nil))
(call_insn 73 72 74 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f09f183bb00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) "calc.c":267:9 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:DF (use (reg:DF 20 xmm0))
                        (nil)))))))
(insn 74 73 75 3 (set (reg:DF 20 xmm0 [117])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 sum+0 S8 A64])) "calc.c":268:13 135 {*movdf_internal}
     (nil))
(insn 75 74 76 3 (set (reg:DF 20 xmm0 [116])
        (minus:DF (reg:DF 20 xmm0 [117])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [2 base+0 S8 A64]))) "calc.c":268:13 985 {*fop_df_1}
     (nil))
(insn 76 75 77 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [2 sum+0 S8 A64])
        (reg:DF 20 xmm0 [116])) "calc.c":268:13 135 {*movdf_internal}
     (nil))
(insn 77 76 78 3 (set (reg:DF 20 xmm0 [119])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 res+0 S8 A64])) "calc.c":269:13 135 {*movdf_internal}
     (nil))
(insn 78 77 79 3 (set (reg:DF 20 xmm0 [118])
        (plus:DF (reg:DF 20 xmm0 [119])
            (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [2 dop+0 S8 A64]))) "calc.c":269:13 981 {*fop_df_comm}
     (nil))
(insn 79 78 80 3 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 res+0 S8 A64])
        (reg:DF 20 xmm0 [118])) "calc.c":269:13 135 {*movdf_internal}
     (nil))
(insn 80 79 81 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -68 [0xffffffffffffffbc])) [5 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -68 [0xffffffffffffffbc])) [5 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":264:34 209 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 87 120
(code_label 81 80 82 4 85 (nil) [1 uses])
(note 82 81 83 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 85 4 (set (reg:DF 21 xmm1 [orig:87 _6 ] [87])
        (float:DF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -68 [0xffffffffffffffbc])) [5 i+0 S4 A32]))) "calc.c":264:23 191 {*floatsidf2}
     (nil))
(insn 85 83 86 4 (set (reg:DF 20 xmm0 [120])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [2 month+0 S8 A64])) "calc.c":264:23 135 {*movdf_internal}
     (nil))
(insn 86 85 87 4 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:DF 20 xmm0 [120])
            (reg:DF 21 xmm1 [orig:87 _6 ] [87]))) "calc.c":264:23 46 {*cmpidf}
     (nil))
(jump_insn 87 86 88 4 (set (pc)
        (if_then_else (ge (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref 84)
            (pc))) "calc.c":264:23 806 {*jcc}
     (nil)
 -> 84)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 88 89 121
(note 88 87 89 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 89 88 90 5 (set (reg:DI 0 ax [121])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [13 data+0 S8 A64])) "calc.c":271:5 74 {*movdi_internal}
     (nil))
(insn 90 89 91 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [121])) "calc.c":271:5 74 {*movdi_internal}
     (nil))
(call_insn 91 90 92 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f09f18eae00 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) "calc.c":271:5 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 92 91 95 5 (set (reg:DF 20 xmm0 [orig:88 _27 ] [88])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [2 res+0 S8 A64])) "calc.c":272:12 135 {*movdf_internal}
     (nil))
(insn 95 92 99 5 (set (reg:DF 0 ax [orig:89 <retval> ] [89])
        (reg:DF 20 xmm0 [orig:88 _27 ] [88])) "calc.c":272:12 135 {*movdf_internal}
     (nil))
(insn 99 95 100 5 (set (reg/i:DF 20 xmm0)
        (reg:DF 0 ax [orig:89 <retval> ] [89])) "calc.c":273:1 135 {*movdf_internal}
     (nil))
(insn 100 99 104 5 (use (reg/i:DF 20 xmm0)) "calc.c":273:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0]

(note 104 100 0 NOTE_INSN_DELETED)

;; Function vklad_not (vklad_not, funcdef_no=14, decl_uid=4582, cgraph_uid=15, symbol_order=14)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=304, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=272, prev_offset=0)
Can eliminate 19 to 6 (offset=-16, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) re {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) =m  (1) m  (2) =&r {stack_protect_set_1_di}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=24,losers=3,rld_nregs=2
            1 Non-prefered reload: reject+=600
            alt=1,overall=612,losers=2 -- refuse
	 Choosing alt 0 in insn 20:  (0) =f  (1) fm {*extenddfxf2_i387}
      Creating newreg=423, assigning class FLOAT_REGS to r423
      Creating newreg=424 from oldreg=82, assigning class FLOAT_REGS to r424
   20: r423:XF=float_extend(r424:DF)
      REG_DEAD r82:DF
    Inserting insn reload before:
  671: r424:DF=r82:DF
    Inserting insn reload after:
  670: [frame:DI-0x60]=r423:XF

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=610,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 670:  (0) m  (1) f {*movxf_internal}
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=618,losers=2,rld_nregs=1
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=623,losers=3 -- refuse
            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=622,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=619,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=619,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=613,losers=2,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=625,losers=3,rld_nregs=1
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=10,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=17,overall=14,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=18,overall=14,losers=2 -- refuse
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=11,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=20,overall=613,losers=2 -- refuse
            0 Non input pseudo reload: reject++
            alt=21,overall=13,losers=2 -- refuse
      Creating newreg=425, assigning class NO_REGS to secondary r425
  671: r425:DF=r82:DF
    Inserting the sec. move after:
  672: r424:DF=r425:DF

            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=3,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 672:  (0) =Yf*f  (1) Yf*fm {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=617,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=9,overall=627,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=22,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 24:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 25:  (0) ?m  (1) rC {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=617,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=9,overall=627,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=22,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 29:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 30:  (0) ?m  (1) rC {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 31:  (0) m  (1) re {*movdi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 32:  (0) ?r  (1) rm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1215,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=21,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=608,losers=1,rld_nregs=1
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=13,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=609,losers=1 -- refuse
          alt=21,overall=0,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 33:  (0) v  (1) r {*movdf_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 34:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            1 Non input pseudo reload: reject++
            alt=4,overall=22,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=5,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=6,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=15,losers=1 -- refuse
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 39:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 46:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 48
	 Choosing alt 0 in insn 48:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Small class reload: reject+=3
          alt=0,overall=20,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 53:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 55
	 Choosing alt 0 in insn 55:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
	 Choosing alt 0 in insn 57:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=426 from oldreg=86, assigning class GENERAL_REGS to r426
   57: {r426:SI=r426:SI-r91:SI;clobber flags:CC;}
      REG_DEAD r91:SI
      REG_DEAD r86:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
  673: r426:SI=r86:SI
    Inserting insn reload after:
  674: r92:SI=r426:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 62
	 Choosing alt 0 in insn 62:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) =r  (1) g {*movsi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 66:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 70:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 76:  (0) rm  (1) re {*cmpsi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 79:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 80:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 82:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 83:  (0) m  (1) re {*movsi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 84:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 85:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) q {*cmpqi_ccno_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 89:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 93:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 95:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 96:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 97:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 98:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 100:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 101:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 103:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=617,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=9,overall=627,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=22,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 104:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 105:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 106:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 107:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 109:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 110:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 111:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 112:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 114:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=617,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=9,overall=627,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=22,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 115:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 116:  (0) ?m  (1) rC {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 117:  (0) =rm  (1) %0  (2) re {*addsi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 118:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 119:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 120:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 125:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 129:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
            alt=3: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 130:  (0) q  (1) m {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) =r  (1) qm {extendqisi2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 132:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 135:  (0) r  (1) i {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 137:  (0) q  (1) n {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 139:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 140:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 141:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 142:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 143:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 148:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 150:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 151:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 152:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 153:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 154:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=617,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=9,overall=627,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=22,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 157:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 158:  (0) ?m  (1) rC {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 159:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 160:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 161:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 164:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 166:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 167:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 168:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 169:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 170:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 171:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=6,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
            alt=2,overall=6,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 172:  (0) r  (1) r  (2) le {*adddi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 173:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=617,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            alt=9,overall=627,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=621,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=22,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 176:  (0) r  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
          alt=9,overall=0,losers=0,rld_nregs=0
	 Choosing alt 9 in insn 177:  (0) ?m  (1) rC {*movdf_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 178:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=19,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 179:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            2 Spill Non-pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            2 Non input pseudo reload: reject++
            alt=1,overall=23,losers=2 -- refuse
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 180:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 183:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 185:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 186:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 190:  (0) ?mr {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 194:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 195:  (0) =rm  (1) %0  (2) re {*addsi_1}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 199:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 201:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 202:  (0) m  (1) re {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 206:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 207:  (0) m  (1) v {*movdf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 208:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 212:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 213:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 214:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 215:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 216
	 Choosing alt 0 in insn 216:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 217:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 218:  (0) v  (1) m {*movdf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 219:  (0) v  (1) vm {*cmpidf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 225:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 226:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 227:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 228:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 229
	 Choosing alt 0 in insn 229:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 230:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 231:  (0) v  (1) m {*movdf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 232:  (0) v  (1) vm {*cmpidf}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 238:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 239:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 240:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 241:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 242
	 Choosing alt 0 in insn 242:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 243:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 244:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 245:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 246:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 249:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 253:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 254:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 257:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 258:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 259:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 260:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 261:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 262:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 263:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 264:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 265:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 266
	 Choosing alt 0 in insn 266:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 267:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 268:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 269:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 270:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 271:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 272:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 273:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
            alt=1,overall=6,losers=1 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 274:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 275:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 276:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 277:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 278:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 279:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 280
	 Choosing alt 0 in insn 280:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 281:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 282:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 283:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 284:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 285:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 286:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 287
	 Choosing alt 0 in insn 287:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 288:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 289:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 290:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 294:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 295:  (0) r  (1) rm {*cmpsi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 298:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 299:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 300:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 301:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 302:  (0) m  (1) re {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 303:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 304:  (0) =f  (1) fm {*movxf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 305:  (0) m  (1) f {*movxf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 306:  (0) =f  (1) fm {*movxf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 307:  (0) m  (1) f {*movxf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 308:  (0) =f  (1) fm {*movxf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 309:  (0) m  (1) f {*movxf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 310:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 311:  (0) m  (1) v {*movdf_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 312:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 314:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 318:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 319:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 320:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 321:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 322
	 Choosing alt 0 in insn 322:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 323:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 324:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 327:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 329:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 330:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 331:  (0) =f  (1) fm {*movxf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 332:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 333:  (0) =f  (1) fm {*movxf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 334:  (0) f  (1) f {*cmpixf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 340:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 341:  (0) =f  (1) fm {*movxf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 342:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 343:  (0) =f  (1) fm {*movxf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 344:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 345:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 346
	 Choosing alt 0 in insn 346:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 347:  (0) =f  (1) fm {*movxf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 348:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=1,rld_nregs=0
	 Choosing alt 0 in insn 349:  (0) =m  (1) f {truncxfdf2}
      Creating newreg=427 from oldreg=168, assigning class NO_REGS to r427
  349: r427:DF=float_trunc(r167:XF)
      REG_DEAD r167:XF
    Inserting insn reload after:
  675: r168:DF=r427:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 675:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 351:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=626,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=616,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            alt=8,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=615,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=621,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=15,overall=1,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 352:  (0) m  (1) v {*movdf_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 353:  (0) =f  (1) fm {*extenddfxf2_i387}
      Creating newreg=428 from oldreg=258, assigning class FLOAT_REGS to r428
      Making reload reg 428 for reg 258 optional
  353: r169:XF=float_extend(r428:DF)
      REG_DEAD r258:DF
    Inserting insn reload before:
  676: r428:DF=r258:DF

            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=3,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 676:  (0) =Yf*f  (1) Yf*fm {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 354:  (0) =f  (1) fm {*movxf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 355:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 356:  (0) m  (1) f {*movxf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 359:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 360:  (0) =f  (1) fm {*movxf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 361:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 362:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=15,losers=2,rld_nregs=2
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 363:  (0) r  (1) 0  (2) m {*subsi_1}
      Creating newreg=429 from oldreg=353, assigning class GENERAL_REGS to r429
  363: {r429:SI=r429:SI-[frame:DI-0xbc];clobber flags:CC;}
      REG_DEAD r353:SI
      REG_UNUSED flags:CC
      REG_EQUAL [frame:DI-0xb0]-[frame:DI-0xac]
    Inserting insn reload before:
  677: r429:SI=r353:SI
    Inserting insn reload after:
  678: r172:SI=r429:SI

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 364:  (0) ?r  (1) rm {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 365:  (0) =<  (1) f {*pushxf}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=2
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=10,losers=1 -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 366:  (0) <  (1) oC {*pushxf} (sp_off=-16)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=2
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=10,losers=1 -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 367:  (0) <  (1) oC {*pushxf} (sp_off=-32)
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1215,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=21,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=608,losers=1,rld_nregs=1
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=13,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=609,losers=1 -- refuse
          alt=21,overall=0,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 369:  (0) v  (1) r {*movdf_internal} (sp_off=-48)
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 370:  (0) r  (1) i {*movdi_internal} (sp_off=-48)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 372:  (0) q  (1) n {*movqi_internal} (sp_off=-48)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 373:  (1) rBwBz {*call_value} (sp_off=-48)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 374:  (0) =rm  (1) %0  (2) re {*adddi_1} (sp_off=-48)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=609,losers=1 -- refuse
	 Choosing alt 0 in insn 375:  (0) =f  (1) fm {*extenddfxf2_i387}
      Creating newreg=430, assigning class FLOAT_REGS to r430
  375: r430:XF=float_extend([frame:DI-0xa8])
    Inserting insn reload after:
  679: [frame:DI-0x30]=r430:XF

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=610,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 679:  (0) m  (1) f {*movxf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 376:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 377:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 378:  (0) r  (1) 0  (2) m {*subsi_1}
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=0,overall=12,losers=1,rld_nregs=0
	 Choosing alt 0 in insn 379:  (0) =f  (1) m {floatsixf2}
      Creating newreg=431 from oldreg=173, assigning class NO_REGS to r431
  379: r174:XF=float(r431:SI)
      REG_DEAD r173:SI
    Inserting insn reload before:
  680: r431:SI=r173:SI

            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 680:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 380:  (0) =f  (1) fm {*movxf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 381
	 Choosing alt 0 in insn 381:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 382:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 383
	 Choosing alt 0 in insn 383:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 384:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 385:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 386:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 387:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 388
	 Choosing alt 0 in insn 388:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 389:  (0) =r  (1) g {*movsi_internal}
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=0,overall=12,losers=1,rld_nregs=0
	 Choosing alt 0 in insn 390:  (0) =f  (1) m {floatsixf2}
      Creating newreg=432 from oldreg=181, assigning class NO_REGS to r432
  390: r182:XF=float(r432:SI)
      REG_DEAD r181:SI
    Inserting insn reload before:
  681: r432:SI=r181:SI

            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 681:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 391:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 392:  (0) =f  (1) fm {*movxf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 393:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=1,rld_nregs=0
	 Choosing alt 0 in insn 394:  (0) =m  (1) f {truncxfdf2}
      Creating newreg=433 from oldreg=185, assigning class NO_REGS to r433
  394: r433:DF=float_trunc(r184:XF)
      REG_DEAD r184:XF
    Inserting insn reload after:
  682: r185:DF=r433:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 682:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 396:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 398:  (0) v  (1) m {*movdf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 399
	 Choosing alt 1 in insn 399:  (0) x  (1) 0  (2) xm {*fop_df_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 400:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 401:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 402:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 403:  (0) m  (1) re {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 406:  (0) v  (1) m {*floatsidf2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 407:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 408:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 409:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 410:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 411
	 Choosing alt 0 in insn 411:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 412:  (0) v  (1) m {*movdf_internal}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 413:  (0) v  (1) vm {*cmpiudf}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 415:  (0) v  (1) vm {*cmpiudf}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 421:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 423:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 424:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 425:  (0) r  (1) 0  (2) m {*subsi_1}
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=0,overall=12,losers=1,rld_nregs=0
	 Choosing alt 0 in insn 426:  (0) =f  (1) m {floatsixf2}
      Creating newreg=434 from oldreg=191, assigning class NO_REGS to r434
  426: r192:XF=float(r434:SI)
      REG_DEAD r191:SI
    Inserting insn reload before:
  683: r434:SI=r191:SI

            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 683:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 427:  (0) =f  (1) fm {*movxf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 428
	 Choosing alt 0 in insn 428:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 429:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 430
	 Choosing alt 0 in insn 430:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 431:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 432:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 433:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 434:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 435
	 Choosing alt 0 in insn 435:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 436:  (0) =r  (1) g {*movsi_internal}
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=0,overall=12,losers=1,rld_nregs=0
	 Choosing alt 0 in insn 437:  (0) =f  (1) m {floatsixf2}
      Creating newreg=435 from oldreg=199, assigning class NO_REGS to r435
  437: r200:XF=float(r435:SI)
      REG_DEAD r199:SI
    Inserting insn reload before:
  684: r435:SI=r199:SI

            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 684:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 438:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 439:  (0) =f  (1) fm {*movxf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 440:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=1,rld_nregs=0
	 Choosing alt 0 in insn 441:  (0) =m  (1) f {truncxfdf2}
      Creating newreg=436 from oldreg=203, assigning class NO_REGS to r436
  441: r436:DF=float_trunc(r202:XF)
      REG_DEAD r202:XF
    Inserting insn reload after:
  685: r203:DF=r436:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 685:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 443:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 445:  (0) v  (1) m {*movdf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 446
	 Choosing alt 1 in insn 446:  (0) x  (1) 0  (2) xm {*fop_df_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 447:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 448:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 449:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 450:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 451:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 452:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 453:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 454:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 455
	 Choosing alt 0 in insn 455:  (0) =rm  (1) %0  (2) re {*adddi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=608,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=611,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=8,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=616,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10,overall=613,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11,overall=613,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=13,overall=16,losers=2,rld_nregs=2
            0 Non input pseudo reload: reject++
          alt=14,overall=7,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=17,overall=8,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=18,overall=8,losers=1 -- refuse
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=19,overall=11,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=20,overall=607,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=21,overall=616,losers=2 -- refuse
	 Choosing alt 14 in insn 456:  (0) v  (1) m {*movdf_internal}
      Creating newreg=437 from oldreg=208, assigning class ALL_SSE_REGS to r437
  456: r437:DF=[r207:DI]
      REG_DEAD r207:DI
    Inserting insn reload after:
  686: r208:DF=r437:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=624,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=614,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            alt=8,overall=622,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
          alt=9,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=608,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=616,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=15,overall=2,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 686:  (0) m  (1) v {*movdf_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 457:  (0) =f  (1) fm {*extenddfxf2_i387}
      Creating newreg=438 from oldreg=208, assigning class FLOAT_REGS to r438
      Making reload reg 438 for reg 208 optional
  457: r209:XF=float_extend(r438:DF)
      REG_DEAD r208:DF
    Inserting insn reload before:
  687: r438:DF=r208:DF

            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=3,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 687:  (0) =Yf*f  (1) Yf*fm {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 458:  (0) =f  (1) fm {*movxf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 459:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 460:  (0) m  (1) f {*movxf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 461:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 464:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 465:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 466:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 467:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 468
	 Choosing alt 0 in insn 468:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 469:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 470:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 473:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 474:  (0) r  (1) 0  (2) m {*subsi_1}
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=0,overall=12,losers=1,rld_nregs=0
	 Choosing alt 0 in insn 475:  (0) =f  (1) m {floatsixf2}
      Creating newreg=439 from oldreg=214, assigning class NO_REGS to r439
  475: r215:XF=float(r439:SI)
      REG_DEAD r214:SI
    Inserting insn reload before:
  688: r439:SI=r214:SI

            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 688:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 476:  (0) =f  (1) fm {*movxf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 477
	 Choosing alt 0 in insn 477:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 478:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 479
	 Choosing alt 0 in insn 479:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 480:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 481:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 482:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 483:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 484
	 Choosing alt 0 in insn 484:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 485:  (0) =r  (1) g {*movsi_internal}
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=0,overall=12,losers=1,rld_nregs=0
	 Choosing alt 0 in insn 486:  (0) =f  (1) m {floatsixf2}
      Creating newreg=440 from oldreg=222, assigning class NO_REGS to r440
  486: r223:XF=float(r440:SI)
      REG_DEAD r222:SI
    Inserting insn reload before:
  689: r440:SI=r222:SI

            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 689:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 487:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 488:  (0) =f  (1) fm {*movxf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 489:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=1,rld_nregs=0
	 Choosing alt 0 in insn 490:  (0) =m  (1) f {truncxfdf2}
      Creating newreg=441 from oldreg=226, assigning class NO_REGS to r441
  490: r441:DF=float_trunc(r225:XF)
      REG_DEAD r225:XF
    Inserting insn reload after:
  690: r226:DF=r441:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 690:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 492:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 494:  (0) v  (1) m {*movdf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 495
	 Choosing alt 1 in insn 495:  (0) x  (1) 0  (2) xm {*fop_df_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 496:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 497:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 498:  (0) =f  (1) fm {*movxf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 499:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 500:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=15,losers=2,rld_nregs=2
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 1 in insn 501:  (0) r  (1) 0  (2) m {*subsi_1}
      Creating newreg=442 from oldreg=389, assigning class GENERAL_REGS to r442
  501: {r442:SI=r442:SI-[frame:DI-0xbc];clobber flags:CC;}
      REG_DEAD r389:SI
      REG_UNUSED flags:CC
      REG_EQUAL [frame:DI-0xb0]-[frame:DI-0xac]
    Inserting insn reload before:
  691: r442:SI=r389:SI
    Inserting insn reload after:
  692: r229:SI=r442:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 502:  (0) =r  (1) g {*movsi_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 503:  (0) ?r  (1) rm {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 504:  (0) =<  (1) f {*pushxf}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=2
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=10,losers=1 -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 505:  (0) <  (1) oC {*pushxf} (sp_off=-16)
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1215,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=21,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=608,losers=1,rld_nregs=1
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=13,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=609,losers=1 -- refuse
          alt=21,overall=0,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 508:  (0) v  (1) r {*movdf_internal} (sp_off=-32)
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 509:  (0) r  (1) i {*movdi_internal} (sp_off=-32)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 511:  (0) q  (1) n {*movqi_internal} (sp_off=-32)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 512:  (1) rBwBz {*call_value} (sp_off=-32)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 513:  (0) =rm  (1) %0  (2) re {*adddi_1} (sp_off=-32)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 514:  (0) =r  (1) g {*movsi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 515:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 516:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 519:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 520:  (0) =f  (1) fm {*movxf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 521:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 522:  (0) =f  (1) fm {*movxf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 523
	 Choosing alt 0 in insn 523:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 524:  (0) m  (1) f {*movxf_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=609,losers=1 -- refuse
	 Choosing alt 0 in insn 527:  (0) =f  (1) fm {*extenddfxf2_i387}
      Creating newreg=443, assigning class FLOAT_REGS to r443
  527: r443:XF=float_extend([frame:DI-0xa8])
    Inserting insn reload after:
  693: [frame:DI-0x50]=r443:XF

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=610,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 693:  (0) m  (1) f {*movxf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 528:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=17,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 531:  (0) =rm  (1) %0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 535:  (0) =r  (1) g {*movsi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 536:  (0) r  (1) rm {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 539:  (0) =r  (1) g {*movsi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 540:  (0) r  (1) 0  (2) m {*subsi_1}
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=0,overall=12,losers=1,rld_nregs=0
	 Choosing alt 0 in insn 541:  (0) =f  (1) m {floatsixf2}
      Creating newreg=444 from oldreg=232, assigning class NO_REGS to r444
  541: r233:XF=float(r444:SI)
      REG_DEAD r232:SI
    Inserting insn reload before:
  694: r444:SI=r232:SI

            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 694:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 542:  (0) =f  (1) fm {*movxf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 543
	 Choosing alt 0 in insn 543:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 544:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 545
	 Choosing alt 0 in insn 545:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 546:  (0) =r  (1) g {*movsi_internal}
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 547:  (0) =*a  (1) *0 {*extendsidi2_rex64}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 548:  (0) r  (1) l  (2) M {*ashldi3_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 549:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
            2 Spill pseudo into memory: reject+=3
            Using memory insn operand 2: reject+=3
            alt=1,overall=18,losers=2 -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 550
	 Choosing alt 0 in insn 550:  (0) =rm  (1) %0  (2) re {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 551:  (0) =r  (1) g {*movsi_internal}
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=0,overall=12,losers=1,rld_nregs=0
	 Choosing alt 0 in insn 552:  (0) =f  (1) m {floatsixf2}
      Creating newreg=445 from oldreg=240, assigning class NO_REGS to r445
  552: r241:XF=float(r445:SI)
      REG_DEAD r240:SI
    Inserting insn reload before:
  695: r445:SI=r240:SI

            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=607,losers=1,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=1,overall=1,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 695:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 553:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 554:  (0) =f  (1) fm {*movxf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 555:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=1,rld_nregs=0
	 Choosing alt 0 in insn 556:  (0) =m  (1) f {truncxfdf2}
      Creating newreg=446 from oldreg=244, assigning class NO_REGS to r446
  556: r446:DF=float_trunc(r243:XF)
      REG_DEAD r243:XF
    Inserting insn reload after:
  696: r244:DF=r446:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 696:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 558:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 560:  (0) v  (1) m {*movdf_internal}
          alt=1,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 561
	 Choosing alt 1 in insn 561:  (0) x  (1) 0  (2) xm {*fop_df_comm}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 562:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 563:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 564:  (0) =f  (1) fm {*movxf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 565:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 566:  (0) =f  (1) fm {*movxf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 567:  (0) f  (1) f {*cmpixf_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 573:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 574:  (0) =f  (1) fm {*movxf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 575:  (0) =f  (1) 0  (2) f {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 576:  (0) =f  (1) fm {*movxf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 577:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 578:  (0) =f  (1) fm {*extenddfxf2_i387}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=0,overall=0,losers=0,rld_nregs=0
  Commutative operand exchange in insn 579
	 Choosing alt 0 in insn 579:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 580:  (0) =f  (1) fm {*movxf_internal}
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 581:  (0) f  (1) f  (2) 0 {*fop_xf_1_i387}
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=0,overall=13,losers=1,rld_nregs=0
	 Choosing alt 0 in insn 582:  (0) =m  (1) f {truncxfdf2}
      Creating newreg=447 from oldreg=253, assigning class NO_REGS to r447
  582: r447:DF=float_trunc(r252:XF)
      REG_DEAD r252:XF
    Inserting insn reload after:
  697: r253:DF=r447:DF

            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=615,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            alt=1,overall=620,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=8,overall=614,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Non pseudo reload: reject++
          alt=14,overall=1,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 697:  (0) v  (1) m {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 584:  (1) rBwBz {*call_value}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
          alt=0,overall=626,losers=3,rld_nregs=2
            0 Non pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=1,overall=616,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            1 Non-pseudo reload: reject+=2
            alt=8,overall=624,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
          alt=9,overall=615,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=621,losers=2,rld_nregs=1
            0 Non pseudo reload: reject++
          alt=15,overall=1,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 585:  (0) m  (1) v {*movdf_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 586:  (0) =f  (1) fm {*extenddfxf2_i387}
      Creating newreg=448 from oldreg=256, assigning class FLOAT_REGS to r448
      Making reload reg 448 for reg 256 optional
  586: r254:XF=float_extend(r448:DF)
      REG_DEAD r256:DF
    Inserting insn reload before:
  698: r448:DF=r256:DF

            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=3,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 698:  (0) =Yf*f  (1) Yf*fm {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 587:  (0) =f  (1) fm {*movxf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            alt=0,overall=6,losers=1 -- refuse
	 Choosing alt 0 in insn 588:  (0) =f  (1) %0  (2) f {*fop_xf_comm_i387}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 589:  (0) m  (1) f {*movxf_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=2
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=10,losers=1 -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 592:  (0) <  (1) oC {*pushxf}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 593:  (0) r  (1) i {*movdi_internal} (sp_off=-16)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=2,overall=609,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 595:  (0) q  (1) n {*movqi_internal} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 596:  (1) rBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 597:  (0) =rm  (1) %0  (2) re {*adddi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 598:  (0) =f  (1) fm {*movxf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 599:  (0) =m  (1) f {truncxfdf2}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 600:  (0) =f  (1) fm {*movxf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 601:  (0) =m  (1) f {truncxfdf2}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 602:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 604:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 605:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 607:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 608:  (0) rm  (1) re {*cmpsi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 611:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 612:  (0) m  (1) v {*movdf_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 617:  (0) rm  (1) re {*cmpsi_1}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 620:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 621:  (0) m  (1) v {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=0,overall=614,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=623,losers=2 -- refuse
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
          alt=8,overall=613,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=628,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 624:  (0) v  (1) m {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=630,losers=4,rld_nregs=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=626,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Spill pseudo into memory: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=615,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-prefered reload: reject+=600
            alt=9,overall=625,losers=2 -- refuse
            Staticly defined alt reject+=6
            alt=10: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            Cycle danger: overall += LRA_MAX_REJECT
          alt=14,overall=619,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=15,overall=13,losers=1,rld_nregs=0
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            alt=16: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=609,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=20,losers=2 -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly set: reject++
            alt=19,overall=14,losers=1 -- refuse
          alt=20,overall=0,losers=0,rld_nregs=0
	 Choosing alt 20 in insn 627:  (0) r  (1) v {*movdf_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 631:  (1) m  (2) m  (3) =&r {stack_protect_test_1_di}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 633:  (0) rBwBz {*call}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=632,losers=4,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=628,losers=3,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=8,overall=1215,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
          alt=9,overall=21,losers=1,rld_nregs=0
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            alt=12: Bad operand -- refuse
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=606,losers=1,rld_nregs=1
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=12,losers=1,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
            0 Costly set: reject++
            alt=16: Bad operand -- refuse
            0 Costly set: reject++
            1 Costly loser: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=17,overall=608,losers=1,rld_nregs=1
            0 Costly set: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
            alt=18,overall=13,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            alt=19,overall=15,losers=1 -- refuse
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=20,overall=609,losers=1 -- refuse
          alt=21,overall=0,losers=0,rld_nregs=0
	 Choosing alt 21 in insn 636:  (0) v  (1) r {*movdf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11 12 13
EBB 14
EBB 15 16
EBB 17 18
EBB 19 20 21
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Rejecting inheritance for 258 because of disjoint classes ALL_REGS and NO_REGS
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 22
EBB 23 24 25
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Rejecting inheritance for 208 because of disjoint classes ALL_SSE_REGS and NO_REGS
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 26 27 28
EBB 29
EBB 30
EBB 31 32 33
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Rejecting inheritance for 256 because of disjoint classes ALL_REGS and NO_REGS
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 34 35
EBB 36 37
EBB 38 39
EBB 40

********** Pseudo live ranges #1: **********

  BB 39
   Insn 633: point = 0, n_alt = 0
  BB 40
   Insn 637: point = 0, n_alt = -1
   Insn 636: point = 0, n_alt = 21
  BB 38
   Insn 632: point = 2, n_alt = -1
   Insn 631: point = 2, n_alt = 0
   Insn 627: point = 4, n_alt = 20
   Insn 624: point = 6, n_alt = 14
  BB 35
   Insn 667: point = 7, n_alt = -1
   Insn 612: point = 7, n_alt = 15
   Insn 611: point = 8, n_alt = 14
  BB 37
   Insn 621: point = 9, n_alt = 15
   Insn 620: point = 10, n_alt = 14
  BB 36
   Insn 618: point = 11, n_alt = -1
   Insn 617: point = 11, n_alt = 0
  BB 34
   Insn 609: point = 11, n_alt = -1
   Insn 608: point = 11, n_alt = 0
   Insn 607: point = 11, n_alt = 0
   Insn 606: point = 11, n_alt = -2
   Insn 605: point = 12, n_alt = 3
   Insn 604: point = 13, n_alt = 0
   Insn 603: point = 13, n_alt = -2
   Insn 602: point = 14, n_alt = 3
   Insn 601: point = 15, n_alt = 0
   Insn 600: point = 16, n_alt = 0
   Insn 599: point = 17, n_alt = 0
   Insn 598: point = 18, n_alt = 0
   Insn 597: point = 19, n_alt = 0
   Insn 596: point = 19, n_alt = 0
   Insn 595: point = 19, n_alt = 3
   Insn 594: point = 19, n_alt = -2
   Insn 593: point = 20, n_alt = 4
   Insn 592: point = 21, n_alt = 4
  BB 33
   Insn 589: point = 21, n_alt = 1
   Insn 588: point = 22, n_alt = 0
   Insn 587: point = 24, n_alt = 0
   Insn 586: point = 25, n_alt = 0
   Insn 698: point = 27, n_alt = 0
   Insn 585: point = 29, n_alt = 15
   Insn 584: point = 30, n_alt = 0
   Insn 583: point = 30, n_alt = -2
   Insn 697: point = 31, n_alt = 14
	Hard reg 20 is preferable by r447 with profit 1000
   Insn 582: point = 33, n_alt = 0
   Insn 581: point = 35, n_alt = 1
   Insn 580: point = 37, n_alt = 0
   Insn 579: point = 38, n_alt = 0
   Insn 578: point = 40, n_alt = 0
   Insn 577: point = 41, n_alt = 1
   Insn 576: point = 43, n_alt = 0
   Insn 575: point = 44, n_alt = 0
   Insn 574: point = 46, n_alt = 0
   Insn 573: point = 47, n_alt = 0
  BB 32
   Insn 568: point = 48, n_alt = -1
   Insn 567: point = 48, n_alt = 0
   Insn 566: point = 49, n_alt = 0
   Insn 565: point = 50, n_alt = 0
   Insn 564: point = 52, n_alt = 0
   Insn 563: point = 53, n_alt = 0
   Insn 562: point = 54, n_alt = 15
   Insn 561: point = 55, n_alt = 1
   Insn 560: point = 57, n_alt = 14
   Insn 559: point = 58, n_alt = -2
   Insn 558: point = 59, n_alt = 0
   Insn 557: point = 59, n_alt = -2
   Insn 696: point = 60, n_alt = 14
	Hard reg 20 is preferable by r446 with profit 1000
   Insn 556: point = 62, n_alt = 0
   Insn 555: point = 64, n_alt = 1
   Insn 554: point = 66, n_alt = 0
   Insn 553: point = 67, n_alt = 0
   Insn 552: point = 69, n_alt = 0
   Insn 695: point = 71, n_alt = 1
	Hard reg 0 is preferable by r445 with profit 1000
   Insn 551: point = 73, n_alt = 0
   Insn 550: point = 75, n_alt = 0
   Insn 549: point = 77, n_alt = 3
   Insn 548: point = 78, n_alt = 1
   Insn 547: point = 80, n_alt = 0
   Insn 546: point = 82, n_alt = 0
   Insn 545: point = 83, n_alt = 0
   Insn 544: point = 85, n_alt = 0
   Insn 543: point = 86, n_alt = 0
   Insn 542: point = 88, n_alt = 0
   Insn 541: point = 89, n_alt = 0
   Insn 694: point = 91, n_alt = 1
	Hard reg 0 is preferable by r444 with profit 1000
   Insn 540: point = 93, n_alt = 1
   Insn 539: point = 95, n_alt = 0
  BB 31
   Insn 537: point = 96, n_alt = -1
   Insn 536: point = 96, n_alt = 1
   Insn 535: point = 97, n_alt = 0
  BB 18
   Insn 665: point = 98, n_alt = -1
   Insn 314: point = 98, n_alt = 0
   Insn 313: point = 98, n_alt = -2
   Insn 312: point = 99, n_alt = 4
   Insn 311: point = 100, n_alt = 15
   Insn 310: point = 101, n_alt = 14
   Insn 309: point = 102, n_alt = 1
   Insn 308: point = 103, n_alt = 0
   Insn 307: point = 104, n_alt = 1
   Insn 306: point = 105, n_alt = 0
   Insn 305: point = 106, n_alt = 1
   Insn 304: point = 107, n_alt = 0
   Insn 303: point = 108, n_alt = 1
   Insn 302: point = 108, n_alt = 1
   Insn 301: point = 108, n_alt = 1
   Insn 300: point = 108, n_alt = 1
   Insn 299: point = 108, n_alt = 1
   Insn 298: point = 108, n_alt = 1
  BB 17
   Insn 296: point = 108, n_alt = -1
   Insn 295: point = 108, n_alt = 1
   Insn 294: point = 109, n_alt = 0
  BB 9
   Insn 661: point = 110, n_alt = -1
   Insn 202: point = 110, n_alt = 1
   Insn 201: point = 110, n_alt = 5
   Insn 200: point = 111, n_alt = -2
   Insn 199: point = 112, n_alt = 0
   Insn 198: point = 112, n_alt = -2
   Insn 197: point = 113, n_alt = 0
   Insn 196: point = 115, n_alt = 0
   Insn 195: point = 117, n_alt = 0
   Insn 194: point = 119, n_alt = 0
  BB 8
   Insn 191: point = 120, n_alt = -1
   Insn 190: point = 120, n_alt = 1
  BB 6
   Insn 659: point = 120, n_alt = -1
   Insn 125: point = 120, n_alt = 5
   Insn 124: point = 121, n_alt = -2
   Insn 123: point = 122, n_alt = 0
   Insn 122: point = 122, n_alt = -2
   Insn 121: point = 123, n_alt = -2
   Insn 120: point = 124, n_alt = 3
   Insn 119: point = 125, n_alt = 3
   Insn 118: point = 127, n_alt = 3
   Insn 117: point = 128, n_alt = 0
   Insn 116: point = 128, n_alt = 9
   Insn 115: point = 129, n_alt = 20
   Insn 114: point = 130, n_alt = 0
   Insn 113: point = 130, n_alt = -2
   Insn 112: point = 131, n_alt = 3
   Insn 111: point = 132, n_alt = 3
   Insn 110: point = 134, n_alt = 3
   Insn 109: point = 135, n_alt = 1
   Insn 108: point = 137, n_alt = 0
   Insn 107: point = 139, n_alt = 0
   Insn 106: point = 140, n_alt = 0
   Insn 105: point = 140, n_alt = 9
   Insn 104: point = 141, n_alt = 20
   Insn 103: point = 142, n_alt = 0
   Insn 102: point = 142, n_alt = -2
   Insn 101: point = 143, n_alt = 3
   Insn 100: point = 144, n_alt = 3
   Insn 99: point = 146, n_alt = 3
   Insn 98: point = 147, n_alt = 1
   Insn 97: point = 149, n_alt = 0
   Insn 96: point = 151, n_alt = 0
   Insn 95: point = 152, n_alt = 5
   Insn 94: point = 153, n_alt = -2
   Insn 93: point = 154, n_alt = 0
   Insn 92: point = 154, n_alt = -2
   Insn 91: point = 155, n_alt = -2
   Insn 90: point = 156, n_alt = 3
   Insn 89: point = 157, n_alt = 3
  BB 7
   Insn 186: point = 158, n_alt = 0
   Insn 185: point = 158, n_alt = 5
   Insn 184: point = 159, n_alt = -2
   Insn 183: point = 160, n_alt = 0
   Insn 182: point = 160, n_alt = -2
   Insn 181: point = 161, n_alt = -2
   Insn 180: point = 162, n_alt = 3
   Insn 179: point = 163, n_alt = 3
   Insn 178: point = 165, n_alt = 3
   Insn 177: point = 166, n_alt = 9
   Insn 176: point = 167, n_alt = 20
   Insn 175: point = 168, n_alt = 0
   Insn 174: point = 168, n_alt = -2
   Insn 173: point = 169, n_alt = 3
   Insn 172: point = 170, n_alt = 3
   Insn 171: point = 172, n_alt = 3
   Insn 170: point = 173, n_alt = 1
   Insn 169: point = 175, n_alt = 0
   Insn 168: point = 177, n_alt = 0
   Insn 167: point = 179, n_alt = 0
   Insn 166: point = 180, n_alt = 5
   Insn 165: point = 181, n_alt = -2
   Insn 164: point = 182, n_alt = 0
   Insn 163: point = 182, n_alt = -2
   Insn 162: point = 183, n_alt = -2
   Insn 161: point = 184, n_alt = 3
   Insn 160: point = 185, n_alt = 3
   Insn 159: point = 187, n_alt = 3
   Insn 158: point = 188, n_alt = 9
   Insn 157: point = 189, n_alt = 20
   Insn 156: point = 190, n_alt = 0
   Insn 155: point = 190, n_alt = -2
   Insn 154: point = 191, n_alt = 3
   Insn 153: point = 192, n_alt = 3
   Insn 152: point = 194, n_alt = 3
   Insn 151: point = 195, n_alt = 1
   Insn 150: point = 197, n_alt = 0
   Insn 149: point = 199, n_alt = 0
   Insn 148: point = 200, n_alt = 5
   Insn 147: point = 201, n_alt = -2
   Insn 146: point = 202, n_alt = 0
   Insn 145: point = 202, n_alt = -2
   Insn 144: point = 203, n_alt = -2
   Insn 143: point = 204, n_alt = 3
   Insn 142: point = 205, n_alt = 1
   Insn 141: point = 207, n_alt = 0
   Insn 140: point = 209, n_alt = 0
   Insn 139: point = 211, n_alt = 0
   Insn 138: point = 212, n_alt = 0
   Insn 137: point = 212, n_alt = 3
   Insn 136: point = 212, n_alt = -2
   Insn 135: point = 213, n_alt = 4
   Insn 134: point = 214, n_alt = -2
   Insn 133: point = 215, n_alt = -2
   Insn 132: point = 216, n_alt = 3
   Insn 131: point = 217, n_alt = 0
   Insn 130: point = 219, n_alt = 4
   Insn 129: point = 221, n_alt = 3
  BB 5
   Insn 87: point = 222, n_alt = -1
   Insn 86: point = 222, n_alt = 0
   Insn 85: point = 223, n_alt = 4
   Insn 84: point = 225, n_alt = 3
   Insn 83: point = 226, n_alt = 1
   Insn 82: point = 226, n_alt = 5
   Insn 81: point = 227, n_alt = -2
   Insn 80: point = 228, n_alt = 0
   Insn 79: point = 228, n_alt = 2
  BB 4
   Insn 77: point = 228, n_alt = -1
   Insn 76: point = 228, n_alt = 0
  BB 2
   Insn 657: point = 228, n_alt = -1
   Insn 40: point = 228, n_alt = 1
   Insn 39: point = 228, n_alt = 8
   Insn 38: point = 228, n_alt = 1
   Insn 37: point = 228, n_alt = 0
   Insn 36: point = 228, n_alt = 3
   Insn 35: point = 228, n_alt = -2
   Insn 34: point = 229, n_alt = 4
   Insn 33: point = 230, n_alt = 21
   Insn 32: point = 231, n_alt = 8
   Insn 31: point = 232, n_alt = 5
   Insn 30: point = 232, n_alt = 9
   Insn 29: point = 233, n_alt = 20
   Insn 28: point = 234, n_alt = 0
   Insn 27: point = 234, n_alt = -2
   Insn 26: point = 235, n_alt = 3
   Insn 25: point = 236, n_alt = 9
   Insn 24: point = 237, n_alt = 20
   Insn 23: point = 238, n_alt = 0
   Insn 22: point = 238, n_alt = -2
   Insn 21: point = 239, n_alt = 3
   Insn 670: point = 240, n_alt = 1
   Insn 20: point = 241, n_alt = 0
   Insn 672: point = 243, n_alt = 0
	   Creating copy r424<-r425@1000
   Insn 671: point = 245, n_alt = -1
	Hard reg 20 is preferable by r425 with profit 1000
   Insn 19: point = 247, n_alt = -2
   Insn 18: point = 248, n_alt = 0
   Insn 17: point = 248, n_alt = -2
   Insn 16: point = 249, n_alt = 3
   Insn 13: point = 250, n_alt = 0
   Insn 11: point = 252, n_alt = 5
   Insn 10: point = 253, n_alt = 3
   Insn 9: point = 254, n_alt = 5
   Insn 8: point = 255, n_alt = 3
   Insn 7: point = 256, n_alt = 5
   Insn 6: point = 256, n_alt = 5
   Insn 5: point = 256, n_alt = 5
   Insn 4: point = 256, n_alt = 5
   Insn 3: point = 256, n_alt = 1
   Insn 2: point = 256, n_alt = 5
  BB 3
   Insn 70: point = 256, n_alt = 0
   Insn 69: point = 256, n_alt = 0
   Insn 68: point = 256, n_alt = 3
   Insn 67: point = 256, n_alt = -2
   Insn 66: point = 257, n_alt = 4
   Insn 65: point = 258, n_alt = -2
   Insn 64: point = 259, n_alt = -2
   Insn 63: point = 260, n_alt = 0
   Insn 62: point = 262, n_alt = 0
   Insn 61: point = 264, n_alt = 3
   Insn 60: point = 265, n_alt = 1
   Insn 59: point = 267, n_alt = 0
   Insn 58: point = 269, n_alt = 0
   Insn 674: point = 270, n_alt = -2
	Hard reg 1 is preferable by r426 with profit 1000
   Insn 57: point = 272, n_alt = 0
   Insn 673: point = 274, n_alt = -2
	Hard reg 1 is preferable by r426 with profit 1000
	Hard reg 0 is preferable by r426 with profit 1000
   Insn 56: point = 276, n_alt = 0
   Insn 55: point = 278, n_alt = 0
   Insn 54: point = 280, n_alt = 3
   Insn 53: point = 281, n_alt = 3
   Insn 52: point = 283, n_alt = 0
   Insn 51: point = 285, n_alt = 1
   Insn 50: point = 287, n_alt = 0
   Insn 49: point = 288, n_alt = 0
   Insn 48: point = 290, n_alt = 0
   Insn 47: point = 292, n_alt = 3
   Insn 46: point = 293, n_alt = 1
   Insn 45: point = 295, n_alt = 0
   Insn 44: point = 297, n_alt = 0
  BB 16
   Insn 290: point = 298, n_alt = 0
   Insn 289: point = 298, n_alt = 15
   Insn 288: point = 299, n_alt = 14
   Insn 287: point = 300, n_alt = 0
   Insn 286: point = 302, n_alt = 3
   Insn 285: point = 303, n_alt = 1
   Insn 284: point = 305, n_alt = 0
   Insn 283: point = 307, n_alt = 0
   Insn 282: point = 308, n_alt = 15
   Insn 281: point = 309, n_alt = 14
   Insn 280: point = 311, n_alt = 0
   Insn 279: point = 313, n_alt = 3
   Insn 278: point = 314, n_alt = 1
   Insn 277: point = 316, n_alt = 0
   Insn 276: point = 318, n_alt = 0
   Insn 275: point = 320, n_alt = 0
   Insn 274: point = 321, n_alt = 0
   Insn 273: point = 323, n_alt = 3
   Insn 272: point = 324, n_alt = 1
   Insn 271: point = 326, n_alt = 0
   Insn 270: point = 328, n_alt = 0
   Insn 269: point = 330, n_alt = 0
   Insn 268: point = 331, n_alt = 15
   Insn 267: point = 332, n_alt = 14
   Insn 266: point = 334, n_alt = 0
   Insn 265: point = 336, n_alt = 3
   Insn 264: point = 337, n_alt = 1
   Insn 263: point = 339, n_alt = 0
   Insn 262: point = 341, n_alt = 0
   Insn 261: point = 342, n_alt = 0
   Insn 260: point = 344, n_alt = 3
   Insn 259: point = 345, n_alt = 1
   Insn 258: point = 347, n_alt = 0
   Insn 257: point = 349, n_alt = 0
  BB 15
   Insn 255: point = 350, n_alt = -1
   Insn 254: point = 350, n_alt = 1
   Insn 253: point = 351, n_alt = 0
  BB 10
   Insn 663: point = 352, n_alt = -1
   Insn 208: point = 352, n_alt = 1
   Insn 207: point = 352, n_alt = 15
   Insn 206: point = 353, n_alt = 14
  BB 14
   Insn 249: point = 354, n_alt = 0
  BB 13
   Insn 246: point = 354, n_alt = 1
   Insn 245: point = 355, n_alt = 0
   Insn 244: point = 356, n_alt = 15
   Insn 243: point = 357, n_alt = 14
   Insn 242: point = 359, n_alt = 0
   Insn 241: point = 361, n_alt = 3
   Insn 240: point = 362, n_alt = 1
   Insn 239: point = 364, n_alt = 0
   Insn 238: point = 366, n_alt = 0
  BB 12
   Insn 233: point = 367, n_alt = -1
   Insn 232: point = 367, n_alt = 1
   Insn 231: point = 368, n_alt = 14
   Insn 230: point = 369, n_alt = 14
   Insn 229: point = 371, n_alt = 0
   Insn 228: point = 373, n_alt = 3
   Insn 227: point = 374, n_alt = 1
   Insn 226: point = 376, n_alt = 0
   Insn 225: point = 378, n_alt = 0
  BB 11
   Insn 220: point = 379, n_alt = -1
   Insn 219: point = 379, n_alt = 1
   Insn 218: point = 380, n_alt = 14
   Insn 217: point = 381, n_alt = 14
   Insn 216: point = 383, n_alt = 0
   Insn 215: point = 385, n_alt = 3
   Insn 214: point = 386, n_alt = 1
   Insn 213: point = 388, n_alt = 0
   Insn 212: point = 390, n_alt = 0
  BB 30
   Insn 531: point = 391, n_alt = 0
  BB 29
   Insn 528: point = 391, n_alt = 0
   Insn 693: point = 391, n_alt = 1
   Insn 527: point = 392, n_alt = 0
  BB 28
   Insn 524: point = 393, n_alt = 1
   Insn 523: point = 394, n_alt = 0
   Insn 522: point = 396, n_alt = 0
   Insn 521: point = 397, n_alt = 1
   Insn 520: point = 399, n_alt = 0
   Insn 519: point = 400, n_alt = 0
  BB 27
   Insn 517: point = 401, n_alt = -1
   Insn 516: point = 401, n_alt = 0
   Insn 515: point = 401, n_alt = 1
   Insn 514: point = 402, n_alt = 0
   Insn 513: point = 403, n_alt = 0
   Insn 512: point = 403, n_alt = 0
   Insn 511: point = 403, n_alt = 3
   Insn 510: point = 403, n_alt = -2
   Insn 509: point = 404, n_alt = 4
   Insn 508: point = 405, n_alt = 21
   Insn 507: point = 406, n_alt = -2
   Insn 506: point = 407, n_alt = -2
   Insn 505: point = 408, n_alt = 4
   Insn 504: point = 408, n_alt = 0
   Insn 503: point = 409, n_alt = 8
   Insn 502: point = 410, n_alt = 0
   Insn 692: point = 411, n_alt = -2
	Hard reg 2 is preferable by r442 with profit 1000
   Insn 501: point = 413, n_alt = 1
   Insn 691: point = 414, n_alt = -2
	Hard reg 2 is preferable by r442 with profit 1000
	Hard reg 0 is preferable by r442 with profit 1000
   Insn 500: point = 416, n_alt = 0
   Insn 499: point = 417, n_alt = 1
   Insn 498: point = 419, n_alt = 0
   Insn 497: point = 420, n_alt = 0
   Insn 496: point = 421, n_alt = 15
   Insn 495: point = 422, n_alt = 1
   Insn 494: point = 424, n_alt = 14
   Insn 493: point = 425, n_alt = -2
   Insn 492: point = 426, n_alt = 0
   Insn 491: point = 426, n_alt = -2
   Insn 690: point = 427, n_alt = 14
	Hard reg 20 is preferable by r441 with profit 1000
   Insn 490: point = 429, n_alt = 0
   Insn 489: point = 431, n_alt = 1
   Insn 488: point = 433, n_alt = 0
   Insn 487: point = 434, n_alt = 0
   Insn 486: point = 436, n_alt = 0
   Insn 689: point = 438, n_alt = 1
	Hard reg 0 is preferable by r440 with profit 1000
   Insn 485: point = 440, n_alt = 0
   Insn 484: point = 442, n_alt = 0
   Insn 483: point = 444, n_alt = 3
   Insn 482: point = 445, n_alt = 1
   Insn 481: point = 447, n_alt = 0
   Insn 480: point = 449, n_alt = 0
   Insn 479: point = 450, n_alt = 0
   Insn 478: point = 452, n_alt = 0
   Insn 477: point = 453, n_alt = 0
   Insn 476: point = 455, n_alt = 0
   Insn 475: point = 456, n_alt = 0
   Insn 688: point = 458, n_alt = 1
	Hard reg 0 is preferable by r439 with profit 1000
   Insn 474: point = 460, n_alt = 1
   Insn 473: point = 462, n_alt = 0
  BB 26
   Insn 471: point = 463, n_alt = -1
   Insn 470: point = 463, n_alt = 0
   Insn 469: point = 464, n_alt = 0
   Insn 468: point = 466, n_alt = 0
   Insn 467: point = 468, n_alt = 3
   Insn 466: point = 469, n_alt = 1
   Insn 465: point = 471, n_alt = 0
   Insn 464: point = 473, n_alt = 0
  BB 25
   Insn 461: point = 474, n_alt = 0
   Insn 460: point = 474, n_alt = 1
   Insn 459: point = 475, n_alt = 0
   Insn 458: point = 477, n_alt = 0
   Insn 457: point = 478, n_alt = 0
   Insn 687: point = 480, n_alt = 0
   Insn 686: point = 482, n_alt = 15
   Insn 456: point = 484, n_alt = 14
   Insn 455: point = 486, n_alt = 0
   Insn 454: point = 488, n_alt = 3
   Insn 453: point = 489, n_alt = 1
   Insn 452: point = 491, n_alt = 0
   Insn 451: point = 493, n_alt = 0
   Insn 450: point = 495, n_alt = 0
   Insn 449: point = 496, n_alt = 1
   Insn 448: point = 497, n_alt = 0
   Insn 447: point = 498, n_alt = 15
   Insn 446: point = 499, n_alt = 1
   Insn 445: point = 501, n_alt = 14
   Insn 444: point = 502, n_alt = -2
   Insn 443: point = 503, n_alt = 0
   Insn 442: point = 503, n_alt = -2
   Insn 685: point = 504, n_alt = 14
	Hard reg 20 is preferable by r436 with profit 1000
   Insn 441: point = 506, n_alt = 0
   Insn 440: point = 508, n_alt = 1
   Insn 439: point = 510, n_alt = 0
   Insn 438: point = 511, n_alt = 0
   Insn 437: point = 513, n_alt = 0
   Insn 684: point = 515, n_alt = 1
	Hard reg 0 is preferable by r435 with profit 1000
   Insn 436: point = 517, n_alt = 0
   Insn 435: point = 519, n_alt = 0
   Insn 434: point = 521, n_alt = 3
   Insn 433: point = 522, n_alt = 1
   Insn 432: point = 524, n_alt = 0
   Insn 431: point = 526, n_alt = 0
   Insn 430: point = 527, n_alt = 0
   Insn 429: point = 529, n_alt = 0
   Insn 428: point = 530, n_alt = 0
   Insn 427: point = 532, n_alt = 0
   Insn 426: point = 533, n_alt = 0
   Insn 683: point = 535, n_alt = 1
	Hard reg 0 is preferable by r434 with profit 1000
   Insn 425: point = 537, n_alt = 1
   Insn 424: point = 539, n_alt = 0
   Insn 423: point = 540, n_alt = 0
   Insn 422: point = 540, n_alt = -2
   Insn 421: point = 541, n_alt = 4
  BB 24
   Insn 416: point = 542, n_alt = -1
   Insn 415: point = 542, n_alt = 1
  BB 23
   Insn 414: point = 544, n_alt = -1
   Insn 413: point = 544, n_alt = 1
   Insn 412: point = 544, n_alt = 14
   Insn 411: point = 546, n_alt = 0
   Insn 410: point = 548, n_alt = 3
   Insn 409: point = 549, n_alt = 1
   Insn 408: point = 551, n_alt = 0
   Insn 407: point = 553, n_alt = 0
   Insn 406: point = 554, n_alt = 2
  BB 22
   Insn 403: point = 555, n_alt = 1
   Insn 402: point = 556, n_alt = 0
   Insn 401: point = 557, n_alt = 0
   Insn 400: point = 557, n_alt = 15
   Insn 399: point = 558, n_alt = 1
   Insn 398: point = 560, n_alt = 14
   Insn 397: point = 561, n_alt = -2
   Insn 396: point = 562, n_alt = 0
   Insn 395: point = 562, n_alt = -2
   Insn 682: point = 563, n_alt = 14
	Hard reg 20 is preferable by r433 with profit 1000
   Insn 394: point = 565, n_alt = 0
   Insn 393: point = 567, n_alt = 1
   Insn 392: point = 569, n_alt = 0
   Insn 391: point = 570, n_alt = 0
   Insn 390: point = 572, n_alt = 0
   Insn 681: point = 574, n_alt = 1
	Hard reg 0 is preferable by r432 with profit 1000
   Insn 389: point = 576, n_alt = 0
   Insn 388: point = 578, n_alt = 0
   Insn 387: point = 580, n_alt = 3
   Insn 386: point = 581, n_alt = 1
   Insn 385: point = 583, n_alt = 0
   Insn 384: point = 585, n_alt = 0
   Insn 383: point = 586, n_alt = 0
   Insn 382: point = 588, n_alt = 0
   Insn 381: point = 589, n_alt = 0
   Insn 380: point = 591, n_alt = 0
   Insn 379: point = 592, n_alt = 0
   Insn 680: point = 594, n_alt = 1
	Hard reg 0 is preferable by r431 with profit 1000
   Insn 378: point = 596, n_alt = 1
   Insn 377: point = 598, n_alt = 0
   Insn 376: point = 599, n_alt = 0
   Insn 679: point = 599, n_alt = 1
   Insn 375: point = 600, n_alt = 0
   Insn 374: point = 601, n_alt = 0
   Insn 373: point = 601, n_alt = 0
   Insn 372: point = 601, n_alt = 3
   Insn 371: point = 601, n_alt = -2
   Insn 370: point = 602, n_alt = 4
   Insn 369: point = 603, n_alt = 21
   Insn 368: point = 604, n_alt = -2
   Insn 367: point = 605, n_alt = 4
   Insn 366: point = 605, n_alt = 4
   Insn 365: point = 605, n_alt = 0
   Insn 364: point = 606, n_alt = 8
   Insn 678: point = 607, n_alt = -2
	Hard reg 1 is preferable by r429 with profit 1000
   Insn 363: point = 609, n_alt = 1
   Insn 677: point = 610, n_alt = -2
	Hard reg 1 is preferable by r429 with profit 1000
	Hard reg 0 is preferable by r429 with profit 1000
   Insn 362: point = 612, n_alt = 0
   Insn 361: point = 613, n_alt = 1
   Insn 360: point = 615, n_alt = 0
   Insn 359: point = 616, n_alt = 0
  BB 21
   Insn 356: point = 617, n_alt = 1
   Insn 355: point = 618, n_alt = 0
   Insn 354: point = 620, n_alt = 0
   Insn 353: point = 621, n_alt = 0
   Insn 676: point = 623, n_alt = 0
   Insn 352: point = 625, n_alt = 15
   Insn 351: point = 626, n_alt = 0
   Insn 350: point = 626, n_alt = -2
   Insn 675: point = 627, n_alt = 14
	Hard reg 20 is preferable by r427 with profit 1000
   Insn 349: point = 629, n_alt = 0
   Insn 348: point = 631, n_alt = 1
   Insn 347: point = 633, n_alt = 0
   Insn 346: point = 634, n_alt = 0
   Insn 345: point = 636, n_alt = 0
   Insn 344: point = 637, n_alt = 1
   Insn 343: point = 639, n_alt = 0
   Insn 342: point = 640, n_alt = 0
   Insn 341: point = 642, n_alt = 0
   Insn 340: point = 643, n_alt = 0
  BB 20
   Insn 335: point = 644, n_alt = -1
   Insn 334: point = 644, n_alt = 0
   Insn 333: point = 645, n_alt = 0
   Insn 332: point = 646, n_alt = 0
   Insn 331: point = 648, n_alt = 0
   Insn 330: point = 649, n_alt = 0
   Insn 329: point = 650, n_alt = 0
   Insn 328: point = 650, n_alt = -2
   Insn 327: point = 651, n_alt = 4
  BB 19
   Insn 325: point = 652, n_alt = -1
   Insn 324: point = 652, n_alt = 0
   Insn 323: point = 653, n_alt = 0
   Insn 322: point = 655, n_alt = 0
   Insn 321: point = 657, n_alt = 3
   Insn 320: point = 658, n_alt = 1
   Insn 319: point = 660, n_alt = 0
   Insn 318: point = 662, n_alt = 0
 r82: [246..247]
 r83: [294..295]
 r84: [291..293]
 r85: [289..290]
 r86: [275..288]
 r87: [284..285]
 r88: [282..283]
 r89: [279..281]
 r90: [277..278]
 r91: [273..276]
 r92: [259..270]
 r93: [266..267]
 r94: [263..265]
 r95: [261..262]
 r96: [258..260]
 r97: [222..223]
 r98: [148..149]
 r99: [145..147]
 r100: [140..144]
 r101: [140..141]
 r102: [136..137]
 r103: [133..135]
 r104: [128..132]
 r105: [128..129]
 r106: [122..125]
 r107: [218..219]
 r108: [215..217]
 r109: [208..209]
 r110: [206..207]
 r111: [203..205]
 r112: [196..197]
 r113: [193..195]
 r114: [188..192]
 r115: [188..189]
 r116: [182..185]
 r117: [176..177]
 r118: [174..175]
 r119: [171..173]
 r120: [166..170]
 r121: [166..167]
 r122: [160..163]
 r123: [116..117]
 r124: [114..115]
 r125: [112..113]
 r126: [387..388]
 r127: [384..386]
 r128: [382..383]
 r129: [379..381]
 r130: [375..376]
 r131: [372..374]
 r132: [370..371]
 r133: [367..369]
 r134: [363..364]
 r135: [360..362]
 r136: [358..359]
 r137: [346..347]
 r138: [343..345]
 r139: [333..342]
 r140: [338..339]
 r141: [335..337]
 r142: [331..334]
 r143: [331..332]
 r144: [327..328]
 r145: [325..326]
 r146: [322..324]
 r147: [310..321]
 r148: [317..318]
 r149: [315..316]
 r150: [312..314]
 r151: [308..311]
 r152: [308..309]
 r153: [304..305]
 r154: [301..303]
 r155: [298..300]
 r156: [659..660]
 r157: [656..658]
 r158: [654..655]
 r159: [652..653]
 r160: [647..649]
 r161: [644..646]
 r162: [641..643]
 r163: [638..640]
 r164: [635..637]
 r165: [635..636]
 r166: [632..634]
 r167: [630..631]
 r168: [626..627]
 r169: [619..621]
 r170: [614..616]
 r171: [605..613]
 r172: [604..607]
 r173: [595..596]
 r174: [590..592]
 r175: [587..589]
 r176: [587..588]
 r177: [571..586]
 r178: [582..583]
 r179: [579..581]
 r180: [577..578]
 r181: [575..576]
 r182: [571..572]
 r183: [568..570]
 r184: [566..567]
 r185: [562..563]
 r186: [542..554]
 r187: [550..551]
 r188: [547..549]
 r189: [545..546]
 r190: [542..544]
 r191: [536..537]
 r192: [531..533]
 r193: [528..530]
 r194: [528..529]
 r195: [512..527]
 r196: [523..524]
 r197: [520..522]
 r198: [518..519]
 r199: [516..517]
 r200: [512..513]
 r201: [509..511]
 r202: [507..508]
 r203: [503..504]
 r204: [492..493]
 r205: [490..491]
 r206: [487..489]
 r207: [485..486]
 r208: [481..482]
 r209: [476..478]
 r210: [470..471]
 r211: [467..469]
 r212: [465..466]
 r213: [463..464]
 r214: [459..460]
 r215: [454..456]
 r216: [451..453]
 r217: [451..452]
 r218: [435..450]
 r219: [446..447]
 r220: [443..445]
 r221: [441..442]
 r222: [439..440]
 r223: [435..436]
 r224: [432..434]
 r225: [430..431]
 r226: [426..427]
 r227: [418..420]
 r228: [408..417]
 r229: [406..411]
 r230: [398..400]
 r231: [395..397]
 r232: [92..93]
 r233: [87..89]
 r234: [84..86]
 r235: [84..85]
 r236: [68..83]
 r237: [79..80]
 r238: [76..78]
 r239: [74..75]
 r240: [72..73]
 r241: [68..69]
 r242: [65..67]
 r243: [63..64]
 r244: [59..60]
 r245: [51..53]
 r246: [48..50]
 r247: [45..47]
 r248: [42..44]
 r249: [39..41]
 r250: [39..40]
 r251: [36..38]
 r252: [34..35]
 r253: [30..31]
 r254: [23..25]
 r255: [56..58]
 r256: [28..29]
 r257: [5..6]
 r258: [624..625]
 r259: [559..561]
 r260: [500..502]
 r261: [423..425]
 r262: [0..4]
 r263: [254..255]
 r264: [252..253]
 r265: [248..249]
 r266: [238..239]
 r267: [236..237]
 r268: [234..235]
 r269: [232..233]
 r270: [230..231]
 r271: [228..229]
 r272: [296..297]
 r273: [291..292]
 r274: [286..287]
 r275: [279..280]
 r276: [268..269]
 r277: [263..264]
 r278: [256..257]
 r279: [226..227]
 r280: [224..225]
 r281: [155..157]
 r282: [154..156]
 r283: [152..153]
 r284: [150..151]
 r285: [145..146]
 r286: [142..143]
 r287: [138..139]
 r288: [133..134]
 r289: [130..131]
 r290: [126..127]
 r291: [123..124]
 r292: [120..121]
 r293: [220..221]
 r294: [214..216]
 r295: [212..213]
 r296: [210..211]
 r297: [202..204]
 r298: [200..201]
 r299: [198..199]
 r300: [193..194]
 r301: [190..191]
 r302: [186..187]
 r303: [183..184]
 r304: [180..181]
 r305: [178..179]
 r306: [171..172]
 r307: [168..169]
 r308: [164..165]
 r309: [161..162]
 r310: [158..159]
 r311: [118..119]
 r312: [110..111]
 r313: [352..353]
 r314: [389..390]
 r315: [384..385]
 r316: [379..380]
 r317: [377..378]
 r318: [372..373]
 r319: [367..368]
 r320: [365..366]
 r321: [360..361]
 r322: [356..357]
 r323: [354..355]
 r324: [350..351]
 r325: [348..349]
 r326: [343..344]
 r327: [340..341]
 r328: [335..336]
 r329: [329..330]
 r330: [322..323]
 r331: [319..320]
 r332: [312..313]
 r333: [306..307]
 r334: [301..302]
 r335: [298..299]
 r336: [108..109]
 r337: [106..107]
 r338: [104..105]
 r339: [102..103]
 r340: [100..101]
 r341: [98..99]
 r342: [661..662]
 r343: [656..657]
 r344: [650..651]
 r345: [647..648]
 r346: [644..645]
 r347: [641..642]
 r348: [638..639]
 r349: [632..633]
 r350: [617..618]
 r351: [619..620]
 r352: [614..615]
 r353: [611..612]
 r354: [603..606]
 r355: [601..602]
 r356: [597..598]
 r357: [590..591]
 r358: [584..585]
 r359: [579..580]
 r360: [568..569]
 r361: [557..558]
 r362: [559..560]
 r363: [555..556]
 r364: [552..553]
 r365: [547..548]
 r366: [540..541]
 r367: [538..539]
 r368: [531..532]
 r369: [525..526]
 r370: [520..521]
 r371: [509..510]
 r372: [498..499]
 r373: [500..501]
 r374: [496..497]
 r375: [494..495]
 r376: [487..488]
 r377: [474..475]
 r378: [476..477]
 r379: [472..473]
 r380: [467..468]
 r381: [461..462]
 r382: [454..455]
 r383: [448..449]
 r384: [443..444]
 r385: [432..433]
 r386: [421..422]
 r387: [423..424]
 r388: [418..419]
 r389: [415..416]
 r390: [407..410]
 r391: [405..409]
 r392: [403..404]
 r393: [401..402]
 r394: [398..399]
 r395: [393..394]
 r396: [395..396]
 r397: [96..97]
 r398: [94..95]
 r399: [87..88]
 r400: [81..82]
 r401: [76..77]
 r402: [65..66]
 r403: [54..55]
 r404: [56..57]
 r405: [51..52]
 r406: [48..49]
 r407: [45..46]
 r408: [42..43]
 r409: [36..37]
 r410: [21..22]
 r411: [23..24]
 r412: [19..20]
 r413: [17..18]
 r414: [15..16]
 r415: [13..14]
 r416: [11..12]
 r417: [7..8]
 r418: [9..10]
 r420: [250..251]
 r421: [2..3]
 r423: [240..241]
 r424: [242..243]
 r425: [244..245]
 r426: [271..274]
 r427: [628..629]
 r428: [622..623]
 r429: [608..610]
 r430: [599..600]
 r431: [593..594]
 r432: [573..574]
 r433: [564..565]
 r434: [534..535]
 r435: [514..515]
 r436: [505..506]
 r437: [483..484]
 r438: [479..480]
 r439: [457..458]
 r440: [437..438]
 r441: [428..429]
 r442: [412..414]
 r443: [391..392]
 r444: [90..91]
 r445: [70..71]
 r446: [61..62]
 r447: [32..33]
 r448: [26..27]
Compressing live ranges: from 663 to 558 - 84%
Ranges after the compression:
 r82: [210..211]
 r83: [250..251]
 r84: [248..249]
 r85: [246..247]
 r86: [234..245]
 r87: [242..243]
 r88: [240..241]
 r89: [238..239]
 r90: [236..237]
 r91: [232..235]
 r92: [222..231]
 r93: [228..229]
 r94: [226..227]
 r95: [224..225]
 r96: [222..223]
 r97: [186..187]
 r98: [126..127]
 r99: [124..125]
 r100: [120..123]
 r101: [120..121]
 r102: [116..117]
 r103: [114..115]
 r104: [110..113]
 r105: [110..111]
 r106: [106..107]
 r107: [182..183]
 r108: [180..181]
 r109: [174..175]
 r110: [172..173]
 r111: [170..171]
 r112: [164..165]
 r113: [162..163]
 r114: [158..161]
 r115: [158..159]
 r116: [154..155]
 r117: [148..149]
 r118: [146..147]
 r119: [144..145]
 r120: [140..143]
 r121: [140..141]
 r122: [136..137]
 r123: [100..101]
 r124: [98..99]
 r125: [96..97]
 r126: [330..331]
 r127: [328..329]
 r128: [326..327]
 r129: [324..325]
 r130: [320..321]
 r131: [318..319]
 r132: [316..317]
 r133: [314..315]
 r134: [310..311]
 r135: [308..309]
 r136: [306..307]
 r137: [294..295]
 r138: [292..293]
 r139: [284..291]
 r140: [288..289]
 r141: [286..287]
 r142: [282..285]
 r143: [282..283]
 r144: [278..279]
 r145: [276..277]
 r146: [274..275]
 r147: [264..273]
 r148: [270..271]
 r149: [268..269]
 r150: [266..267]
 r151: [262..265]
 r152: [262..263]
 r153: [258..259]
 r154: [256..257]
 r155: [254..255]
 r156: [554..555]
 r157: [552..553]
 r158: [550..551]
 r159: [548..549]
 r160: [544..545]
 r161: [542..543]
 r162: [540..541]
 r163: [538..539]
 r164: [536..537]
 r165: [536..537]
 r166: [534..535]
 r167: [532..533]
 r168: [528..529]
 r169: [522..523]
 r170: [518..519]
 r171: [512..517]
 r172: [512..513]
 r173: [504..505]
 r174: [500..501]
 r175: [498..499]
 r176: [498..499]
 r177: [484..497]
 r178: [494..495]
 r179: [492..493]
 r180: [490..491]
 r181: [488..489]
 r182: [484..485]
 r183: [482..483]
 r184: [480..481]
 r185: [476..477]
 r186: [460..469]
 r187: [466..467]
 r188: [464..465]
 r189: [462..463]
 r190: [460..461]
 r191: [454..455]
 r192: [450..451]
 r193: [448..449]
 r194: [448..449]
 r195: [434..447]
 r196: [444..445]
 r197: [442..443]
 r198: [440..441]
 r199: [438..439]
 r200: [434..435]
 r201: [432..433]
 r202: [430..431]
 r203: [426..427]
 r204: [416..417]
 r205: [414..415]
 r206: [412..413]
 r207: [410..411]
 r208: [406..407]
 r209: [402..403]
 r210: [396..397]
 r211: [394..395]
 r212: [392..393]
 r213: [390..391]
 r214: [386..387]
 r215: [382..383]
 r216: [380..381]
 r217: [380..381]
 r218: [366..379]
 r219: [376..377]
 r220: [374..375]
 r221: [372..373]
 r222: [370..371]
 r223: [366..367]
 r224: [364..365]
 r225: [362..363]
 r226: [358..359]
 r227: [352..353]
 r228: [346..351]
 r229: [346..347]
 r230: [340..341]
 r231: [338..339]
 r232: [76..77]
 r233: [72..73]
 r234: [70..71]
 r235: [70..71]
 r236: [56..69]
 r237: [66..67]
 r238: [64..65]
 r239: [62..63]
 r240: [60..61]
 r241: [56..57]
 r242: [54..55]
 r243: [52..53]
 r244: [48..49]
 r245: [42..43]
 r246: [40..41]
 r247: [38..39]
 r248: [36..37]
 r249: [34..35]
 r250: [34..35]
 r251: [32..33]
 r252: [30..31]
 r253: [26..27]
 r254: [20..21]
 r255: [46..47]
 r256: [24..25]
 r257: [2..3]
 r258: [526..527]
 r259: [474..475]
 r260: [424..425]
 r261: [356..357]
 r262: [0..1]
 r263: [218..219]
 r264: [216..217]
 r265: [212..213]
 r266: [202..203]
 r267: [200..201]
 r268: [198..199]
 r269: [196..197]
 r270: [194..195]
 r271: [192..193]
 r272: [252..253]
 r273: [248..249]
 r274: [244..245]
 r275: [238..239]
 r276: [230..231]
 r277: [226..227]
 r278: [220..221]
 r279: [190..191]
 r280: [188..189]
 r281: [132..133]
 r282: [132..133]
 r283: [130..131]
 r284: [128..129]
 r285: [124..125]
 r286: [122..123]
 r287: [118..119]
 r288: [114..115]
 r289: [112..113]
 r290: [108..109]
 r291: [106..107]
 r292: [104..105]
 r293: [184..185]
 r294: [180..181]
 r295: [178..179]
 r296: [176..177]
 r297: [170..171]
 r298: [168..169]
 r299: [166..167]
 r300: [162..163]
 r301: [160..161]
 r302: [156..157]
 r303: [154..155]
 r304: [152..153]
 r305: [150..151]
 r306: [144..145]
 r307: [142..143]
 r308: [138..139]
 r309: [136..137]
 r310: [134..135]
 r311: [102..103]
 r312: [94..95]
 r313: [300..301]
 r314: [332..333]
 r315: [328..329]
 r316: [324..325]
 r317: [322..323]
 r318: [318..319]
 r319: [314..315]
 r320: [312..313]
 r321: [308..309]
 r322: [304..305]
 r323: [302..303]
 r324: [298..299]
 r325: [296..297]
 r326: [292..293]
 r327: [290..291]
 r328: [286..287]
 r329: [280..281]
 r330: [274..275]
 r331: [272..273]
 r332: [266..267]
 r333: [260..261]
 r334: [256..257]
 r335: [254..255]
 r336: [92..93]
 r337: [90..91]
 r338: [88..89]
 r339: [86..87]
 r340: [84..85]
 r341: [82..83]
 r342: [556..557]
 r343: [552..553]
 r344: [546..547]
 r345: [544..545]
 r346: [542..543]
 r347: [540..541]
 r348: [538..539]
 r349: [534..535]
 r350: [520..521]
 r351: [522..523]
 r352: [518..519]
 r353: [516..517]
 r354: [512..513]
 r355: [510..511]
 r356: [506..507]
 r357: [500..501]
 r358: [496..497]
 r359: [492..493]
 r360: [482..483]
 r361: [472..473]
 r362: [474..475]
 r363: [470..471]
 r364: [468..469]
 r365: [464..465]
 r366: [458..459]
 r367: [456..457]
 r368: [450..451]
 r369: [446..447]
 r370: [442..443]
 r371: [432..433]
 r372: [422..423]
 r373: [424..425]
 r374: [420..421]
 r375: [418..419]
 r376: [412..413]
 r377: [400..401]
 r378: [402..403]
 r379: [398..399]
 r380: [394..395]
 r381: [388..389]
 r382: [382..383]
 r383: [378..379]
 r384: [374..375]
 r385: [364..365]
 r386: [354..355]
 r387: [356..357]
 r388: [352..353]
 r389: [350..351]
 r390: [346..347]
 r391: [346..347]
 r392: [344..345]
 r393: [342..343]
 r394: [340..341]
 r395: [336..337]
 r396: [338..339]
 r397: [80..81]
 r398: [78..79]
 r399: [72..73]
 r400: [68..69]
 r401: [64..65]
 r402: [54..55]
 r403: [44..45]
 r404: [46..47]
 r405: [42..43]
 r406: [40..41]
 r407: [38..39]
 r408: [36..37]
 r409: [32..33]
 r410: [18..19]
 r411: [20..21]
 r412: [16..17]
 r413: [14..15]
 r414: [12..13]
 r415: [10..11]
 r416: [8..9]
 r417: [4..5]
 r418: [6..7]
 r420: [214..215]
 r421: [0..1]
 r423: [204..205]
 r424: [206..207]
 r425: [208..209]
 r426: [232..233]
 r427: [530..531]
 r428: [524..525]
 r429: [514..515]
 r430: [508..509]
 r431: [502..503]
 r432: [486..487]
 r433: [478..479]
 r434: [452..453]
 r435: [436..437]
 r436: [428..429]
 r437: [408..409]
 r438: [404..405]
 r439: [384..385]
 r440: [368..369]
 r441: [360..361]
 r442: [348..349]
 r443: [334..335]
 r444: [74..75]
 r445: [58..59]
 r446: [50..51]
 r447: [28..29]
 r448: [22..23]

********** Assignment #1: **********

	 Assigning to 423 (cl=FLOAT_REGS, orig=423, freq=2000, tfirst=423, tfreq=2000)...
	   Assign 10 to reload r423 (freq=2000)
	 Assigning to 424 (cl=FLOAT_REGS, orig=82, freq=2000, tfirst=424, tfreq=2000)...
	   Assign 11 to reload r424 (freq=2000)
	Hard reg 20 is preferable by r425 with profit 1000
	Hard reg 11 is preferable by r425 with profit 1000
	 Assigning to 428 (cl=FLOAT_REGS, orig=258, freq=2000, tfirst=428, tfreq=2000)...
	   Assign 12 to optional reload r428 (freq=2000)
	 Assigning to 430 (cl=FLOAT_REGS, orig=430, freq=2000, tfirst=430, tfreq=2000)...
	   Assign 13 to reload r430 (freq=2000)
	 Assigning to 438 (cl=FLOAT_REGS, orig=208, freq=2000, tfirst=438, tfreq=2000)...
	   Assign 14 to optional reload r438 (freq=2000)
	 Assigning to 443 (cl=FLOAT_REGS, orig=443, freq=2000, tfirst=443, tfreq=2000)...
	   Assign 15 to reload r443 (freq=2000)
	 Assigning to 448 (cl=FLOAT_REGS, orig=256, freq=2000, tfirst=448, tfreq=2000)...
	   Assign 10 to optional reload r448 (freq=2000)
	 Assigning to 426 (cl=GENERAL_REGS, orig=86, freq=3000, tfirst=426, tfreq=3000)...
	   Assign 0 to reload r426 (freq=3000)
	 Assigning to 429 (cl=GENERAL_REGS, orig=353, freq=3000, tfirst=429, tfreq=3000)...
	   Assign 0 to reload r429 (freq=3000)
	 Assigning to 442 (cl=GENERAL_REGS, orig=389, freq=3000, tfirst=442, tfreq=3000)...
	   Assign 0 to reload r442 (freq=3000)
	 Assigning to 437 (cl=ALL_SSE_REGS, orig=208, freq=2000, tfirst=437, tfreq=2000)...
	   Assign 22 to reload r437 (freq=2000)

********** Undoing inheritance #1: **********

Remove optional reload reg 428
  Restoring original insn:
  353: r169:XF=float_extend(r258:DF)
      REG_DEAD r258:DF
  Deleting move 676
  676: r428:DF=r258:DF
      REG_DEAD r258:DF
deleting insn with uid = 676.
Remove optional reload reg 438
  Restoring original insn:
  457: r209:XF=float_extend(r208:DF)
      REG_DEAD r208:DF
  Deleting move 687
  687: r438:DF=r208:DF
      REG_DEAD r208:DF
deleting insn with uid = 687.
Remove optional reload reg 448
  Restoring original insn:
  586: r254:XF=float_extend(r256:DF)
      REG_DEAD r256:DF
  Deleting move 698
  698: r448:DF=r256:DF
      REG_DEAD r256:DF
deleting insn with uid = 698.

********** Pseudo live ranges #2: **********

  BB 39
   Insn 633: point = 0, n_alt = 0
  BB 40
   Insn 637: point = 0, n_alt = -1
   Insn 636: point = 0, n_alt = 21
  BB 38
   Insn 632: point = 2, n_alt = -1
   Insn 631: point = 2, n_alt = 0
   Insn 627: point = 4, n_alt = 20
   Insn 624: point = 6, n_alt = 14
  BB 35
   Insn 667: point = 7, n_alt = -1
   Insn 612: point = 7, n_alt = 15
   Insn 611: point = 8, n_alt = 14
  BB 37
   Insn 621: point = 9, n_alt = 15
   Insn 620: point = 10, n_alt = 14
  BB 36
   Insn 618: point = 11, n_alt = -1
   Insn 617: point = 11, n_alt = 0
  BB 34
   Insn 609: point = 11, n_alt = -1
   Insn 608: point = 11, n_alt = 0
   Insn 607: point = 11, n_alt = 0
   Insn 606: point = 11, n_alt = -2
   Insn 605: point = 12, n_alt = 3
   Insn 604: point = 13, n_alt = 0
   Insn 603: point = 13, n_alt = -2
   Insn 602: point = 14, n_alt = 3
   Insn 601: point = 15, n_alt = 0
   Insn 600: point = 16, n_alt = 0
   Insn 599: point = 17, n_alt = 0
   Insn 598: point = 18, n_alt = 0
   Insn 597: point = 19, n_alt = 0
   Insn 596: point = 19, n_alt = 0
   Insn 595: point = 19, n_alt = 3
   Insn 594: point = 19, n_alt = -2
   Insn 593: point = 20, n_alt = 4
   Insn 592: point = 21, n_alt = 4
  BB 33
   Insn 589: point = 21, n_alt = 1
   Insn 588: point = 22, n_alt = 0
   Insn 587: point = 24, n_alt = 0
   Insn 586: point = 25, n_alt = -1
   Insn 585: point = 27, n_alt = 15
   Insn 584: point = 28, n_alt = 0
   Insn 583: point = 28, n_alt = -2
   Insn 697: point = 29, n_alt = 14
	Hard reg 20 is preferable by r447 with profit 1000
   Insn 582: point = 31, n_alt = 0
   Insn 581: point = 33, n_alt = 1
   Insn 580: point = 35, n_alt = 0
   Insn 579: point = 36, n_alt = 0
   Insn 578: point = 38, n_alt = 0
   Insn 577: point = 39, n_alt = 1
   Insn 576: point = 41, n_alt = 0
   Insn 575: point = 42, n_alt = 0
   Insn 574: point = 44, n_alt = 0
   Insn 573: point = 45, n_alt = 0
  BB 32
   Insn 568: point = 46, n_alt = -1
   Insn 567: point = 46, n_alt = 0
   Insn 566: point = 47, n_alt = 0
   Insn 565: point = 48, n_alt = 0
   Insn 564: point = 50, n_alt = 0
   Insn 563: point = 51, n_alt = 0
   Insn 562: point = 52, n_alt = 15
   Insn 561: point = 53, n_alt = 1
   Insn 560: point = 55, n_alt = 14
   Insn 559: point = 56, n_alt = -2
   Insn 558: point = 57, n_alt = 0
   Insn 557: point = 57, n_alt = -2
   Insn 696: point = 58, n_alt = 14
	Hard reg 20 is preferable by r446 with profit 1000
   Insn 556: point = 60, n_alt = 0
   Insn 555: point = 62, n_alt = 1
   Insn 554: point = 64, n_alt = 0
   Insn 553: point = 65, n_alt = 0
   Insn 552: point = 67, n_alt = 0
   Insn 695: point = 69, n_alt = 1
	Hard reg 0 is preferable by r445 with profit 1000
   Insn 551: point = 71, n_alt = 0
   Insn 550: point = 73, n_alt = 0
   Insn 549: point = 75, n_alt = 3
   Insn 548: point = 76, n_alt = 1
   Insn 547: point = 78, n_alt = 0
   Insn 546: point = 80, n_alt = 0
   Insn 545: point = 81, n_alt = 0
   Insn 544: point = 83, n_alt = 0
   Insn 543: point = 84, n_alt = 0
   Insn 542: point = 86, n_alt = 0
   Insn 541: point = 87, n_alt = 0
   Insn 694: point = 89, n_alt = 1
	Hard reg 0 is preferable by r444 with profit 1000
   Insn 540: point = 91, n_alt = 1
   Insn 539: point = 93, n_alt = 0
  BB 31
   Insn 537: point = 94, n_alt = -1
   Insn 536: point = 94, n_alt = 1
   Insn 535: point = 95, n_alt = 0
  BB 18
   Insn 665: point = 96, n_alt = -1
   Insn 314: point = 96, n_alt = 0
   Insn 313: point = 96, n_alt = -2
   Insn 312: point = 97, n_alt = 4
   Insn 311: point = 98, n_alt = 15
   Insn 310: point = 99, n_alt = 14
   Insn 309: point = 100, n_alt = 1
   Insn 308: point = 101, n_alt = 0
   Insn 307: point = 102, n_alt = 1
   Insn 306: point = 103, n_alt = 0
   Insn 305: point = 104, n_alt = 1
   Insn 304: point = 105, n_alt = 0
   Insn 303: point = 106, n_alt = 1
   Insn 302: point = 106, n_alt = 1
   Insn 301: point = 106, n_alt = 1
   Insn 300: point = 106, n_alt = 1
   Insn 299: point = 106, n_alt = 1
   Insn 298: point = 106, n_alt = 1
  BB 17
   Insn 296: point = 106, n_alt = -1
   Insn 295: point = 106, n_alt = 1
   Insn 294: point = 107, n_alt = 0
  BB 9
   Insn 661: point = 108, n_alt = -1
   Insn 202: point = 108, n_alt = 1
   Insn 201: point = 108, n_alt = 5
   Insn 200: point = 109, n_alt = -2
   Insn 199: point = 110, n_alt = 0
   Insn 198: point = 110, n_alt = -2
   Insn 197: point = 111, n_alt = 0
   Insn 196: point = 113, n_alt = 0
   Insn 195: point = 115, n_alt = 0
   Insn 194: point = 117, n_alt = 0
  BB 8
   Insn 191: point = 118, n_alt = -1
   Insn 190: point = 118, n_alt = 1
  BB 6
   Insn 659: point = 118, n_alt = -1
   Insn 125: point = 118, n_alt = 5
   Insn 124: point = 119, n_alt = -2
   Insn 123: point = 120, n_alt = 0
   Insn 122: point = 120, n_alt = -2
   Insn 121: point = 121, n_alt = -2
   Insn 120: point = 122, n_alt = 3
   Insn 119: point = 123, n_alt = 3
   Insn 118: point = 125, n_alt = 3
   Insn 117: point = 126, n_alt = 0
   Insn 116: point = 126, n_alt = 9
   Insn 115: point = 127, n_alt = 20
   Insn 114: point = 128, n_alt = 0
   Insn 113: point = 128, n_alt = -2
   Insn 112: point = 129, n_alt = 3
   Insn 111: point = 130, n_alt = 3
   Insn 110: point = 132, n_alt = 3
   Insn 109: point = 133, n_alt = 1
   Insn 108: point = 135, n_alt = 0
   Insn 107: point = 137, n_alt = 0
   Insn 106: point = 138, n_alt = 0
   Insn 105: point = 138, n_alt = 9
   Insn 104: point = 139, n_alt = 20
   Insn 103: point = 140, n_alt = 0
   Insn 102: point = 140, n_alt = -2
   Insn 101: point = 141, n_alt = 3
   Insn 100: point = 142, n_alt = 3
   Insn 99: point = 144, n_alt = 3
   Insn 98: point = 145, n_alt = 1
   Insn 97: point = 147, n_alt = 0
   Insn 96: point = 149, n_alt = 0
   Insn 95: point = 150, n_alt = 5
   Insn 94: point = 151, n_alt = -2
   Insn 93: point = 152, n_alt = 0
   Insn 92: point = 152, n_alt = -2
   Insn 91: point = 153, n_alt = -2
   Insn 90: point = 154, n_alt = 3
   Insn 89: point = 155, n_alt = 3
  BB 7
   Insn 186: point = 156, n_alt = 0
   Insn 185: point = 156, n_alt = 5
   Insn 184: point = 157, n_alt = -2
   Insn 183: point = 158, n_alt = 0
   Insn 182: point = 158, n_alt = -2
   Insn 181: point = 159, n_alt = -2
   Insn 180: point = 160, n_alt = 3
   Insn 179: point = 161, n_alt = 3
   Insn 178: point = 163, n_alt = 3
   Insn 177: point = 164, n_alt = 9
   Insn 176: point = 165, n_alt = 20
   Insn 175: point = 166, n_alt = 0
   Insn 174: point = 166, n_alt = -2
   Insn 173: point = 167, n_alt = 3
   Insn 172: point = 168, n_alt = 3
   Insn 171: point = 170, n_alt = 3
   Insn 170: point = 171, n_alt = 1
   Insn 169: point = 173, n_alt = 0
   Insn 168: point = 175, n_alt = 0
   Insn 167: point = 177, n_alt = 0
   Insn 166: point = 178, n_alt = 5
   Insn 165: point = 179, n_alt = -2
   Insn 164: point = 180, n_alt = 0
   Insn 163: point = 180, n_alt = -2
   Insn 162: point = 181, n_alt = -2
   Insn 161: point = 182, n_alt = 3
   Insn 160: point = 183, n_alt = 3
   Insn 159: point = 185, n_alt = 3
   Insn 158: point = 186, n_alt = 9
   Insn 157: point = 187, n_alt = 20
   Insn 156: point = 188, n_alt = 0
   Insn 155: point = 188, n_alt = -2
   Insn 154: point = 189, n_alt = 3
   Insn 153: point = 190, n_alt = 3
   Insn 152: point = 192, n_alt = 3
   Insn 151: point = 193, n_alt = 1
   Insn 150: point = 195, n_alt = 0
   Insn 149: point = 197, n_alt = 0
   Insn 148: point = 198, n_alt = 5
   Insn 147: point = 199, n_alt = -2
   Insn 146: point = 200, n_alt = 0
   Insn 145: point = 200, n_alt = -2
   Insn 144: point = 201, n_alt = -2
   Insn 143: point = 202, n_alt = 3
   Insn 142: point = 203, n_alt = 1
   Insn 141: point = 205, n_alt = 0
   Insn 140: point = 207, n_alt = 0
   Insn 139: point = 209, n_alt = 0
   Insn 138: point = 210, n_alt = 0
   Insn 137: point = 210, n_alt = 3
   Insn 136: point = 210, n_alt = -2
   Insn 135: point = 211, n_alt = 4
   Insn 134: point = 212, n_alt = -2
   Insn 133: point = 213, n_alt = -2
   Insn 132: point = 214, n_alt = 3
   Insn 131: point = 215, n_alt = 0
   Insn 130: point = 217, n_alt = 4
   Insn 129: point = 219, n_alt = 3
  BB 5
   Insn 87: point = 220, n_alt = -1
   Insn 86: point = 220, n_alt = 0
   Insn 85: point = 221, n_alt = 4
   Insn 84: point = 223, n_alt = 3
   Insn 83: point = 224, n_alt = 1
   Insn 82: point = 224, n_alt = 5
   Insn 81: point = 225, n_alt = -2
   Insn 80: point = 226, n_alt = 0
   Insn 79: point = 226, n_alt = 2
  BB 4
   Insn 77: point = 226, n_alt = -1
   Insn 76: point = 226, n_alt = 0
  BB 2
   Insn 657: point = 226, n_alt = -1
   Insn 40: point = 226, n_alt = 1
   Insn 39: point = 226, n_alt = 8
   Insn 38: point = 226, n_alt = 1
   Insn 37: point = 226, n_alt = 0
   Insn 36: point = 226, n_alt = 3
   Insn 35: point = 226, n_alt = -2
   Insn 34: point = 227, n_alt = 4
   Insn 33: point = 228, n_alt = 21
   Insn 32: point = 229, n_alt = 8
   Insn 31: point = 230, n_alt = 5
   Insn 30: point = 230, n_alt = 9
   Insn 29: point = 231, n_alt = 20
   Insn 28: point = 232, n_alt = 0
   Insn 27: point = 232, n_alt = -2
   Insn 26: point = 233, n_alt = 3
   Insn 25: point = 234, n_alt = 9
   Insn 24: point = 235, n_alt = 20
   Insn 23: point = 236, n_alt = 0
   Insn 22: point = 236, n_alt = -2
   Insn 21: point = 237, n_alt = 3
   Insn 670: point = 238, n_alt = 1
   Insn 20: point = 239, n_alt = 0
   Insn 672: point = 241, n_alt = 0
	   Creating copy r424<-r425@1000
   Insn 671: point = 243, n_alt = -1
	Hard reg 20 is preferable by r425 with profit 1000
   Insn 19: point = 245, n_alt = -2
   Insn 18: point = 246, n_alt = 0
   Insn 17: point = 246, n_alt = -2
   Insn 16: point = 247, n_alt = 3
   Insn 13: point = 248, n_alt = 0
   Insn 11: point = 250, n_alt = 5
   Insn 10: point = 251, n_alt = 3
   Insn 9: point = 252, n_alt = 5
   Insn 8: point = 253, n_alt = 3
   Insn 7: point = 254, n_alt = 5
   Insn 6: point = 254, n_alt = 5
   Insn 5: point = 254, n_alt = 5
   Insn 4: point = 254, n_alt = 5
   Insn 3: point = 254, n_alt = 1
   Insn 2: point = 254, n_alt = 5
  BB 3
   Insn 70: point = 254, n_alt = 0
   Insn 69: point = 254, n_alt = 0
   Insn 68: point = 254, n_alt = 3
   Insn 67: point = 254, n_alt = -2
   Insn 66: point = 255, n_alt = 4
   Insn 65: point = 256, n_alt = -2
   Insn 64: point = 257, n_alt = -2
   Insn 63: point = 258, n_alt = 0
   Insn 62: point = 260, n_alt = 0
   Insn 61: point = 262, n_alt = 3
   Insn 60: point = 263, n_alt = 1
   Insn 59: point = 265, n_alt = 0
   Insn 58: point = 267, n_alt = 0
   Insn 674: point = 268, n_alt = -2
	Hard reg 1 is preferable by r426 with profit 1000
   Insn 57: point = 270, n_alt = 0
   Insn 673: point = 272, n_alt = -2
	Hard reg 1 is preferable by r426 with profit 1000
	Hard reg 0 is preferable by r426 with profit 1000
   Insn 56: point = 274, n_alt = 0
   Insn 55: point = 276, n_alt = 0
   Insn 54: point = 278, n_alt = 3
   Insn 53: point = 279, n_alt = 3
   Insn 52: point = 281, n_alt = 0
   Insn 51: point = 283, n_alt = 1
   Insn 50: point = 285, n_alt = 0
   Insn 49: point = 286, n_alt = 0
   Insn 48: point = 288, n_alt = 0
   Insn 47: point = 290, n_alt = 3
   Insn 46: point = 291, n_alt = 1
   Insn 45: point = 293, n_alt = 0
   Insn 44: point = 295, n_alt = 0
  BB 16
   Insn 290: point = 296, n_alt = 0
   Insn 289: point = 296, n_alt = 15
   Insn 288: point = 297, n_alt = 14
   Insn 287: point = 298, n_alt = 0
   Insn 286: point = 300, n_alt = 3
   Insn 285: point = 301, n_alt = 1
   Insn 284: point = 303, n_alt = 0
   Insn 283: point = 305, n_alt = 0
   Insn 282: point = 306, n_alt = 15
   Insn 281: point = 307, n_alt = 14
   Insn 280: point = 309, n_alt = 0
   Insn 279: point = 311, n_alt = 3
   Insn 278: point = 312, n_alt = 1
   Insn 277: point = 314, n_alt = 0
   Insn 276: point = 316, n_alt = 0
   Insn 275: point = 318, n_alt = 0
   Insn 274: point = 319, n_alt = 0
   Insn 273: point = 321, n_alt = 3
   Insn 272: point = 322, n_alt = 1
   Insn 271: point = 324, n_alt = 0
   Insn 270: point = 326, n_alt = 0
   Insn 269: point = 328, n_alt = 0
   Insn 268: point = 329, n_alt = 15
   Insn 267: point = 330, n_alt = 14
   Insn 266: point = 332, n_alt = 0
   Insn 265: point = 334, n_alt = 3
   Insn 264: point = 335, n_alt = 1
   Insn 263: point = 337, n_alt = 0
   Insn 262: point = 339, n_alt = 0
   Insn 261: point = 340, n_alt = 0
   Insn 260: point = 342, n_alt = 3
   Insn 259: point = 343, n_alt = 1
   Insn 258: point = 345, n_alt = 0
   Insn 257: point = 347, n_alt = 0
  BB 15
   Insn 255: point = 348, n_alt = -1
   Insn 254: point = 348, n_alt = 1
   Insn 253: point = 349, n_alt = 0
  BB 10
   Insn 663: point = 350, n_alt = -1
   Insn 208: point = 350, n_alt = 1
   Insn 207: point = 350, n_alt = 15
   Insn 206: point = 351, n_alt = 14
  BB 14
   Insn 249: point = 352, n_alt = 0
  BB 13
   Insn 246: point = 352, n_alt = 1
   Insn 245: point = 353, n_alt = 0
   Insn 244: point = 354, n_alt = 15
   Insn 243: point = 355, n_alt = 14
   Insn 242: point = 357, n_alt = 0
   Insn 241: point = 359, n_alt = 3
   Insn 240: point = 360, n_alt = 1
   Insn 239: point = 362, n_alt = 0
   Insn 238: point = 364, n_alt = 0
  BB 12
   Insn 233: point = 365, n_alt = -1
   Insn 232: point = 365, n_alt = 1
   Insn 231: point = 366, n_alt = 14
   Insn 230: point = 367, n_alt = 14
   Insn 229: point = 369, n_alt = 0
   Insn 228: point = 371, n_alt = 3
   Insn 227: point = 372, n_alt = 1
   Insn 226: point = 374, n_alt = 0
   Insn 225: point = 376, n_alt = 0
  BB 11
   Insn 220: point = 377, n_alt = -1
   Insn 219: point = 377, n_alt = 1
   Insn 218: point = 378, n_alt = 14
   Insn 217: point = 379, n_alt = 14
   Insn 216: point = 381, n_alt = 0
   Insn 215: point = 383, n_alt = 3
   Insn 214: point = 384, n_alt = 1
   Insn 213: point = 386, n_alt = 0
   Insn 212: point = 388, n_alt = 0
  BB 30
   Insn 531: point = 389, n_alt = 0
  BB 29
   Insn 528: point = 389, n_alt = 0
   Insn 693: point = 389, n_alt = 1
   Insn 527: point = 390, n_alt = 0
  BB 28
   Insn 524: point = 391, n_alt = 1
   Insn 523: point = 392, n_alt = 0
   Insn 522: point = 394, n_alt = 0
   Insn 521: point = 395, n_alt = 1
   Insn 520: point = 397, n_alt = 0
   Insn 519: point = 398, n_alt = 0
  BB 27
   Insn 517: point = 399, n_alt = -1
   Insn 516: point = 399, n_alt = 0
   Insn 515: point = 399, n_alt = 1
   Insn 514: point = 400, n_alt = 0
   Insn 513: point = 401, n_alt = 0
   Insn 512: point = 401, n_alt = 0
   Insn 511: point = 401, n_alt = 3
   Insn 510: point = 401, n_alt = -2
   Insn 509: point = 402, n_alt = 4
   Insn 508: point = 403, n_alt = 21
   Insn 507: point = 404, n_alt = -2
   Insn 506: point = 405, n_alt = -2
   Insn 505: point = 406, n_alt = 4
   Insn 504: point = 406, n_alt = 0
   Insn 503: point = 407, n_alt = 8
   Insn 502: point = 408, n_alt = 0
   Insn 692: point = 409, n_alt = -2
	Hard reg 2 is preferable by r442 with profit 1000
   Insn 501: point = 411, n_alt = 1
   Insn 691: point = 412, n_alt = -2
	Hard reg 2 is preferable by r442 with profit 1000
	Hard reg 0 is preferable by r442 with profit 1000
   Insn 500: point = 414, n_alt = 0
   Insn 499: point = 415, n_alt = 1
   Insn 498: point = 417, n_alt = 0
   Insn 497: point = 418, n_alt = 0
   Insn 496: point = 419, n_alt = 15
   Insn 495: point = 420, n_alt = 1
   Insn 494: point = 422, n_alt = 14
   Insn 493: point = 423, n_alt = -2
   Insn 492: point = 424, n_alt = 0
   Insn 491: point = 424, n_alt = -2
   Insn 690: point = 425, n_alt = 14
	Hard reg 20 is preferable by r441 with profit 1000
   Insn 490: point = 427, n_alt = 0
   Insn 489: point = 429, n_alt = 1
   Insn 488: point = 431, n_alt = 0
   Insn 487: point = 432, n_alt = 0
   Insn 486: point = 434, n_alt = 0
   Insn 689: point = 436, n_alt = 1
	Hard reg 0 is preferable by r440 with profit 1000
   Insn 485: point = 438, n_alt = 0
   Insn 484: point = 440, n_alt = 0
   Insn 483: point = 442, n_alt = 3
   Insn 482: point = 443, n_alt = 1
   Insn 481: point = 445, n_alt = 0
   Insn 480: point = 447, n_alt = 0
   Insn 479: point = 448, n_alt = 0
   Insn 478: point = 450, n_alt = 0
   Insn 477: point = 451, n_alt = 0
   Insn 476: point = 453, n_alt = 0
   Insn 475: point = 454, n_alt = 0
   Insn 688: point = 456, n_alt = 1
	Hard reg 0 is preferable by r439 with profit 1000
   Insn 474: point = 458, n_alt = 1
   Insn 473: point = 460, n_alt = 0
  BB 26
   Insn 471: point = 461, n_alt = -1
   Insn 470: point = 461, n_alt = 0
   Insn 469: point = 462, n_alt = 0
   Insn 468: point = 464, n_alt = 0
   Insn 467: point = 466, n_alt = 3
   Insn 466: point = 467, n_alt = 1
   Insn 465: point = 469, n_alt = 0
   Insn 464: point = 471, n_alt = 0
  BB 25
   Insn 461: point = 472, n_alt = 0
   Insn 460: point = 472, n_alt = 1
   Insn 459: point = 473, n_alt = 0
   Insn 458: point = 475, n_alt = 0
   Insn 457: point = 476, n_alt = -1
   Insn 686: point = 478, n_alt = 15
   Insn 456: point = 480, n_alt = 14
   Insn 455: point = 482, n_alt = 0
   Insn 454: point = 484, n_alt = 3
   Insn 453: point = 485, n_alt = 1
   Insn 452: point = 487, n_alt = 0
   Insn 451: point = 489, n_alt = 0
   Insn 450: point = 491, n_alt = 0
   Insn 449: point = 492, n_alt = 1
   Insn 448: point = 493, n_alt = 0
   Insn 447: point = 494, n_alt = 15
   Insn 446: point = 495, n_alt = 1
   Insn 445: point = 497, n_alt = 14
   Insn 444: point = 498, n_alt = -2
   Insn 443: point = 499, n_alt = 0
   Insn 442: point = 499, n_alt = -2
   Insn 685: point = 500, n_alt = 14
	Hard reg 20 is preferable by r436 with profit 1000
   Insn 441: point = 502, n_alt = 0
   Insn 440: point = 504, n_alt = 1
   Insn 439: point = 506, n_alt = 0
   Insn 438: point = 507, n_alt = 0
   Insn 437: point = 509, n_alt = 0
   Insn 684: point = 511, n_alt = 1
	Hard reg 0 is preferable by r435 with profit 1000
   Insn 436: point = 513, n_alt = 0
   Insn 435: point = 515, n_alt = 0
   Insn 434: point = 517, n_alt = 3
   Insn 433: point = 518, n_alt = 1
   Insn 432: point = 520, n_alt = 0
   Insn 431: point = 522, n_alt = 0
   Insn 430: point = 523, n_alt = 0
   Insn 429: point = 525, n_alt = 0
   Insn 428: point = 526, n_alt = 0
   Insn 427: point = 528, n_alt = 0
   Insn 426: point = 529, n_alt = 0
   Insn 683: point = 531, n_alt = 1
	Hard reg 0 is preferable by r434 with profit 1000
   Insn 425: point = 533, n_alt = 1
   Insn 424: point = 535, n_alt = 0
   Insn 423: point = 536, n_alt = 0
   Insn 422: point = 536, n_alt = -2
   Insn 421: point = 537, n_alt = 4
  BB 24
   Insn 416: point = 538, n_alt = -1
   Insn 415: point = 538, n_alt = 1
  BB 23
   Insn 414: point = 540, n_alt = -1
   Insn 413: point = 540, n_alt = 1
   Insn 412: point = 540, n_alt = 14
   Insn 411: point = 542, n_alt = 0
   Insn 410: point = 544, n_alt = 3
   Insn 409: point = 545, n_alt = 1
   Insn 408: point = 547, n_alt = 0
   Insn 407: point = 549, n_alt = 0
   Insn 406: point = 550, n_alt = 2
  BB 22
   Insn 403: point = 551, n_alt = 1
   Insn 402: point = 552, n_alt = 0
   Insn 401: point = 553, n_alt = 0
   Insn 400: point = 553, n_alt = 15
   Insn 399: point = 554, n_alt = 1
   Insn 398: point = 556, n_alt = 14
   Insn 397: point = 557, n_alt = -2
   Insn 396: point = 558, n_alt = 0
   Insn 395: point = 558, n_alt = -2
   Insn 682: point = 559, n_alt = 14
	Hard reg 20 is preferable by r433 with profit 1000
   Insn 394: point = 561, n_alt = 0
   Insn 393: point = 563, n_alt = 1
   Insn 392: point = 565, n_alt = 0
   Insn 391: point = 566, n_alt = 0
   Insn 390: point = 568, n_alt = 0
   Insn 681: point = 570, n_alt = 1
	Hard reg 0 is preferable by r432 with profit 1000
   Insn 389: point = 572, n_alt = 0
   Insn 388: point = 574, n_alt = 0
   Insn 387: point = 576, n_alt = 3
   Insn 386: point = 577, n_alt = 1
   Insn 385: point = 579, n_alt = 0
   Insn 384: point = 581, n_alt = 0
   Insn 383: point = 582, n_alt = 0
   Insn 382: point = 584, n_alt = 0
   Insn 381: point = 585, n_alt = 0
   Insn 380: point = 587, n_alt = 0
   Insn 379: point = 588, n_alt = 0
   Insn 680: point = 590, n_alt = 1
	Hard reg 0 is preferable by r431 with profit 1000
   Insn 378: point = 592, n_alt = 1
   Insn 377: point = 594, n_alt = 0
   Insn 376: point = 595, n_alt = 0
   Insn 679: point = 595, n_alt = 1
   Insn 375: point = 596, n_alt = 0
   Insn 374: point = 597, n_alt = 0
   Insn 373: point = 597, n_alt = 0
   Insn 372: point = 597, n_alt = 3
   Insn 371: point = 597, n_alt = -2
   Insn 370: point = 598, n_alt = 4
   Insn 369: point = 599, n_alt = 21
   Insn 368: point = 600, n_alt = -2
   Insn 367: point = 601, n_alt = 4
   Insn 366: point = 601, n_alt = 4
   Insn 365: point = 601, n_alt = 0
   Insn 364: point = 602, n_alt = 8
   Insn 678: point = 603, n_alt = -2
	Hard reg 1 is preferable by r429 with profit 1000
   Insn 363: point = 605, n_alt = 1
   Insn 677: point = 606, n_alt = -2
	Hard reg 1 is preferable by r429 with profit 1000
	Hard reg 0 is preferable by r429 with profit 1000
   Insn 362: point = 608, n_alt = 0
   Insn 361: point = 609, n_alt = 1
   Insn 360: point = 611, n_alt = 0
   Insn 359: point = 612, n_alt = 0
  BB 21
   Insn 356: point = 613, n_alt = 1
   Insn 355: point = 614, n_alt = 0
   Insn 354: point = 616, n_alt = 0
   Insn 353: point = 617, n_alt = -1
   Insn 352: point = 619, n_alt = 15
   Insn 351: point = 620, n_alt = 0
   Insn 350: point = 620, n_alt = -2
   Insn 675: point = 621, n_alt = 14
	Hard reg 20 is preferable by r427 with profit 1000
   Insn 349: point = 623, n_alt = 0
   Insn 348: point = 625, n_alt = 1
   Insn 347: point = 627, n_alt = 0
   Insn 346: point = 628, n_alt = 0
   Insn 345: point = 630, n_alt = 0
   Insn 344: point = 631, n_alt = 1
   Insn 343: point = 633, n_alt = 0
   Insn 342: point = 634, n_alt = 0
   Insn 341: point = 636, n_alt = 0
   Insn 340: point = 637, n_alt = 0
  BB 20
   Insn 335: point = 638, n_alt = -1
   Insn 334: point = 638, n_alt = 0
   Insn 333: point = 639, n_alt = 0
   Insn 332: point = 640, n_alt = 0
   Insn 331: point = 642, n_alt = 0
   Insn 330: point = 643, n_alt = 0
   Insn 329: point = 644, n_alt = 0
   Insn 328: point = 644, n_alt = -2
   Insn 327: point = 645, n_alt = 4
  BB 19
   Insn 325: point = 646, n_alt = -1
   Insn 324: point = 646, n_alt = 0
   Insn 323: point = 647, n_alt = 0
   Insn 322: point = 649, n_alt = 0
   Insn 321: point = 651, n_alt = 3
   Insn 320: point = 652, n_alt = 1
   Insn 319: point = 654, n_alt = 0
   Insn 318: point = 656, n_alt = 0
 r82: [244..245]
 r83: [292..293]
 r84: [289..291]
 r85: [287..288]
 r86: [273..286]
 r87: [282..283]
 r88: [280..281]
 r89: [277..279]
 r90: [275..276]
 r91: [271..274]
 r92: [257..268]
 r93: [264..265]
 r94: [261..263]
 r95: [259..260]
 r96: [256..258]
 r97: [220..221]
 r98: [146..147]
 r99: [143..145]
 r100: [138..142]
 r101: [138..139]
 r102: [134..135]
 r103: [131..133]
 r104: [126..130]
 r105: [126..127]
 r106: [120..123]
 r107: [216..217]
 r108: [213..215]
 r109: [206..207]
 r110: [204..205]
 r111: [201..203]
 r112: [194..195]
 r113: [191..193]
 r114: [186..190]
 r115: [186..187]
 r116: [180..183]
 r117: [174..175]
 r118: [172..173]
 r119: [169..171]
 r120: [164..168]
 r121: [164..165]
 r122: [158..161]
 r123: [114..115]
 r124: [112..113]
 r125: [110..111]
 r126: [385..386]
 r127: [382..384]
 r128: [380..381]
 r129: [377..379]
 r130: [373..374]
 r131: [370..372]
 r132: [368..369]
 r133: [365..367]
 r134: [361..362]
 r135: [358..360]
 r136: [356..357]
 r137: [344..345]
 r138: [341..343]
 r139: [331..340]
 r140: [336..337]
 r141: [333..335]
 r142: [329..332]
 r143: [329..330]
 r144: [325..326]
 r145: [323..324]
 r146: [320..322]
 r147: [308..319]
 r148: [315..316]
 r149: [313..314]
 r150: [310..312]
 r151: [306..309]
 r152: [306..307]
 r153: [302..303]
 r154: [299..301]
 r155: [296..298]
 r156: [653..654]
 r157: [650..652]
 r158: [648..649]
 r159: [646..647]
 r160: [641..643]
 r161: [638..640]
 r162: [635..637]
 r163: [632..634]
 r164: [629..631]
 r165: [629..630]
 r166: [626..628]
 r167: [624..625]
 r168: [620..621]
 r169: [615..617]
 r170: [610..612]
 r171: [601..609]
 r172: [600..603]
 r173: [591..592]
 r174: [586..588]
 r175: [583..585]
 r176: [583..584]
 r177: [567..582]
 r178: [578..579]
 r179: [575..577]
 r180: [573..574]
 r181: [571..572]
 r182: [567..568]
 r183: [564..566]
 r184: [562..563]
 r185: [558..559]
 r186: [538..550]
 r187: [546..547]
 r188: [543..545]
 r189: [541..542]
 r190: [538..540]
 r191: [532..533]
 r192: [527..529]
 r193: [524..526]
 r194: [524..525]
 r195: [508..523]
 r196: [519..520]
 r197: [516..518]
 r198: [514..515]
 r199: [512..513]
 r200: [508..509]
 r201: [505..507]
 r202: [503..504]
 r203: [499..500]
 r204: [488..489]
 r205: [486..487]
 r206: [483..485]
 r207: [481..482]
 r208: [477..478]
 r209: [474..476]
 r210: [468..469]
 r211: [465..467]
 r212: [463..464]
 r213: [461..462]
 r214: [457..458]
 r215: [452..454]
 r216: [449..451]
 r217: [449..450]
 r218: [433..448]
 r219: [444..445]
 r220: [441..443]
 r221: [439..440]
 r222: [437..438]
 r223: [433..434]
 r224: [430..432]
 r225: [428..429]
 r226: [424..425]
 r227: [416..418]
 r228: [406..415]
 r229: [404..409]
 r230: [396..398]
 r231: [393..395]
 r232: [90..91]
 r233: [85..87]
 r234: [82..84]
 r235: [82..83]
 r236: [66..81]
 r237: [77..78]
 r238: [74..76]
 r239: [72..73]
 r240: [70..71]
 r241: [66..67]
 r242: [63..65]
 r243: [61..62]
 r244: [57..58]
 r245: [49..51]
 r246: [46..48]
 r247: [43..45]
 r248: [40..42]
 r249: [37..39]
 r250: [37..38]
 r251: [34..36]
 r252: [32..33]
 r253: [28..29]
 r254: [23..25]
 r255: [54..56]
 r256: [26..27]
 r257: [5..6]
 r258: [618..619]
 r259: [555..557]
 r260: [496..498]
 r261: [421..423]
 r262: [0..4]
 r263: [252..253]
 r264: [250..251]
 r265: [246..247]
 r266: [236..237]
 r267: [234..235]
 r268: [232..233]
 r269: [230..231]
 r270: [228..229]
 r271: [226..227]
 r272: [294..295]
 r273: [289..290]
 r274: [284..285]
 r275: [277..278]
 r276: [266..267]
 r277: [261..262]
 r278: [254..255]
 r279: [224..225]
 r280: [222..223]
 r281: [153..155]
 r282: [152..154]
 r283: [150..151]
 r284: [148..149]
 r285: [143..144]
 r286: [140..141]
 r287: [136..137]
 r288: [131..132]
 r289: [128..129]
 r290: [124..125]
 r291: [121..122]
 r292: [118..119]
 r293: [218..219]
 r294: [212..214]
 r295: [210..211]
 r296: [208..209]
 r297: [200..202]
 r298: [198..199]
 r299: [196..197]
 r300: [191..192]
 r301: [188..189]
 r302: [184..185]
 r303: [181..182]
 r304: [178..179]
 r305: [176..177]
 r306: [169..170]
 r307: [166..167]
 r308: [162..163]
 r309: [159..160]
 r310: [156..157]
 r311: [116..117]
 r312: [108..109]
 r313: [350..351]
 r314: [387..388]
 r315: [382..383]
 r316: [377..378]
 r317: [375..376]
 r318: [370..371]
 r319: [365..366]
 r320: [363..364]
 r321: [358..359]
 r322: [354..355]
 r323: [352..353]
 r324: [348..349]
 r325: [346..347]
 r326: [341..342]
 r327: [338..339]
 r328: [333..334]
 r329: [327..328]
 r330: [320..321]
 r331: [317..318]
 r332: [310..311]
 r333: [304..305]
 r334: [299..300]
 r335: [296..297]
 r336: [106..107]
 r337: [104..105]
 r338: [102..103]
 r339: [100..101]
 r340: [98..99]
 r341: [96..97]
 r342: [655..656]
 r343: [650..651]
 r344: [644..645]
 r345: [641..642]
 r346: [638..639]
 r347: [635..636]
 r348: [632..633]
 r349: [626..627]
 r350: [613..614]
 r351: [615..616]
 r352: [610..611]
 r353: [607..608]
 r354: [599..602]
 r355: [597..598]
 r356: [593..594]
 r357: [586..587]
 r358: [580..581]
 r359: [575..576]
 r360: [564..565]
 r361: [553..554]
 r362: [555..556]
 r363: [551..552]
 r364: [548..549]
 r365: [543..544]
 r366: [536..537]
 r367: [534..535]
 r368: [527..528]
 r369: [521..522]
 r370: [516..517]
 r371: [505..506]
 r372: [494..495]
 r373: [496..497]
 r374: [492..493]
 r375: [490..491]
 r376: [483..484]
 r377: [472..473]
 r378: [474..475]
 r379: [470..471]
 r380: [465..466]
 r381: [459..460]
 r382: [452..453]
 r383: [446..447]
 r384: [441..442]
 r385: [430..431]
 r386: [419..420]
 r387: [421..422]
 r388: [416..417]
 r389: [413..414]
 r390: [405..408]
 r391: [403..407]
 r392: [401..402]
 r393: [399..400]
 r394: [396..397]
 r395: [391..392]
 r396: [393..394]
 r397: [94..95]
 r398: [92..93]
 r399: [85..86]
 r400: [79..80]
 r401: [74..75]
 r402: [63..64]
 r403: [52..53]
 r404: [54..55]
 r405: [49..50]
 r406: [46..47]
 r407: [43..44]
 r408: [40..41]
 r409: [34..35]
 r410: [21..22]
 r411: [23..24]
 r412: [19..20]
 r413: [17..18]
 r414: [15..16]
 r415: [13..14]
 r416: [11..12]
 r417: [7..8]
 r418: [9..10]
 r420: [248..249]
 r421: [2..3]
 r423: [238..239]
 r424: [240..241]
 r425: [242..243]
 r426: [269..272]
 r427: [622..623]
 r429: [604..606]
 r430: [595..596]
 r431: [589..590]
 r432: [569..570]
 r433: [560..561]
 r434: [530..531]
 r435: [510..511]
 r436: [501..502]
 r437: [479..480]
 r439: [455..456]
 r440: [435..436]
 r441: [426..427]
 r442: [410..412]
 r443: [389..390]
 r444: [88..89]
 r445: [68..69]
 r446: [59..60]
 r447: [30..31]
Compressing live ranges: from 657 to 552 - 84%
Ranges after the compression:
 r82: [208..209]
 r83: [248..249]
 r84: [246..247]
 r85: [244..245]
 r86: [232..243]
 r87: [240..241]
 r88: [238..239]
 r89: [236..237]
 r90: [234..235]
 r91: [230..233]
 r92: [220..229]
 r93: [226..227]
 r94: [224..225]
 r95: [222..223]
 r96: [220..221]
 r97: [184..185]
 r98: [124..125]
 r99: [122..123]
 r100: [118..121]
 r101: [118..119]
 r102: [114..115]
 r103: [112..113]
 r104: [108..111]
 r105: [108..109]
 r106: [104..105]
 r107: [180..181]
 r108: [178..179]
 r109: [172..173]
 r110: [170..171]
 r111: [168..169]
 r112: [162..163]
 r113: [160..161]
 r114: [156..159]
 r115: [156..157]
 r116: [152..153]
 r117: [146..147]
 r118: [144..145]
 r119: [142..143]
 r120: [138..141]
 r121: [138..139]
 r122: [134..135]
 r123: [98..99]
 r124: [96..97]
 r125: [94..95]
 r126: [328..329]
 r127: [326..327]
 r128: [324..325]
 r129: [322..323]
 r130: [318..319]
 r131: [316..317]
 r132: [314..315]
 r133: [312..313]
 r134: [308..309]
 r135: [306..307]
 r136: [304..305]
 r137: [292..293]
 r138: [290..291]
 r139: [282..289]
 r140: [286..287]
 r141: [284..285]
 r142: [280..283]
 r143: [280..281]
 r144: [276..277]
 r145: [274..275]
 r146: [272..273]
 r147: [262..271]
 r148: [268..269]
 r149: [266..267]
 r150: [264..265]
 r151: [260..263]
 r152: [260..261]
 r153: [256..257]
 r154: [254..255]
 r155: [252..253]
 r156: [548..549]
 r157: [546..547]
 r158: [544..545]
 r159: [542..543]
 r160: [538..539]
 r161: [536..537]
 r162: [534..535]
 r163: [532..533]
 r164: [530..531]
 r165: [530..531]
 r166: [528..529]
 r167: [526..527]
 r168: [522..523]
 r169: [518..519]
 r170: [514..515]
 r171: [508..513]
 r172: [508..509]
 r173: [500..501]
 r174: [496..497]
 r175: [494..495]
 r176: [494..495]
 r177: [480..493]
 r178: [490..491]
 r179: [488..489]
 r180: [486..487]
 r181: [484..485]
 r182: [480..481]
 r183: [478..479]
 r184: [476..477]
 r185: [472..473]
 r186: [456..465]
 r187: [462..463]
 r188: [460..461]
 r189: [458..459]
 r190: [456..457]
 r191: [450..451]
 r192: [446..447]
 r193: [444..445]
 r194: [444..445]
 r195: [430..443]
 r196: [440..441]
 r197: [438..439]
 r198: [436..437]
 r199: [434..435]
 r200: [430..431]
 r201: [428..429]
 r202: [426..427]
 r203: [422..423]
 r204: [412..413]
 r205: [410..411]
 r206: [408..409]
 r207: [406..407]
 r208: [402..403]
 r209: [400..401]
 r210: [394..395]
 r211: [392..393]
 r212: [390..391]
 r213: [388..389]
 r214: [384..385]
 r215: [380..381]
 r216: [378..379]
 r217: [378..379]
 r218: [364..377]
 r219: [374..375]
 r220: [372..373]
 r221: [370..371]
 r222: [368..369]
 r223: [364..365]
 r224: [362..363]
 r225: [360..361]
 r226: [356..357]
 r227: [350..351]
 r228: [344..349]
 r229: [344..345]
 r230: [338..339]
 r231: [336..337]
 r232: [74..75]
 r233: [70..71]
 r234: [68..69]
 r235: [68..69]
 r236: [54..67]
 r237: [64..65]
 r238: [62..63]
 r239: [60..61]
 r240: [58..59]
 r241: [54..55]
 r242: [52..53]
 r243: [50..51]
 r244: [46..47]
 r245: [40..41]
 r246: [38..39]
 r247: [36..37]
 r248: [34..35]
 r249: [32..33]
 r250: [32..33]
 r251: [30..31]
 r252: [28..29]
 r253: [24..25]
 r254: [20..21]
 r255: [44..45]
 r256: [22..23]
 r257: [2..3]
 r258: [520..521]
 r259: [470..471]
 r260: [420..421]
 r261: [354..355]
 r262: [0..1]
 r263: [216..217]
 r264: [214..215]
 r265: [210..211]
 r266: [200..201]
 r267: [198..199]
 r268: [196..197]
 r269: [194..195]
 r270: [192..193]
 r271: [190..191]
 r272: [250..251]
 r273: [246..247]
 r274: [242..243]
 r275: [236..237]
 r276: [228..229]
 r277: [224..225]
 r278: [218..219]
 r279: [188..189]
 r280: [186..187]
 r281: [130..131]
 r282: [130..131]
 r283: [128..129]
 r284: [126..127]
 r285: [122..123]
 r286: [120..121]
 r287: [116..117]
 r288: [112..113]
 r289: [110..111]
 r290: [106..107]
 r291: [104..105]
 r292: [102..103]
 r293: [182..183]
 r294: [178..179]
 r295: [176..177]
 r296: [174..175]
 r297: [168..169]
 r298: [166..167]
 r299: [164..165]
 r300: [160..161]
 r301: [158..159]
 r302: [154..155]
 r303: [152..153]
 r304: [150..151]
 r305: [148..149]
 r306: [142..143]
 r307: [140..141]
 r308: [136..137]
 r309: [134..135]
 r310: [132..133]
 r311: [100..101]
 r312: [92..93]
 r313: [298..299]
 r314: [330..331]
 r315: [326..327]
 r316: [322..323]
 r317: [320..321]
 r318: [316..317]
 r319: [312..313]
 r320: [310..311]
 r321: [306..307]
 r322: [302..303]
 r323: [300..301]
 r324: [296..297]
 r325: [294..295]
 r326: [290..291]
 r327: [288..289]
 r328: [284..285]
 r329: [278..279]
 r330: [272..273]
 r331: [270..271]
 r332: [264..265]
 r333: [258..259]
 r334: [254..255]
 r335: [252..253]
 r336: [90..91]
 r337: [88..89]
 r338: [86..87]
 r339: [84..85]
 r340: [82..83]
 r341: [80..81]
 r342: [550..551]
 r343: [546..547]
 r344: [540..541]
 r345: [538..539]
 r346: [536..537]
 r347: [534..535]
 r348: [532..533]
 r349: [528..529]
 r350: [516..517]
 r351: [518..519]
 r352: [514..515]
 r353: [512..513]
 r354: [508..509]
 r355: [506..507]
 r356: [502..503]
 r357: [496..497]
 r358: [492..493]
 r359: [488..489]
 r360: [478..479]
 r361: [468..469]
 r362: [470..471]
 r363: [466..467]
 r364: [464..465]
 r365: [460..461]
 r366: [454..455]
 r367: [452..453]
 r368: [446..447]
 r369: [442..443]
 r370: [438..439]
 r371: [428..429]
 r372: [418..419]
 r373: [420..421]
 r374: [416..417]
 r375: [414..415]
 r376: [408..409]
 r377: [398..399]
 r378: [400..401]
 r379: [396..397]
 r380: [392..393]
 r381: [386..387]
 r382: [380..381]
 r383: [376..377]
 r384: [372..373]
 r385: [362..363]
 r386: [352..353]
 r387: [354..355]
 r388: [350..351]
 r389: [348..349]
 r390: [344..345]
 r391: [344..345]
 r392: [342..343]
 r393: [340..341]
 r394: [338..339]
 r395: [334..335]
 r396: [336..337]
 r397: [78..79]
 r398: [76..77]
 r399: [70..71]
 r400: [66..67]
 r401: [62..63]
 r402: [52..53]
 r403: [42..43]
 r404: [44..45]
 r405: [40..41]
 r406: [38..39]
 r407: [36..37]
 r408: [34..35]
 r409: [30..31]
 r410: [18..19]
 r411: [20..21]
 r412: [16..17]
 r413: [14..15]
 r414: [12..13]
 r415: [10..11]
 r416: [8..9]
 r417: [4..5]
 r418: [6..7]
 r420: [212..213]
 r421: [0..1]
 r423: [202..203]
 r424: [204..205]
 r425: [206..207]
 r426: [230..231]
 r427: [524..525]
 r429: [510..511]
 r430: [504..505]
 r431: [498..499]
 r432: [482..483]
 r433: [474..475]
 r434: [448..449]
 r435: [432..433]
 r436: [424..425]
 r437: [404..405]
 r439: [382..383]
 r440: [366..367]
 r441: [358..359]
 r442: [346..347]
 r443: [332..333]
 r444: [72..73]
 r445: [56..57]
 r446: [48..49]
 r447: [26..27]

********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 586:  (0) =f  (1) fm {*extenddfxf2_i387}
      Creating newreg=449 from oldreg=256, assigning class FLOAT_REGS to r449
      Making reload reg 449 for reg 256 optional
  586: r254:XF=float_extend(r449:DF)
      REG_DEAD r256:DF
    Inserting insn reload before:
  699: r449:DF=r256:DF

            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=3,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 699:  (0) =Yf*f  (1) Yf*fm {*movdf_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 457:  (0) =f  (1) fm {*extenddfxf2_i387}
      Creating newreg=450 from oldreg=208, assigning class FLOAT_REGS to r450
      Making reload reg 450 for reg 208 optional
  457: r209:XF=float_extend(r450:DF)
      REG_DEAD r208:DF
    Inserting insn reload before:
  700: r450:DF=r208:DF

            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=3,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 700:  (0) =Yf*f  (1) Yf*fm {*movdf_internal}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 353:  (0) =f  (1) fm {*extenddfxf2_i387}
      Creating newreg=451 from oldreg=258, assigning class FLOAT_REGS to r451
      Making reload reg 451 for reg 258 optional
  353: r169:XF=float_extend(r451:DF)
      REG_DEAD r258:DF
    Inserting insn reload before:
  701: r451:DF=r258:DF

            0 Non pseudo reload: reject++
            0 Non pseudo costly reload: reject++
            1 Non pseudo reload: reject++
          alt=0,overall=3,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 701:  (0) =Yf*f  (1) Yf*fm {*movdf_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #2: **********

EBB 2
EBB 3
EBB 4 5 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11 12 13
EBB 14
EBB 15 16
EBB 17 18
EBB 19 20 21
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Rejecting inheritance for 258 because of disjoint classes ALL_REGS and NO_REGS
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 22
EBB 23 24 25
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Rejecting inheritance for 208 because of disjoint classes ALL_SSE_REGS and NO_REGS
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 26 27 28
EBB 29
EBB 30
EBB 31 32 33
    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    Rejecting inheritance for 256 because of disjoint classes ALL_REGS and NO_REGS
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EBB 34 35
EBB 36 37
EBB 38 39
EBB 40

********** Pseudo live ranges #3: **********

  BB 39
   Insn 633: point = 0, n_alt = 0
  BB 40
   Insn 637: point = 0, n_alt = -1
   Insn 636: point = 0, n_alt = 21
  BB 38
   Insn 632: point = 2, n_alt = -1
   Insn 631: point = 2, n_alt = 0
   Insn 627: point = 4, n_alt = 20
   Insn 624: point = 6, n_alt = 14
  BB 35
   Insn 667: point = 7, n_alt = -1
   Insn 612: point = 7, n_alt = 15
   Insn 611: point = 8, n_alt = 14
  BB 37
   Insn 621: point = 9, n_alt = 15
   Insn 620: point = 10, n_alt = 14
  BB 36
   Insn 618: point = 11, n_alt = -1
   Insn 617: point = 11, n_alt = 0
  BB 34
   Insn 609: point = 11, n_alt = -1
   Insn 608: point = 11, n_alt = 0
   Insn 607: point = 11, n_alt = 0
   Insn 606: point = 11, n_alt = -2
   Insn 605: point = 12, n_alt = 3
   Insn 604: point = 13, n_alt = 0
   Insn 603: point = 13, n_alt = -2
   Insn 602: point = 14, n_alt = 3
   Insn 601: point = 15, n_alt = 0
   Insn 600: point = 16, n_alt = 0
   Insn 599: point = 17, n_alt = 0
   Insn 598: point = 18, n_alt = 0
   Insn 597: point = 19, n_alt = 0
   Insn 596: point = 19, n_alt = 0
   Insn 595: point = 19, n_alt = 3
   Insn 594: point = 19, n_alt = -2
   Insn 593: point = 20, n_alt = 4
   Insn 592: point = 21, n_alt = 4
  BB 33
   Insn 589: point = 21, n_alt = 1
   Insn 588: point = 22, n_alt = 0
   Insn 587: point = 24, n_alt = 0
   Insn 586: point = 25, n_alt = 0
   Insn 699: point = 27, n_alt = 0
   Insn 585: point = 29, n_alt = 15
   Insn 584: point = 30, n_alt = 0
   Insn 583: point = 30, n_alt = -2
   Insn 697: point = 31, n_alt = 14
	Hard reg 20 is preferable by r447 with profit 1000
   Insn 582: point = 33, n_alt = 0
   Insn 581: point = 35, n_alt = 1
   Insn 580: point = 37, n_alt = 0
   Insn 579: point = 38, n_alt = 0
   Insn 578: point = 40, n_alt = 0
   Insn 577: point = 41, n_alt = 1
   Insn 576: point = 43, n_alt = 0
   Insn 575: point = 44, n_alt = 0
   Insn 574: point = 46, n_alt = 0
   Insn 573: point = 47, n_alt = 0
  BB 32
   Insn 568: point = 48, n_alt = -1
   Insn 567: point = 48, n_alt = 0
   Insn 566: point = 49, n_alt = 0
   Insn 565: point = 50, n_alt = 0
   Insn 564: point = 52, n_alt = 0
   Insn 563: point = 53, n_alt = 0
   Insn 562: point = 54, n_alt = 15
   Insn 561: point = 55, n_alt = 1
   Insn 560: point = 57, n_alt = 14
   Insn 559: point = 58, n_alt = -2
   Insn 558: point = 59, n_alt = 0
   Insn 557: point = 59, n_alt = -2
   Insn 696: point = 60, n_alt = 14
	Hard reg 20 is preferable by r446 with profit 1000
   Insn 556: point = 62, n_alt = 0
   Insn 555: point = 64, n_alt = 1
   Insn 554: point = 66, n_alt = 0
   Insn 553: point = 67, n_alt = 0
   Insn 552: point = 69, n_alt = 0
   Insn 695: point = 71, n_alt = 1
	Hard reg 0 is preferable by r445 with profit 1000
   Insn 551: point = 73, n_alt = 0
   Insn 550: point = 75, n_alt = 0
   Insn 549: point = 77, n_alt = 3
   Insn 548: point = 78, n_alt = 1
   Insn 547: point = 80, n_alt = 0
   Insn 546: point = 82, n_alt = 0
   Insn 545: point = 83, n_alt = 0
   Insn 544: point = 85, n_alt = 0
   Insn 543: point = 86, n_alt = 0
   Insn 542: point = 88, n_alt = 0
   Insn 541: point = 89, n_alt = 0
   Insn 694: point = 91, n_alt = 1
	Hard reg 0 is preferable by r444 with profit 1000
   Insn 540: point = 93, n_alt = 1
   Insn 539: point = 95, n_alt = 0
  BB 31
   Insn 537: point = 96, n_alt = -1
   Insn 536: point = 96, n_alt = 1
   Insn 535: point = 97, n_alt = 0
  BB 18
   Insn 665: point = 98, n_alt = -1
   Insn 314: point = 98, n_alt = 0
   Insn 313: point = 98, n_alt = -2
   Insn 312: point = 99, n_alt = 4
   Insn 311: point = 100, n_alt = 15
   Insn 310: point = 101, n_alt = 14
   Insn 309: point = 102, n_alt = 1
   Insn 308: point = 103, n_alt = 0
   Insn 307: point = 104, n_alt = 1
   Insn 306: point = 105, n_alt = 0
   Insn 305: point = 106, n_alt = 1
   Insn 304: point = 107, n_alt = 0
   Insn 303: point = 108, n_alt = 1
   Insn 302: point = 108, n_alt = 1
   Insn 301: point = 108, n_alt = 1
   Insn 300: point = 108, n_alt = 1
   Insn 299: point = 108, n_alt = 1
   Insn 298: point = 108, n_alt = 1
  BB 17
   Insn 296: point = 108, n_alt = -1
   Insn 295: point = 108, n_alt = 1
   Insn 294: point = 109, n_alt = 0
  BB 9
   Insn 661: point = 110, n_alt = -1
   Insn 202: point = 110, n_alt = 1
   Insn 201: point = 110, n_alt = 5
   Insn 200: point = 111, n_alt = -2
   Insn 199: point = 112, n_alt = 0
   Insn 198: point = 112, n_alt = -2
   Insn 197: point = 113, n_alt = 0
   Insn 196: point = 115, n_alt = 0
   Insn 195: point = 117, n_alt = 0
   Insn 194: point = 119, n_alt = 0
  BB 8
   Insn 191: point = 120, n_alt = -1
   Insn 190: point = 120, n_alt = 1
  BB 6
   Insn 659: point = 120, n_alt = -1
   Insn 125: point = 120, n_alt = 5
   Insn 124: point = 121, n_alt = -2
   Insn 123: point = 122, n_alt = 0
   Insn 122: point = 122, n_alt = -2
   Insn 121: point = 123, n_alt = -2
   Insn 120: point = 124, n_alt = 3
   Insn 119: point = 125, n_alt = 3
   Insn 118: point = 127, n_alt = 3
   Insn 117: point = 128, n_alt = 0
   Insn 116: point = 128, n_alt = 9
   Insn 115: point = 129, n_alt = 20
   Insn 114: point = 130, n_alt = 0
   Insn 113: point = 130, n_alt = -2
   Insn 112: point = 131, n_alt = 3
   Insn 111: point = 132, n_alt = 3
   Insn 110: point = 134, n_alt = 3
   Insn 109: point = 135, n_alt = 1
   Insn 108: point = 137, n_alt = 0
   Insn 107: point = 139, n_alt = 0
   Insn 106: point = 140, n_alt = 0
   Insn 105: point = 140, n_alt = 9
   Insn 104: point = 141, n_alt = 20
   Insn 103: point = 142, n_alt = 0
   Insn 102: point = 142, n_alt = -2
   Insn 101: point = 143, n_alt = 3
   Insn 100: point = 144, n_alt = 3
   Insn 99: point = 146, n_alt = 3
   Insn 98: point = 147, n_alt = 1
   Insn 97: point = 149, n_alt = 0
   Insn 96: point = 151, n_alt = 0
   Insn 95: point = 152, n_alt = 5
   Insn 94: point = 153, n_alt = -2
   Insn 93: point = 154, n_alt = 0
   Insn 92: point = 154, n_alt = -2
   Insn 91: point = 155, n_alt = -2
   Insn 90: point = 156, n_alt = 3
   Insn 89: point = 157, n_alt = 3
  BB 7
   Insn 186: point = 158, n_alt = 0
   Insn 185: point = 158, n_alt = 5
   Insn 184: point = 159, n_alt = -2
   Insn 183: point = 160, n_alt = 0
   Insn 182: point = 160, n_alt = -2
   Insn 181: point = 161, n_alt = -2
   Insn 180: point = 162, n_alt = 3
   Insn 179: point = 163, n_alt = 3
   Insn 178: point = 165, n_alt = 3
   Insn 177: point = 166, n_alt = 9
   Insn 176: point = 167, n_alt = 20
   Insn 175: point = 168, n_alt = 0
   Insn 174: point = 168, n_alt = -2
   Insn 173: point = 169, n_alt = 3
   Insn 172: point = 170, n_alt = 3
   Insn 171: point = 172, n_alt = 3
   Insn 170: point = 173, n_alt = 1
   Insn 169: point = 175, n_alt = 0
   Insn 168: point = 177, n_alt = 0
   Insn 167: point = 179, n_alt = 0
   Insn 166: point = 180, n_alt = 5
   Insn 165: point = 181, n_alt = -2
   Insn 164: point = 182, n_alt = 0
   Insn 163: point = 182, n_alt = -2
   Insn 162: point = 183, n_alt = -2
   Insn 161: point = 184, n_alt = 3
   Insn 160: point = 185, n_alt = 3
   Insn 159: point = 187, n_alt = 3
   Insn 158: point = 188, n_alt = 9
   Insn 157: point = 189, n_alt = 20
   Insn 156: point = 190, n_alt = 0
   Insn 155: point = 190, n_alt = -2
   Insn 154: point = 191, n_alt = 3
   Insn 153: point = 192, n_alt = 3
   Insn 152: point = 194, n_alt = 3
   Insn 151: point = 195, n_alt = 1
   Insn 150: point = 197, n_alt = 0
   Insn 149: point = 199, n_alt = 0
   Insn 148: point = 200, n_alt = 5
   Insn 147: point = 201, n_alt = -2
   Insn 146: point = 202, n_alt = 0
   Insn 145: point = 202, n_alt = -2
   Insn 144: point = 203, n_alt = -2
   Insn 143: point = 204, n_alt = 3
   Insn 142: point = 205, n_alt = 1
   Insn 141: point = 207, n_alt = 0
   Insn 140: point = 209, n_alt = 0
   Insn 139: point = 211, n_alt = 0
   Insn 138: point = 212, n_alt = 0
   Insn 137: point = 212, n_alt = 3
   Insn 136: point = 212, n_alt = -2
   Insn 135: point = 213, n_alt = 4
   Insn 134: point = 214, n_alt = -2
   Insn 133: point = 215, n_alt = -2
   Insn 132: point = 216, n_alt = 3
   Insn 131: point = 217, n_alt = 0
   Insn 130: point = 219, n_alt = 4
   Insn 129: point = 221, n_alt = 3
  BB 5
   Insn 87: point = 222, n_alt = -1
   Insn 86: point = 222, n_alt = 0
   Insn 85: point = 223, n_alt = 4
   Insn 84: point = 225, n_alt = 3
   Insn 83: point = 226, n_alt = 1
   Insn 82: point = 226, n_alt = 5
   Insn 81: point = 227, n_alt = -2
   Insn 80: point = 228, n_alt = 0
   Insn 79: point = 228, n_alt = 2
  BB 4
   Insn 77: point = 228, n_alt = -1
   Insn 76: point = 228, n_alt = 0
  BB 2
   Insn 657: point = 228, n_alt = -1
   Insn 40: point = 228, n_alt = 1
   Insn 39: point = 228, n_alt = 8
   Insn 38: point = 228, n_alt = 1
   Insn 37: point = 228, n_alt = 0
   Insn 36: point = 228, n_alt = 3
   Insn 35: point = 228, n_alt = -2
   Insn 34: point = 229, n_alt = 4
   Insn 33: point = 230, n_alt = 21
   Insn 32: point = 231, n_alt = 8
   Insn 31: point = 232, n_alt = 5
   Insn 30: point = 232, n_alt = 9
   Insn 29: point = 233, n_alt = 20
   Insn 28: point = 234, n_alt = 0
   Insn 27: point = 234, n_alt = -2
   Insn 26: point = 235, n_alt = 3
   Insn 25: point = 236, n_alt = 9
   Insn 24: point = 237, n_alt = 20
   Insn 23: point = 238, n_alt = 0
   Insn 22: point = 238, n_alt = -2
   Insn 21: point = 239, n_alt = 3
   Insn 670: point = 240, n_alt = 1
   Insn 20: point = 241, n_alt = 0
   Insn 672: point = 243, n_alt = 0
	   Creating copy r424<-r425@1000
   Insn 671: point = 245, n_alt = -1
	Hard reg 20 is preferable by r425 with profit 1000
   Insn 19: point = 247, n_alt = -2
   Insn 18: point = 248, n_alt = 0
   Insn 17: point = 248, n_alt = -2
   Insn 16: point = 249, n_alt = 3
   Insn 13: point = 250, n_alt = 0
   Insn 11: point = 252, n_alt = 5
   Insn 10: point = 253, n_alt = 3
   Insn 9: point = 254, n_alt = 5
   Insn 8: point = 255, n_alt = 3
   Insn 7: point = 256, n_alt = 5
   Insn 6: point = 256, n_alt = 5
   Insn 5: point = 256, n_alt = 5
   Insn 4: point = 256, n_alt = 5
   Insn 3: point = 256, n_alt = 1
   Insn 2: point = 256, n_alt = 5
  BB 3
   Insn 70: point = 256, n_alt = 0
   Insn 69: point = 256, n_alt = 0
   Insn 68: point = 256, n_alt = 3
   Insn 67: point = 256, n_alt = -2
   Insn 66: point = 257, n_alt = 4
   Insn 65: point = 258, n_alt = -2
   Insn 64: point = 259, n_alt = -2
   Insn 63: point = 260, n_alt = 0
   Insn 62: point = 262, n_alt = 0
   Insn 61: point = 264, n_alt = 3
   Insn 60: point = 265, n_alt = 1
   Insn 59: point = 267, n_alt = 0
   Insn 58: point = 269, n_alt = 0
   Insn 674: point = 270, n_alt = -2
	Hard reg 1 is preferable by r426 with profit 1000
   Insn 57: point = 272, n_alt = 0
   Insn 673: point = 274, n_alt = -2
	Hard reg 1 is preferable by r426 with profit 1000
	Hard reg 0 is preferable by r426 with profit 1000
   Insn 56: point = 276, n_alt = 0
   Insn 55: point = 278, n_alt = 0
   Insn 54: point = 280, n_alt = 3
   Insn 53: point = 281, n_alt = 3
   Insn 52: point = 283, n_alt = 0
   Insn 51: point = 285, n_alt = 1
   Insn 50: point = 287, n_alt = 0
   Insn 49: point = 288, n_alt = 0
   Insn 48: point = 290, n_alt = 0
   Insn 47: point = 292, n_alt = 3
   Insn 46: point = 293, n_alt = 1
   Insn 45: point = 295, n_alt = 0
   Insn 44: point = 297, n_alt = 0
  BB 16
   Insn 290: point = 298, n_alt = 0
   Insn 289: point = 298, n_alt = 15
   Insn 288: point = 299, n_alt = 14
   Insn 287: point = 300, n_alt = 0
   Insn 286: point = 302, n_alt = 3
   Insn 285: point = 303, n_alt = 1
   Insn 284: point = 305, n_alt = 0
   Insn 283: point = 307, n_alt = 0
   Insn 282: point = 308, n_alt = 15
   Insn 281: point = 309, n_alt = 14
   Insn 280: point = 311, n_alt = 0
   Insn 279: point = 313, n_alt = 3
   Insn 278: point = 314, n_alt = 1
   Insn 277: point = 316, n_alt = 0
   Insn 276: point = 318, n_alt = 0
   Insn 275: point = 320, n_alt = 0
   Insn 274: point = 321, n_alt = 0
   Insn 273: point = 323, n_alt = 3
   Insn 272: point = 324, n_alt = 1
   Insn 271: point = 326, n_alt = 0
   Insn 270: point = 328, n_alt = 0
   Insn 269: point = 330, n_alt = 0
   Insn 268: point = 331, n_alt = 15
   Insn 267: point = 332, n_alt = 14
   Insn 266: point = 334, n_alt = 0
   Insn 265: point = 336, n_alt = 3
   Insn 264: point = 337, n_alt = 1
   Insn 263: point = 339, n_alt = 0
   Insn 262: point = 341, n_alt = 0
   Insn 261: point = 342, n_alt = 0
   Insn 260: point = 344, n_alt = 3
   Insn 259: point = 345, n_alt = 1
   Insn 258: point = 347, n_alt = 0
   Insn 257: point = 349, n_alt = 0
  BB 15
   Insn 255: point = 350, n_alt = -1
   Insn 254: point = 350, n_alt = 1
   Insn 253: point = 351, n_alt = 0
  BB 10
   Insn 663: point = 352, n_alt = -1
   Insn 208: point = 352, n_alt = 1
   Insn 207: point = 352, n_alt = 15
   Insn 206: point = 353, n_alt = 14
  BB 14
   Insn 249: point = 354, n_alt = 0
  BB 13
   Insn 246: point = 354, n_alt = 1
   Insn 245: point = 355, n_alt = 0
   Insn 244: point = 356, n_alt = 15
   Insn 243: point = 357, n_alt = 14
   Insn 242: point = 359, n_alt = 0
   Insn 241: point = 361, n_alt = 3
   Insn 240: point = 362, n_alt = 1
   Insn 239: point = 364, n_alt = 0
   Insn 238: point = 366, n_alt = 0
  BB 12
   Insn 233: point = 367, n_alt = -1
   Insn 232: point = 367, n_alt = 1
   Insn 231: point = 368, n_alt = 14
   Insn 230: point = 369, n_alt = 14
   Insn 229: point = 371, n_alt = 0
   Insn 228: point = 373, n_alt = 3
   Insn 227: point = 374, n_alt = 1
   Insn 226: point = 376, n_alt = 0
   Insn 225: point = 378, n_alt = 0
  BB 11
   Insn 220: point = 379, n_alt = -1
   Insn 219: point = 379, n_alt = 1
   Insn 218: point = 380, n_alt = 14
   Insn 217: point = 381, n_alt = 14
   Insn 216: point = 383, n_alt = 0
   Insn 215: point = 385, n_alt = 3
   Insn 214: point = 386, n_alt = 1
   Insn 213: point = 388, n_alt = 0
   Insn 212: point = 390, n_alt = 0
  BB 30
   Insn 531: point = 391, n_alt = 0
  BB 29
   Insn 528: point = 391, n_alt = 0
   Insn 693: point = 391, n_alt = 1
   Insn 527: point = 392, n_alt = 0
  BB 28
   Insn 524: point = 393, n_alt = 1
   Insn 523: point = 394, n_alt = 0
   Insn 522: point = 396, n_alt = 0
   Insn 521: point = 397, n_alt = 1
   Insn 520: point = 399, n_alt = 0
   Insn 519: point = 400, n_alt = 0
  BB 27
   Insn 517: point = 401, n_alt = -1
   Insn 516: point = 401, n_alt = 0
   Insn 515: point = 401, n_alt = 1
   Insn 514: point = 402, n_alt = 0
   Insn 513: point = 403, n_alt = 0
   Insn 512: point = 403, n_alt = 0
   Insn 511: point = 403, n_alt = 3
   Insn 510: point = 403, n_alt = -2
   Insn 509: point = 404, n_alt = 4
   Insn 508: point = 405, n_alt = 21
   Insn 507: point = 406, n_alt = -2
   Insn 506: point = 407, n_alt = -2
   Insn 505: point = 408, n_alt = 4
   Insn 504: point = 408, n_alt = 0
   Insn 503: point = 409, n_alt = 8
   Insn 502: point = 410, n_alt = 0
   Insn 692: point = 411, n_alt = -2
	Hard reg 2 is preferable by r442 with profit 1000
   Insn 501: point = 413, n_alt = 1
   Insn 691: point = 414, n_alt = -2
	Hard reg 2 is preferable by r442 with profit 1000
	Hard reg 0 is preferable by r442 with profit 1000
   Insn 500: point = 416, n_alt = 0
   Insn 499: point = 417, n_alt = 1
   Insn 498: point = 419, n_alt = 0
   Insn 497: point = 420, n_alt = 0
   Insn 496: point = 421, n_alt = 15
   Insn 495: point = 422, n_alt = 1
   Insn 494: point = 424, n_alt = 14
   Insn 493: point = 425, n_alt = -2
   Insn 492: point = 426, n_alt = 0
   Insn 491: point = 426, n_alt = -2
   Insn 690: point = 427, n_alt = 14
	Hard reg 20 is preferable by r441 with profit 1000
   Insn 490: point = 429, n_alt = 0
   Insn 489: point = 431, n_alt = 1
   Insn 488: point = 433, n_alt = 0
   Insn 487: point = 434, n_alt = 0
   Insn 486: point = 436, n_alt = 0
   Insn 689: point = 438, n_alt = 1
	Hard reg 0 is preferable by r440 with profit 1000
   Insn 485: point = 440, n_alt = 0
   Insn 484: point = 442, n_alt = 0
   Insn 483: point = 444, n_alt = 3
   Insn 482: point = 445, n_alt = 1
   Insn 481: point = 447, n_alt = 0
   Insn 480: point = 449, n_alt = 0
   Insn 479: point = 450, n_alt = 0
   Insn 478: point = 452, n_alt = 0
   Insn 477: point = 453, n_alt = 0
   Insn 476: point = 455, n_alt = 0
   Insn 475: point = 456, n_alt = 0
   Insn 688: point = 458, n_alt = 1
	Hard reg 0 is preferable by r439 with profit 1000
   Insn 474: point = 460, n_alt = 1
   Insn 473: point = 462, n_alt = 0
  BB 26
   Insn 471: point = 463, n_alt = -1
   Insn 470: point = 463, n_alt = 0
   Insn 469: point = 464, n_alt = 0
   Insn 468: point = 466, n_alt = 0
   Insn 467: point = 468, n_alt = 3
   Insn 466: point = 469, n_alt = 1
   Insn 465: point = 471, n_alt = 0
   Insn 464: point = 473, n_alt = 0
  BB 25
   Insn 461: point = 474, n_alt = 0
   Insn 460: point = 474, n_alt = 1
   Insn 459: point = 475, n_alt = 0
   Insn 458: point = 477, n_alt = 0
   Insn 457: point = 478, n_alt = 0
   Insn 700: point = 480, n_alt = 0
   Insn 686: point = 482, n_alt = 15
   Insn 456: point = 484, n_alt = 14
   Insn 455: point = 486, n_alt = 0
   Insn 454: point = 488, n_alt = 3
   Insn 453: point = 489, n_alt = 1
   Insn 452: point = 491, n_alt = 0
   Insn 451: point = 493, n_alt = 0
   Insn 450: point = 495, n_alt = 0
   Insn 449: point = 496, n_alt = 1
   Insn 448: point = 497, n_alt = 0
   Insn 447: point = 498, n_alt = 15
   Insn 446: point = 499, n_alt = 1
   Insn 445: point = 501, n_alt = 14
   Insn 444: point = 502, n_alt = -2
   Insn 443: point = 503, n_alt = 0
   Insn 442: point = 503, n_alt = -2
   Insn 685: point = 504, n_alt = 14
	Hard reg 20 is preferable by r436 with profit 1000
   Insn 441: point = 506, n_alt = 0
   Insn 440: point = 508, n_alt = 1
   Insn 439: point = 510, n_alt = 0
   Insn 438: point = 511, n_alt = 0
   Insn 437: point = 513, n_alt = 0
   Insn 684: point = 515, n_alt = 1
	Hard reg 0 is preferable by r435 with profit 1000
   Insn 436: point = 517, n_alt = 0
   Insn 435: point = 519, n_alt = 0
   Insn 434: point = 521, n_alt = 3
   Insn 433: point = 522, n_alt = 1
   Insn 432: point = 524, n_alt = 0
   Insn 431: point = 526, n_alt = 0
   Insn 430: point = 527, n_alt = 0
   Insn 429: point = 529, n_alt = 0
   Insn 428: point = 530, n_alt = 0
   Insn 427: point = 532, n_alt = 0
   Insn 426: point = 533, n_alt = 0
   Insn 683: point = 535, n_alt = 1
	Hard reg 0 is preferable by r434 with profit 1000
   Insn 425: point = 537, n_alt = 1
   Insn 424: point = 539, n_alt = 0
   Insn 423: point = 540, n_alt = 0
   Insn 422: point = 540, n_alt = -2
   Insn 421: point = 541, n_alt = 4
  BB 24
   Insn 416: point = 542, n_alt = -1
   Insn 415: point = 542, n_alt = 1
  BB 23
   Insn 414: point = 544, n_alt = -1
   Insn 413: point = 544, n_alt = 1
   Insn 412: point = 544, n_alt = 14
   Insn 411: point = 546, n_alt = 0
   Insn 410: point = 548, n_alt = 3
   Insn 409: point = 549, n_alt = 1
   Insn 408: point = 551, n_alt = 0
   Insn 407: point = 553, n_alt = 0
   Insn 406: point = 554, n_alt = 2
  BB 22
   Insn 403: point = 555, n_alt = 1
   Insn 402: point = 556, n_alt = 0
   Insn 401: point = 557, n_alt = 0
   Insn 400: point = 557, n_alt = 15
   Insn 399: point = 558, n_alt = 1
   Insn 398: point = 560, n_alt = 14
   Insn 397: point = 561, n_alt = -2
   Insn 396: point = 562, n_alt = 0
   Insn 395: point = 562, n_alt = -2
   Insn 682: point = 563, n_alt = 14
	Hard reg 20 is preferable by r433 with profit 1000
   Insn 394: point = 565, n_alt = 0
   Insn 393: point = 567, n_alt = 1
   Insn 392: point = 569, n_alt = 0
   Insn 391: point = 570, n_alt = 0
   Insn 390: point = 572, n_alt = 0
   Insn 681: point = 574, n_alt = 1
	Hard reg 0 is preferable by r432 with profit 1000
   Insn 389: point = 576, n_alt = 0
   Insn 388: point = 578, n_alt = 0
   Insn 387: point = 580, n_alt = 3
   Insn 386: point = 581, n_alt = 1
   Insn 385: point = 583, n_alt = 0
   Insn 384: point = 585, n_alt = 0
   Insn 383: point = 586, n_alt = 0
   Insn 382: point = 588, n_alt = 0
   Insn 381: point = 589, n_alt = 0
   Insn 380: point = 591, n_alt = 0
   Insn 379: point = 592, n_alt = 0
   Insn 680: point = 594, n_alt = 1
	Hard reg 0 is preferable by r431 with profit 1000
   Insn 378: point = 596, n_alt = 1
   Insn 377: point = 598, n_alt = 0
   Insn 376: point = 599, n_alt = 0
   Insn 679: point = 599, n_alt = 1
   Insn 375: point = 600, n_alt = 0
   Insn 374: point = 601, n_alt = 0
   Insn 373: point = 601, n_alt = 0
   Insn 372: point = 601, n_alt = 3
   Insn 371: point = 601, n_alt = -2
   Insn 370: point = 602, n_alt = 4
   Insn 369: point = 603, n_alt = 21
   Insn 368: point = 604, n_alt = -2
   Insn 367: point = 605, n_alt = 4
   Insn 366: point = 605, n_alt = 4
   Insn 365: point = 605, n_alt = 0
   Insn 364: point = 606, n_alt = 8
   Insn 678: point = 607, n_alt = -2
	Hard reg 1 is preferable by r429 with profit 1000
   Insn 363: point = 609, n_alt = 1
   Insn 677: point = 610, n_alt = -2
	Hard reg 1 is preferable by r429 with profit 1000
	Hard reg 0 is preferable by r429 with profit 1000
   Insn 362: point = 612, n_alt = 0
   Insn 361: point = 613, n_alt = 1
   Insn 360: point = 615, n_alt = 0
   Insn 359: point = 616, n_alt = 0
  BB 21
   Insn 356: point = 617, n_alt = 1
   Insn 355: point = 618, n_alt = 0
   Insn 354: point = 620, n_alt = 0
   Insn 353: point = 621, n_alt = 0
   Insn 701: point = 623, n_alt = 0
   Insn 352: point = 625, n_alt = 15
   Insn 351: point = 626, n_alt = 0
   Insn 350: point = 626, n_alt = -2
   Insn 675: point = 627, n_alt = 14
	Hard reg 20 is preferable by r427 with profit 1000
   Insn 349: point = 629, n_alt = 0
   Insn 348: point = 631, n_alt = 1
   Insn 347: point = 633, n_alt = 0
   Insn 346: point = 634, n_alt = 0
   Insn 345: point = 636, n_alt = 0
   Insn 344: point = 637, n_alt = 1
   Insn 343: point = 639, n_alt = 0
   Insn 342: point = 640, n_alt = 0
   Insn 341: point = 642, n_alt = 0
   Insn 340: point = 643, n_alt = 0
  BB 20
   Insn 335: point = 644, n_alt = -1
   Insn 334: point = 644, n_alt = 0
   Insn 333: point = 645, n_alt = 0
   Insn 332: point = 646, n_alt = 0
   Insn 331: point = 648, n_alt = 0
   Insn 330: point = 649, n_alt = 0
   Insn 329: point = 650, n_alt = 0
   Insn 328: point = 650, n_alt = -2
   Insn 327: point = 651, n_alt = 4
  BB 19
   Insn 325: point = 652, n_alt = -1
   Insn 324: point = 652, n_alt = 0
   Insn 323: point = 653, n_alt = 0
   Insn 322: point = 655, n_alt = 0
   Insn 321: point = 657, n_alt = 3
   Insn 320: point = 658, n_alt = 1
   Insn 319: point = 660, n_alt = 0
   Insn 318: point = 662, n_alt = 0
 r82: [246..247]
 r83: [294..295]
 r84: [291..293]
 r85: [289..290]
 r86: [275..288]
 r87: [284..285]
 r88: [282..283]
 r89: [279..281]
 r90: [277..278]
 r91: [273..276]
 r92: [259..270]
 r93: [266..267]
 r94: [263..265]
 r95: [261..262]
 r96: [258..260]
 r97: [222..223]
 r98: [148..149]
 r99: [145..147]
 r100: [140..144]
 r101: [140..141]
 r102: [136..137]
 r103: [133..135]
 r104: [128..132]
 r105: [128..129]
 r106: [122..125]
 r107: [218..219]
 r108: [215..217]
 r109: [208..209]
 r110: [206..207]
 r111: [203..205]
 r112: [196..197]
 r113: [193..195]
 r114: [188..192]
 r115: [188..189]
 r116: [182..185]
 r117: [176..177]
 r118: [174..175]
 r119: [171..173]
 r120: [166..170]
 r121: [166..167]
 r122: [160..163]
 r123: [116..117]
 r124: [114..115]
 r125: [112..113]
 r126: [387..388]
 r127: [384..386]
 r128: [382..383]
 r129: [379..381]
 r130: [375..376]
 r131: [372..374]
 r132: [370..371]
 r133: [367..369]
 r134: [363..364]
 r135: [360..362]
 r136: [358..359]
 r137: [346..347]
 r138: [343..345]
 r139: [333..342]
 r140: [338..339]
 r141: [335..337]
 r142: [331..334]
 r143: [331..332]
 r144: [327..328]
 r145: [325..326]
 r146: [322..324]
 r147: [310..321]
 r148: [317..318]
 r149: [315..316]
 r150: [312..314]
 r151: [308..311]
 r152: [308..309]
 r153: [304..305]
 r154: [301..303]
 r155: [298..300]
 r156: [659..660]
 r157: [656..658]
 r158: [654..655]
 r159: [652..653]
 r160: [647..649]
 r161: [644..646]
 r162: [641..643]
 r163: [638..640]
 r164: [635..637]
 r165: [635..636]
 r166: [632..634]
 r167: [630..631]
 r168: [626..627]
 r169: [619..621]
 r170: [614..616]
 r171: [605..613]
 r172: [604..607]
 r173: [595..596]
 r174: [590..592]
 r175: [587..589]
 r176: [587..588]
 r177: [571..586]
 r178: [582..583]
 r179: [579..581]
 r180: [577..578]
 r181: [575..576]
 r182: [571..572]
 r183: [568..570]
 r184: [566..567]
 r185: [562..563]
 r186: [542..554]
 r187: [550..551]
 r188: [547..549]
 r189: [545..546]
 r190: [542..544]
 r191: [536..537]
 r192: [531..533]
 r193: [528..530]
 r194: [528..529]
 r195: [512..527]
 r196: [523..524]
 r197: [520..522]
 r198: [518..519]
 r199: [516..517]
 r200: [512..513]
 r201: [509..511]
 r202: [507..508]
 r203: [503..504]
 r204: [492..493]
 r205: [490..491]
 r206: [487..489]
 r207: [485..486]
 r208: [481..482]
 r209: [476..478]
 r210: [470..471]
 r211: [467..469]
 r212: [465..466]
 r213: [463..464]
 r214: [459..460]
 r215: [454..456]
 r216: [451..453]
 r217: [451..452]
 r218: [435..450]
 r219: [446..447]
 r220: [443..445]
 r221: [441..442]
 r222: [439..440]
 r223: [435..436]
 r224: [432..434]
 r225: [430..431]
 r226: [426..427]
 r227: [418..420]
 r228: [408..417]
 r229: [406..411]
 r230: [398..400]
 r231: [395..397]
 r232: [92..93]
 r233: [87..89]
 r234: [84..86]
 r235: [84..85]
 r236: [68..83]
 r237: [79..80]
 r238: [76..78]
 r239: [74..75]
 r240: [72..73]
 r241: [68..69]
 r242: [65..67]
 r243: [63..64]
 r244: [59..60]
 r245: [51..53]
 r246: [48..50]
 r247: [45..47]
 r248: [42..44]
 r249: [39..41]
 r250: [39..40]
 r251: [36..38]
 r252: [34..35]
 r253: [30..31]
 r254: [23..25]
 r255: [56..58]
 r256: [28..29]
 r257: [5..6]
 r258: [624..625]
 r259: [559..561]
 r260: [500..502]
 r261: [423..425]
 r262: [0..4]
 r263: [254..255]
 r264: [252..253]
 r265: [248..249]
 r266: [238..239]
 r267: [236..237]
 r268: [234..235]
 r269: [232..233]
 r270: [230..231]
 r271: [228..229]
 r272: [296..297]
 r273: [291..292]
 r274: [286..287]
 r275: [279..280]
 r276: [268..269]
 r277: [263..264]
 r278: [256..257]
 r279: [226..227]
 r280: [224..225]
 r281: [155..157]
 r282: [154..156]
 r283: [152..153]
 r284: [150..151]
 r285: [145..146]
 r286: [142..143]
 r287: [138..139]
 r288: [133..134]
 r289: [130..131]
 r290: [126..127]
 r291: [123..124]
 r292: [120..121]
 r293: [220..221]
 r294: [214..216]
 r295: [212..213]
 r296: [210..211]
 r297: [202..204]
 r298: [200..201]
 r299: [198..199]
 r300: [193..194]
 r301: [190..191]
 r302: [186..187]
 r303: [183..184]
 r304: [180..181]
 r305: [178..179]
 r306: [171..172]
 r307: [168..169]
 r308: [164..165]
 r309: [161..162]
 r310: [158..159]
 r311: [118..119]
 r312: [110..111]
 r313: [352..353]
 r314: [389..390]
 r315: [384..385]
 r316: [379..380]
 r317: [377..378]
 r318: [372..373]
 r319: [367..368]
 r320: [365..366]
 r321: [360..361]
 r322: [356..357]
 r323: [354..355]
 r324: [350..351]
 r325: [348..349]
 r326: [343..344]
 r327: [340..341]
 r328: [335..336]
 r329: [329..330]
 r330: [322..323]
 r331: [319..320]
 r332: [312..313]
 r333: [306..307]
 r334: [301..302]
 r335: [298..299]
 r336: [108..109]
 r337: [106..107]
 r338: [104..105]
 r339: [102..103]
 r340: [100..101]
 r341: [98..99]
 r342: [661..662]
 r343: [656..657]
 r344: [650..651]
 r345: [647..648]
 r346: [644..645]
 r347: [641..642]
 r348: [638..639]
 r349: [632..633]
 r350: [617..618]
 r351: [619..620]
 r352: [614..615]
 r353: [611..612]
 r354: [603..606]
 r355: [601..602]
 r356: [597..598]
 r357: [590..591]
 r358: [584..585]
 r359: [579..580]
 r360: [568..569]
 r361: [557..558]
 r362: [559..560]
 r363: [555..556]
 r364: [552..553]
 r365: [547..548]
 r366: [540..541]
 r367: [538..539]
 r368: [531..532]
 r369: [525..526]
 r370: [520..521]
 r371: [509..510]
 r372: [498..499]
 r373: [500..501]
 r374: [496..497]
 r375: [494..495]
 r376: [487..488]
 r377: [474..475]
 r378: [476..477]
 r379: [472..473]
 r380: [467..468]
 r381: [461..462]
 r382: [454..455]
 r383: [448..449]
 r384: [443..444]
 r385: [432..433]
 r386: [421..422]
 r387: [423..424]
 r388: [418..419]
 r389: [415..416]
 r390: [407..410]
 r391: [405..409]
 r392: [403..404]
 r393: [401..402]
 r394: [398..399]
 r395: [393..394]
 r396: [395..396]
 r397: [96..97]
 r398: [94..95]
 r399: [87..88]
 r400: [81..82]
 r401: [76..77]
 r402: [65..66]
 r403: [54..55]
 r404: [56..57]
 r405: [51..52]
 r406: [48..49]
 r407: [45..46]
 r408: [42..43]
 r409: [36..37]
 r410: [21..22]
 r411: [23..24]
 r412: [19..20]
 r413: [17..18]
 r414: [15..16]
 r415: [13..14]
 r416: [11..12]
 r417: [7..8]
 r418: [9..10]
 r420: [250..251]
 r421: [2..3]
 r423: [240..241]
 r424: [242..243]
 r425: [244..245]
 r426: [271..274]
 r427: [628..629]
 r429: [608..610]
 r430: [599..600]
 r431: [593..594]
 r432: [573..574]
 r433: [564..565]
 r434: [534..535]
 r435: [514..515]
 r436: [505..506]
 r437: [483..484]
 r439: [457..458]
 r440: [437..438]
 r441: [428..429]
 r442: [412..414]
 r443: [391..392]
 r444: [90..91]
 r445: [70..71]
 r446: [61..62]
 r447: [32..33]
 r449: [26..27]
 r450: [479..480]
 r451: [622..623]
Compressing live ranges: from 663 to 558 - 84%
Ranges after the compression:
 r82: [210..211]
 r83: [250..251]
 r84: [248..249]
 r85: [246..247]
 r86: [234..245]
 r87: [242..243]
 r88: [240..241]
 r89: [238..239]
 r90: [236..237]
 r91: [232..235]
 r92: [222..231]
 r93: [228..229]
 r94: [226..227]
 r95: [224..225]
 r96: [222..223]
 r97: [186..187]
 r98: [126..127]
 r99: [124..125]
 r100: [120..123]
 r101: [120..121]
 r102: [116..117]
 r103: [114..115]
 r104: [110..113]
 r105: [110..111]
 r106: [106..107]
 r107: [182..183]
 r108: [180..181]
 r109: [174..175]
 r110: [172..173]
 r111: [170..171]
 r112: [164..165]
 r113: [162..163]
 r114: [158..161]
 r115: [158..159]
 r116: [154..155]
 r117: [148..149]
 r118: [146..147]
 r119: [144..145]
 r120: [140..143]
 r121: [140..141]
 r122: [136..137]
 r123: [100..101]
 r124: [98..99]
 r125: [96..97]
 r126: [330..331]
 r127: [328..329]
 r128: [326..327]
 r129: [324..325]
 r130: [320..321]
 r131: [318..319]
 r132: [316..317]
 r133: [314..315]
 r134: [310..311]
 r135: [308..309]
 r136: [306..307]
 r137: [294..295]
 r138: [292..293]
 r139: [284..291]
 r140: [288..289]
 r141: [286..287]
 r142: [282..285]
 r143: [282..283]
 r144: [278..279]
 r145: [276..277]
 r146: [274..275]
 r147: [264..273]
 r148: [270..271]
 r149: [268..269]
 r150: [266..267]
 r151: [262..265]
 r152: [262..263]
 r153: [258..259]
 r154: [256..257]
 r155: [254..255]
 r156: [554..555]
 r157: [552..553]
 r158: [550..551]
 r159: [548..549]
 r160: [544..545]
 r161: [542..543]
 r162: [540..541]
 r163: [538..539]
 r164: [536..537]
 r165: [536..537]
 r166: [534..535]
 r167: [532..533]
 r168: [528..529]
 r169: [522..523]
 r170: [518..519]
 r171: [512..517]
 r172: [512..513]
 r173: [504..505]
 r174: [500..501]
 r175: [498..499]
 r176: [498..499]
 r177: [484..497]
 r178: [494..495]
 r179: [492..493]
 r180: [490..491]
 r181: [488..489]
 r182: [484..485]
 r183: [482..483]
 r184: [480..481]
 r185: [476..477]
 r186: [460..469]
 r187: [466..467]
 r188: [464..465]
 r189: [462..463]
 r190: [460..461]
 r191: [454..455]
 r192: [450..451]
 r193: [448..449]
 r194: [448..449]
 r195: [434..447]
 r196: [444..445]
 r197: [442..443]
 r198: [440..441]
 r199: [438..439]
 r200: [434..435]
 r201: [432..433]
 r202: [430..431]
 r203: [426..427]
 r204: [416..417]
 r205: [414..415]
 r206: [412..413]
 r207: [410..411]
 r208: [406..407]
 r209: [402..403]
 r210: [396..397]
 r211: [394..395]
 r212: [392..393]
 r213: [390..391]
 r214: [386..387]
 r215: [382..383]
 r216: [380..381]
 r217: [380..381]
 r218: [366..379]
 r219: [376..377]
 r220: [374..375]
 r221: [372..373]
 r222: [370..371]
 r223: [366..367]
 r224: [364..365]
 r225: [362..363]
 r226: [358..359]
 r227: [352..353]
 r228: [346..351]
 r229: [346..347]
 r230: [340..341]
 r231: [338..339]
 r232: [76..77]
 r233: [72..73]
 r234: [70..71]
 r235: [70..71]
 r236: [56..69]
 r237: [66..67]
 r238: [64..65]
 r239: [62..63]
 r240: [60..61]
 r241: [56..57]
 r242: [54..55]
 r243: [52..53]
 r244: [48..49]
 r245: [42..43]
 r246: [40..41]
 r247: [38..39]
 r248: [36..37]
 r249: [34..35]
 r250: [34..35]
 r251: [32..33]
 r252: [30..31]
 r253: [26..27]
 r254: [20..21]
 r255: [46..47]
 r256: [24..25]
 r257: [2..3]
 r258: [526..527]
 r259: [474..475]
 r260: [424..425]
 r261: [356..357]
 r262: [0..1]
 r263: [218..219]
 r264: [216..217]
 r265: [212..213]
 r266: [202..203]
 r267: [200..201]
 r268: [198..199]
 r269: [196..197]
 r270: [194..195]
 r271: [192..193]
 r272: [252..253]
 r273: [248..249]
 r274: [244..245]
 r275: [238..239]
 r276: [230..231]
 r277: [226..227]
 r278: [220..221]
 r279: [190..191]
 r280: [188..189]
 r281: [132..133]
 r282: [132..133]
 r283: [130..131]
 r284: [128..129]
 r285: [124..125]
 r286: [122..123]
 r287: [118..119]
 r288: [114..115]
 r289: [112..113]
 r290: [108..109]
 r291: [106..107]
 r292: [104..105]
 r293: [184..185]
 r294: [180..181]
 r295: [178..179]
 r296: [176..177]
 r297: [170..171]
 r298: [168..169]
 r299: [166..167]
 r300: [162..163]
 r301: [160..161]
 r302: [156..157]
 r303: [154..155]
 r304: [152..153]
 r305: [150..151]
 r306: [144..145]
 r307: [142..143]
 r308: [138..139]
 r309: [136..137]
 r310: [134..135]
 r311: [102..103]
 r312: [94..95]
 r313: [300..301]
 r314: [332..333]
 r315: [328..329]
 r316: [324..325]
 r317: [322..323]
 r318: [318..319]
 r319: [314..315]
 r320: [312..313]
 r321: [308..309]
 r322: [304..305]
 r323: [302..303]
 r324: [298..299]
 r325: [296..297]
 r326: [292..293]
 r327: [290..291]
 r328: [286..287]
 r329: [280..281]
 r330: [274..275]
 r331: [272..273]
 r332: [266..267]
 r333: [260..261]
 r334: [256..257]
 r335: [254..255]
 r336: [92..93]
 r337: [90..91]
 r338: [88..89]
 r339: [86..87]
 r340: [84..85]
 r341: [82..83]
 r342: [556..557]
 r343: [552..553]
 r344: [546..547]
 r345: [544..545]
 r346: [542..543]
 r347: [540..541]
 r348: [538..539]
 r349: [534..535]
 r350: [520..521]
 r351: [522..523]
 r352: [518..519]
 r353: [516..517]
 r354: [512..513]
 r355: [510..511]
 r356: [506..507]
 r357: [500..501]
 r358: [496..497]
 r359: [492..493]
 r360: [482..483]
 r361: [472..473]
 r362: [474..475]
 r363: [470..471]
 r364: [468..469]
 r365: [464..465]
 r366: [458..459]
 r367: [456..457]
 r368: [450..451]
 r369: [446..447]
 r370: [442..443]
 r371: [432..433]
 r372: [422..423]
 r373: [424..425]
 r374: [420..421]
 r375: [418..419]
 r376: [412..413]
 r377: [400..401]
 r378: [402..403]
 r379: [398..399]
 r380: [394..395]
 r381: [388..389]
 r382: [382..383]
 r383: [378..379]
 r384: [374..375]
 r385: [364..365]
 r386: [354..355]
 r387: [356..357]
 r388: [352..353]
 r389: [350..351]
 r390: [346..347]
 r391: [346..347]
 r392: [344..345]
 r393: [342..343]
 r394: [340..341]
 r395: [336..337]
 r396: [338..339]
 r397: [80..81]
 r398: [78..79]
 r399: [72..73]
 r400: [68..69]
 r401: [64..65]
 r402: [54..55]
 r403: [44..45]
 r404: [46..47]
 r405: [42..43]
 r406: [40..41]
 r407: [38..39]
 r408: [36..37]
 r409: [32..33]
 r410: [18..19]
 r411: [20..21]
 r412: [16..17]
 r413: [14..15]
 r414: [12..13]
 r415: [10..11]
 r416: [8..9]
 r417: [4..5]
 r418: [6..7]
 r420: [214..215]
 r421: [0..1]
 r423: [204..205]
 r424: [206..207]
 r425: [208..209]
 r426: [232..233]
 r427: [530..531]
 r429: [514..515]
 r430: [508..509]
 r431: [502..503]
 r432: [486..487]
 r433: [478..479]
 r434: [452..453]
 r435: [436..437]
 r436: [428..429]
 r437: [408..409]
 r439: [384..385]
 r440: [368..369]
 r441: [360..361]
 r442: [348..349]
 r443: [334..335]
 r444: [74..75]
 r445: [58..59]
 r446: [50..51]
 r447: [28..29]
 r449: [22..23]
 r450: [404..405]
 r451: [524..525]

********** Assignment #2: **********

	 Assigning to 449 (cl=FLOAT_REGS, orig=256, freq=2000, tfirst=449, tfreq=2000)...
	   Assign 12 to optional reload r449 (freq=2000)
	 Assigning to 450 (cl=FLOAT_REGS, orig=208, freq=2000, tfirst=450, tfreq=2000)...
	   Assign 14 to optional reload r450 (freq=2000)
	 Assigning to 451 (cl=FLOAT_REGS, orig=258, freq=2000, tfirst=451, tfreq=2000)...
	   Assign 10 to optional reload r451 (freq=2000)

********** Undoing inheritance #2: **********

Keep optional reload reg 428
Keep optional reload reg 438
Keep optional reload reg 448
Remove optional reload reg 449
  Restoring original insn:
  586: r254:XF=float_extend(r256:DF)
      REG_DEAD r256:DF
  Deleting move 699
  699: r449:DF=r256:DF
      REG_DEAD r256:DF
deleting insn with uid = 699.
Remove optional reload reg 450
  Restoring original insn:
  457: r209:XF=float_extend(r208:DF)
      REG_DEAD r208:DF
  Deleting move 700
  700: r450:DF=r208:DF
      REG_DEAD r208:DF
deleting insn with uid = 700.
Remove optional reload reg 451
  Restoring original insn:
  353: r169:XF=float_extend(r258:DF)
      REG_DEAD r258:DF
  Deleting move 701
  701: r451:DF=r258:DF
      REG_DEAD r258:DF
deleting insn with uid = 701.

********** Pseudo live ranges #4: **********

  BB 39
   Insn 633: point = 0, n_alt = 0
  BB 40
   Insn 637: point = 0, n_alt = -1
   Insn 636: point = 0, n_alt = 21
  BB 38
   Insn 632: point = 2, n_alt = -1
   Insn 631: point = 2, n_alt = 0
   Insn 627: point = 4, n_alt = 20
   Insn 624: point = 6, n_alt = 14
  BB 35
   Insn 667: point = 7, n_alt = -1
   Insn 612: point = 7, n_alt = 15
   Insn 611: point = 8, n_alt = 14
  BB 37
   Insn 621: point = 9, n_alt = 15
   Insn 620: point = 10, n_alt = 14
  BB 36
   Insn 618: point = 11, n_alt = -1
   Insn 617: point = 11, n_alt = 0
  BB 34
   Insn 609: point = 11, n_alt = -1
   Insn 608: point = 11, n_alt = 0
   Insn 607: point = 11, n_alt = 0
   Insn 606: point = 11, n_alt = -2
   Insn 605: point = 12, n_alt = 3
   Insn 604: point = 13, n_alt = 0
   Insn 603: point = 13, n_alt = -2
   Insn 602: point = 14, n_alt = 3
   Insn 601: point = 15, n_alt = 0
   Insn 600: point = 16, n_alt = 0
   Insn 599: point = 17, n_alt = 0
   Insn 598: point = 18, n_alt = 0
   Insn 597: point = 19, n_alt = 0
   Insn 596: point = 19, n_alt = 0
   Insn 595: point = 19, n_alt = 3
   Insn 594: point = 19, n_alt = -2
   Insn 593: point = 20, n_alt = 4
   Insn 592: point = 21, n_alt = 4
  BB 33
   Insn 589: point = 21, n_alt = 1
   Insn 588: point = 22, n_alt = 0
   Insn 587: point = 24, n_alt = 0
   Insn 586: point = 25, n_alt = -1
   Insn 585: point = 27, n_alt = 15
   Insn 584: point = 28, n_alt = 0
   Insn 583: point = 28, n_alt = -2
   Insn 697: point = 29, n_alt = 14
	Hard reg 20 is preferable by r447 with profit 1000
   Insn 582: point = 31, n_alt = 0
   Insn 581: point = 33, n_alt = 1
   Insn 580: point = 35, n_alt = 0
   Insn 579: point = 36, n_alt = 0
   Insn 578: point = 38, n_alt = 0
   Insn 577: point = 39, n_alt = 1
   Insn 576: point = 41, n_alt = 0
   Insn 575: point = 42, n_alt = 0
   Insn 574: point = 44, n_alt = 0
   Insn 573: point = 45, n_alt = 0
  BB 32
   Insn 568: point = 46, n_alt = -1
   Insn 567: point = 46, n_alt = 0
   Insn 566: point = 47, n_alt = 0
   Insn 565: point = 48, n_alt = 0
   Insn 564: point = 50, n_alt = 0
   Insn 563: point = 51, n_alt = 0
   Insn 562: point = 52, n_alt = 15
   Insn 561: point = 53, n_alt = 1
   Insn 560: point = 55, n_alt = 14
   Insn 559: point = 56, n_alt = -2
   Insn 558: point = 57, n_alt = 0
   Insn 557: point = 57, n_alt = -2
   Insn 696: point = 58, n_alt = 14
	Hard reg 20 is preferable by r446 with profit 1000
   Insn 556: point = 60, n_alt = 0
   Insn 555: point = 62, n_alt = 1
   Insn 554: point = 64, n_alt = 0
   Insn 553: point = 65, n_alt = 0
   Insn 552: point = 67, n_alt = 0
   Insn 695: point = 69, n_alt = 1
	Hard reg 0 is preferable by r445 with profit 1000
   Insn 551: point = 71, n_alt = 0
   Insn 550: point = 73, n_alt = 0
   Insn 549: point = 75, n_alt = 3
   Insn 548: point = 76, n_alt = 1
   Insn 547: point = 78, n_alt = 0
   Insn 546: point = 80, n_alt = 0
   Insn 545: point = 81, n_alt = 0
   Insn 544: point = 83, n_alt = 0
   Insn 543: point = 84, n_alt = 0
   Insn 542: point = 86, n_alt = 0
   Insn 541: point = 87, n_alt = 0
   Insn 694: point = 89, n_alt = 1
	Hard reg 0 is preferable by r444 with profit 1000
   Insn 540: point = 91, n_alt = 1
   Insn 539: point = 93, n_alt = 0
  BB 31
   Insn 537: point = 94, n_alt = -1
   Insn 536: point = 94, n_alt = 1
   Insn 535: point = 95, n_alt = 0
  BB 18
   Insn 665: point = 96, n_alt = -1
   Insn 314: point = 96, n_alt = 0
   Insn 313: point = 96, n_alt = -2
   Insn 312: point = 97, n_alt = 4
   Insn 311: point = 98, n_alt = 15
   Insn 310: point = 99, n_alt = 14
   Insn 309: point = 100, n_alt = 1
   Insn 308: point = 101, n_alt = 0
   Insn 307: point = 102, n_alt = 1
   Insn 306: point = 103, n_alt = 0
   Insn 305: point = 104, n_alt = 1
   Insn 304: point = 105, n_alt = 0
   Insn 303: point = 106, n_alt = 1
   Insn 302: point = 106, n_alt = 1
   Insn 301: point = 106, n_alt = 1
   Insn 300: point = 106, n_alt = 1
   Insn 299: point = 106, n_alt = 1
   Insn 298: point = 106, n_alt = 1
  BB 17
   Insn 296: point = 106, n_alt = -1
   Insn 295: point = 106, n_alt = 1
   Insn 294: point = 107, n_alt = 0
  BB 9
   Insn 661: point = 108, n_alt = -1
   Insn 202: point = 108, n_alt = 1
   Insn 201: point = 108, n_alt = 5
   Insn 200: point = 109, n_alt = -2
   Insn 199: point = 110, n_alt = 0
   Insn 198: point = 110, n_alt = -2
   Insn 197: point = 111, n_alt = 0
   Insn 196: point = 113, n_alt = 0
   Insn 195: point = 115, n_alt = 0
   Insn 194: point = 117, n_alt = 0
  BB 8
   Insn 191: point = 118, n_alt = -1
   Insn 190: point = 118, n_alt = 1
  BB 6
   Insn 659: point = 118, n_alt = -1
   Insn 125: point = 118, n_alt = 5
   Insn 124: point = 119, n_alt = -2
   Insn 123: point = 120, n_alt = 0
   Insn 122: point = 120, n_alt = -2
   Insn 121: point = 121, n_alt = -2
   Insn 120: point = 122, n_alt = 3
   Insn 119: point = 123, n_alt = 3
   Insn 118: point = 125, n_alt = 3
   Insn 117: point = 126, n_alt = 0
   Insn 116: point = 126, n_alt = 9
   Insn 115: point = 127, n_alt = 20
   Insn 114: point = 128, n_alt = 0
   Insn 113: point = 128, n_alt = -2
   Insn 112: point = 129, n_alt = 3
   Insn 111: point = 130, n_alt = 3
   Insn 110: point = 132, n_alt = 3
   Insn 109: point = 133, n_alt = 1
   Insn 108: point = 135, n_alt = 0
   Insn 107: point = 137, n_alt = 0
   Insn 106: point = 138, n_alt = 0
   Insn 105: point = 138, n_alt = 9
   Insn 104: point = 139, n_alt = 20
   Insn 103: point = 140, n_alt = 0
   Insn 102: point = 140, n_alt = -2
   Insn 101: point = 141, n_alt = 3
   Insn 100: point = 142, n_alt = 3
   Insn 99: point = 144, n_alt = 3
   Insn 98: point = 145, n_alt = 1
   Insn 97: point = 147, n_alt = 0
   Insn 96: point = 149, n_alt = 0
   Insn 95: point = 150, n_alt = 5
   Insn 94: point = 151, n_alt = -2
   Insn 93: point = 152, n_alt = 0
   Insn 92: point = 152, n_alt = -2
   Insn 91: point = 153, n_alt = -2
   Insn 90: point = 154, n_alt = 3
   Insn 89: point = 155, n_alt = 3
  BB 7
   Insn 186: point = 156, n_alt = 0
   Insn 185: point = 156, n_alt = 5
   Insn 184: point = 157, n_alt = -2
   Insn 183: point = 158, n_alt = 0
   Insn 182: point = 158, n_alt = -2
   Insn 181: point = 159, n_alt = -2
   Insn 180: point = 160, n_alt = 3
   Insn 179: point = 161, n_alt = 3
   Insn 178: point = 163, n_alt = 3
   Insn 177: point = 164, n_alt = 9
   Insn 176: point = 165, n_alt = 20
   Insn 175: point = 166, n_alt = 0
   Insn 174: point = 166, n_alt = -2
   Insn 173: point = 167, n_alt = 3
   Insn 172: point = 168, n_alt = 3
   Insn 171: point = 170, n_alt = 3
   Insn 170: point = 171, n_alt = 1
   Insn 169: point = 173, n_alt = 0
   Insn 168: point = 175, n_alt = 0
   Insn 167: point = 177, n_alt = 0
   Insn 166: point = 178, n_alt = 5
   Insn 165: point = 179, n_alt = -2
   Insn 164: point = 180, n_alt = 0
   Insn 163: point = 180, n_alt = -2
   Insn 162: point = 181, n_alt = -2
   Insn 161: point = 182, n_alt = 3
   Insn 160: point = 183, n_alt = 3
   Insn 159: point = 185, n_alt = 3
   Insn 158: point = 186, n_alt = 9
   Insn 157: point = 187, n_alt = 20
   Insn 156: point = 188, n_alt = 0
   Insn 155: point = 188, n_alt = -2
   Insn 154: point = 189, n_alt = 3
   Insn 153: point = 190, n_alt = 3
   Insn 152: point = 192, n_alt = 3
   Insn 151: point = 193, n_alt = 1
   Insn 150: point = 195, n_alt = 0
   Insn 149: point = 197, n_alt = 0
   Insn 148: point = 198, n_alt = 5
   Insn 147: point = 199, n_alt = -2
   Insn 146: point = 200, n_alt = 0
   Insn 145: point = 200, n_alt = -2
   Insn 144: point = 201, n_alt = -2
   Insn 143: point = 202, n_alt = 3
   Insn 142: point = 203, n_alt = 1
   Insn 141: point = 205, n_alt = 0
   Insn 140: point = 207, n_alt = 0
   Insn 139: point = 209, n_alt = 0
   Insn 138: point = 210, n_alt = 0
   Insn 137: point = 210, n_alt = 3
   Insn 136: point = 210, n_alt = -2
   Insn 135: point = 211, n_alt = 4
   Insn 134: point = 212, n_alt = -2
   Insn 133: point = 213, n_alt = -2
   Insn 132: point = 214, n_alt = 3
   Insn 131: point = 215, n_alt = 0
   Insn 130: point = 217, n_alt = 4
   Insn 129: point = 219, n_alt = 3
  BB 5
   Insn 87: point = 220, n_alt = -1
   Insn 86: point = 220, n_alt = 0
   Insn 85: point = 221, n_alt = 4
   Insn 84: point = 223, n_alt = 3
   Insn 83: point = 224, n_alt = 1
   Insn 82: point = 224, n_alt = 5
   Insn 81: point = 225, n_alt = -2
   Insn 80: point = 226, n_alt = 0
   Insn 79: point = 226, n_alt = 2
  BB 4
   Insn 77: point = 226, n_alt = -1
   Insn 76: point = 226, n_alt = 0
  BB 2
   Insn 657: point = 226, n_alt = -1
   Insn 40: point = 226, n_alt = 1
   Insn 39: point = 226, n_alt = 8
   Insn 38: point = 226, n_alt = 1
   Insn 37: point = 226, n_alt = 0
   Insn 36: point = 226, n_alt = 3
   Insn 35: point = 226, n_alt = -2
   Insn 34: point = 227, n_alt = 4
   Insn 33: point = 228, n_alt = 21
   Insn 32: point = 229, n_alt = 8
   Insn 31: point = 230, n_alt = 5
   Insn 30: point = 230, n_alt = 9
   Insn 29: point = 231, n_alt = 20
   Insn 28: point = 232, n_alt = 0
   Insn 27: point = 232, n_alt = -2
   Insn 26: point = 233, n_alt = 3
   Insn 25: point = 234, n_alt = 9
   Insn 24: point = 235, n_alt = 20
   Insn 23: point = 236, n_alt = 0
   Insn 22: point = 236, n_alt = -2
   Insn 21: point = 237, n_alt = 3
   Insn 670: point = 238, n_alt = 1
   Insn 20: point = 239, n_alt = 0
   Insn 672: point = 241, n_alt = 0
	   Creating copy r424<-r425@1000
   Insn 671: point = 243, n_alt = -1
	Hard reg 20 is preferable by r425 with profit 1000
   Insn 19: point = 245, n_alt = -2
   Insn 18: point = 246, n_alt = 0
   Insn 17: point = 246, n_alt = -2
   Insn 16: point = 247, n_alt = 3
   Insn 13: point = 248, n_alt = 0
   Insn 11: point = 250, n_alt = 5
   Insn 10: point = 251, n_alt = 3
   Insn 9: point = 252, n_alt = 5
   Insn 8: point = 253, n_alt = 3
   Insn 7: point = 254, n_alt = 5
   Insn 6: point = 254, n_alt = 5
   Insn 5: point = 254, n_alt = 5
   Insn 4: point = 254, n_alt = 5
   Insn 3: point = 254, n_alt = 1
   Insn 2: point = 254, n_alt = 5
  BB 3
   Insn 70: point = 254, n_alt = 0
   Insn 69: point = 254, n_alt = 0
   Insn 68: point = 254, n_alt = 3
   Insn 67: point = 254, n_alt = -2
   Insn 66: point = 255, n_alt = 4
   Insn 65: point = 256, n_alt = -2
   Insn 64: point = 257, n_alt = -2
   Insn 63: point = 258, n_alt = 0
   Insn 62: point = 260, n_alt = 0
   Insn 61: point = 262, n_alt = 3
   Insn 60: point = 263, n_alt = 1
   Insn 59: point = 265, n_alt = 0
   Insn 58: point = 267, n_alt = 0
   Insn 674: point = 268, n_alt = -2
	Hard reg 1 is preferable by r426 with profit 1000
   Insn 57: point = 270, n_alt = 0
   Insn 673: point = 272, n_alt = -2
	Hard reg 1 is preferable by r426 with profit 1000
	Hard reg 0 is preferable by r426 with profit 1000
   Insn 56: point = 274, n_alt = 0
   Insn 55: point = 276, n_alt = 0
   Insn 54: point = 278, n_alt = 3
   Insn 53: point = 279, n_alt = 3
   Insn 52: point = 281, n_alt = 0
   Insn 51: point = 283, n_alt = 1
   Insn 50: point = 285, n_alt = 0
   Insn 49: point = 286, n_alt = 0
   Insn 48: point = 288, n_alt = 0
   Insn 47: point = 290, n_alt = 3
   Insn 46: point = 291, n_alt = 1
   Insn 45: point = 293, n_alt = 0
   Insn 44: point = 295, n_alt = 0
  BB 16
   Insn 290: point = 296, n_alt = 0
   Insn 289: point = 296, n_alt = 15
   Insn 288: point = 297, n_alt = 14
   Insn 287: point = 298, n_alt = 0
   Insn 286: point = 300, n_alt = 3
   Insn 285: point = 301, n_alt = 1
   Insn 284: point = 303, n_alt = 0
   Insn 283: point = 305, n_alt = 0
   Insn 282: point = 306, n_alt = 15
   Insn 281: point = 307, n_alt = 14
   Insn 280: point = 309, n_alt = 0
   Insn 279: point = 311, n_alt = 3
   Insn 278: point = 312, n_alt = 1
   Insn 277: point = 314, n_alt = 0
   Insn 276: point = 316, n_alt = 0
   Insn 275: point = 318, n_alt = 0
   Insn 274: point = 319, n_alt = 0
   Insn 273: point = 321, n_alt = 3
   Insn 272: point = 322, n_alt = 1
   Insn 271: point = 324, n_alt = 0
   Insn 270: point = 326, n_alt = 0
   Insn 269: point = 328, n_alt = 0
   Insn 268: point = 329, n_alt = 15
   Insn 267: point = 330, n_alt = 14
   Insn 266: point = 332, n_alt = 0
   Insn 265: point = 334, n_alt = 3
   Insn 264: point = 335, n_alt = 1
   Insn 263: point = 337, n_alt = 0
   Insn 262: point = 339, n_alt = 0
   Insn 261: point = 340, n_alt = 0
   Insn 260: point = 342, n_alt = 3
   Insn 259: point = 343, n_alt = 1
   Insn 258: point = 345, n_alt = 0
   Insn 257: point = 347, n_alt = 0
  BB 15
   Insn 255: point = 348, n_alt = -1
   Insn 254: point = 348, n_alt = 1
   Insn 253: point = 349, n_alt = 0
  BB 10
   Insn 663: point = 350, n_alt = -1
   Insn 208: point = 350, n_alt = 1
   Insn 207: point = 350, n_alt = 15
   Insn 206: point = 351, n_alt = 14
  BB 14
   Insn 249: point = 352, n_alt = 0
  BB 13
   Insn 246: point = 352, n_alt = 1
   Insn 245: point = 353, n_alt = 0
   Insn 244: point = 354, n_alt = 15
   Insn 243: point = 355, n_alt = 14
   Insn 242: point = 357, n_alt = 0
   Insn 241: point = 359, n_alt = 3
   Insn 240: point = 360, n_alt = 1
   Insn 239: point = 362, n_alt = 0
   Insn 238: point = 364, n_alt = 0
  BB 12
   Insn 233: point = 365, n_alt = -1
   Insn 232: point = 365, n_alt = 1
   Insn 231: point = 366, n_alt = 14
   Insn 230: point = 367, n_alt = 14
   Insn 229: point = 369, n_alt = 0
   Insn 228: point = 371, n_alt = 3
   Insn 227: point = 372, n_alt = 1
   Insn 226: point = 374, n_alt = 0
   Insn 225: point = 376, n_alt = 0
  BB 11
   Insn 220: point = 377, n_alt = -1
   Insn 219: point = 377, n_alt = 1
   Insn 218: point = 378, n_alt = 14
   Insn 217: point = 379, n_alt = 14
   Insn 216: point = 381, n_alt = 0
   Insn 215: point = 383, n_alt = 3
   Insn 214: point = 384, n_alt = 1
   Insn 213: point = 386, n_alt = 0
   Insn 212: point = 388, n_alt = 0
  BB 30
   Insn 531: point = 389, n_alt = 0
  BB 29
   Insn 528: point = 389, n_alt = 0
   Insn 693: point = 389, n_alt = 1
   Insn 527: point = 390, n_alt = 0
  BB 28
   Insn 524: point = 391, n_alt = 1
   Insn 523: point = 392, n_alt = 0
   Insn 522: point = 394, n_alt = 0
   Insn 521: point = 395, n_alt = 1
   Insn 520: point = 397, n_alt = 0
   Insn 519: point = 398, n_alt = 0
  BB 27
   Insn 517: point = 399, n_alt = -1
   Insn 516: point = 399, n_alt = 0
   Insn 515: point = 399, n_alt = 1
   Insn 514: point = 400, n_alt = 0
   Insn 513: point = 401, n_alt = 0
   Insn 512: point = 401, n_alt = 0
   Insn 511: point = 401, n_alt = 3
   Insn 510: point = 401, n_alt = -2
   Insn 509: point = 402, n_alt = 4
   Insn 508: point = 403, n_alt = 21
   Insn 507: point = 404, n_alt = -2
   Insn 506: point = 405, n_alt = -2
   Insn 505: point = 406, n_alt = 4
   Insn 504: point = 406, n_alt = 0
   Insn 503: point = 407, n_alt = 8
   Insn 502: point = 408, n_alt = 0
   Insn 692: point = 409, n_alt = -2
	Hard reg 2 is preferable by r442 with profit 1000
   Insn 501: point = 411, n_alt = 1
   Insn 691: point = 412, n_alt = -2
	Hard reg 2 is preferable by r442 with profit 1000
	Hard reg 0 is preferable by r442 with profit 1000
   Insn 500: point = 414, n_alt = 0
   Insn 499: point = 415, n_alt = 1
   Insn 498: point = 417, n_alt = 0
   Insn 497: point = 418, n_alt = 0
   Insn 496: point = 419, n_alt = 15
   Insn 495: point = 420, n_alt = 1
   Insn 494: point = 422, n_alt = 14
   Insn 493: point = 423, n_alt = -2
   Insn 492: point = 424, n_alt = 0
   Insn 491: point = 424, n_alt = -2
   Insn 690: point = 425, n_alt = 14
	Hard reg 20 is preferable by r441 with profit 1000
   Insn 490: point = 427, n_alt = 0
   Insn 489: point = 429, n_alt = 1
   Insn 488: point = 431, n_alt = 0
   Insn 487: point = 432, n_alt = 0
   Insn 486: point = 434, n_alt = 0
   Insn 689: point = 436, n_alt = 1
	Hard reg 0 is preferable by r440 with profit 1000
   Insn 485: point = 438, n_alt = 0
   Insn 484: point = 440, n_alt = 0
   Insn 483: point = 442, n_alt = 3
   Insn 482: point = 443, n_alt = 1
   Insn 481: point = 445, n_alt = 0
   Insn 480: point = 447, n_alt = 0
   Insn 479: point = 448, n_alt = 0
   Insn 478: point = 450, n_alt = 0
   Insn 477: point = 451, n_alt = 0
   Insn 476: point = 453, n_alt = 0
   Insn 475: point = 454, n_alt = 0
   Insn 688: point = 456, n_alt = 1
	Hard reg 0 is preferable by r439 with profit 1000
   Insn 474: point = 458, n_alt = 1
   Insn 473: point = 460, n_alt = 0
  BB 26
   Insn 471: point = 461, n_alt = -1
   Insn 470: point = 461, n_alt = 0
   Insn 469: point = 462, n_alt = 0
   Insn 468: point = 464, n_alt = 0
   Insn 467: point = 466, n_alt = 3
   Insn 466: point = 467, n_alt = 1
   Insn 465: point = 469, n_alt = 0
   Insn 464: point = 471, n_alt = 0
  BB 25
   Insn 461: point = 472, n_alt = 0
   Insn 460: point = 472, n_alt = 1
   Insn 459: point = 473, n_alt = 0
   Insn 458: point = 475, n_alt = 0
   Insn 457: point = 476, n_alt = -1
   Insn 686: point = 478, n_alt = 15
   Insn 456: point = 480, n_alt = 14
   Insn 455: point = 482, n_alt = 0
   Insn 454: point = 484, n_alt = 3
   Insn 453: point = 485, n_alt = 1
   Insn 452: point = 487, n_alt = 0
   Insn 451: point = 489, n_alt = 0
   Insn 450: point = 491, n_alt = 0
   Insn 449: point = 492, n_alt = 1
   Insn 448: point = 493, n_alt = 0
   Insn 447: point = 494, n_alt = 15
   Insn 446: point = 495, n_alt = 1
   Insn 445: point = 497, n_alt = 14
   Insn 444: point = 498, n_alt = -2
   Insn 443: point = 499, n_alt = 0
   Insn 442: point = 499, n_alt = -2
   Insn 685: point = 500, n_alt = 14
	Hard reg 20 is preferable by r436 with profit 1000
   Insn 441: point = 502, n_alt = 0
   Insn 440: point = 504, n_alt = 1
   Insn 439: point = 506, n_alt = 0
   Insn 438: point = 507, n_alt = 0
   Insn 437: point = 509, n_alt = 0
   Insn 684: point = 511, n_alt = 1
	Hard reg 0 is preferable by r435 with profit 1000
   Insn 436: point = 513, n_alt = 0
   Insn 435: point = 515, n_alt = 0
   Insn 434: point = 517, n_alt = 3
   Insn 433: point = 518, n_alt = 1
   Insn 432: point = 520, n_alt = 0
   Insn 431: point = 522, n_alt = 0
   Insn 430: point = 523, n_alt = 0
   Insn 429: point = 525, n_alt = 0
   Insn 428: point = 526, n_alt = 0
   Insn 427: point = 528, n_alt = 0
   Insn 426: point = 529, n_alt = 0
   Insn 683: point = 531, n_alt = 1
	Hard reg 0 is preferable by r434 with profit 1000
   Insn 425: point = 533, n_alt = 1
   Insn 424: point = 535, n_alt = 0
   Insn 423: point = 536, n_alt = 0
   Insn 422: point = 536, n_alt = -2
   Insn 421: point = 537, n_alt = 4
  BB 24
   Insn 416: point = 538, n_alt = -1
   Insn 415: point = 538, n_alt = 1
  BB 23
   Insn 414: point = 540, n_alt = -1
   Insn 413: point = 540, n_alt = 1
   Insn 412: point = 540, n_alt = 14
   Insn 411: point = 542, n_alt = 0
   Insn 410: point = 544, n_alt = 3
   Insn 409: point = 545, n_alt = 1
   Insn 408: point = 547, n_alt = 0
   Insn 407: point = 549, n_alt = 0
   Insn 406: point = 550, n_alt = 2
  BB 22
   Insn 403: point = 551, n_alt = 1
   Insn 402: point = 552, n_alt = 0
   Insn 401: point = 553, n_alt = 0
   Insn 400: point = 553, n_alt = 15
   Insn 399: point = 554, n_alt = 1
   Insn 398: point = 556, n_alt = 14
   Insn 397: point = 557, n_alt = -2
   Insn 396: point = 558, n_alt = 0
   Insn 395: point = 558, n_alt = -2
   Insn 682: point = 559, n_alt = 14
	Hard reg 20 is preferable by r433 with profit 1000
   Insn 394: point = 561, n_alt = 0
   Insn 393: point = 563, n_alt = 1
   Insn 392: point = 565, n_alt = 0
   Insn 391: point = 566, n_alt = 0
   Insn 390: point = 568, n_alt = 0
   Insn 681: point = 570, n_alt = 1
	Hard reg 0 is preferable by r432 with profit 1000
   Insn 389: point = 572, n_alt = 0
   Insn 388: point = 574, n_alt = 0
   Insn 387: point = 576, n_alt = 3
   Insn 386: point = 577, n_alt = 1
   Insn 385: point = 579, n_alt = 0
   Insn 384: point = 581, n_alt = 0
   Insn 383: point = 582, n_alt = 0
   Insn 382: point = 584, n_alt = 0
   Insn 381: point = 585, n_alt = 0
   Insn 380: point = 587, n_alt = 0
   Insn 379: point = 588, n_alt = 0
   Insn 680: point = 590, n_alt = 1
	Hard reg 0 is preferable by r431 with profit 1000
   Insn 378: point = 592, n_alt = 1
   Insn 377: point = 594, n_alt = 0
   Insn 376: point = 595, n_alt = 0
   Insn 679: point = 595, n_alt = 1
   Insn 375: point = 596, n_alt = 0
   Insn 374: point = 597, n_alt = 0
   Insn 373: point = 597, n_alt = 0
   Insn 372: point = 597, n_alt = 3
   Insn 371: point = 597, n_alt = -2
   Insn 370: point = 598, n_alt = 4
   Insn 369: point = 599, n_alt = 21
   Insn 368: point = 600, n_alt = -2
   Insn 367: point = 601, n_alt = 4
   Insn 366: point = 601, n_alt = 4
   Insn 365: point = 601, n_alt = 0
   Insn 364: point = 602, n_alt = 8
   Insn 678: point = 603, n_alt = -2
	Hard reg 1 is preferable by r429 with profit 1000
   Insn 363: point = 605, n_alt = 1
   Insn 677: point = 606, n_alt = -2
	Hard reg 1 is preferable by r429 with profit 1000
	Hard reg 0 is preferable by r429 with profit 1000
   Insn 362: point = 608, n_alt = 0
   Insn 361: point = 609, n_alt = 1
   Insn 360: point = 611, n_alt = 0
   Insn 359: point = 612, n_alt = 0
  BB 21
   Insn 356: point = 613, n_alt = 1
   Insn 355: point = 614, n_alt = 0
   Insn 354: point = 616, n_alt = 0
   Insn 353: point = 617, n_alt = -1
   Insn 352: point = 619, n_alt = 15
   Insn 351: point = 620, n_alt = 0
   Insn 350: point = 620, n_alt = -2
   Insn 675: point = 621, n_alt = 14
	Hard reg 20 is preferable by r427 with profit 1000
   Insn 349: point = 623, n_alt = 0
   Insn 348: point = 625, n_alt = 1
   Insn 347: point = 627, n_alt = 0
   Insn 346: point = 628, n_alt = 0
   Insn 345: point = 630, n_alt = 0
   Insn 344: point = 631, n_alt = 1
   Insn 343: point = 633, n_alt = 0
   Insn 342: point = 634, n_alt = 0
   Insn 341: point = 636, n_alt = 0
   Insn 340: point = 637, n_alt = 0
  BB 20
   Insn 335: point = 638, n_alt = -1
   Insn 334: point = 638, n_alt = 0
   Insn 333: point = 639, n_alt = 0
   Insn 332: point = 640, n_alt = 0
   Insn 331: point = 642, n_alt = 0
   Insn 330: point = 643, n_alt = 0
   Insn 329: point = 644, n_alt = 0
   Insn 328: point = 644, n_alt = -2
   Insn 327: point = 645, n_alt = 4
  BB 19
   Insn 325: point = 646, n_alt = -1
   Insn 324: point = 646, n_alt = 0
   Insn 323: point = 647, n_alt = 0
   Insn 322: point = 649, n_alt = 0
   Insn 321: point = 651, n_alt = 3
   Insn 320: point = 652, n_alt = 1
   Insn 319: point = 654, n_alt = 0
   Insn 318: point = 656, n_alt = 0
 r82: [244..245]
 r83: [292..293]
 r84: [289..291]
 r85: [287..288]
 r86: [273..286]
 r87: [282..283]
 r88: [280..281]
 r89: [277..279]
 r90: [275..276]
 r91: [271..274]
 r92: [257..268]
 r93: [264..265]
 r94: [261..263]
 r95: [259..260]
 r96: [256..258]
 r97: [220..221]
 r98: [146..147]
 r99: [143..145]
 r100: [138..142]
 r101: [138..139]
 r102: [134..135]
 r103: [131..133]
 r104: [126..130]
 r105: [126..127]
 r106: [120..123]
 r107: [216..217]
 r108: [213..215]
 r109: [206..207]
 r110: [204..205]
 r111: [201..203]
 r112: [194..195]
 r113: [191..193]
 r114: [186..190]
 r115: [186..187]
 r116: [180..183]
 r117: [174..175]
 r118: [172..173]
 r119: [169..171]
 r120: [164..168]
 r121: [164..165]
 r122: [158..161]
 r123: [114..115]
 r124: [112..113]
 r125: [110..111]
 r126: [385..386]
 r127: [382..384]
 r128: [380..381]
 r129: [377..379]
 r130: [373..374]
 r131: [370..372]
 r132: [368..369]
 r133: [365..367]
 r134: [361..362]
 r135: [358..360]
 r136: [356..357]
 r137: [344..345]
 r138: [341..343]
 r139: [331..340]
 r140: [336..337]
 r141: [333..335]
 r142: [329..332]
 r143: [329..330]
 r144: [325..326]
 r145: [323..324]
 r146: [320..322]
 r147: [308..319]
 r148: [315..316]
 r149: [313..314]
 r150: [310..312]
 r151: [306..309]
 r152: [306..307]
 r153: [302..303]
 r154: [299..301]
 r155: [296..298]
 r156: [653..654]
 r157: [650..652]
 r158: [648..649]
 r159: [646..647]
 r160: [641..643]
 r161: [638..640]
 r162: [635..637]
 r163: [632..634]
 r164: [629..631]
 r165: [629..630]
 r166: [626..628]
 r167: [624..625]
 r168: [620..621]
 r169: [615..617]
 r170: [610..612]
 r171: [601..609]
 r172: [600..603]
 r173: [591..592]
 r174: [586..588]
 r175: [583..585]
 r176: [583..584]
 r177: [567..582]
 r178: [578..579]
 r179: [575..577]
 r180: [573..574]
 r181: [571..572]
 r182: [567..568]
 r183: [564..566]
 r184: [562..563]
 r185: [558..559]
 r186: [538..550]
 r187: [546..547]
 r188: [543..545]
 r189: [541..542]
 r190: [538..540]
 r191: [532..533]
 r192: [527..529]
 r193: [524..526]
 r194: [524..525]
 r195: [508..523]
 r196: [519..520]
 r197: [516..518]
 r198: [514..515]
 r199: [512..513]
 r200: [508..509]
 r201: [505..507]
 r202: [503..504]
 r203: [499..500]
 r204: [488..489]
 r205: [486..487]
 r206: [483..485]
 r207: [481..482]
 r208: [477..478]
 r209: [474..476]
 r210: [468..469]
 r211: [465..467]
 r212: [463..464]
 r213: [461..462]
 r214: [457..458]
 r215: [452..454]
 r216: [449..451]
 r217: [449..450]
 r218: [433..448]
 r219: [444..445]
 r220: [441..443]
 r221: [439..440]
 r222: [437..438]
 r223: [433..434]
 r224: [430..432]
 r225: [428..429]
 r226: [424..425]
 r227: [416..418]
 r228: [406..415]
 r229: [404..409]
 r230: [396..398]
 r231: [393..395]
 r232: [90..91]
 r233: [85..87]
 r234: [82..84]
 r235: [82..83]
 r236: [66..81]
 r237: [77..78]
 r238: [74..76]
 r239: [72..73]
 r240: [70..71]
 r241: [66..67]
 r242: [63..65]
 r243: [61..62]
 r244: [57..58]
 r245: [49..51]
 r246: [46..48]
 r247: [43..45]
 r248: [40..42]
 r249: [37..39]
 r250: [37..38]
 r251: [34..36]
 r252: [32..33]
 r253: [28..29]
 r254: [23..25]
 r255: [54..56]
 r256: [26..27]
 r257: [5..6]
 r258: [618..619]
 r259: [555..557]
 r260: [496..498]
 r261: [421..423]
 r262: [0..4]
 r263: [252..253]
 r264: [250..251]
 r265: [246..247]
 r266: [236..237]
 r267: [234..235]
 r268: [232..233]
 r269: [230..231]
 r270: [228..229]
 r271: [226..227]
 r272: [294..295]
 r273: [289..290]
 r274: [284..285]
 r275: [277..278]
 r276: [266..267]
 r277: [261..262]
 r278: [254..255]
 r279: [224..225]
 r280: [222..223]
 r281: [153..155]
 r282: [152..154]
 r283: [150..151]
 r284: [148..149]
 r285: [143..144]
 r286: [140..141]
 r287: [136..137]
 r288: [131..132]
 r289: [128..129]
 r290: [124..125]
 r291: [121..122]
 r292: [118..119]
 r293: [218..219]
 r294: [212..214]
 r295: [210..211]
 r296: [208..209]
 r297: [200..202]
 r298: [198..199]
 r299: [196..197]
 r300: [191..192]
 r301: [188..189]
 r302: [184..185]
 r303: [181..182]
 r304: [178..179]
 r305: [176..177]
 r306: [169..170]
 r307: [166..167]
 r308: [162..163]
 r309: [159..160]
 r310: [156..157]
 r311: [116..117]
 r312: [108..109]
 r313: [350..351]
 r314: [387..388]
 r315: [382..383]
 r316: [377..378]
 r317: [375..376]
 r318: [370..371]
 r319: [365..366]
 r320: [363..364]
 r321: [358..359]
 r322: [354..355]
 r323: [352..353]
 r324: [348..349]
 r325: [346..347]
 r326: [341..342]
 r327: [338..339]
 r328: [333..334]
 r329: [327..328]
 r330: [320..321]
 r331: [317..318]
 r332: [310..311]
 r333: [304..305]
 r334: [299..300]
 r335: [296..297]
 r336: [106..107]
 r337: [104..105]
 r338: [102..103]
 r339: [100..101]
 r340: [98..99]
 r341: [96..97]
 r342: [655..656]
 r343: [650..651]
 r344: [644..645]
 r345: [641..642]
 r346: [638..639]
 r347: [635..636]
 r348: [632..633]
 r349: [626..627]
 r350: [613..614]
 r351: [615..616]
 r352: [610..611]
 r353: [607..608]
 r354: [599..602]
 r355: [597..598]
 r356: [593..594]
 r357: [586..587]
 r358: [580..581]
 r359: [575..576]
 r360: [564..565]
 r361: [553..554]
 r362: [555..556]
 r363: [551..552]
 r364: [548..549]
 r365: [543..544]
 r366: [536..537]
 r367: [534..535]
 r368: [527..528]
 r369: [521..522]
 r370: [516..517]
 r371: [505..506]
 r372: [494..495]
 r373: [496..497]
 r374: [492..493]
 r375: [490..491]
 r376: [483..484]
 r377: [472..473]
 r378: [474..475]
 r379: [470..471]
 r380: [465..466]
 r381: [459..460]
 r382: [452..453]
 r383: [446..447]
 r384: [441..442]
 r385: [430..431]
 r386: [419..420]
 r387: [421..422]
 r388: [416..417]
 r389: [413..414]
 r390: [405..408]
 r391: [403..407]
 r392: [401..402]
 r393: [399..400]
 r394: [396..397]
 r395: [391..392]
 r396: [393..394]
 r397: [94..95]
 r398: [92..93]
 r399: [85..86]
 r400: [79..80]
 r401: [74..75]
 r402: [63..64]
 r403: [52..53]
 r404: [54..55]
 r405: [49..50]
 r406: [46..47]
 r407: [43..44]
 r408: [40..41]
 r409: [34..35]
 r410: [21..22]
 r411: [23..24]
 r412: [19..20]
 r413: [17..18]
 r414: [15..16]
 r415: [13..14]
 r416: [11..12]
 r417: [7..8]
 r418: [9..10]
 r420: [248..249]
 r421: [2..3]
 r423: [238..239]
 r424: [240..241]
 r425: [242..243]
 r426: [269..272]
 r427: [622..623]
 r429: [604..606]
 r430: [595..596]
 r431: [589..590]
 r432: [569..570]
 r433: [560..561]
 r434: [530..531]
 r435: [510..511]
 r436: [501..502]
 r437: [479..480]
 r439: [455..456]
 r440: [435..436]
 r441: [426..427]
 r442: [410..412]
 r443: [389..390]
 r444: [88..89]
 r445: [68..69]
 r446: [59..60]
 r447: [30..31]
Compressing live ranges: from 657 to 552 - 84%
Ranges after the compression:
 r82: [208..209]
 r83: [248..249]
 r84: [246..247]
 r85: [244..245]
 r86: [232..243]
 r87: [240..241]
 r88: [238..239]
 r89: [236..237]
 r90: [234..235]
 r91: [230..233]
 r92: [220..229]
 r93: [226..227]
 r94: [224..225]
 r95: [222..223]
 r96: [220..221]
 r97: [184..185]
 r98: [124..125]
 r99: [122..123]
 r100: [118..121]
 r101: [118..119]
 r102: [114..115]
 r103: [112..113]
 r104: [108..111]
 r105: [108..109]
 r106: [104..105]
 r107: [180..181]
 r108: [178..179]
 r109: [172..173]
 r110: [170..171]
 r111: [168..169]
 r112: [162..163]
 r113: [160..161]
 r114: [156..159]
 r115: [156..157]
 r116: [152..153]
 r117: [146..147]
 r118: [144..145]
 r119: [142..143]
 r120: [138..141]
 r121: [138..139]
 r122: [134..135]
 r123: [98..99]
 r124: [96..97]
 r125: [94..95]
 r126: [328..329]
 r127: [326..327]
 r128: [324..325]
 r129: [322..323]
 r130: [318..319]
 r131: [316..317]
 r132: [314..315]
 r133: [312..313]
 r134: [308..309]
 r135: [306..307]
 r136: [304..305]
 r137: [292..293]
 r138: [290..291]
 r139: [282..289]
 r140: [286..287]
 r141: [284..285]
 r142: [280..283]
 r143: [280..281]
 r144: [276..277]
 r145: [274..275]
 r146: [272..273]
 r147: [262..271]
 r148: [268..269]
 r149: [266..267]
 r150: [264..265]
 r151: [260..263]
 r152: [260..261]
 r153: [256..257]
 r154: [254..255]
 r155: [252..253]
 r156: [548..549]
 r157: [546..547]
 r158: [544..545]
 r159: [542..543]
 r160: [538..539]
 r161: [536..537]
 r162: [534..535]
 r163: [532..533]
 r164: [530..531]
 r165: [530..531]
 r166: [528..529]
 r167: [526..527]
 r168: [522..523]
 r169: [518..519]
 r170: [514..515]
 r171: [508..513]
 r172: [508..509]
 r173: [500..501]
 r174: [496..497]
 r175: [494..495]
 r176: [494..495]
 r177: [480..493]
 r178: [490..491]
 r179: [488..489]
 r180: [486..487]
 r181: [484..485]
 r182: [480..481]
 r183: [478..479]
 r184: [476..477]
 r185: [472..473]
 r186: [456..465]
 r187: [462..463]
 r188: [460..461]
 r189: [458..459]
 r190: [456..457]
 r191: [450..451]
 r192: [446..447]
 r193: [444..445]
 r194: [444..445]
 r195: [430..443]
 r196: [440..441]
 r197: [438..439]
 r198: [436..437]
 r199: [434..435]
 r200: [430..431]
 r201: [428..429]
 r202: [426..427]
 r203: [422..423]
 r204: [412..413]
 r205: [410..411]
 r206: [408..409]
 r207: [406..407]
 r208: [402..403]
 r209: [400..401]
 r210: [394..395]
 r211: [392..393]
 r212: [390..391]
 r213: [388..389]
 r214: [384..385]
 r215: [380..381]
 r216: [378..379]
 r217: [378..379]
 r218: [364..377]
 r219: [374..375]
 r220: [372..373]
 r221: [370..371]
 r222: [368..369]
 r223: [364..365]
 r224: [362..363]
 r225: [360..361]
 r226: [356..357]
 r227: [350..351]
 r228: [344..349]
 r229: [344..345]
 r230: [338..339]
 r231: [336..337]
 r232: [74..75]
 r233: [70..71]
 r234: [68..69]
 r235: [68..69]
 r236: [54..67]
 r237: [64..65]
 r238: [62..63]
 r239: [60..61]
 r240: [58..59]
 r241: [54..55]
 r242: [52..53]
 r243: [50..51]
 r244: [46..47]
 r245: [40..41]
 r246: [38..39]
 r247: [36..37]
 r248: [34..35]
 r249: [32..33]
 r250: [32..33]
 r251: [30..31]
 r252: [28..29]
 r253: [24..25]
 r254: [20..21]
 r255: [44..45]
 r256: [22..23]
 r257: [2..3]
 r258: [520..521]
 r259: [470..471]
 r260: [420..421]
 r261: [354..355]
 r262: [0..1]
 r263: [216..217]
 r264: [214..215]
 r265: [210..211]
 r266: [200..201]
 r267: [198..199]
 r268: [196..197]
 r269: [194..195]
 r270: [192..193]
 r271: [190..191]
 r272: [250..251]
 r273: [246..247]
 r274: [242..243]
 r275: [236..237]
 r276: [228..229]
 r277: [224..225]
 r278: [218..219]
 r279: [188..189]
 r280: [186..187]
 r281: [130..131]
 r282: [130..131]
 r283: [128..129]
 r284: [126..127]
 r285: [122..123]
 r286: [120..121]
 r287: [116..117]
 r288: [112..113]
 r289: [110..111]
 r290: [106..107]
 r291: [104..105]
 r292: [102..103]
 r293: [182..183]
 r294: [178..179]
 r295: [176..177]
 r296: [174..175]
 r297: [168..169]
 r298: [166..167]
 r299: [164..165]
 r300: [160..161]
 r301: [158..159]
 r302: [154..155]
 r303: [152..153]
 r304: [150..151]
 r305: [148..149]
 r306: [142..143]
 r307: [140..141]
 r308: [136..137]
 r309: [134..135]
 r310: [132..133]
 r311: [100..101]
 r312: [92..93]
 r313: [298..299]
 r314: [330..331]
 r315: [326..327]
 r316: [322..323]
 r317: [320..321]
 r318: [316..317]
 r319: [312..313]
 r320: [310..311]
 r321: [306..307]
 r322: [302..303]
 r323: [300..301]
 r324: [296..297]
 r325: [294..295]
 r326: [290..291]
 r327: [288..289]
 r328: [284..285]
 r329: [278..279]
 r330: [272..273]
 r331: [270..271]
 r332: [264..265]
 r333: [258..259]
 r334: [254..255]
 r335: [252..253]
 r336: [90..91]
 r337: [88..89]
 r338: [86..87]
 r339: [84..85]
 r340: [82..83]
 r341: [80..81]
 r342: [550..551]
 r343: [546..547]
 r344: [540..541]
 r345: [538..539]
 r346: [536..537]
 r347: [534..535]
 r348: [532..533]
 r349: [528..529]
 r350: [516..517]
 r351: [518..519]
 r352: [514..515]
 r353: [512..513]
 r354: [508..509]
 r355: [506..507]
 r356: [502..503]
 r357: [496..497]
 r358: [492..493]
 r359: [488..489]
 r360: [478..479]
 r361: [468..469]
 r362: [470..471]
 r363: [466..467]
 r364: [464..465]
 r365: [460..461]
 r366: [454..455]
 r367: [452..453]
 r368: [446..447]
 r369: [442..443]
 r370: [438..439]
 r371: [428..429]
 r372: [418..419]
 r373: [420..421]
 r374: [416..417]
 r375: [414..415]
 r376: [408..409]
 r377: [398..399]
 r378: [400..401]
 r379: [396..397]
 r380: [392..393]
 r381: [386..387]
 r382: [380..381]
 r383: [376..377]
 r384: [372..373]
 r385: [362..363]
 r386: [352..353]
 r387: [354..355]
 r388: [350..351]
 r389: [348..349]
 r390: [344..345]
 r391: [344..345]
 r392: [342..343]
 r393: [340..341]
 r394: [338..339]
 r395: [334..335]
 r396: [336..337]
 r397: [78..79]
 r398: [76..77]
 r399: [70..71]
 r400: [66..67]
 r401: [62..63]
 r402: [52..53]
 r403: [42..43]
 r404: [44..45]
 r405: [40..41]
 r406: [38..39]
 r407: [36..37]
 r408: [34..35]
 r409: [30..31]
 r410: [18..19]
 r411: [20..21]
 r412: [16..17]
 r413: [14..15]
 r414: [12..13]
 r415: [10..11]
 r416: [8..9]
 r417: [4..5]
 r418: [6..7]
 r420: [212..213]
 r421: [0..1]
 r423: [202..203]
 r424: [204..205]
 r425: [206..207]
 r426: [230..231]
 r427: [524..525]
 r429: [510..511]
 r430: [504..505]
 r431: [498..499]
 r432: [482..483]
 r433: [474..475]
 r434: [448..449]
 r435: [432..433]
 r436: [424..425]
 r437: [404..405]
 r439: [382..383]
 r440: [366..367]
 r441: [358..359]
 r442: [346..347]
 r443: [332..333]
 r444: [72..73]
 r445: [56..57]
 r446: [48..49]
 r447: [26..27]

********** Local #3: **********

	   Spilling non-eliminable hard regs: 6
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 586:  (0) =f  (1) fm {*extenddfxf2_i387}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 457:  (0) =f  (1) fm {*extenddfxf2_i387}
            1 Non pseudo reload: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 353:  (0) =f  (1) fm {*extenddfxf2_i387}
	   Spilling non-eliminable hard regs: 6
  Slot 0 regnos (width = 0):	 208	 447	 446	 445	 444	 441	 440	 439	 436	 435	 434	 433	 432	 431	 427	 425	 258	 256
Changing spilled pseudos to memory in insn #671
Changing spilled pseudos to memory in insn #672
Changing spilled pseudos to memory in insn #349
Changing spilled pseudos to memory in insn #675
Changing spilled pseudos to memory in insn #352
Changing spilled pseudos to memory in insn #353
Changing spilled pseudos to memory in insn #680
Changing spilled pseudos to memory in insn #379
Changing spilled pseudos to memory in insn #681
Changing spilled pseudos to memory in insn #390
Changing spilled pseudos to memory in insn #394
Changing spilled pseudos to memory in insn #682
Changing spilled pseudos to memory in insn #683
Changing spilled pseudos to memory in insn #426
Changing spilled pseudos to memory in insn #684
Changing spilled pseudos to memory in insn #437
Changing spilled pseudos to memory in insn #441
Changing spilled pseudos to memory in insn #685
Changing spilled pseudos to memory in insn #686
Changing spilled pseudos to memory in insn #457
Changing spilled pseudos to memory in insn #688
Changing spilled pseudos to memory in insn #475
Changing spilled pseudos to memory in insn #689
Changing spilled pseudos to memory in insn #486
Changing spilled pseudos to memory in insn #490
Changing spilled pseudos to memory in insn #690
Changing spilled pseudos to memory in insn #694
Changing spilled pseudos to memory in insn #541
Changing spilled pseudos to memory in insn #695
Changing spilled pseudos to memory in insn #552
Changing spilled pseudos to memory in insn #556
Changing spilled pseudos to memory in insn #696
Changing spilled pseudos to memory in insn #582
Changing spilled pseudos to memory in insn #697
Changing spilled pseudos to memory in insn #585
Changing spilled pseudos to memory in insn #586
	   Spilling non-eliminable hard regs: 6

********** Local #4: **********

	   Spilling non-eliminable hard regs: 6
Reusing alternative 0 for insn #586
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 586:  (0) =f  (1) fm {*extenddfxf2_i387}
Reusing alternative 15 for insn #585
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 585:  (0) m  (1) v {*movdf_internal}
Reusing alternative 14 for insn #697
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 697:  (0) v  (1) m {*movdf_internal}
Reusing alternative 0 for insn #582
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 582:  (0) =m  (1) f {truncxfdf2}
Reusing alternative 14 for insn #696
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 696:  (0) v  (1) m {*movdf_internal}
Reusing alternative 0 for insn #556
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 556:  (0) =m  (1) f {truncxfdf2}
Reusing alternative 0 for insn #552
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 552:  (0) =f  (1) m {floatsixf2}
Reusing alternative 1 for insn #695
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 695:  (0) m  (1) re {*movsi_internal}
Reusing alternative 0 for insn #541
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 541:  (0) =f  (1) m {floatsixf2}
Reusing alternative 1 for insn #694
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 694:  (0) m  (1) re {*movsi_internal}
Reusing alternative 14 for insn #690
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 690:  (0) v  (1) m {*movdf_internal}
Reusing alternative 0 for insn #490
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 490:  (0) =m  (1) f {truncxfdf2}
Reusing alternative 0 for insn #486
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 486:  (0) =f  (1) m {floatsixf2}
Reusing alternative 1 for insn #689
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 689:  (0) m  (1) re {*movsi_internal}
Reusing alternative 0 for insn #475
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 475:  (0) =f  (1) m {floatsixf2}
Reusing alternative 1 for insn #688
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 688:  (0) m  (1) re {*movsi_internal}
Reusing alternative 0 for insn #457
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 457:  (0) =f  (1) fm {*extenddfxf2_i387}
Reusing alternative 15 for insn #686
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 686:  (0) m  (1) v {*movdf_internal}
Reusing alternative 14 for insn #685
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 685:  (0) v  (1) m {*movdf_internal}
Reusing alternative 0 for insn #441
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 441:  (0) =m  (1) f {truncxfdf2}
Reusing alternative 0 for insn #437
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 437:  (0) =f  (1) m {floatsixf2}
Reusing alternative 1 for insn #684
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 684:  (0) m  (1) re {*movsi_internal}
Reusing alternative 0 for insn #426
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 426:  (0) =f  (1) m {floatsixf2}
Reusing alternative 1 for insn #683
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 683:  (0) m  (1) re {*movsi_internal}
Reusing alternative 14 for insn #682
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 682:  (0) v  (1) m {*movdf_internal}
Reusing alternative 0 for insn #394
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 394:  (0) =m  (1) f {truncxfdf2}
Reusing alternative 0 for insn #390
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 390:  (0) =f  (1) m {floatsixf2}
Reusing alternative 1 for insn #681
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 681:  (0) m  (1) re {*movsi_internal}
Reusing alternative 0 for insn #379
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 379:  (0) =f  (1) m {floatsixf2}
Reusing alternative 1 for insn #680
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 680:  (0) m  (1) re {*movsi_internal}
Reusing alternative 0 for insn #353
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 353:  (0) =f  (1) fm {*extenddfxf2_i387}
Reusing alternative 15 for insn #352
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 352:  (0) m  (1) v {*movdf_internal}
Reusing alternative 14 for insn #675
          alt=14,overall=0,losers=0,rld_nregs=0
	 Choosing alt 14 in insn 675:  (0) v  (1) m {*movdf_internal}
Reusing alternative 0 for insn #349
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 349:  (0) =m  (1) f {truncxfdf2}
Reusing alternative 0 for insn #672
            0 Costly set: reject++
          alt=0,overall=1,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 672:  (0) =Yf*f  (1) Yf*fm {*movdf_internal}
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Costly loser: reject++
            1 Spill pseudo into memory: reject+=3
          alt=0,overall=626,losers=3,rld_nregs=2
            1 Costly loser: reject++
            1 Non-prefered reload: reject+=600
          alt=1,overall=613,losers=2,rld_nregs=1
            0 Costly loser: reject++
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-prefered reload: reject+=600
          alt=9,overall=612,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=615,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Non-prefered reload: reject+=600
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=11,overall=615,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=13,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=14,overall=21,losers=2,rld_nregs=1
          alt=15,overall=0,losers=0,rld_nregs=0
	 Choosing alt 15 in insn 671:  (0) m  (1) v {*movdf_internal}
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=320, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=288, prev_offset=0)
Can eliminate 19 to 6 (offset=-16, prev_offset=-16)
changing reg in insn 19
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 48
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 64
changing reg in insn 59
changing reg in insn 60
changing reg in insn 60
changing reg in insn 62
changing reg in insn 62
changing reg in insn 63
changing reg in insn 63
changing reg in insn 65
changing reg in insn 85
changing reg in insn 86
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 100
changing reg in insn 100
changing reg in insn 100
changing reg in insn 105
changing reg in insn 104
changing reg in insn 105
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 111
changing reg in insn 111
changing reg in insn 111
changing reg in insn 116
changing reg in insn 115
changing reg in insn 116
changing reg in insn 119
changing reg in insn 122
changing reg in insn 130
changing reg in insn 131
changing reg in insn 131
changing reg in insn 133
changing reg in insn 140
changing reg in insn 141
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 144
changing reg in insn 150
changing reg in insn 151
changing reg in insn 151
changing reg in insn 153
changing reg in insn 153
changing reg in insn 153
changing reg in insn 158
changing reg in insn 157
changing reg in insn 158
changing reg in insn 160
changing reg in insn 163
changing reg in insn 168
changing reg in insn 169
changing reg in insn 169
changing reg in insn 170
changing reg in insn 170
changing reg in insn 172
changing reg in insn 172
changing reg in insn 172
changing reg in insn 177
changing reg in insn 176
changing reg in insn 177
changing reg in insn 179
changing reg in insn 182
changing reg in insn 195
changing reg in insn 196
changing reg in insn 196
changing reg in insn 197
changing reg in insn 197
changing reg in insn 198
changing reg in insn 213
changing reg in insn 214
changing reg in insn 214
changing reg in insn 216
changing reg in insn 216
changing reg in insn 217
changing reg in insn 217
changing reg in insn 219
changing reg in insn 226
changing reg in insn 227
changing reg in insn 227
changing reg in insn 229
changing reg in insn 229
changing reg in insn 230
changing reg in insn 230
changing reg in insn 232
changing reg in insn 239
changing reg in insn 240
changing reg in insn 240
changing reg in insn 242
changing reg in insn 242
changing reg in insn 243
changing reg in insn 258
changing reg in insn 259
changing reg in insn 259
changing reg in insn 261
changing reg in insn 261
changing reg in insn 261
changing reg in insn 267
changing reg in insn 263
changing reg in insn 264
changing reg in insn 264
changing reg in insn 266
changing reg in insn 266
changing reg in insn 268
changing reg in insn 267
changing reg in insn 268
changing reg in insn 270
changing reg in insn 271
changing reg in insn 271
changing reg in insn 272
changing reg in insn 272
changing reg in insn 274
changing reg in insn 274
changing reg in insn 274
changing reg in insn 281
changing reg in insn 276
changing reg in insn 277
changing reg in insn 277
changing reg in insn 278
changing reg in insn 278
changing reg in insn 280
changing reg in insn 280
changing reg in insn 282
changing reg in insn 281
changing reg in insn 282
changing reg in insn 284
changing reg in insn 285
changing reg in insn 285
changing reg in insn 287
changing reg in insn 287
changing reg in insn 289
changing reg in insn 319
changing reg in insn 320
changing reg in insn 320
changing reg in insn 322
changing reg in insn 322
changing reg in insn 323
changing reg in insn 323
changing reg in insn 324
changing reg in insn 330
changing reg in insn 332
changing reg in insn 332
changing reg in insn 334
changing reg in insn 340
changing reg in insn 342
changing reg in insn 342
changing reg in insn 344
changing reg in insn 344
changing reg in insn 345
changing reg in insn 346
changing reg in insn 348
changing reg in insn 348
changing reg in insn 349
changing reg in insn 350
changing reg in insn 353
changing reg in insn 355
changing reg in insn 359
changing reg in insn 361
changing reg in insn 361
changing reg in insn 365
changing reg in insn 368
changing reg in insn 378
changing reg in insn 379
changing reg in insn 381
changing reg in insn 382
changing reg in insn 383
changing reg in insn 391
changing reg in insn 385
changing reg in insn 386
changing reg in insn 386
changing reg in insn 388
changing reg in insn 388
changing reg in insn 389
changing reg in insn 389
changing reg in insn 390
changing reg in insn 391
changing reg in insn 391
changing reg in insn 393
changing reg in insn 393
changing reg in insn 394
changing reg in insn 395
changing reg in insn 406
changing reg in insn 415
changing reg in insn 413
changing reg in insn 408
changing reg in insn 409
changing reg in insn 409
changing reg in insn 411
changing reg in insn 411
changing reg in insn 412
changing reg in insn 412
changing reg in insn 415
changing reg in insn 413
changing reg in insn 425
changing reg in insn 426
changing reg in insn 428
changing reg in insn 429
changing reg in insn 430
changing reg in insn 438
changing reg in insn 432
changing reg in insn 433
changing reg in insn 433
changing reg in insn 435
changing reg in insn 435
changing reg in insn 436
changing reg in insn 436
changing reg in insn 437
changing reg in insn 438
changing reg in insn 438
changing reg in insn 440
changing reg in insn 440
changing reg in insn 441
changing reg in insn 442
changing reg in insn 451
changing reg in insn 452
changing reg in insn 452
changing reg in insn 453
changing reg in insn 453
changing reg in insn 455
changing reg in insn 455
changing reg in insn 456
changing reg in insn 457
changing reg in insn 459
changing reg in insn 465
changing reg in insn 466
changing reg in insn 466
changing reg in insn 468
changing reg in insn 468
changing reg in insn 469
changing reg in insn 469
changing reg in insn 470
changing reg in insn 474
changing reg in insn 475
changing reg in insn 477
changing reg in insn 478
changing reg in insn 479
changing reg in insn 487
changing reg in insn 481
changing reg in insn 482
changing reg in insn 482
changing reg in insn 484
changing reg in insn 484
changing reg in insn 485
changing reg in insn 485
changing reg in insn 486
changing reg in insn 487
changing reg in insn 487
changing reg in insn 489
changing reg in insn 489
changing reg in insn 490
changing reg in insn 491
changing reg in insn 497
changing reg in insn 499
changing reg in insn 499
changing reg in insn 504
changing reg in insn 507
changing reg in insn 519
changing reg in insn 521
changing reg in insn 521
changing reg in insn 540
changing reg in insn 541
changing reg in insn 543
changing reg in insn 544
changing reg in insn 545
changing reg in insn 553
changing reg in insn 547
changing reg in insn 548
changing reg in insn 548
changing reg in insn 550
changing reg in insn 550
changing reg in insn 551
changing reg in insn 551
changing reg in insn 552
changing reg in insn 553
changing reg in insn 553
changing reg in insn 555
changing reg in insn 555
changing reg in insn 556
changing reg in insn 557
changing reg in insn 563
changing reg in insn 565
changing reg in insn 565
changing reg in insn 567
changing reg in insn 573
changing reg in insn 575
changing reg in insn 575
changing reg in insn 577
changing reg in insn 577
changing reg in insn 578
changing reg in insn 579
changing reg in insn 581
changing reg in insn 581
changing reg in insn 582
changing reg in insn 583
changing reg in insn 586
changing reg in insn 588
changing reg in insn 559
changing reg in insn 624
changing reg in insn 627
changing reg in insn 397
changing reg in insn 444
changing reg in insn 493
changing reg in insn 627
changing reg in insn 636
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 16
changing reg in insn 17
changing reg in insn 21
changing reg in insn 22
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 29
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 44
changing reg in insn 45
changing reg in insn 47
changing reg in insn 50
changing reg in insn 51
changing reg in insn 54
changing reg in insn 58
changing reg in insn 59
changing reg in insn 61
changing reg in insn 66
changing reg in insn 67
changing reg in insn 81
changing reg in insn 82
changing reg in insn 84
changing reg in insn 85
changing reg in insn 89
changing reg in insn 91
changing reg in insn 90
changing reg in insn 92
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 107
changing reg in insn 108
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 113
changing reg in insn 118
changing reg in insn 119
changing reg in insn 120
changing reg in insn 121
changing reg in insn 124
changing reg in insn 125
changing reg in insn 129
changing reg in insn 130
changing reg in insn 132
changing reg in insn 134
changing reg in insn 135
changing reg in insn 136
changing reg in insn 139
changing reg in insn 140
changing reg in insn 143
changing reg in insn 145
changing reg in insn 147
changing reg in insn 148
changing reg in insn 149
changing reg in insn 150
changing reg in insn 152
changing reg in insn 153
changing reg in insn 154
changing reg in insn 155
changing reg in insn 159
changing reg in insn 160
changing reg in insn 161
changing reg in insn 162
changing reg in insn 165
changing reg in insn 166
changing reg in insn 167
changing reg in insn 168
changing reg in insn 171
changing reg in insn 172
changing reg in insn 173
changing reg in insn 174
changing reg in insn 178
changing reg in insn 179
changing reg in insn 180
changing reg in insn 181
changing reg in insn 184
changing reg in insn 185
changing reg in insn 194
changing reg in insn 195
changing reg in insn 200
changing reg in insn 201
changing reg in insn 206
changing reg in insn 207
changing reg in insn 212
changing reg in insn 213
changing reg in insn 215
changing reg in insn 218
changing reg in insn 219
changing reg in insn 225
changing reg in insn 226
changing reg in insn 228
changing reg in insn 231
changing reg in insn 232
changing reg in insn 238
changing reg in insn 239
changing reg in insn 241
changing reg in insn 243
changing reg in insn 244
changing reg in insn 245
changing reg in insn 246
changing reg in insn 253
changing reg in insn 254
changing reg in insn 257
changing reg in insn 258
changing reg in insn 260
changing reg in insn 261
changing reg in insn 262
changing reg in insn 263
changing reg in insn 265
changing reg in insn 269
changing reg in insn 270
changing reg in insn 273
changing reg in insn 274
changing reg in insn 275
changing reg in insn 276
changing reg in insn 279
changing reg in insn 283
changing reg in insn 284
changing reg in insn 286
changing reg in insn 288
changing reg in insn 289
changing reg in insn 294
changing reg in insn 295
changing reg in insn 304
changing reg in insn 305
changing reg in insn 306
changing reg in insn 307
changing reg in insn 308
changing reg in insn 309
changing reg in insn 310
changing reg in insn 311
changing reg in insn 312
changing reg in insn 313
changing reg in insn 318
changing reg in insn 319
changing reg in insn 321
changing reg in insn 327
changing reg in insn 328
changing reg in insn 331
changing reg in insn 332
changing reg in insn 333
changing reg in insn 334
changing reg in insn 341
changing reg in insn 342
changing reg in insn 343
changing reg in insn 344
changing reg in insn 347
changing reg in insn 348
changing reg in insn 355
changing reg in insn 356
changing reg in insn 354
changing reg in insn 355
changing reg in insn 360
changing reg in insn 361
changing reg in insn 362
changing reg in insn 364
changing reg in insn 369
changing reg in insn 370
changing reg in insn 371
changing reg in insn 377
changing reg in insn 378
changing reg in insn 380
changing reg in insn 384
changing reg in insn 385
changing reg in insn 387
changing reg in insn 392
changing reg in insn 393
changing reg in insn 399
changing reg in insn 400
changing reg in insn 398
changing reg in insn 402
changing reg in insn 403
changing reg in insn 407
changing reg in insn 408
changing reg in insn 410
changing reg in insn 421
changing reg in insn 422
changing reg in insn 424
changing reg in insn 425
changing reg in insn 427
changing reg in insn 431
changing reg in insn 432
changing reg in insn 434
changing reg in insn 439
changing reg in insn 440
changing reg in insn 446
changing reg in insn 447
changing reg in insn 445
changing reg in insn 448
changing reg in insn 449
changing reg in insn 450
changing reg in insn 451
changing reg in insn 454
changing reg in insn 459
changing reg in insn 460
changing reg in insn 458
changing reg in insn 459
changing reg in insn 464
changing reg in insn 465
changing reg in insn 467
changing reg in insn 473
changing reg in insn 474
changing reg in insn 476
changing reg in insn 480
changing reg in insn 481
changing reg in insn 483
changing reg in insn 488
changing reg in insn 489
changing reg in insn 495
changing reg in insn 496
changing reg in insn 494
changing reg in insn 498
changing reg in insn 499
changing reg in insn 500
changing reg in insn 502
changing reg in insn 506
changing reg in insn 503
changing reg in insn 508
changing reg in insn 509
changing reg in insn 510
changing reg in insn 514
changing reg in insn 515
changing reg in insn 520
changing reg in insn 521
changing reg in insn 523
changing reg in insn 524
changing reg in insn 522
changing reg in insn 535
changing reg in insn 536
changing reg in insn 539
changing reg in insn 540
changing reg in insn 542
changing reg in insn 546
changing reg in insn 547
changing reg in insn 549
changing reg in insn 554
changing reg in insn 555
changing reg in insn 561
changing reg in insn 562
changing reg in insn 560
changing reg in insn 564
changing reg in insn 565
changing reg in insn 566
changing reg in insn 567
changing reg in insn 574
changing reg in insn 575
changing reg in insn 576
changing reg in insn 577
changing reg in insn 580
changing reg in insn 581
changing reg in insn 588
changing reg in insn 589
changing reg in insn 587
changing reg in insn 588
changing reg in insn 593
changing reg in insn 594
changing reg in insn 598
changing reg in insn 599
changing reg in insn 600
changing reg in insn 601
changing reg in insn 602
changing reg in insn 603
changing reg in insn 605
changing reg in insn 606
changing reg in insn 611
changing reg in insn 612
changing reg in insn 620
changing reg in insn 621
changing reg in insn 13
changing reg in insn 631
deleting insn with uid = 19.
deleting insn with uid = 673.
deleting insn with uid = 64.
deleting insn with uid = 81.
deleting insn with uid = 94.
deleting insn with uid = 124.
deleting insn with uid = 133.
deleting insn with uid = 147.
deleting insn with uid = 165.
deleting insn with uid = 184.
deleting insn with uid = 200.
deleting insn with uid = 350.
deleting insn with uid = 677.
deleting insn with uid = 395.
deleting insn with uid = 397.
deleting insn with uid = 442.
deleting insn with uid = 444.
deleting insn with uid = 491.
deleting insn with uid = 493.
deleting insn with uid = 691.
deleting insn with uid = 506.
deleting insn with uid = 557.
deleting insn with uid = 559.
deleting insn with uid = 583.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 37.
verify found no changes in insn with uid = 69.
verify found no changes in insn with uid = 80.
verify found no changes in insn with uid = 93.
verify found no changes in insn with uid = 103.
verify found no changes in insn with uid = 114.
verify found no changes in insn with uid = 123.
verify found no changes in insn with uid = 138.
verify found no changes in insn with uid = 146.
verify found no changes in insn with uid = 156.
verify found no changes in insn with uid = 164.
verify found no changes in insn with uid = 175.
verify found no changes in insn with uid = 183.
verify found no changes in insn with uid = 199.
verify found no changes in insn with uid = 314.
verify found no changes in insn with uid = 329.
verify found no changes in insn with uid = 351.
verify found no changes in insn with uid = 373.
verify found no changes in insn with uid = 396.
verify found no changes in insn with uid = 423.
verify found no changes in insn with uid = 443.
verify found no changes in insn with uid = 492.
verify found no changes in insn with uid = 512.
verify found no changes in insn with uid = 558.
verify found no changes in insn with uid = 584.
verify found no changes in insn with uid = 596.
verify found no changes in insn with uid = 604.
verify found no changes in insn with uid = 607.
verify found no changes in insn with uid = 633.


vklad_not

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame] 20 [xmm0]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 20 [xmm0] 21 [xmm1] 22 [xmm2] 36 [r8] 37 [r9]
;;  ref usage 	r0={204d,177u} r1={69d,36u,19e} r2={39d,7u,4e} r3={4d,4u} r4={42d,10u} r5={58d,26u} r6={1d,304u} r7={10d,84u} r8={84d,52u} r9={67d,35u} r10={33d,1u} r11={33d,1u} r12={32d} r13={33d,1u} r14={32d} r15={33d,1u} r17={134d,18u} r18={32d} r19={1d,1u,40e} r20={59d,41u} r21={40d,8u} r22={34d,1u} r23={33d} r24={33d} r25={33d} r26={33d} r27={33d} r28={32d} r29={32d} r30={32d} r31={32d} r32={32d} r33={32d} r34={32d} r35={32d} r36={33d,1u} r37={33d,1u} r38={32d} r39={32d} r44={32d} r45={32d} r46={32d} r47={32d} r48={32d} r49={32d} r50={32d} r51={32d} r52={32d} r53={32d} r54={32d} r55={32d} r56={32d} r57={32d} r58={32d} r59={32d} r60={32d} r61={32d} r62={32d} r63={32d} r64={32d} r65={32d} r66={32d} r67={32d} r68={32d} r69={32d} r70={32d} r71={32d} r72={32d} r73={32d} r74={32d} r75={32d} 
;;    total ref usage 3522{2649d,810u,63e} in 550{518 regular + 32 call} insns.
(note 1 0 14 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8] 37 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8] 37 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 263 264 265 266 267 268 269 270 271 420
(note 14 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 14 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -232 [0xffffffffffffff18])) [1 summ_c+0 S8 A64])
        (reg:DI 5 di [ summ_c ])) "calc.c":276:1 74 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -236 [0xffffffffffffff14])) [5 days+0 S4 A32])
        (reg:SI 4 si [ days ])) "calc.c":276:1 75 {*movsi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -248 [0xffffffffffffff08])) [1 percent_c+0 S8 A64])
        (reg:DI 1 dx [ percent_c ])) "calc.c":276:1 74 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -256 [0xffffffffffffff00])) [1 history+0 S8 A64])
        (reg:DI 2 cx [ history ])) "calc.c":276:1 74 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -264 [0xfffffffffffffef8])) [15 capital+0 S8 A64])
        (reg:DI 36 r8 [ capital ])) "calc.c":276:1 74 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -272 [0xfffffffffffffef0])) [15 nalog_date+0 S8 A64])
        (reg:DI 37 r9 [ nalog_date ])) "calc.c":276:1 74 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:DI 0 ax [263])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 24 [0x18])) [1 nal_per_c+0 S8 A64])) "calc.c":276:1 74 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -280 [0xfffffffffffffee8])) [1 nal_per_c+0 S8 A64])
        (reg/f:DI 0 ax [263])) "calc.c":276:1 74 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [264])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int 32 [0x20])) [15 new_year+0 S8 A64])) "calc.c":276:1 74 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -288 [0xfffffffffffffee0])) [15 new_year+0 S8 A64])
        (reg/f:DI 0 ax [264])) "calc.c":276:1 74 {*movdi_internal}
     (nil))
(note 12 11 13 2 NOTE_INSN_FUNCTION_BEG)
(insn 13 12 16 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [8 D.4788+0 S8 A64])
                (unspec:DI [
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_SET))
            (set (reg:DI 0 ax [420])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":276:1 1159 {stack_protect_set_1_di}
     (nil))
(insn 16 13 17 2 (set (reg:DI 0 ax [265])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -232 [0xffffffffffffff18])) [1 summ_c+0 S8 A64])) "calc.c":281:23 74 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [265])) "calc.c":281:23 74 {*movdi_internal}
     (nil))
(call_insn/i 18 17 671 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":281:23 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 671 18 672 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S8 A64])
        (reg:DF 20 xmm0 [orig:82 _1 ] [82])) "calc.c":281:17 135 {*movdf_internal}
     (nil))
(insn 672 671 20 2 (set (reg:DF 11 st(3) [orig:82 _1 ] [82])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S8 A64])) "calc.c":281:17 135 {*movdf_internal}
     (nil))
(insn 20 672 670 2 (set (reg:XF 10 st(2) [423])
        (float_extend:XF (reg:DF 11 st(3) [orig:82 _1 ] [82]))) "calc.c":281:17 158 {*extenddfxf2_i387}
     (nil))
(insn 670 20 21 2 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [14 sum+0 S16 A128])
        (reg:XF 10 st(2) [423])) "calc.c":281:17 134 {*movxf_internal}
     (nil))
(insn 21 670 22 2 (set (reg:DI 0 ax [266])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -248 [0xffffffffffffff08])) [1 percent_c+0 S8 A64])) "calc.c":282:22 74 {*movdi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [266])) "calc.c":282:22 74 {*movdi_internal}
     (nil))
(call_insn/i 23 22 24 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":282:22 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 24 23 25 2 (set (reg:DF 0 ax [267])
        (reg:DF 20 xmm0)) "calc.c":282:22 135 {*movdf_internal}
     (nil))
(insn 25 24 26 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [2 percent+0 S8 A64])
        (reg:DF 0 ax [267])) "calc.c":282:22 135 {*movdf_internal}
     (nil))
(insn 26 25 27 2 (set (reg:DI 0 ax [268])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -280 [0xfffffffffffffee8])) [1 nal_per_c+0 S8 A64])) "calc.c":282:53 74 {*movdi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [268])) "calc.c":282:53 74 {*movdi_internal}
     (nil))
(call_insn/i 28 27 29 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":282:53 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 29 28 30 2 (set (reg:DF 0 ax [269])
        (reg:DF 20 xmm0)) "calc.c":282:53 135 {*movdf_internal}
     (nil))
(insn 30 29 31 2 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [2 nal_percent+0 S8 A128])
        (reg:DF 0 ax [269])) "calc.c":282:53 135 {*movdf_internal}
     (nil))
(insn 31 30 32 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [1 token+0 S8 A128])
        (const_int 0 [0])) "calc.c":284:11 74 {*movdi_internal}
     (nil))
(insn 32 31 33 2 (set (reg:DF 0 ax [270])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [2 nal_percent+0 S8 A128])) "calc.c":285:5 135 {*movdf_internal}
     (nil))
(insn 33 32 34 2 (set (reg:DF 20 xmm0)
        (reg:DF 0 ax [270])) "calc.c":285:5 135 {*movdf_internal}
     (nil))
(insn 34 33 35 2 (set (reg:DI 0 ax [271])
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7f09f171db40 *.LC25>)) "calc.c":285:5 74 {*movdi_internal}
     (nil))
(insn 35 34 36 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [271])) "calc.c":285:5 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7f09f171db40 *.LC25>)
        (nil)))
(insn 36 35 37 2 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) "calc.c":285:5 77 {*movqi_internal}
     (nil))
(call_insn 37 36 38 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f09f183f100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "calc.c":285:5 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DF (use (reg:DF 20 xmm0))
                (nil)))))
(insn 38 37 39 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -29 [0xffffffffffffffe3])) [0 sep+0 S4 A8])
        (const_int 2592 [0xa20])) "calc.c":286:10 75 {*movsi_internal}
     (nil))
(insn 39 38 40 2 (set (mem/c:QI (plus:DI (reg/f:DI 6 bp)
                (const_int -25 [0xffffffffffffffe7])) [0 sep+4 S1 A8])
        (const_int 0 [0])) "calc.c":286:10 77 {*movqi_internal}
     (nil))
(insn 40 39 657 2 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -212 [0xffffffffffffff2c])) [5 i+0 S4 A32])
        (const_int 1 [0x1])) "calc.c":287:14 75 {*movsi_internal}
     (nil))
(jump_insn 657 40 658 2 (set (pc)
        (label_ref 71)) "calc.c":287:5 807 {jump}
     (nil)
 -> 71)
;;  succ:       4 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 658 657 73)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 83 84 85 86 87 88 89 90 91 92 93 94 95 96 272 273 274 275 276 277 278
(code_label 73 658 43 3 90 (nil) [1 uses])
(note 43 73 44 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 3 (set (reg:SI 0 ax [272])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -212 [0xffffffffffffff2c])) [5 i+0 S4 A32])) "calc.c":289:46 75 {*movsi_internal}
     (nil))
(insn 45 44 46 3 (set (reg:DI 0 ax [orig:83 _2 ] [83])
        (sign_extend:DI (reg:SI 0 ax [272]))) "calc.c":289:46 147 {*extendsidi2_rex64}
     (nil))
(insn 46 45 47 3 (parallel [
            (set (reg:DI 1 dx [orig:84 _3 ] [84])
                (ashift:DI (reg:DI 0 ax [orig:83 _2 ] [83])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":289:46 656 {*ashldi3_1}
     (nil))
(insn 47 46 48 3 (set (reg/f:DI 0 ax [273])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -264 [0xfffffffffffffef8])) [15 capital+0 S8 A64])) "calc.c":289:46 74 {*movdi_internal}
     (nil))
(insn 48 47 49 3 (parallel [
            (set (reg/f:DI 0 ax [orig:85 _4 ] [85])
                (plus:DI (reg/f:DI 0 ax [273])
                    (reg:DI 1 dx [orig:84 _3 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":289:46 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -248 [0xffffffffffffff08])) [15 capital+0 S8 A64])
            (reg:DI 1 dx [orig:84 _3 ] [84]))
        (nil)))
(insn 49 48 50 3 (set (reg:SI 0 ax [orig:86 _5 ] [86])
        (mem:SI (reg/f:DI 0 ax [orig:85 _4 ] [85]) [5 *_4+0 S4 A32])) "calc.c":289:46 75 {*movsi_internal}
     (nil))
(insn 50 49 51 3 (set (reg:SI 1 dx [274])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -212 [0xffffffffffffff2c])) [5 i+0 S4 A32])) "calc.c":289:59 75 {*movsi_internal}
     (nil))
(insn 51 50 52 3 (set (reg:DI 1 dx [orig:87 _6 ] [87])
        (sign_extend:DI (reg:SI 1 dx [274]))) "calc.c":289:59 147 {*extendsidi2_rex64}
     (nil))
(insn 52 51 53 3 (parallel [
            (set (reg:DI 1 dx [orig:88 _7 ] [88])
                (ashift:DI (reg:DI 1 dx [orig:87 _6 ] [87])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":289:59 656 {*ashldi3_1}
     (nil))
(insn 53 52 54 3 (parallel [
            (set (reg:DI 2 cx [orig:89 _8 ] [89])
                (plus:DI (reg:DI 1 dx [orig:88 _7 ] [88])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":289:59 210 {*adddi_1}
     (nil))
(insn 54 53 55 3 (set (reg/f:DI 1 dx [275])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -264 [0xfffffffffffffef8])) [15 capital+0 S8 A64])) "calc.c":289:59 74 {*movdi_internal}
     (nil))
(insn 55 54 56 3 (parallel [
            (set (reg/f:DI 1 dx [orig:90 _9 ] [90])
                (plus:DI (reg/f:DI 1 dx [275])
                    (reg:DI 2 cx [orig:89 _8 ] [89])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":289:59 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -248 [0xffffffffffffff08])) [15 capital+0 S8 A64])
            (reg:DI 2 cx [orig:89 _8 ] [89]))
        (nil)))
(insn 56 55 57 3 (set (reg:SI 2 cx [orig:91 _10 ] [91])
        (mem:SI (reg/f:DI 1 dx [orig:90 _9 ] [90]) [5 *_9+0 S4 A32])) "calc.c":289:59 75 {*movsi_internal}
     (nil))
(insn 57 56 674 3 (parallel [
            (set (reg:SI 0 ax [orig:86 _5 ] [86])
                (minus:SI (reg:SI 0 ax [orig:86 _5 ] [86])
                    (reg:SI 2 cx [orig:91 _10 ] [91])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":289:9 282 {*subsi_1}
     (nil))
(insn 674 57 58 3 (set (reg:SI 1 dx [orig:92 _11 ] [92])
        (reg:SI 0 ax [orig:86 _5 ] [86])) "calc.c":289:9 75 {*movsi_internal}
     (nil))
(insn 58 674 59 3 (set (reg:SI 0 ax [276])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -212 [0xffffffffffffff2c])) [5 i+0 S4 A32])) "calc.c":289:34 75 {*movsi_internal}
     (nil))
(insn 59 58 60 3 (set (reg:DI 0 ax [orig:93 _12 ] [93])
        (sign_extend:DI (reg:SI 0 ax [276]))) "calc.c":289:34 147 {*extendsidi2_rex64}
     (nil))
(insn 60 59 61 3 (parallel [
            (set (reg:DI 2 cx [orig:94 _13 ] [94])
                (ashift:DI (reg:DI 0 ax [orig:93 _12 ] [93])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":289:34 656 {*ashldi3_1}
     (nil))
(insn 61 60 62 3 (set (reg/f:DI 0 ax [277])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -264 [0xfffffffffffffef8])) [15 capital+0 S8 A64])) "calc.c":289:34 74 {*movdi_internal}
     (nil))
(insn 62 61 63 3 (parallel [
            (set (reg/f:DI 0 ax [orig:95 _14 ] [95])
                (plus:DI (reg/f:DI 0 ax [277])
                    (reg:DI 2 cx [orig:94 _13 ] [94])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":289:34 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -248 [0xffffffffffffff08])) [15 capital+0 S8 A64])
            (reg:DI 2 cx [orig:94 _13 ] [94]))
        (nil)))
(insn 63 62 65 3 (set (reg:SI 0 ax [orig:96 _15 ] [96])
        (mem:SI (reg/f:DI 0 ax [orig:95 _14 ] [95]) [5 *_14+0 S4 A32])) "calc.c":289:9 75 {*movsi_internal}
     (nil))
(insn 65 63 66 3 (set (reg:SI 4 si)
        (reg:SI 0 ax [orig:96 _15 ] [96])) "calc.c":289:9 75 {*movsi_internal}
     (nil))
(insn 66 65 67 3 (set (reg:DI 0 ax [278])
        (symbol_ref/f:DI ("*.LC26") [flags 0x2]  <var_decl 0x7f09f171dbd0 *.LC26>)) "calc.c":289:9 74 {*movdi_internal}
     (nil))
(insn 67 66 68 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [278])) "calc.c":289:9 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC26") [flags 0x2]  <var_decl 0x7f09f171dbd0 *.LC26>)
        (nil)))
(insn 68 67 69 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) "calc.c":289:9 77 {*movqi_internal}
     (nil))
(call_insn 69 68 70 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f09f183f100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "calc.c":289:9 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 70 69 71 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -212 [0xffffffffffffff2c])) [5 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -212 [0xffffffffffffff2c])) [5 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":287:30 209 {*addsi_1}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 71 70 72 4 89 (nil) [1 uses])
(note 72 71 76 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 76 72 77 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -212 [0xffffffffffffff2c])) [5 i+0 S4 A32])
            (const_int 59 [0x3b]))) "calc.c":287:23 11 {*cmpsi_1}
     (nil))
(jump_insn 77 76 78 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 73)
            (pc))) "calc.c":287:23 806 {*jcc}
     (nil)
 -> 73)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 97 279 280
(note 78 77 79 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 5 (set (reg:DI 5 di)
        (const_int 16 [0x10])) "calc.c":291:32 74 {*movdi_internal}
     (nil))
(call_insn 80 79 82 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f09f185e800 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) "calc.c":291:32 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 82 80 83 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [10 change+0 S8 A64])
        (reg/f:DI 0 ax [279])) "calc.c":291:32 74 {*movdi_internal}
     (nil))
(insn 83 82 84 5 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -208 [0xffffffffffffff30])) [5 num+0 S4 A128])
        (const_int 0 [0])) "calc.c":292:9 75 {*movsi_internal}
     (nil))
(insn 84 83 85 5 (set (reg/f:DI 0 ax [280])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -256 [0xffffffffffffff00])) [1 history+0 S8 A64])) "calc.c":293:16 74 {*movdi_internal}
     (nil))
(insn 85 84 86 5 (set (reg:QI 0 ax [orig:97 _16 ] [97])
        (mem:QI (reg/f:DI 0 ax [280]) [0 *history_241(D)+0 S1 A8])) "calc.c":293:16 77 {*movqi_internal}
     (nil))
(insn 86 85 87 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:97 _16 ] [97])
            (const_int 0 [0]))) "calc.c":293:8 5 {*cmpqi_ccno_1}
     (nil))
(jump_insn 87 86 88 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 192)
            (pc))) "calc.c":293:8 806 {*jcc}
     (nil)
 -> 192)
;;  succ:       6 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 98 99 100 101 102 103 104 105 106 281 282 283 284 285 286 287 288 289 290 291 292
(note 88 87 89 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 89 88 90 6 (parallel [
            (set (reg:DI 1 dx [281])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -29 [0xffffffffffffffe3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":295:17 210 {*adddi_1}
     (nil))
(insn 90 89 91 6 (set (reg:DI 0 ax [282])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -256 [0xffffffffffffff00])) [1 history+0 S8 A64])) "calc.c":295:17 74 {*movdi_internal}
     (nil))
(insn 91 90 92 6 (set (reg:DI 4 si)
        (reg:DI 1 dx [281])) "calc.c":295:17 74 {*movdi_internal}
     (nil))
(insn 92 91 93 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [282])) "calc.c":295:17 74 {*movdi_internal}
     (nil))
(call_insn/i 93 92 95 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strpbrk") [flags 0x41]  <function_decl 0x7f09f183b300 strpbrk>) [0 __builtin_strpbrk S1 A8])
            (const_int 0 [0]))) "calc.c":295:17 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 95 93 96 6 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [1 token+0 S8 A128])
        (reg:DI 0 ax [283])) "calc.c":295:17 74 {*movdi_internal}
     (nil))
(insn 96 95 97 6 (set (reg:SI 0 ax [284])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -208 [0xffffffffffffff30])) [5 num+0 S4 A128])) "calc.c":296:15 75 {*movsi_internal}
     (nil))
(insn 97 96 98 6 (set (reg:DI 0 ax [orig:98 _17 ] [98])
        (sign_extend:DI (reg:SI 0 ax [284]))) "calc.c":296:15 147 {*extendsidi2_rex64}
     (nil))
(insn 98 97 99 6 (parallel [
            (set (reg:DI 1 dx [orig:99 _18 ] [99])
                (ashift:DI (reg:DI 0 ax [orig:98 _17 ] [98])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":296:15 656 {*ashldi3_1}
     (nil))
(insn 99 98 100 6 (set (reg/f:DI 0 ax [285])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [10 change+0 S8 A64])) "calc.c":296:15 74 {*movdi_internal}
     (nil))
(insn 100 99 101 6 (parallel [
            (set (reg/f:DI 3 bx [orig:100 _19 ] [100])
                (plus:DI (reg:DI 1 dx [orig:99 _18 ] [99])
                    (reg/f:DI 0 ax [285])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":296:15 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])
            (reg:DI 1 dx [orig:99 _18 ] [99]))
        (nil)))
(insn 101 100 102 6 (set (reg:DI 0 ax [286])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -256 [0xffffffffffffff00])) [1 history+0 S8 A64])) "calc.c":296:23 74 {*movdi_internal}
     (nil))
(insn 102 101 103 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [286])) "calc.c":296:23 74 {*movdi_internal}
     (nil))
(call_insn/i 103 102 104 6 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":296:23 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 104 103 105 6 (set (reg:DF 0 ax [orig:101 _20 ] [101])
        (reg:DF 20 xmm0)) "calc.c":296:23 135 {*movdf_internal}
     (nil))
(insn 105 104 106 6 (set (mem:DF (reg/f:DI 3 bx [orig:100 _19 ] [100]) [2 *_19+0 S8 A64])
        (reg:DF 0 ax [orig:101 _20 ] [101])) "calc.c":296:21 135 {*movdf_internal}
     (nil))
(insn 106 105 107 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -208 [0xffffffffffffff30])) [5 num+0 S4 A128])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -208 [0xffffffffffffff30])) [5 num+0 S4 A128])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":297:12 209 {*addsi_1}
     (nil))
(insn 107 106 108 6 (set (reg:SI 0 ax [287])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -208 [0xffffffffffffff30])) [5 num+0 S4 A128])) "calc.c":298:15 75 {*movsi_internal}
     (nil))
(insn 108 107 109 6 (set (reg:DI 0 ax [orig:102 _21 ] [102])
        (sign_extend:DI (reg:SI 0 ax [287]))) "calc.c":298:15 147 {*extendsidi2_rex64}
     (nil))
(insn 109 108 110 6 (parallel [
            (set (reg:DI 1 dx [orig:103 _22 ] [103])
                (ashift:DI (reg:DI 0 ax [orig:102 _21 ] [102])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":298:15 656 {*ashldi3_1}
     (nil))
(insn 110 109 111 6 (set (reg/f:DI 0 ax [288])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [10 change+0 S8 A64])) "calc.c":298:15 74 {*movdi_internal}
     (nil))
(insn 111 110 112 6 (parallel [
            (set (reg/f:DI 3 bx [orig:104 _23 ] [104])
                (plus:DI (reg:DI 1 dx [orig:103 _22 ] [103])
                    (reg/f:DI 0 ax [288])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":298:15 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])
            (reg:DI 1 dx [orig:103 _22 ] [103]))
        (nil)))
(insn 112 111 113 6 (set (reg:DI 0 ax [289])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [1 token+0 S8 A128])) "calc.c":298:23 74 {*movdi_internal}
     (nil))
(insn 113 112 114 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [289])) "calc.c":298:23 74 {*movdi_internal}
     (nil))
(call_insn/i 114 113 115 6 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":298:23 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 115 114 116 6 (set (reg:DF 0 ax [orig:105 _24 ] [105])
        (reg:DF 20 xmm0)) "calc.c":298:23 135 {*movdf_internal}
     (nil))
(insn 116 115 117 6 (set (mem:DF (reg/f:DI 3 bx [orig:104 _23 ] [104]) [2 *_23+0 S8 A64])
        (reg:DF 0 ax [orig:105 _24 ] [105])) "calc.c":298:21 135 {*movdf_internal}
     (nil))
(insn 117 116 118 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -208 [0xffffffffffffff30])) [5 num+0 S4 A128])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -208 [0xffffffffffffff30])) [5 num+0 S4 A128])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":299:12 209 {*addsi_1}
     (nil))
(insn 118 117 119 6 (set (reg/f:DI 0 ax [290])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [1 token+0 S8 A128])) "calc.c":300:31 74 {*movdi_internal}
     (nil))
(insn 119 118 120 6 (parallel [
            (set (reg/f:DI 1 dx [orig:106 _25 ] [106])
                (plus:DI (reg/f:DI 0 ax [290])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":300:31 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -144 [0xffffffffffffff70])) [1 token+0 S8 A128])
            (const_int 1 [0x1]))
        (nil)))
(insn 120 119 121 6 (parallel [
            (set (reg:DI 0 ax [291])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -29 [0xffffffffffffffe3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":300:17 210 {*adddi_1}
     (nil))
(insn 121 120 122 6 (set (reg:DI 4 si)
        (reg:DI 0 ax [291])) "calc.c":300:17 74 {*movdi_internal}
     (nil))
(insn 122 121 123 6 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:106 _25 ] [106])) "calc.c":300:17 74 {*movdi_internal}
     (nil))
(call_insn/i 123 122 125 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strpbrk") [flags 0x41]  <function_decl 0x7f09f183b300 strpbrk>) [0 __builtin_strpbrk S1 A8])
            (const_int 0 [0]))) "calc.c":300:17 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 125 123 659 6 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [1 token+0 S8 A128])
        (reg:DI 0 ax [292])) "calc.c":300:17 74 {*movdi_internal}
     (nil))
(jump_insn 659 125 660 6 (set (pc)
        (label_ref 187)) "calc.c":301:15 807 {jump}
     (nil)
 -> 187)
;;  succ:       8 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 660 659 189)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       8
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310
(code_label 189 660 128 7 93 (nil) [1 uses])
(note 128 189 129 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 129 128 130 7 (set (reg/f:DI 0 ax [293])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [1 token+0 S8 A128])) "calc.c":303:53 74 {*movdi_internal}
     (nil))
(insn 130 129 131 7 (set (reg:QI 0 ax [orig:107 _26 ] [107])
        (mem:QI (reg/f:DI 0 ax [293]) [0 *token_183+0 S1 A8])) "calc.c":303:53 77 {*movqi_internal}
     (nil))
(insn 131 130 132 7 (set (reg:SI 1 dx [orig:108 _27 ] [108])
        (sign_extend:SI (reg:QI 0 ax [orig:107 _26 ] [107]))) "calc.c":303:13 153 {extendqisi2}
     (nil))
(insn 132 131 134 7 (set (reg:DI 0 ax [294])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [1 token+0 S8 A128])) "calc.c":303:13 74 {*movdi_internal}
     (nil))
(insn 134 132 135 7 (set (reg:DI 4 si)
        (reg:DI 0 ax [294])) "calc.c":303:13 74 {*movdi_internal}
     (nil))
(insn 135 134 136 7 (set (reg:DI 0 ax [295])
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x7f09f171dc60 *.LC27>)) "calc.c":303:13 74 {*movdi_internal}
     (nil))
(insn 136 135 137 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [295])) "calc.c":303:13 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x7f09f171dc60 *.LC27>)
        (nil)))
(insn 137 136 138 7 (set (reg:QI 0 ax)
        (const_int 0 [0])) "calc.c":303:13 77 {*movqi_internal}
     (nil))
(call_insn 138 137 139 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f09f183f100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "calc.c":303:13 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 139 138 140 7 (set (reg:SI 0 ax [296])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -208 [0xffffffffffffff30])) [5 num+0 S4 A128])) "calc.c":304:53 75 {*movsi_internal}
     (nil))
(insn 140 139 141 7 (parallel [
            (set (reg:SI 0 ax [orig:109 _28 ] [109])
                (plus:SI (reg:SI 0 ax [296])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":304:53 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -192 [0xffffffffffffff40])) [5 num+0 S4 A128])
            (const_int 3 [0x3]))
        (nil)))
(insn 141 140 142 7 (set (reg:DI 0 ax [orig:110 _29 ] [110])
        (sign_extend:DI (reg:SI 0 ax [orig:109 _28 ] [109]))) "calc.c":304:53 147 {*extendsidi2_rex64}
     (nil))
(insn 142 141 143 7 (parallel [
            (set (reg:DI 1 dx [orig:111 _30 ] [111])
                (ashift:DI (reg:DI 0 ax [orig:110 _29 ] [110])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":304:32 656 {*ashldi3_1}
     (nil))
(insn 143 142 144 7 (set (reg:DI 0 ax [297])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [10 change+0 S8 A64])) "calc.c":304:32 74 {*movdi_internal}
     (nil))
(insn 144 143 145 7 (set (reg:DI 4 si)
        (reg:DI 1 dx [orig:111 _30 ] [111])) "calc.c":304:32 74 {*movdi_internal}
     (nil))
(insn 145 144 146 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [297])) "calc.c":304:32 74 {*movdi_internal}
     (nil))
(call_insn 146 145 148 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7f09f1861600 realloc>) [0 __builtin_realloc S1 A8])
            (const_int 0 [0]))) "calc.c":304:32 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 148 146 149 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [10 change+0 S8 A64])
        (reg:DI 0 ax [298])) "calc.c":304:32 74 {*movdi_internal}
     (nil))
(insn 149 148 150 7 (set (reg:SI 0 ax [299])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -208 [0xffffffffffffff30])) [5 num+0 S4 A128])) "calc.c":305:19 75 {*movsi_internal}
     (nil))
(insn 150 149 151 7 (set (reg:DI 0 ax [orig:112 _31 ] [112])
        (sign_extend:DI (reg:SI 0 ax [299]))) "calc.c":305:19 147 {*extendsidi2_rex64}
     (nil))
(insn 151 150 152 7 (parallel [
            (set (reg:DI 1 dx [orig:113 _32 ] [113])
                (ashift:DI (reg:DI 0 ax [orig:112 _31 ] [112])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":305:19 656 {*ashldi3_1}
     (nil))
(insn 152 151 153 7 (set (reg/f:DI 0 ax [300])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [10 change+0 S8 A64])) "calc.c":305:19 74 {*movdi_internal}
     (nil))
(insn 153 152 154 7 (parallel [
            (set (reg/f:DI 3 bx [orig:114 _33 ] [114])
                (plus:DI (reg:DI 1 dx [orig:113 _32 ] [113])
                    (reg/f:DI 0 ax [300])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":305:19 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])
            (reg:DI 1 dx [orig:113 _32 ] [113]))
        (nil)))
(insn 154 153 155 7 (set (reg:DI 0 ax [301])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [1 token+0 S8 A128])) "calc.c":305:27 74 {*movdi_internal}
     (nil))
(insn 155 154 156 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [301])) "calc.c":305:27 74 {*movdi_internal}
     (nil))
(call_insn/i 156 155 157 7 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":305:27 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 157 156 158 7 (set (reg:DF 0 ax [orig:115 _34 ] [115])
        (reg:DF 20 xmm0)) "calc.c":305:27 135 {*movdf_internal}
     (nil))
(insn 158 157 159 7 (set (mem:DF (reg/f:DI 3 bx [orig:114 _33 ] [114]) [2 *_33+0 S8 A64])
        (reg:DF 0 ax [orig:115 _34 ] [115])) "calc.c":305:25 135 {*movdf_internal}
     (nil))
(insn 159 158 160 7 (set (reg/f:DI 0 ax [302])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [1 token+0 S8 A128])) "calc.c":306:35 74 {*movdi_internal}
     (nil))
(insn 160 159 161 7 (parallel [
            (set (reg/f:DI 1 dx [orig:116 _35 ] [116])
                (plus:DI (reg/f:DI 0 ax [302])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":306:35 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -144 [0xffffffffffffff70])) [1 token+0 S8 A128])
            (const_int 1 [0x1]))
        (nil)))
(insn 161 160 162 7 (parallel [
            (set (reg:DI 0 ax [303])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -29 [0xffffffffffffffe3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":306:21 210 {*adddi_1}
     (nil))
(insn 162 161 163 7 (set (reg:DI 4 si)
        (reg:DI 0 ax [303])) "calc.c":306:21 74 {*movdi_internal}
     (nil))
(insn 163 162 164 7 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:116 _35 ] [116])) "calc.c":306:21 74 {*movdi_internal}
     (nil))
(call_insn/i 164 163 166 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strpbrk") [flags 0x41]  <function_decl 0x7f09f183b300 strpbrk>) [0 __builtin_strpbrk S1 A8])
            (const_int 0 [0]))) "calc.c":306:21 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 166 164 167 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [1 token+0 S8 A128])
        (reg:DI 0 ax [304])) "calc.c":306:21 74 {*movdi_internal}
     (nil))
(insn 167 166 168 7 (set (reg:SI 0 ax [305])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -208 [0xffffffffffffff30])) [5 num+0 S4 A128])) "calc.c":307:19 75 {*movsi_internal}
     (nil))
(insn 168 167 169 7 (set (reg:DI 0 ax [orig:117 _36 ] [117])
        (sign_extend:DI (reg:SI 0 ax [305]))) "calc.c":307:19 147 {*extendsidi2_rex64}
     (nil))
(insn 169 168 170 7 (parallel [
            (set (reg:DI 0 ax [orig:118 _37 ] [118])
                (plus:DI (reg:DI 0 ax [orig:117 _36 ] [117])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":307:19 210 {*adddi_1}
     (nil))
(insn 170 169 171 7 (parallel [
            (set (reg:DI 1 dx [orig:119 _38 ] [119])
                (ashift:DI (reg:DI 0 ax [orig:118 _37 ] [118])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":307:19 656 {*ashldi3_1}
     (nil))
(insn 171 170 172 7 (set (reg/f:DI 0 ax [306])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [10 change+0 S8 A64])) "calc.c":307:19 74 {*movdi_internal}
     (nil))
(insn 172 171 173 7 (parallel [
            (set (reg/f:DI 3 bx [orig:120 _39 ] [120])
                (plus:DI (reg:DI 1 dx [orig:119 _38 ] [119])
                    (reg/f:DI 0 ax [306])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":307:19 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])
            (reg:DI 1 dx [orig:119 _38 ] [119]))
        (nil)))
(insn 173 172 174 7 (set (reg:DI 0 ax [307])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [1 token+0 S8 A128])) "calc.c":307:31 74 {*movdi_internal}
     (nil))
(insn 174 173 175 7 (set (reg:DI 5 di)
        (reg:DI 0 ax [307])) "calc.c":307:31 74 {*movdi_internal}
     (nil))
(call_insn/i 175 174 176 7 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":307:31 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 176 175 177 7 (set (reg:DF 0 ax [orig:121 _40 ] [121])
        (reg:DF 20 xmm0)) "calc.c":307:31 135 {*movdf_internal}
     (nil))
(insn 177 176 178 7 (set (mem:DF (reg/f:DI 3 bx [orig:120 _39 ] [120]) [2 *_39+0 S8 A64])
        (reg:DF 0 ax [orig:121 _40 ] [121])) "calc.c":307:29 135 {*movdf_internal}
     (nil))
(insn 178 177 179 7 (set (reg/f:DI 0 ax [308])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [1 token+0 S8 A128])) "calc.c":308:35 74 {*movdi_internal}
     (nil))
(insn 179 178 180 7 (parallel [
            (set (reg/f:DI 1 dx [orig:122 _41 ] [122])
                (plus:DI (reg/f:DI 0 ax [308])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":308:35 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -144 [0xffffffffffffff70])) [1 token+0 S8 A128])
            (const_int 1 [0x1]))
        (nil)))
(insn 180 179 181 7 (parallel [
            (set (reg:DI 0 ax [309])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -29 [0xffffffffffffffe3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":308:21 210 {*adddi_1}
     (nil))
(insn 181 180 182 7 (set (reg:DI 4 si)
        (reg:DI 0 ax [309])) "calc.c":308:21 74 {*movdi_internal}
     (nil))
(insn 182 181 183 7 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:122 _41 ] [122])) "calc.c":308:21 74 {*movdi_internal}
     (nil))
(call_insn/i 183 182 185 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strpbrk") [flags 0x41]  <function_decl 0x7f09f183b300 strpbrk>) [0 __builtin_strpbrk S1 A8])
            (const_int 0 [0]))) "calc.c":308:21 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 185 183 186 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [1 token+0 S8 A128])
        (reg:DI 0 ax [310])) "calc.c":308:21 74 {*movdi_internal}
     (nil))
(insn 186 185 187 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -208 [0xffffffffffffff30])) [5 num+0 S4 A128])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -208 [0xffffffffffffff30])) [5 num+0 S4 A128])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":309:17 209 {*addsi_1}
     (nil))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              6 [always] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 187 186 188 8 92 (nil) [1 uses])
(note 188 187 190 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 190 188 191 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                    (const_int -160 [0xffffffffffffff60])) [1 token+0 S8 A128])
            (const_int 0 [0]))) "calc.c":301:22 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 191 190 192 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 189)
            (pc))) "calc.c":301:22 806 {*jcc}
     (nil)
 -> 189)
;;  succ:       7
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       5
;;              8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 123 124 125 311 312
(code_label 192 191 193 9 91 (nil) [1 uses])
(note 193 192 194 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 194 193 195 9 (set (reg:SI 0 ax [311])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -208 [0xffffffffffffff30])) [5 num+0 S4 A128])) "calc.c":313:49 75 {*movsi_internal}
     (nil))
(insn 195 194 196 9 (parallel [
            (set (reg:SI 0 ax [orig:123 _42 ] [123])
                (plus:SI (reg:SI 0 ax [311])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":313:49 209 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -192 [0xffffffffffffff40])) [5 num+0 S4 A128])
            (const_int 1 [0x1]))
        (nil)))
(insn 196 195 197 9 (set (reg:DI 0 ax [orig:124 _43 ] [124])
        (sign_extend:DI (reg:SI 0 ax [orig:123 _42 ] [123]))) "calc.c":313:49 147 {*extendsidi2_rex64}
     (nil))
(insn 197 196 198 9 (parallel [
            (set (reg:DI 0 ax [orig:125 _44 ] [125])
                (ashift:DI (reg:DI 0 ax [orig:124 _43 ] [124])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":313:37 656 {*ashldi3_1}
     (nil))
(insn 198 197 199 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:125 _44 ] [125])) "calc.c":313:37 74 {*movdi_internal}
     (nil))
(call_insn 199 198 201 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f09f185e800 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) "calc.c":313:37 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 201 199 202 9 (set (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [10 sort_change+0 S8 A64])
        (reg/f:DI 0 ax [312])) "calc.c":313:37 74 {*movdi_internal}
     (nil))
(insn 202 201 661 9 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -204 [0xffffffffffffff34])) [5 i+0 S4 A32])
        (const_int 0 [0])) "calc.c":314:14 75 {*movsi_internal}
     (nil))
(jump_insn 661 202 662 9 (set (pc)
        (label_ref 291)) "calc.c":314:5 807 {jump}
     (nil)
 -> 291)
;;  succ:       17 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 662 661 293)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       17
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 313
(code_label 293 662 205 10 100 (nil) [1 uses])
(note 205 293 206 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 206 205 207 10 (set (reg:DF 20 xmm0 [313])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC28") [flags 0x2]) [0  S8 A64])) "calc.c":316:16 135 {*movdf_internal}
     (nil))
(insn 207 206 208 10 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [2 min+0 S8 A128])
        (reg:DF 20 xmm0 [313])) "calc.c":316:16 135 {*movdf_internal}
     (nil))
(insn 208 207 663 10 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -196 [0xffffffffffffff3c])) [5 j+0 S4 A32])
        (const_int 0 [0])) "calc.c":318:18 75 {*movsi_internal}
     (nil))
(jump_insn 663 208 664 10 (set (pc)
        (label_ref 250)) "calc.c":318:9 807 {jump}
     (nil)
 -> 250)
;;  succ:       15 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 664 663 252)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       15
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 126 127 128 129 314 315 316
(code_label 252 664 211 11 99 (nil) [1 uses])
(note 211 252 212 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 212 211 213 11 (set (reg:SI 0 ax [314])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -196 [0xffffffffffffff3c])) [5 j+0 S4 A32])) "calc.c":320:23 75 {*movsi_internal}
     (nil))
(insn 213 212 214 11 (set (reg:DI 0 ax [orig:126 _45 ] [126])
        (sign_extend:DI (reg:SI 0 ax [314]))) "calc.c":320:23 147 {*extendsidi2_rex64}
     (nil))
(insn 214 213 215 11 (parallel [
            (set (reg:DI 1 dx [orig:127 _46 ] [127])
                (ashift:DI (reg:DI 0 ax [orig:126 _45 ] [126])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":320:23 656 {*ashldi3_1}
     (nil))
(insn 215 214 216 11 (set (reg/f:DI 0 ax [315])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [10 change+0 S8 A64])) "calc.c":320:23 74 {*movdi_internal}
     (nil))
(insn 216 215 217 11 (parallel [
            (set (reg/f:DI 0 ax [orig:128 _47 ] [128])
                (plus:DI (reg/f:DI 0 ax [315])
                    (reg:DI 1 dx [orig:127 _46 ] [127])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":320:23 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])
            (reg:DI 1 dx [orig:127 _46 ] [127]))
        (nil)))
(insn 217 216 218 11 (set (reg:DF 21 xmm1 [orig:129 _48 ] [129])
        (mem:DF (reg/f:DI 0 ax [orig:128 _47 ] [128]) [2 *_47+0 S8 A64])) "calc.c":320:23 135 {*movdf_internal}
     (nil))
(insn 218 217 219 11 (set (reg:DF 20 xmm0 [316])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [2 min+0 S8 A128])) "calc.c":320:16 135 {*movdf_internal}
     (nil))
(insn 219 218 220 11 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:DF 20 xmm0 [316])
            (reg:DF 21 xmm1 [orig:129 _48 ] [129]))) "calc.c":320:16 46 {*cmpidf}
     (nil))
(jump_insn 220 219 224 11 (set (pc)
        (if_then_else (unle (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 247)
            (pc))) "calc.c":320:16 806 {*jcc}
     (nil)
 -> 247)
;;  succ:       12 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 130 131 132 133 317 318 319
(note 224 220 225 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 225 224 226 12 (set (reg:SI 0 ax [317])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -196 [0xffffffffffffff3c])) [5 j+0 S4 A32])) "calc.c":320:42 75 {*movsi_internal}
     (nil))
(insn 226 225 227 12 (set (reg:DI 0 ax [orig:130 _49 ] [130])
        (sign_extend:DI (reg:SI 0 ax [317]))) "calc.c":320:42 147 {*extendsidi2_rex64}
     (nil))
(insn 227 226 228 12 (parallel [
            (set (reg:DI 1 dx [orig:131 _50 ] [131])
                (ashift:DI (reg:DI 0 ax [orig:130 _49 ] [130])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":320:42 656 {*ashldi3_1}
     (nil))
(insn 228 227 229 12 (set (reg/f:DI 0 ax [318])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [10 change+0 S8 A64])) "calc.c":320:42 74 {*movdi_internal}
     (nil))
(insn 229 228 230 12 (parallel [
            (set (reg/f:DI 0 ax [orig:132 _51 ] [132])
                (plus:DI (reg/f:DI 0 ax [318])
                    (reg:DI 1 dx [orig:131 _50 ] [131])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":320:42 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])
            (reg:DI 1 dx [orig:131 _50 ] [131]))
        (nil)))
(insn 230 229 231 12 (set (reg:DF 20 xmm0 [orig:133 _52 ] [133])
        (mem:DF (reg/f:DI 0 ax [orig:132 _51 ] [132]) [2 *_51+0 S8 A64])) "calc.c":320:42 135 {*movdf_internal}
     (nil))
(insn 231 230 232 12 (set (reg:DF 21 xmm1 [319])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC29") [flags 0x2]) [0  S8 A64])) "calc.c":320:33 135 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 0.0 [0x0.0p+0])
        (nil)))
(insn 232 231 233 12 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:DF 20 xmm0 [orig:133 _52 ] [133])
            (reg:DF 21 xmm1 [319]))) "calc.c":320:33 46 {*cmpidf}
     (nil))
(jump_insn 233 232 237 12 (set (pc)
        (if_then_else (unlt (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 247)
            (pc))) "calc.c":320:33 806 {*jcc}
     (nil)
 -> 247)
;;  succ:       13 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 134 135 136 320 321 322 323
(note 237 233 238 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 238 237 239 13 (set (reg:SI 0 ax [320])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -196 [0xffffffffffffff3c])) [5 j+0 S4 A32])) "calc.c":322:29 75 {*movsi_internal}
     (nil))
(insn 239 238 240 13 (set (reg:DI 0 ax [orig:134 _53 ] [134])
        (sign_extend:DI (reg:SI 0 ax [320]))) "calc.c":322:29 147 {*extendsidi2_rex64}
     (nil))
(insn 240 239 241 13 (parallel [
            (set (reg:DI 1 dx [orig:135 _54 ] [135])
                (ashift:DI (reg:DI 0 ax [orig:134 _53 ] [134])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":322:29 656 {*ashldi3_1}
     (nil))
(insn 241 240 242 13 (set (reg/f:DI 0 ax [321])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [10 change+0 S8 A64])) "calc.c":322:29 74 {*movdi_internal}
     (nil))
(insn 242 241 243 13 (parallel [
            (set (reg/f:DI 0 ax [orig:136 _55 ] [136])
                (plus:DI (reg/f:DI 0 ax [321])
                    (reg:DI 1 dx [orig:135 _54 ] [135])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":322:29 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])
            (reg:DI 1 dx [orig:135 _54 ] [135]))
        (nil)))
(insn 243 242 244 13 (set (reg:DF 20 xmm0 [322])
        (mem:DF (reg/f:DI 0 ax [orig:136 _55 ] [136]) [2 *_55+0 S8 A64])) "calc.c":322:21 135 {*movdf_internal}
     (nil))
(insn 244 243 245 13 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [2 min+0 S8 A128])
        (reg:DF 20 xmm0 [322])) "calc.c":322:21 135 {*movdf_internal}
     (nil))
(insn 245 244 246 13 (set (reg:SI 0 ax [323])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -196 [0xffffffffffffff3c])) [5 j+0 S4 A32])) "calc.c":323:30 75 {*movsi_internal}
     (nil))
(insn 246 245 247 13 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -200 [0xffffffffffffff38])) [5 point_of_min+0 S4 A64])
        (reg:SI 0 ax [323])) "calc.c":323:30 75 {*movsi_internal}
     (nil))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;;              11
;;              12
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 247 246 248 14 96 (nil) [2 uses])
(note 248 247 249 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 249 248 250 14 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -196 [0xffffffffffffff3c])) [5 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -196 [0xffffffffffffff3c])) [5 j+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":318:36 209 {*addsi_1}
     (nil))
;;  succ:       15 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU,DFS_BACK)
;;              10 [always] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 324
(code_label 250 249 251 15 95 (nil) [1 uses])
(note 251 250 253 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 253 251 254 15 (set (reg:SI 0 ax [324])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -196 [0xffffffffffffff3c])) [5 j+0 S4 A32])) "calc.c":318:27 75 {*movsi_internal}
     (nil))
(insn 254 253 255 15 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [324])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -208 [0xffffffffffffff30])) [5 num+0 S4 A128]))) "calc.c":318:27 11 {*cmpsi_1}
     (nil))
(jump_insn 255 254 256 15 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 252)
            (pc))) "calc.c":318:27 806 {*jcc}
     (nil)
 -> 252)
;;  succ:       11
;;              16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 325 326 327 328 329 330 331 332 333 334 335
(note 256 255 257 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 257 256 258 16 (set (reg:SI 0 ax [325])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -200 [0xffffffffffffff38])) [5 point_of_min+0 S4 A64])) "calc.c":326:32 75 {*movsi_internal}
     (nil))
(insn 258 257 259 16 (set (reg:DI 0 ax [orig:137 _56 ] [137])
        (sign_extend:DI (reg:SI 0 ax [325]))) "calc.c":326:32 147 {*extendsidi2_rex64}
     (nil))
(insn 259 258 260 16 (parallel [
            (set (reg:DI 1 dx [orig:138 _57 ] [138])
                (ashift:DI (reg:DI 0 ax [orig:137 _56 ] [137])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":326:32 656 {*ashldi3_1}
     (nil))
(insn 260 259 261 16 (set (reg/f:DI 0 ax [326])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [10 change+0 S8 A64])) "calc.c":326:32 74 {*movdi_internal}
     (nil))
(insn 261 260 262 16 (parallel [
            (set (reg/f:DI 1 dx [orig:139 _58 ] [139])
                (plus:DI (reg:DI 1 dx [orig:138 _57 ] [138])
                    (reg/f:DI 0 ax [326])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":326:32 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])
            (reg:DI 1 dx [orig:138 _57 ] [138]))
        (nil)))
(insn 262 261 263 16 (set (reg:SI 0 ax [327])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -204 [0xffffffffffffff34])) [5 i+0 S4 A32])) "calc.c":326:20 75 {*movsi_internal}
     (nil))
(insn 263 262 264 16 (set (reg:DI 0 ax [orig:140 _59 ] [140])
        (sign_extend:DI (reg:SI 0 ax [327]))) "calc.c":326:20 147 {*extendsidi2_rex64}
     (nil))
(insn 264 263 265 16 (parallel [
            (set (reg:DI 2 cx [orig:141 _60 ] [141])
                (ashift:DI (reg:DI 0 ax [orig:140 _59 ] [140])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":326:20 656 {*ashldi3_1}
     (nil))
(insn 265 264 266 16 (set (reg/f:DI 0 ax [328])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [10 sort_change+0 S8 A64])) "calc.c":326:20 74 {*movdi_internal}
     (nil))
(insn 266 265 267 16 (parallel [
            (set (reg/f:DI 0 ax [orig:142 _61 ] [142])
                (plus:DI (reg/f:DI 0 ax [328])
                    (reg:DI 2 cx [orig:141 _60 ] [141])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":326:20 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -104 [0xffffffffffffff98])) [10 sort_change+0 S8 A64])
            (reg:DI 2 cx [orig:141 _60 ] [141]))
        (nil)))
(insn 267 266 268 16 (set (reg:DF 20 xmm0 [orig:143 _62 ] [143])
        (mem:DF (reg/f:DI 1 dx [orig:139 _58 ] [139]) [2 *_58+0 S8 A64])) "calc.c":326:32 135 {*movdf_internal}
     (nil))
(insn 268 267 269 16 (set (mem:DF (reg/f:DI 0 ax [orig:142 _61 ] [142]) [2 *_61+0 S8 A64])
        (reg:DF 20 xmm0 [orig:143 _62 ] [143])) "calc.c":326:24 135 {*movdf_internal}
     (nil))
(insn 269 268 270 16 (set (reg:SI 0 ax [329])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -200 [0xffffffffffffff38])) [5 point_of_min+0 S4 A64])) "calc.c":327:36 75 {*movsi_internal}
     (nil))
(insn 270 269 271 16 (set (reg:DI 0 ax [orig:144 _63 ] [144])
        (sign_extend:DI (reg:SI 0 ax [329]))) "calc.c":327:36 147 {*extendsidi2_rex64}
     (nil))
(insn 271 270 272 16 (parallel [
            (set (reg:DI 0 ax [orig:145 _64 ] [145])
                (plus:DI (reg:DI 0 ax [orig:144 _63 ] [144])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":327:36 210 {*adddi_1}
     (nil))
(insn 272 271 273 16 (parallel [
            (set (reg:DI 1 dx [orig:146 _65 ] [146])
                (ashift:DI (reg:DI 0 ax [orig:145 _64 ] [145])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":327:36 656 {*ashldi3_1}
     (nil))
(insn 273 272 274 16 (set (reg/f:DI 0 ax [330])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [10 change+0 S8 A64])) "calc.c":327:36 74 {*movdi_internal}
     (nil))
(insn 274 273 275 16 (parallel [
            (set (reg/f:DI 1 dx [orig:147 _66 ] [147])
                (plus:DI (reg:DI 1 dx [orig:146 _65 ] [146])
                    (reg/f:DI 0 ax [330])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":327:36 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])
            (reg:DI 1 dx [orig:146 _65 ] [146]))
        (nil)))
(insn 275 274 276 16 (set (reg:SI 0 ax [331])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -204 [0xffffffffffffff34])) [5 i+0 S4 A32])) "calc.c":327:20 75 {*movsi_internal}
     (nil))
(insn 276 275 277 16 (set (reg:DI 0 ax [orig:148 _67 ] [148])
        (sign_extend:DI (reg:SI 0 ax [331]))) "calc.c":327:20 147 {*extendsidi2_rex64}
     (nil))
(insn 277 276 278 16 (parallel [
            (set (reg:DI 0 ax [orig:149 _68 ] [149])
                (plus:DI (reg:DI 0 ax [orig:148 _67 ] [148])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":327:20 210 {*adddi_1}
     (nil))
(insn 278 277 279 16 (parallel [
            (set (reg:DI 2 cx [orig:150 _69 ] [150])
                (ashift:DI (reg:DI 0 ax [orig:149 _68 ] [149])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":327:20 656 {*ashldi3_1}
     (nil))
(insn 279 278 280 16 (set (reg/f:DI 0 ax [332])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [10 sort_change+0 S8 A64])) "calc.c":327:20 74 {*movdi_internal}
     (nil))
(insn 280 279 281 16 (parallel [
            (set (reg/f:DI 0 ax [orig:151 _70 ] [151])
                (plus:DI (reg/f:DI 0 ax [332])
                    (reg:DI 2 cx [orig:150 _69 ] [150])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":327:20 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -104 [0xffffffffffffff98])) [10 sort_change+0 S8 A64])
            (reg:DI 2 cx [orig:150 _69 ] [150]))
        (nil)))
(insn 281 280 282 16 (set (reg:DF 20 xmm0 [orig:152 _71 ] [152])
        (mem:DF (reg/f:DI 1 dx [orig:147 _66 ] [147]) [2 *_66+0 S8 A64])) "calc.c":327:36 135 {*movdf_internal}
     (nil))
(insn 282 281 283 16 (set (mem:DF (reg/f:DI 0 ax [orig:151 _70 ] [151]) [2 *_70+0 S8 A64])
        (reg:DF 20 xmm0 [orig:152 _71 ] [152])) "calc.c":327:28 135 {*movdf_internal}
     (nil))
(insn 283 282 284 16 (set (reg:SI 0 ax [333])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -200 [0xffffffffffffff38])) [5 point_of_min+0 S4 A64])) "calc.c":328:15 75 {*movsi_internal}
     (nil))
(insn 284 283 285 16 (set (reg:DI 0 ax [orig:153 _72 ] [153])
        (sign_extend:DI (reg:SI 0 ax [333]))) "calc.c":328:15 147 {*extendsidi2_rex64}
     (nil))
(insn 285 284 286 16 (parallel [
            (set (reg:DI 1 dx [orig:154 _73 ] [154])
                (ashift:DI (reg:DI 0 ax [orig:153 _72 ] [153])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":328:15 656 {*ashldi3_1}
     (nil))
(insn 286 285 287 16 (set (reg/f:DI 0 ax [334])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [10 change+0 S8 A64])) "calc.c":328:15 74 {*movdi_internal}
     (nil))
(insn 287 286 288 16 (parallel [
            (set (reg/f:DI 0 ax [orig:155 _74 ] [155])
                (plus:DI (reg/f:DI 0 ax [334])
                    (reg:DI 1 dx [orig:154 _73 ] [154])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":328:15 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])
            (reg:DI 1 dx [orig:154 _73 ] [154]))
        (nil)))
(insn 288 287 289 16 (set (reg:DF 20 xmm0 [335])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC30") [flags 0x2]) [0  S8 A64])) "calc.c":328:30 135 {*movdf_internal}
     (nil))
(insn 289 288 290 16 (set (mem:DF (reg/f:DI 0 ax [orig:155 _74 ] [155]) [2 *_74+0 S8 A64])
        (reg:DF 20 xmm0 [335])) "calc.c":328:30 135 {*movdf_internal}
     (nil))
(insn 290 289 291 16 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -204 [0xffffffffffffff34])) [5 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -204 [0xffffffffffffff34])) [5 i+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":314:32 209 {*addsi_1}
     (nil))
;;  succ:       17 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       16 (FALLTHRU,DFS_BACK)
;;              9 [always] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 336
(code_label 291 290 292 17 94 (nil) [1 uses])
(note 292 291 294 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 294 292 295 17 (set (reg:SI 0 ax [336])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -204 [0xffffffffffffff34])) [5 i+0 S4 A32])) "calc.c":314:23 75 {*movsi_internal}
     (nil))
(insn 295 294 296 17 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [336])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -208 [0xffffffffffffff30])) [5 num+0 S4 A128]))) "calc.c":314:23 11 {*cmpsi_1}
     (nil))
(jump_insn 296 295 297 17 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 293)
            (pc))) "calc.c":314:23 806 {*jcc}
     (nil)
 -> 293)
;;  succ:       10
;;              18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 337 338 339 340 341
(note 297 296 298 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 298 297 299 18 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -192 [0xffffffffffffff40])) [5 current_day+0 S4 A128])
        (const_int 0 [0])) "calc.c":331:9 75 {*movsi_internal}
     (nil))
(insn 299 298 300 18 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -188 [0xffffffffffffff44])) [5 last_day+0 S4 A32])
        (const_int 0 [0])) "calc.c":331:26 75 {*movsi_internal}
     (nil))
(insn 300 299 301 18 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [5 cur_change+0 S4 A64])
        (const_int 0 [0])) "calc.c":331:40 75 {*movsi_internal}
     (nil))
(insn 301 300 302 18 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -180 [0xffffffffffffff4c])) [5 cur_capit+0 S4 A32])
        (const_int 0 [0])) "calc.c":331:56 75 {*movsi_internal}
     (nil))
(insn 302 301 303 18 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -176 [0xffffffffffffff50])) [5 cur_nal+0 S4 A128])
        (const_int 0 [0])) "calc.c":331:71 75 {*movsi_internal}
     (nil))
(insn 303 302 304 18 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [5 cur_year+0 S4 A32])
        (const_int 0 [0])) "calc.c":331:84 75 {*movsi_internal}
     (nil))
(insn 304 303 305 18 (set (reg:XF 8 st [337])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC31") [flags 0x2]) [0  S16 A128])) "calc.c":332:17 134 {*movxf_internal}
     (nil))
(insn 305 304 306 18 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [14 res_capit+0 S16 A128])
        (reg:XF 8 st [337])) "calc.c":332:17 134 {*movxf_internal}
     (nil))
(insn 306 305 307 18 (set (reg:XF 8 st [338])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC31") [flags 0x2]) [0  S16 A128])) "calc.c":332:32 134 {*movxf_internal}
     (nil))
(insn 307 306 308 18 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [14 sum_nal+0 S16 A128])
        (reg:XF 8 st [338])) "calc.c":332:32 134 {*movxf_internal}
     (nil))
(insn 308 307 309 18 (set (reg:XF 8 st [339])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC31") [flags 0x2]) [0  S16 A128])) "calc.c":332:45 134 {*movxf_internal}
     (nil))
(insn 309 308 310 18 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [14 last_nal+0 S16 A128])
        (reg:XF 8 st [339])) "calc.c":332:45 134 {*movxf_internal}
     (nil))
(insn 310 309 311 18 (set (reg:DF 20 xmm0 [340])
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC29") [flags 0x2]) [0  S8 A64])) "calc.c":333:9 135 {*movdf_internal}
     (nil))
(insn 311 310 312 18 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [2 res+0 S8 A64])
        (reg:DF 20 xmm0 [340])) "calc.c":333:9 135 {*movdf_internal}
     (nil))
(insn 312 311 313 18 (set (reg:DI 0 ax [341])
        (symbol_ref/f:DI ("*.LC32") [flags 0x2]  <var_decl 0x7f09f171dcf0 *.LC32>)) "calc.c":334:5 74 {*movdi_internal}
     (nil))
(insn 313 312 314 18 (set (reg:DI 5 di)
        (reg:DI 0 ax [341])) "calc.c":334:5 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC32") [flags 0x2]  <var_decl 0x7f09f171dcf0 *.LC32>)
        (nil)))
(call_insn 314 313 665 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f09f183f800 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "calc.c":334:5 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 665 314 666 18 (set (pc)
        (label_ref 532)) "calc.c":336:5 807 {jump}
     (nil)
 -> 532)
;;  succ:       31 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 666 665 534)
;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       31
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 156 157 158 159 342 343
(code_label 534 666 317 19 109 (nil) [1 uses])
(note 317 534 318 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 318 317 319 19 (set (reg:SI 0 ax [342])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -176 [0xffffffffffffff50])) [5 cur_nal+0 S4 A128])) "calc.c":339:38 75 {*movsi_internal}
     (nil))
(insn 319 318 320 19 (set (reg:DI 0 ax [orig:156 _75 ] [156])
        (sign_extend:DI (reg:SI 0 ax [342]))) "calc.c":339:38 147 {*extendsidi2_rex64}
     (nil))
(insn 320 319 321 19 (parallel [
            (set (reg:DI 1 dx [orig:157 _76 ] [157])
                (ashift:DI (reg:DI 0 ax [orig:156 _75 ] [156])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":339:38 656 {*ashldi3_1}
     (nil))
(insn 321 320 322 19 (set (reg/f:DI 0 ax [343])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -272 [0xfffffffffffffef0])) [15 nalog_date+0 S8 A64])) "calc.c":339:38 74 {*movdi_internal}
     (nil))
(insn 322 321 323 19 (parallel [
            (set (reg/f:DI 0 ax [orig:158 _77 ] [158])
                (plus:DI (reg/f:DI 0 ax [343])
                    (reg:DI 1 dx [orig:157 _76 ] [157])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":339:38 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -256 [0xffffffffffffff00])) [15 nalog_date+0 S8 A64])
            (reg:DI 1 dx [orig:157 _76 ] [157]))
        (nil)))
(insn 323 322 324 19 (set (reg:SI 0 ax [orig:159 _78 ] [159])
        (mem:SI (reg/f:DI 0 ax [orig:158 _77 ] [158]) [5 *_77+0 S4 A32])) "calc.c":339:38 75 {*movsi_internal}
     (nil))
(insn 324 323 325 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -192 [0xffffffffffffff40])) [5 current_day+0 S4 A128])
            (reg:SI 0 ax [orig:159 _78 ] [159]))) "calc.c":339:12 11 {*cmpsi_1}
     (nil))
(jump_insn 325 324 326 19 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 404)
            (pc))) "calc.c":339:12 806 {*jcc}
     (nil)
 -> 404)
;;  succ:       20 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 160 161 344 345 346
(note 326 325 327 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 327 326 328 20 (set (reg:DI 0 ax [344])
        (symbol_ref/f:DI ("*.LC33") [flags 0x2]  <var_decl 0x7f09f171dd80 *.LC33>)) "calc.c":341:13 74 {*movdi_internal}
     (nil))
(insn 328 327 329 20 (set (reg:DI 5 di)
        (reg:DI 0 ax [344])) "calc.c":341:13 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC33") [flags 0x2]  <var_decl 0x7f09f171dd80 *.LC33>)
        (nil)))
(call_insn 329 328 330 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f09f183f800 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "calc.c":341:13 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 330 329 331 20 (set (reg:XF 9 st(1) [orig:160 _79 ] [160])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -168 [0xffffffffffffff58])) [2 res+0 S8 A64]))) "calc.c":344:21 158 {*extenddfxf2_i387}
     (nil))
(insn 331 330 332 20 (set (reg:XF 8 st [345])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [14 last_nal+0 S16 A128])) "calc.c":344:21 134 {*movxf_internal}
     (nil))
(insn 332 331 333 20 (set (reg:XF 9 st(1) [orig:161 _80 ] [161])
        (minus:XF (reg:XF 9 st(1) [orig:160 _79 ] [160])
            (reg:XF 8 st [345]))) "calc.c":344:21 983 {*fop_xf_1_i387}
     (nil))
(insn 333 332 334 20 (set (reg:XF 8 st [346])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC34") [flags 0x2]) [0  S16 A128])) "calc.c":344:16 134 {*movxf_internal}
     (expr_list:REG_EQUAL (const_double:XF 1.2e+5 [0x0.ea6p+17])
        (nil)))
(insn 334 333 335 20 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:XF 9 st(1) [orig:161 _80 ] [161])
            (reg:XF 8 st [346]))) "calc.c":344:16 42 {*cmpixf_i387}
     (nil))
(jump_insn 335 334 339 20 (set (pc)
        (if_then_else (unle (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 357)
            (pc))) "calc.c":344:16 806 {*jcc}
     (nil)
 -> 357)
;;  succ:       21 (FALLTHRU)
;;              22
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 162 163 164 165 166 167 168 169 258 347 348 349 350 351
(note 339 335 340 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 340 339 341 21 (set (reg:XF 9 st(1) [orig:162 _81 ] [162])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -168 [0xffffffffffffff58])) [2 res+0 S8 A64]))) "calc.c":346:43 158 {*extenddfxf2_i387}
     (nil))
(insn 341 340 342 21 (set (reg:XF 8 st [347])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [14 last_nal+0 S16 A128])) "calc.c":346:43 134 {*movxf_internal}
     (nil))
(insn 342 341 343 21 (set (reg:XF 9 st(1) [orig:163 _82 ] [163])
        (minus:XF (reg:XF 9 st(1) [orig:162 _81 ] [162])
            (reg:XF 8 st [347]))) "calc.c":346:43 983 {*fop_xf_1_i387}
     (nil))
(insn 343 342 344 21 (set (reg:XF 8 st [348])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC34") [flags 0x2]) [0  S16 A128])) "calc.c":346:54 134 {*movxf_internal}
     (expr_list:REG_EQUAL (const_double:XF 1.2e+5 [0x0.ea6p+17])
        (nil)))
(insn 344 343 345 21 (set (reg:XF 8 st [orig:164 _83 ] [164])
        (minus:XF (reg:XF 9 st(1) [orig:163 _82 ] [163])
            (reg:XF 8 st [348]))) "calc.c":346:54 983 {*fop_xf_1_i387}
     (nil))
(insn 345 344 346 21 (set (reg:XF 9 st(1) [orig:165 _84 ] [165])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -128 [0xffffffffffffff80])) [2 nal_percent+0 S8 A128]))) "calc.c":346:72 158 {*extenddfxf2_i387}
     (nil))
(insn 346 345 347 21 (set (reg:XF 9 st(1) [orig:166 _85 ] [166])
        (mult:XF (reg:XF 9 st(1) [orig:165 _84 ] [165])
            (reg:XF 8 st [orig:164 _83 ] [164]))) "calc.c":346:72 979 {*fop_xf_comm_i387}
     (nil))
(insn 347 346 348 21 (set (reg:XF 8 st [349])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC35") [flags 0x2]) [0  S16 A128])) "calc.c":346:86 134 {*movxf_internal}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+2 [0x0.c8p+7])
        (nil)))
(insn 348 347 349 21 (set (reg:XF 8 st [orig:167 _86 ] [167])
        (div:XF (reg:XF 9 st(1) [orig:166 _85 ] [166])
            (reg:XF 8 st [349]))) "calc.c":346:86 983 {*fop_xf_1_i387}
     (nil))
(insn 349 348 675 21 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S8 A64])
        (float_truncate:DF (reg:XF 8 st [orig:167 _86 ] [167]))) "calc.c":346:28 161 {truncxfdf2}
     (nil))
(insn 675 349 351 21 (set (reg:DF 20 xmm0 [orig:168 _87 ] [168])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S8 A64])) "calc.c":346:28 135 {*movdf_internal}
     (nil))
(call_insn 351 675 352 21 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("precision") [flags 0x3]  <function_decl 0x7f09f1657200 precision>) [0 precision S1 A8])
            (const_int 0 [0]))) "calc.c":346:28 824 {*call_value}
     (nil)
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 352 351 676 21 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S8 A64])
        (reg:DF 20 xmm0)) "calc.c":346:28 135 {*movdf_internal}
     (nil))
(note 676 352 701 21 NOTE_INSN_DELETED)
(note 701 676 353 21 NOTE_INSN_DELETED)
(insn 353 701 354 21 (set (reg:XF 9 st(1) [orig:169 _88 ] [169])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S8 A64]))) "calc.c":346:28 158 {*extenddfxf2_i387}
     (nil))
(insn 354 353 355 21 (set (reg:XF 8 st [351])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [14 sum_nal+0 S16 A128])) "calc.c":346:25 134 {*movxf_internal}
     (nil))
(insn 355 354 356 21 (set (reg:XF 8 st [350])
        (plus:XF (reg:XF 8 st [351])
            (reg:XF 9 st(1) [orig:169 _88 ] [169]))) "calc.c":346:25 979 {*fop_xf_comm_i387}
     (nil))
(insn 356 355 357 21 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [14 sum_nal+0 S16 A128])
        (reg:XF 8 st [350])) "calc.c":346:25 134 {*movxf_internal}
     (nil))
;;  succ:       22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;;              20
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 259 352 353 354 355 356 357 358 359 360 361 362 363
(code_label 357 356 358 22 103 (nil) [1 uses])
(note 358 357 359 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 359 358 360 22 (set (reg:XF 9 st(1) [orig:170 _89 ] [170])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -168 [0xffffffffffffff58])) [2 res+0 S8 A64]))) "calc.c":349:13 158 {*extenddfxf2_i387}
     (nil))
(insn 360 359 361 22 (set (reg:XF 8 st [352])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [14 last_nal+0 S16 A128])) "calc.c":349:13 134 {*movxf_internal}
     (nil))
(insn 361 360 362 22 (set (reg:XF 8 st [orig:171 _90 ] [171])
        (minus:XF (reg:XF 9 st(1) [orig:170 _89 ] [170])
            (reg:XF 8 st [352]))) "calc.c":349:13 983 {*fop_xf_1_i387}
     (nil))
(insn 362 361 363 22 (set (reg:SI 0 ax [353])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -192 [0xffffffffffffff40])) [5 current_day+0 S4 A128])) "calc.c":349:13 75 {*movsi_internal}
     (nil))
(insn 363 362 678 22 (parallel [
            (set (reg:SI 0 ax [353])
                (minus:SI (reg:SI 0 ax [353])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -188 [0xffffffffffffff44])) [5 last_day+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":349:13 282 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -176 [0xffffffffffffff50])) [5 current_day+0 S4 A128])
            (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -172 [0xffffffffffffff54])) [5 last_day+0 S4 A32]))
        (nil)))
(insn 678 363 364 22 (set (reg:SI 1 dx [orig:172 _91 ] [172])
        (reg:SI 0 ax [353])) "calc.c":349:13 75 {*movsi_internal}
     (nil))
(insn 364 678 365 22 (set (reg:DF 0 ax [354])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [2 res+0 S8 A64])) "calc.c":349:13 135 {*movdf_internal}
     (nil))
(insn 365 364 366 22 (set (mem:XF (pre_dec:DI (reg/f:DI 7 sp)) [14  S16 A128])
        (reg:XF 8 st [orig:171 _90 ] [171])) "calc.c":349:13 129 {*pushxf}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 366 365 367 22 (set (mem:XF (pre_dec:DI (reg/f:DI 7 sp)) [14  S16 A128])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [14 sum_nal+0 S16 A128])) "calc.c":349:13 129 {*pushxf}
     (expr_list:REG_ARGS_SIZE (const_int 32 [0x20])
        (nil)))
(insn 367 366 368 22 (set (mem:XF (pre_dec:DI (reg/f:DI 7 sp)) [14  S16 A128])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [14 sum+0 S16 A128])) "calc.c":349:13 129 {*pushxf}
     (expr_list:REG_ARGS_SIZE (const_int 48 [0x30])
        (nil)))
(insn 368 367 369 22 (set (reg:SI 4 si)
        (reg:SI 1 dx [orig:172 _91 ] [172])) "calc.c":349:13 75 {*movsi_internal}
     (nil))
(insn 369 368 370 22 (set (reg:DF 20 xmm0)
        (reg:DF 0 ax [354])) "calc.c":349:13 135 {*movdf_internal}
     (nil))
(insn 370 369 371 22 (set (reg:DI 0 ax [355])
        (symbol_ref/f:DI ("*.LC36") [flags 0x2]  <var_decl 0x7f09f171de10 *.LC36>)) "calc.c":349:13 74 {*movdi_internal}
     (nil))
(insn 371 370 372 22 (set (reg:DI 5 di)
        (reg:DI 0 ax [355])) "calc.c":349:13 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC36") [flags 0x2]  <var_decl 0x7f09f171de10 *.LC36>)
        (nil)))
(insn 372 371 373 22 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) "calc.c":349:13 77 {*movqi_internal}
     (nil))
(call_insn 373 372 374 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f09f183f100 printf>) [0 __builtin_printf S1 A8])
            (const_int 48 [0x30]))) "calc.c":349:13 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DF (use (reg:DF 20 xmm0))
                (expr_list:SI (use (reg:SI 4 si))
                    (nil))))))
(insn 374 373 375 22 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":349:13 210 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 375 374 679 22 (set (reg:XF 13 st(5) [430])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -168 [0xffffffffffffff58])) [2 res+0 S8 A64]))) "calc.c":350:22 158 {*extenddfxf2_i387}
     (nil))
(insn 679 375 376 22 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [14 last_nal+0 S16 A128])
        (reg:XF 13 st(5) [430])) "calc.c":350:22 134 {*movxf_internal}
     (nil))
(insn 376 679 377 22 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -176 [0xffffffffffffff50])) [5 cur_nal+0 S4 A128])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -176 [0xffffffffffffff50])) [5 cur_nal+0 S4 A128])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":352:20 209 {*addsi_1}
     (nil))
(insn 377 376 378 22 (set (reg:SI 0 ax [356])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -192 [0xffffffffffffff40])) [5 current_day+0 S4 A128])) "calc.c":353:49 75 {*movsi_internal}
     (nil))
(insn 378 377 680 22 (parallel [
            (set (reg:SI 0 ax [orig:173 _92 ] [173])
                (minus:SI (reg:SI 0 ax [356])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -188 [0xffffffffffffff44])) [5 last_day+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":353:49 282 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -176 [0xffffffffffffff50])) [5 current_day+0 S4 A128])
            (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -172 [0xffffffffffffff54])) [5 last_day+0 S4 A32]))
        (nil)))
(insn 680 378 379 22 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S4 A64])
        (reg:SI 0 ax [orig:173 _92 ] [173])) "calc.c":353:34 75 {*movsi_internal}
     (nil))
(insn 379 680 380 22 (set (reg:XF 9 st(1) [orig:174 _93 ] [174])
        (float:XF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S4 A64]))) "calc.c":353:34 187 {floatsixf2}
     (nil))
(insn 380 379 381 22 (set (reg:XF 8 st [357])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [14 sum+0 S16 A128])) "calc.c":353:34 134 {*movxf_internal}
     (nil))
(insn 381 380 382 22 (set (reg:XF 8 st [orig:175 _94 ] [175])
        (mult:XF (reg:XF 8 st [357])
            (reg:XF 9 st(1) [orig:174 _93 ] [174]))) "calc.c":353:34 979 {*fop_xf_comm_i387}
     (nil))
(insn 382 381 383 22 (set (reg:XF 9 st(1) [orig:176 _95 ] [176])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -136 [0xffffffffffffff78])) [2 percent+0 S8 A64]))) "calc.c":353:61 158 {*extenddfxf2_i387}
     (nil))
(insn 383 382 384 22 (set (reg:XF 9 st(1) [orig:177 _96 ] [177])
        (mult:XF (reg:XF 9 st(1) [orig:176 _95 ] [176])
            (reg:XF 8 st [orig:175 _94 ] [175]))) "calc.c":353:61 979 {*fop_xf_comm_i387}
     (nil))
(insn 384 383 385 22 (set (reg:SI 0 ax [358])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [5 cur_year+0 S4 A32])) "calc.c":353:81 75 {*movsi_internal}
     (nil))
(insn 385 384 386 22 (set (reg:DI 0 ax [orig:178 _97 ] [178])
        (sign_extend:DI (reg:SI 0 ax [358]))) "calc.c":353:81 147 {*extendsidi2_rex64}
     (nil))
(insn 386 385 387 22 (parallel [
            (set (reg:DI 1 dx [orig:179 _98 ] [179])
                (ashift:DI (reg:DI 0 ax [orig:178 _97 ] [178])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":353:81 656 {*ashldi3_1}
     (nil))
(insn 387 386 388 22 (set (reg/f:DI 0 ax [359])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -288 [0xfffffffffffffee0])) [15 new_year+0 S8 A64])) "calc.c":353:81 74 {*movdi_internal}
     (nil))
(insn 388 387 389 22 (parallel [
            (set (reg/f:DI 0 ax [orig:180 _99 ] [180])
                (plus:DI (reg/f:DI 0 ax [359])
                    (reg:DI 1 dx [orig:179 _98 ] [179])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":353:81 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -272 [0xfffffffffffffef0])) [15 new_year+0 S8 A64])
            (reg:DI 1 dx [orig:179 _98 ] [179]))
        (nil)))
(insn 389 388 681 22 (set (reg:SI 0 ax [orig:181 _100 ] [181])
        (mem:SI (reg/f:DI 0 ax [orig:180 _99 ] [180]) [5 *_99+0 S4 A32])) "calc.c":353:81 75 {*movsi_internal}
     (nil))
(insn 681 389 390 22 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S4 A64])
        (reg:SI 0 ax [orig:181 _100 ] [181])) "calc.c":353:71 75 {*movsi_internal}
     (nil))
(insn 390 681 391 22 (set (reg:XF 8 st [orig:182 _101 ] [182])
        (float:XF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S4 A64]))) "calc.c":353:71 187 {floatsixf2}
     (nil))
(insn 391 390 392 22 (set (reg:XF 9 st(1) [orig:183 _102 ] [183])
        (div:XF (reg:XF 9 st(1) [orig:177 _96 ] [177])
            (reg:XF 8 st [orig:182 _101 ] [182]))) "calc.c":353:71 983 {*fop_xf_1_i387}
     (nil))
(insn 392 391 393 22 (set (reg:XF 8 st [360])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC35") [flags 0x2]) [0  S16 A128])) "calc.c":353:92 134 {*movxf_internal}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+2 [0x0.c8p+7])
        (nil)))
(insn 393 392 394 22 (set (reg:XF 8 st [orig:184 _103 ] [184])
        (div:XF (reg:XF 9 st(1) [orig:183 _102 ] [183])
            (reg:XF 8 st [360]))) "calc.c":353:92 983 {*fop_xf_1_i387}
     (nil))
(insn 394 393 682 22 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S8 A64])
        (float_truncate:DF (reg:XF 8 st [orig:184 _103 ] [184]))) "calc.c":353:20 161 {truncxfdf2}
     (nil))
(insn 682 394 396 22 (set (reg:DF 20 xmm0 [orig:185 _104 ] [185])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S8 A64])) "calc.c":353:20 135 {*movdf_internal}
     (nil))
(call_insn 396 682 398 22 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("precision") [flags 0x3]  <function_decl 0x7f09f1657200 precision>) [0 precision S1 A8])
            (const_int 0 [0]))) "calc.c":353:20 824 {*call_value}
     (nil)
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 398 396 399 22 (set (reg:DF 21 xmm1 [362])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [2 res+0 S8 A64])) "calc.c":353:17 135 {*movdf_internal}
     (nil))
(insn 399 398 400 22 (set (reg:DF 20 xmm0 [361])
        (plus:DF (reg:DF 20 xmm0 [orig:259 _298 ] [259])
            (reg:DF 21 xmm1 [362]))) "calc.c":353:17 981 {*fop_df_comm}
     (nil))
(insn 400 399 401 22 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [2 res+0 S8 A64])
        (reg:DF 20 xmm0 [361])) "calc.c":353:17 135 {*movdf_internal}
     (nil))
(insn 401 400 402 22 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -172 [0xffffffffffffff54])) [5 cur_year+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -172 [0xffffffffffffff54])) [5 cur_year+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":354:21 209 {*addsi_1}
     (nil))
(insn 402 401 403 22 (set (reg:SI 0 ax [363])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -192 [0xffffffffffffff40])) [5 current_day+0 S4 A128])) "calc.c":355:22 75 {*movsi_internal}
     (nil))
(insn 403 402 404 22 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -188 [0xffffffffffffff44])) [5 last_day+0 S4 A32])
        (reg:SI 0 ax [363])) "calc.c":355:22 75 {*movsi_internal}
     (nil))
;;  succ:       23 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       19
;;              22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 186 187 188 189 190 364 365
(code_label 404 403 405 23 102 (nil) [1 uses])
(note 405 404 406 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 406 405 407 23 (set (reg:DF 20 xmm0 [orig:186 _105 ] [186])
        (float:DF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -192 [0xffffffffffffff40])) [5 current_day+0 S4 A128]))) "calc.c":357:25 191 {*floatsidf2}
     (nil))
(insn 407 406 408 23 (set (reg:SI 0 ax [364])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [5 cur_change+0 S4 A64])) "calc.c":357:39 75 {*movsi_internal}
     (nil))
(insn 408 407 409 23 (set (reg:DI 0 ax [orig:187 _106 ] [187])
        (sign_extend:DI (reg:SI 0 ax [364]))) "calc.c":357:39 147 {*extendsidi2_rex64}
     (nil))
(insn 409 408 410 23 (parallel [
            (set (reg:DI 1 dx [orig:188 _107 ] [188])
                (ashift:DI (reg:DI 0 ax [orig:187 _106 ] [187])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":357:39 656 {*ashldi3_1}
     (nil))
(insn 410 409 411 23 (set (reg/f:DI 0 ax [365])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [10 sort_change+0 S8 A64])) "calc.c":357:39 74 {*movdi_internal}
     (nil))
(insn 411 410 412 23 (parallel [
            (set (reg/f:DI 0 ax [orig:189 _108 ] [189])
                (plus:DI (reg/f:DI 0 ax [365])
                    (reg:DI 1 dx [orig:188 _107 ] [188])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":357:39 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -104 [0xffffffffffffff98])) [10 sort_change+0 S8 A64])
            (reg:DI 1 dx [orig:188 _107 ] [188]))
        (nil)))
(insn 412 411 413 23 (set (reg:DF 21 xmm1 [orig:190 _109 ] [190])
        (mem:DF (reg/f:DI 0 ax [orig:189 _108 ] [189]) [2 *_108+0 S8 A64])) "calc.c":357:39 135 {*movdf_internal}
     (nil))
(insn 413 412 414 23 (set (reg:CCFP 17 flags)
        (unspec:CCFP [
                (compare:CCFP (reg:DF 20 xmm0 [orig:186 _105 ] [186])
                    (reg:DF 21 xmm1 [orig:190 _109 ] [190]))
            ] UNSPEC_NOTRAP)) "calc.c":357:12 47 {*cmpiudf}
     (nil))
(jump_insn 414 413 645 23 (set (pc)
        (if_then_else (unordered (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref 462)
            (pc))) "calc.c":357:12 806 {*jcc}
     (nil)
 -> 462)
;;  succ:       26
;;              24 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 186 190

;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 186 190
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 186 190
;; lr  def 	 17 [flags]
(note 645 414 415 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 415 645 416 24 (set (reg:CCFP 17 flags)
        (unspec:CCFP [
                (compare:CCFP (reg:DF 20 xmm0 [orig:186 _105 ] [186])
                    (reg:DF 21 xmm1 [orig:190 _109 ] [190]))
            ] UNSPEC_NOTRAP)) "calc.c":357:12 47 {*cmpiudf}
     (nil))
(jump_insn 416 415 420 24 (set (pc)
        (if_then_else (ltgt (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 462)
            (pc))) "calc.c":357:12 806 {*jcc}
     (nil)
 -> 462)
;;  succ:       25 (FALLTHRU)
;;              26
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 260 366 367 368 369 370 371 372 373 374 375 376 377 378
(note 420 416 421 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 421 420 422 25 (set (reg:DI 0 ax [366])
        (symbol_ref/f:DI ("*.LC37") [flags 0x2]  <var_decl 0x7f09f171dea0 *.LC37>)) "calc.c":359:13 74 {*movdi_internal}
     (nil))
(insn 422 421 423 25 (set (reg:DI 5 di)
        (reg:DI 0 ax [366])) "calc.c":359:13 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC37") [flags 0x2]  <var_decl 0x7f09f171dea0 *.LC37>)
        (nil)))
(call_insn 423 422 424 25 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f09f183f800 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "calc.c":359:13 824 {*call_value}
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 424 423 425 25 (set (reg:SI 0 ax [367])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -192 [0xffffffffffffff40])) [5 current_day+0 S4 A128])) "calc.c":360:49 75 {*movsi_internal}
     (nil))
(insn 425 424 683 25 (parallel [
            (set (reg:SI 0 ax [orig:191 _110 ] [191])
                (minus:SI (reg:SI 0 ax [367])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -188 [0xffffffffffffff44])) [5 last_day+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":360:49 282 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -176 [0xffffffffffffff50])) [5 current_day+0 S4 A128])
            (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -172 [0xffffffffffffff54])) [5 last_day+0 S4 A32]))
        (nil)))
(insn 683 425 426 25 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S4 A64])
        (reg:SI 0 ax [orig:191 _110 ] [191])) "calc.c":360:34 75 {*movsi_internal}
     (nil))
(insn 426 683 427 25 (set (reg:XF 9 st(1) [orig:192 _111 ] [192])
        (float:XF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S4 A64]))) "calc.c":360:34 187 {floatsixf2}
     (nil))
(insn 427 426 428 25 (set (reg:XF 8 st [368])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [14 sum+0 S16 A128])) "calc.c":360:34 134 {*movxf_internal}
     (nil))
(insn 428 427 429 25 (set (reg:XF 8 st [orig:193 _112 ] [193])
        (mult:XF (reg:XF 8 st [368])
            (reg:XF 9 st(1) [orig:192 _111 ] [192]))) "calc.c":360:34 979 {*fop_xf_comm_i387}
     (nil))
(insn 429 428 430 25 (set (reg:XF 9 st(1) [orig:194 _113 ] [194])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -136 [0xffffffffffffff78])) [2 percent+0 S8 A64]))) "calc.c":360:61 158 {*extenddfxf2_i387}
     (nil))
(insn 430 429 431 25 (set (reg:XF 9 st(1) [orig:195 _114 ] [195])
        (mult:XF (reg:XF 9 st(1) [orig:194 _113 ] [194])
            (reg:XF 8 st [orig:193 _112 ] [193]))) "calc.c":360:61 979 {*fop_xf_comm_i387}
     (nil))
(insn 431 430 432 25 (set (reg:SI 0 ax [369])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [5 cur_year+0 S4 A32])) "calc.c":360:81 75 {*movsi_internal}
     (nil))
(insn 432 431 433 25 (set (reg:DI 0 ax [orig:196 _115 ] [196])
        (sign_extend:DI (reg:SI 0 ax [369]))) "calc.c":360:81 147 {*extendsidi2_rex64}
     (nil))
(insn 433 432 434 25 (parallel [
            (set (reg:DI 1 dx [orig:197 _116 ] [197])
                (ashift:DI (reg:DI 0 ax [orig:196 _115 ] [196])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":360:81 656 {*ashldi3_1}
     (nil))
(insn 434 433 435 25 (set (reg/f:DI 0 ax [370])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -288 [0xfffffffffffffee0])) [15 new_year+0 S8 A64])) "calc.c":360:81 74 {*movdi_internal}
     (nil))
(insn 435 434 436 25 (parallel [
            (set (reg/f:DI 0 ax [orig:198 _117 ] [198])
                (plus:DI (reg/f:DI 0 ax [370])
                    (reg:DI 1 dx [orig:197 _116 ] [197])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":360:81 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -272 [0xfffffffffffffef0])) [15 new_year+0 S8 A64])
            (reg:DI 1 dx [orig:197 _116 ] [197]))
        (nil)))
(insn 436 435 684 25 (set (reg:SI 0 ax [orig:199 _118 ] [199])
        (mem:SI (reg/f:DI 0 ax [orig:198 _117 ] [198]) [5 *_117+0 S4 A32])) "calc.c":360:81 75 {*movsi_internal}
     (nil))
(insn 684 436 437 25 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S4 A64])
        (reg:SI 0 ax [orig:199 _118 ] [199])) "calc.c":360:71 75 {*movsi_internal}
     (nil))
(insn 437 684 438 25 (set (reg:XF 8 st [orig:200 _119 ] [200])
        (float:XF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S4 A64]))) "calc.c":360:71 187 {floatsixf2}
     (nil))
(insn 438 437 439 25 (set (reg:XF 9 st(1) [orig:201 _120 ] [201])
        (div:XF (reg:XF 9 st(1) [orig:195 _114 ] [195])
            (reg:XF 8 st [orig:200 _119 ] [200]))) "calc.c":360:71 983 {*fop_xf_1_i387}
     (nil))
(insn 439 438 440 25 (set (reg:XF 8 st [371])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC35") [flags 0x2]) [0  S16 A128])) "calc.c":360:92 134 {*movxf_internal}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+2 [0x0.c8p+7])
        (nil)))
(insn 440 439 441 25 (set (reg:XF 8 st [orig:202 _121 ] [202])
        (div:XF (reg:XF 9 st(1) [orig:201 _120 ] [201])
            (reg:XF 8 st [371]))) "calc.c":360:92 983 {*fop_xf_1_i387}
     (nil))
(insn 441 440 685 25 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S8 A64])
        (float_truncate:DF (reg:XF 8 st [orig:202 _121 ] [202]))) "calc.c":360:20 161 {truncxfdf2}
     (nil))
(insn 685 441 443 25 (set (reg:DF 20 xmm0 [orig:203 _122 ] [203])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S8 A64])) "calc.c":360:20 135 {*movdf_internal}
     (nil))
(call_insn 443 685 445 25 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("precision") [flags 0x3]  <function_decl 0x7f09f1657200 precision>) [0 precision S1 A8])
            (const_int 0 [0]))) "calc.c":360:20 824 {*call_value}
     (nil)
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 445 443 446 25 (set (reg:DF 21 xmm1 [373])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [2 res+0 S8 A64])) "calc.c":360:17 135 {*movdf_internal}
     (nil))
(insn 446 445 447 25 (set (reg:DF 20 xmm0 [372])
        (plus:DF (reg:DF 20 xmm0 [orig:260 _304 ] [260])
            (reg:DF 21 xmm1 [373]))) "calc.c":360:17 981 {*fop_df_comm}
     (nil))
(insn 447 446 448 25 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [2 res+0 S8 A64])
        (reg:DF 20 xmm0 [372])) "calc.c":360:17 135 {*movdf_internal}
     (nil))
(insn 448 447 449 25 (set (reg:SI 0 ax [374])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -192 [0xffffffffffffff40])) [5 current_day+0 S4 A128])) "calc.c":361:22 75 {*movsi_internal}
     (nil))
(insn 449 448 450 25 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -188 [0xffffffffffffff44])) [5 last_day+0 S4 A32])
        (reg:SI 0 ax [374])) "calc.c":361:22 75 {*movsi_internal}
     (nil))
(insn 450 449 451 25 (set (reg:SI 0 ax [375])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -184 [0xffffffffffffff48])) [5 cur_change+0 S4 A64])) "calc.c":362:31 75 {*movsi_internal}
     (nil))
(insn 451 450 452 25 (set (reg:DI 0 ax [orig:204 _123 ] [204])
        (sign_extend:DI (reg:SI 0 ax [375]))) "calc.c":362:31 147 {*extendsidi2_rex64}
     (nil))
(insn 452 451 453 25 (parallel [
            (set (reg:DI 0 ax [orig:205 _124 ] [205])
                (plus:DI (reg:DI 0 ax [orig:204 _123 ] [204])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":362:31 210 {*adddi_1}
     (nil))
(insn 453 452 454 25 (parallel [
            (set (reg:DI 1 dx [orig:206 _125 ] [206])
                (ashift:DI (reg:DI 0 ax [orig:205 _124 ] [205])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":362:31 656 {*ashldi3_1}
     (nil))
(insn 454 453 455 25 (set (reg/f:DI 0 ax [376])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [10 sort_change+0 S8 A64])) "calc.c":362:31 74 {*movdi_internal}
     (nil))
(insn 455 454 456 25 (parallel [
            (set (reg/f:DI 0 ax [orig:207 _126 ] [207])
                (plus:DI (reg/f:DI 0 ax [376])
                    (reg:DI 1 dx [orig:206 _125 ] [206])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":362:31 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -104 [0xffffffffffffff98])) [10 sort_change+0 S8 A64])
            (reg:DI 1 dx [orig:206 _125 ] [206]))
        (nil)))
(insn 456 455 686 25 (set (reg:DF 22 xmm2 [orig:208 _127 ] [208])
        (mem:DF (reg/f:DI 0 ax [orig:207 _126 ] [207]) [2 *_126+0 S8 A64])) "calc.c":362:31 135 {*movdf_internal}
     (nil))
(insn 686 456 687 25 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S8 A64])
        (reg:DF 22 xmm2 [orig:208 _127 ] [208])) "calc.c":362:31 135 {*movdf_internal}
     (nil))
(note 687 686 700 25 NOTE_INSN_DELETED)
(note 700 687 457 25 NOTE_INSN_DELETED)
(insn 457 700 458 25 (set (reg:XF 9 st(1) [orig:209 _128 ] [209])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S8 A64]))) "calc.c":362:31 158 {*extenddfxf2_i387}
     (nil))
(insn 458 457 459 25 (set (reg:XF 8 st [378])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [14 sum+0 S16 A128])) "calc.c":362:17 134 {*movxf_internal}
     (nil))
(insn 459 458 460 25 (set (reg:XF 8 st [377])
        (plus:XF (reg:XF 8 st [378])
            (reg:XF 9 st(1) [orig:209 _128 ] [209]))) "calc.c":362:17 979 {*fop_xf_comm_i387}
     (nil))
(insn 460 459 461 25 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [14 sum+0 S16 A128])
        (reg:XF 8 st [377])) "calc.c":362:17 134 {*movxf_internal}
     (nil))
(insn 461 460 462 25 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -184 [0xffffffffffffff48])) [5 cur_change+0 S4 A64])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -184 [0xffffffffffffff48])) [5 cur_change+0 S4 A64])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":363:24 209 {*addsi_1}
     (nil))
;;  succ:       26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL, MODIFIED)
;;  pred:       25 (FALLTHRU)
;;              23
;;              24
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 210 211 212 213 379 380
(code_label 462 461 463 26 105 (nil) [2 uses])
(note 463 462 464 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 464 463 465 26 (set (reg:SI 0 ax [379])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -180 [0xffffffffffffff4c])) [5 cur_capit+0 S4 A32])) "calc.c":365:35 75 {*movsi_internal}
     (nil))
(insn 465 464 466 26 (set (reg:DI 0 ax [orig:210 _129 ] [210])
        (sign_extend:DI (reg:SI 0 ax [379]))) "calc.c":365:35 147 {*extendsidi2_rex64}
     (nil))
(insn 466 465 467 26 (parallel [
            (set (reg:DI 1 dx [orig:211 _130 ] [211])
                (ashift:DI (reg:DI 0 ax [orig:210 _129 ] [210])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":365:35 656 {*ashldi3_1}
     (nil))
(insn 467 466 468 26 (set (reg/f:DI 0 ax [380])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -264 [0xfffffffffffffef8])) [15 capital+0 S8 A64])) "calc.c":365:35 74 {*movdi_internal}
     (nil))
(insn 468 467 469 26 (parallel [
            (set (reg/f:DI 0 ax [orig:212 _131 ] [212])
                (plus:DI (reg/f:DI 0 ax [380])
                    (reg:DI 1 dx [orig:211 _130 ] [211])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":365:35 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -248 [0xffffffffffffff08])) [15 capital+0 S8 A64])
            (reg:DI 1 dx [orig:211 _130 ] [211]))
        (nil)))
(insn 469 468 470 26 (set (reg:SI 0 ax [orig:213 _132 ] [213])
        (mem:SI (reg/f:DI 0 ax [orig:212 _131 ] [212]) [5 *_131+0 S4 A32])) "calc.c":365:35 75 {*movsi_internal}
     (nil))
(insn 470 469 471 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -192 [0xffffffffffffff40])) [5 current_day+0 S4 A128])
            (reg:SI 0 ax [orig:213 _132 ] [213]))) "calc.c":365:12 11 {*cmpsi_1}
     (nil))
(jump_insn 471 470 472 26 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 529)
            (pc))) "calc.c":365:12 806 {*jcc}
     (nil)
 -> 529)
;;  succ:       27 (FALLTHRU)
;;              30
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 27, loop depth 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 261 381 382 383 384 385 386 387 388 389 390 391 392 393
(note 472 471 473 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 473 472 474 27 (set (reg:SI 0 ax [381])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -192 [0xffffffffffffff40])) [5 current_day+0 S4 A128])) "calc.c":367:49 75 {*movsi_internal}
     (nil))
(insn 474 473 688 27 (parallel [
            (set (reg:SI 0 ax [orig:214 _133 ] [214])
                (minus:SI (reg:SI 0 ax [381])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -188 [0xffffffffffffff44])) [5 last_day+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":367:49 282 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -176 [0xffffffffffffff50])) [5 current_day+0 S4 A128])
            (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -172 [0xffffffffffffff54])) [5 last_day+0 S4 A32]))
        (nil)))
(insn 688 474 475 27 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S4 A64])
        (reg:SI 0 ax [orig:214 _133 ] [214])) "calc.c":367:34 75 {*movsi_internal}
     (nil))
(insn 475 688 476 27 (set (reg:XF 9 st(1) [orig:215 _134 ] [215])
        (float:XF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S4 A64]))) "calc.c":367:34 187 {floatsixf2}
     (nil))
(insn 476 475 477 27 (set (reg:XF 8 st [382])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [14 sum+0 S16 A128])) "calc.c":367:34 134 {*movxf_internal}
     (nil))
(insn 477 476 478 27 (set (reg:XF 8 st [orig:216 _135 ] [216])
        (mult:XF (reg:XF 8 st [382])
            (reg:XF 9 st(1) [orig:215 _134 ] [215]))) "calc.c":367:34 979 {*fop_xf_comm_i387}
     (nil))
(insn 478 477 479 27 (set (reg:XF 9 st(1) [orig:217 _136 ] [217])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -136 [0xffffffffffffff78])) [2 percent+0 S8 A64]))) "calc.c":367:61 158 {*extenddfxf2_i387}
     (nil))
(insn 479 478 480 27 (set (reg:XF 9 st(1) [orig:218 _137 ] [218])
        (mult:XF (reg:XF 9 st(1) [orig:217 _136 ] [217])
            (reg:XF 8 st [orig:216 _135 ] [216]))) "calc.c":367:61 979 {*fop_xf_comm_i387}
     (nil))
(insn 480 479 481 27 (set (reg:SI 0 ax [383])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [5 cur_year+0 S4 A32])) "calc.c":367:81 75 {*movsi_internal}
     (nil))
(insn 481 480 482 27 (set (reg:DI 0 ax [orig:219 _138 ] [219])
        (sign_extend:DI (reg:SI 0 ax [383]))) "calc.c":367:81 147 {*extendsidi2_rex64}
     (nil))
(insn 482 481 483 27 (parallel [
            (set (reg:DI 1 dx [orig:220 _139 ] [220])
                (ashift:DI (reg:DI 0 ax [orig:219 _138 ] [219])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":367:81 656 {*ashldi3_1}
     (nil))
(insn 483 482 484 27 (set (reg/f:DI 0 ax [384])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -288 [0xfffffffffffffee0])) [15 new_year+0 S8 A64])) "calc.c":367:81 74 {*movdi_internal}
     (nil))
(insn 484 483 485 27 (parallel [
            (set (reg/f:DI 0 ax [orig:221 _140 ] [221])
                (plus:DI (reg/f:DI 0 ax [384])
                    (reg:DI 1 dx [orig:220 _139 ] [220])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":367:81 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -272 [0xfffffffffffffef0])) [15 new_year+0 S8 A64])
            (reg:DI 1 dx [orig:220 _139 ] [220]))
        (nil)))
(insn 485 484 689 27 (set (reg:SI 0 ax [orig:222 _141 ] [222])
        (mem:SI (reg/f:DI 0 ax [orig:221 _140 ] [221]) [5 *_140+0 S4 A32])) "calc.c":367:81 75 {*movsi_internal}
     (nil))
(insn 689 485 486 27 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S4 A64])
        (reg:SI 0 ax [orig:222 _141 ] [222])) "calc.c":367:71 75 {*movsi_internal}
     (nil))
(insn 486 689 487 27 (set (reg:XF 8 st [orig:223 _142 ] [223])
        (float:XF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S4 A64]))) "calc.c":367:71 187 {floatsixf2}
     (nil))
(insn 487 486 488 27 (set (reg:XF 9 st(1) [orig:224 _143 ] [224])
        (div:XF (reg:XF 9 st(1) [orig:218 _137 ] [218])
            (reg:XF 8 st [orig:223 _142 ] [223]))) "calc.c":367:71 983 {*fop_xf_1_i387}
     (nil))
(insn 488 487 489 27 (set (reg:XF 8 st [385])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC35") [flags 0x2]) [0  S16 A128])) "calc.c":367:92 134 {*movxf_internal}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+2 [0x0.c8p+7])
        (nil)))
(insn 489 488 490 27 (set (reg:XF 8 st [orig:225 _144 ] [225])
        (div:XF (reg:XF 9 st(1) [orig:224 _143 ] [224])
            (reg:XF 8 st [385]))) "calc.c":367:92 983 {*fop_xf_1_i387}
     (nil))
(insn 490 489 690 27 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S8 A64])
        (float_truncate:DF (reg:XF 8 st [orig:225 _144 ] [225]))) "calc.c":367:20 161 {truncxfdf2}
     (nil))
(insn 690 490 492 27 (set (reg:DF 20 xmm0 [orig:226 _145 ] [226])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S8 A64])) "calc.c":367:20 135 {*movdf_internal}
     (nil))
(call_insn 492 690 494 27 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("precision") [flags 0x3]  <function_decl 0x7f09f1657200 precision>) [0 precision S1 A8])
            (const_int 0 [0]))) "calc.c":367:20 824 {*call_value}
     (nil)
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 494 492 495 27 (set (reg:DF 21 xmm1 [387])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [2 res+0 S8 A64])) "calc.c":367:17 135 {*movdf_internal}
     (nil))
(insn 495 494 496 27 (set (reg:DF 20 xmm0 [386])
        (plus:DF (reg:DF 20 xmm0 [orig:261 _311 ] [261])
            (reg:DF 21 xmm1 [387]))) "calc.c":367:17 981 {*fop_df_comm}
     (nil))
(insn 496 495 497 27 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [2 res+0 S8 A64])
        (reg:DF 20 xmm0 [386])) "calc.c":367:17 135 {*movdf_internal}
     (nil))
(insn 497 496 498 27 (set (reg:XF 9 st(1) [orig:227 _146 ] [227])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -168 [0xffffffffffffff58])) [2 res+0 S8 A64]))) "calc.c":368:13 158 {*extenddfxf2_i387}
     (nil))
(insn 498 497 499 27 (set (reg:XF 8 st [388])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [14 res_capit+0 S16 A128])) "calc.c":368:13 134 {*movxf_internal}
     (nil))
(insn 499 498 500 27 (set (reg:XF 8 st [orig:228 _147 ] [228])
        (minus:XF (reg:XF 9 st(1) [orig:227 _146 ] [227])
            (reg:XF 8 st [388]))) "calc.c":368:13 983 {*fop_xf_1_i387}
     (nil))
(insn 500 499 501 27 (set (reg:SI 0 ax [389])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -192 [0xffffffffffffff40])) [5 current_day+0 S4 A128])) "calc.c":368:13 75 {*movsi_internal}
     (nil))
(insn 501 500 692 27 (parallel [
            (set (reg:SI 0 ax [389])
                (minus:SI (reg:SI 0 ax [389])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -188 [0xffffffffffffff44])) [5 last_day+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":368:13 282 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -176 [0xffffffffffffff50])) [5 current_day+0 S4 A128])
            (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -172 [0xffffffffffffff54])) [5 last_day+0 S4 A32]))
        (nil)))
(insn 692 501 502 27 (set (reg:SI 2 cx [orig:229 _148 ] [229])
        (reg:SI 0 ax [389])) "calc.c":368:13 75 {*movsi_internal}
     (nil))
(insn 502 692 503 27 (set (reg:SI 1 dx [390])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -180 [0xffffffffffffff4c])) [5 cur_capit+0 S4 A32])) "calc.c":368:13 75 {*movsi_internal}
     (nil))
(insn 503 502 504 27 (set (reg:DF 0 ax [391])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [2 res+0 S8 A64])) "calc.c":368:13 135 {*movdf_internal}
     (nil))
(insn 504 503 505 27 (set (mem:XF (pre_dec:DI (reg/f:DI 7 sp)) [14  S16 A128])
        (reg:XF 8 st [orig:228 _147 ] [228])) "calc.c":368:13 129 {*pushxf}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 505 504 507 27 (set (mem:XF (pre_dec:DI (reg/f:DI 7 sp)) [14  S16 A128])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [14 sum+0 S16 A128])) "calc.c":368:13 129 {*pushxf}
     (expr_list:REG_ARGS_SIZE (const_int 32 [0x20])
        (nil)))
(insn 507 505 508 27 (set (reg:SI 4 si)
        (reg:SI 2 cx [orig:229 _148 ] [229])) "calc.c":368:13 75 {*movsi_internal}
     (nil))
(insn 508 507 509 27 (set (reg:DF 20 xmm0)
        (reg:DF 0 ax [391])) "calc.c":368:13 135 {*movdf_internal}
     (nil))
(insn 509 508 510 27 (set (reg:DI 0 ax [392])
        (symbol_ref/f:DI ("*.LC38") [flags 0x2]  <var_decl 0x7f09f171df30 *.LC38>)) "calc.c":368:13 74 {*movdi_internal}
     (nil))
(insn 510 509 511 27 (set (reg:DI 5 di)
        (reg:DI 0 ax [392])) "calc.c":368:13 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC38") [flags 0x2]  <var_decl 0x7f09f171df30 *.LC38>)
        (nil)))
(insn 511 510 512 27 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) "calc.c":368:13 77 {*movqi_internal}
     (nil))
(call_insn 512 511 513 27 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f09f183f100 printf>) [0 __builtin_printf S1 A8])
            (const_int 32 [0x20]))) "calc.c":368:13 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DF (use (reg:DF 20 xmm0))
                (expr_list:SI (use (reg:SI 4 si))
                    (expr_list:SI (use (reg:SI 1 dx))
                        (nil)))))))
(insn 513 512 514 27 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":368:13 210 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 514 513 515 27 (set (reg:SI 0 ax [393])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -192 [0xffffffffffffff40])) [5 current_day+0 S4 A128])) "calc.c":369:22 75 {*movsi_internal}
     (nil))
(insn 515 514 516 27 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -188 [0xffffffffffffff44])) [5 last_day+0 S4 A32])
        (reg:SI 0 ax [393])) "calc.c":369:22 75 {*movsi_internal}
     (nil))
(insn 516 515 517 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int 48 [0x30])) [5 flag_capital+0 S4 A64])
            (const_int 1 [0x1]))) "calc.c":370:16 11 {*cmpsi_1}
     (nil))
(jump_insn 517 516 518 27 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 525)
            (pc))) "calc.c":370:16 806 {*jcc}
     (nil)
 -> 525)
;;  succ:       28 (FALLTHRU)
;;              29
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 28, loop depth 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 230 231 394 395 396
(note 518 517 519 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 519 518 520 28 (set (reg:XF 9 st(1) [orig:230 _149 ] [230])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -168 [0xffffffffffffff58])) [2 res+0 S8 A64]))) "calc.c":371:28 158 {*extenddfxf2_i387}
     (nil))
(insn 520 519 521 28 (set (reg:XF 8 st [394])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [14 res_capit+0 S16 A128])) "calc.c":371:28 134 {*movxf_internal}
     (nil))
(insn 521 520 522 28 (set (reg:XF 8 st [orig:231 _150 ] [231])
        (minus:XF (reg:XF 9 st(1) [orig:230 _149 ] [230])
            (reg:XF 8 st [394]))) "calc.c":371:28 983 {*fop_xf_1_i387}
     (nil))
(insn 522 521 523 28 (set (reg:XF 9 st(1) [396])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [14 sum+0 S16 A128])) "calc.c":371:21 134 {*movxf_internal}
     (nil))
(insn 523 522 524 28 (set (reg:XF 8 st [395])
        (plus:XF (reg:XF 8 st [orig:231 _150 ] [231])
            (reg:XF 9 st(1) [396]))) "calc.c":371:21 979 {*fop_xf_comm_i387}
     (nil))
(insn 524 523 525 28 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [14 sum+0 S16 A128])
        (reg:XF 8 st [395])) "calc.c":371:21 134 {*movxf_internal}
     (nil))
;;  succ:       29 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 29, loop depth 0, maybe hot
;;  prev block 28, next block 30, flags: (RTL, MODIFIED)
;;  pred:       27
;;              28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 525 524 526 29 108 (nil) [1 uses])
(note 526 525 527 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 527 526 693 29 (set (reg:XF 15 st(7) [443])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -168 [0xffffffffffffff58])) [2 res+0 S8 A64]))) "calc.c":372:23 158 {*extenddfxf2_i387}
     (nil))
(insn 693 527 528 29 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [14 res_capit+0 S16 A128])
        (reg:XF 15 st(7) [443])) "calc.c":372:23 134 {*movxf_internal}
     (nil))
(insn 528 693 529 29 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -180 [0xffffffffffffff4c])) [5 cur_capit+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -180 [0xffffffffffffff4c])) [5 cur_capit+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":373:22 209 {*addsi_1}
     (nil))
;;  succ:       30 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 30, loop depth 0, maybe hot
;;  prev block 29, next block 31, flags: (RTL, MODIFIED)
;;  pred:       26
;;              29 (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 529 528 530 30 107 (nil) [1 uses])
(note 530 529 531 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 531 530 532 30 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -192 [0xffffffffffffff40])) [5 current_day+0 S4 A128])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -192 [0xffffffffffffff40])) [5 current_day+0 S4 A128])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":336:44 209 {*addsi_1}
     (nil))
;;  succ:       31 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 31, loop depth 0, maybe hot
;;  prev block 30, next block 32, flags: (RTL, MODIFIED)
;;  pred:       30 (FALLTHRU,DFS_BACK)
;;              18 [always] 
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 397
(code_label 532 531 533 31 101 (nil) [1 uses])
(note 533 532 535 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 535 533 536 31 (set (reg:SI 0 ax [397])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -192 [0xffffffffffffff40])) [5 current_day+0 S4 A128])) "calc.c":336:24 75 {*movsi_internal}
     (nil))
(insn 536 535 537 31 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [397])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -236 [0xffffffffffffff14])) [5 days+0 S4 A32]))) "calc.c":336:24 11 {*cmpsi_1}
     (nil))
(jump_insn 537 536 538 31 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 534)
            (pc))) "calc.c":336:24 806 {*jcc}
     (nil)
 -> 534)
;;  succ:       19
;;              32 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 32, loop depth 0, maybe hot
;;  prev block 31, next block 33, flags: (RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 255 398 399 400 401 402 403 404 405 406
(note 538 537 539 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 539 538 540 32 (set (reg:SI 0 ax [398])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -236 [0xffffffffffffff14])) [5 days+0 S4 A32])) "calc.c":376:34 75 {*movsi_internal}
     (nil))
(insn 540 539 694 32 (parallel [
            (set (reg:SI 0 ax [orig:232 _151 ] [232])
                (minus:SI (reg:SI 0 ax [398])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -188 [0xffffffffffffff44])) [5 last_day+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":376:34 282 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -220 [0xffffffffffffff24])) [5 days+0 S4 A32])
            (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -172 [0xffffffffffffff54])) [5 last_day+0 S4 A32]))
        (nil)))
(insn 694 540 541 32 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S4 A64])
        (reg:SI 0 ax [orig:232 _151 ] [232])) "calc.c":376:26 75 {*movsi_internal}
     (nil))
(insn 541 694 542 32 (set (reg:XF 9 st(1) [orig:233 _152 ] [233])
        (float:XF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S4 A64]))) "calc.c":376:26 187 {floatsixf2}
     (nil))
(insn 542 541 543 32 (set (reg:XF 8 st [399])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [14 sum+0 S16 A128])) "calc.c":376:26 134 {*movxf_internal}
     (nil))
(insn 543 542 544 32 (set (reg:XF 8 st [orig:234 _153 ] [234])
        (mult:XF (reg:XF 8 st [399])
            (reg:XF 9 st(1) [orig:233 _152 ] [233]))) "calc.c":376:26 979 {*fop_xf_comm_i387}
     (nil))
(insn 544 543 545 32 (set (reg:XF 9 st(1) [orig:235 _154 ] [235])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -136 [0xffffffffffffff78])) [2 percent+0 S8 A64]))) "calc.c":376:46 158 {*extenddfxf2_i387}
     (nil))
(insn 545 544 546 32 (set (reg:XF 9 st(1) [orig:236 _155 ] [236])
        (mult:XF (reg:XF 9 st(1) [orig:235 _154 ] [235])
            (reg:XF 8 st [orig:234 _153 ] [234]))) "calc.c":376:46 979 {*fop_xf_comm_i387}
     (nil))
(insn 546 545 547 32 (set (reg:SI 0 ax [400])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [5 cur_year+0 S4 A32])) "calc.c":376:66 75 {*movsi_internal}
     (nil))
(insn 547 546 548 32 (set (reg:DI 0 ax [orig:237 _156 ] [237])
        (sign_extend:DI (reg:SI 0 ax [400]))) "calc.c":376:66 147 {*extendsidi2_rex64}
     (nil))
(insn 548 547 549 32 (parallel [
            (set (reg:DI 1 dx [orig:238 _157 ] [238])
                (ashift:DI (reg:DI 0 ax [orig:237 _156 ] [237])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":376:66 656 {*ashldi3_1}
     (nil))
(insn 549 548 550 32 (set (reg/f:DI 0 ax [401])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -288 [0xfffffffffffffee0])) [15 new_year+0 S8 A64])) "calc.c":376:66 74 {*movdi_internal}
     (nil))
(insn 550 549 551 32 (parallel [
            (set (reg/f:DI 0 ax [orig:239 _158 ] [239])
                (plus:DI (reg/f:DI 0 ax [401])
                    (reg:DI 1 dx [orig:238 _157 ] [238])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":376:66 210 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -272 [0xfffffffffffffef0])) [15 new_year+0 S8 A64])
            (reg:DI 1 dx [orig:238 _157 ] [238]))
        (nil)))
(insn 551 550 695 32 (set (reg:SI 0 ax [orig:240 _159 ] [240])
        (mem:SI (reg/f:DI 0 ax [orig:239 _158 ] [239]) [5 *_158+0 S4 A32])) "calc.c":376:66 75 {*movsi_internal}
     (nil))
(insn 695 551 552 32 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S4 A64])
        (reg:SI 0 ax [orig:240 _159 ] [240])) "calc.c":376:56 75 {*movsi_internal}
     (nil))
(insn 552 695 553 32 (set (reg:XF 8 st [orig:241 _160 ] [241])
        (float:XF (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S4 A64]))) "calc.c":376:56 187 {floatsixf2}
     (nil))
(insn 553 552 554 32 (set (reg:XF 9 st(1) [orig:242 _161 ] [242])
        (div:XF (reg:XF 9 st(1) [orig:236 _155 ] [236])
            (reg:XF 8 st [orig:241 _160 ] [241]))) "calc.c":376:56 983 {*fop_xf_1_i387}
     (nil))
(insn 554 553 555 32 (set (reg:XF 8 st [402])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC35") [flags 0x2]) [0  S16 A128])) "calc.c":376:77 134 {*movxf_internal}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+2 [0x0.c8p+7])
        (nil)))
(insn 555 554 556 32 (set (reg:XF 8 st [orig:243 _162 ] [243])
        (div:XF (reg:XF 9 st(1) [orig:242 _161 ] [242])
            (reg:XF 8 st [402]))) "calc.c":376:77 983 {*fop_xf_1_i387}
     (nil))
(insn 556 555 696 32 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S8 A64])
        (float_truncate:DF (reg:XF 8 st [orig:243 _162 ] [243]))) "calc.c":376:12 161 {truncxfdf2}
     (nil))
(insn 696 556 558 32 (set (reg:DF 20 xmm0 [orig:244 _163 ] [244])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S8 A64])) "calc.c":376:12 135 {*movdf_internal}
     (nil))
(call_insn 558 696 560 32 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("precision") [flags 0x3]  <function_decl 0x7f09f1657200 precision>) [0 precision S1 A8])
            (const_int 0 [0]))) "calc.c":376:12 824 {*call_value}
     (nil)
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 560 558 561 32 (set (reg:DF 21 xmm1 [404])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [2 res+0 S8 A64])) "calc.c":376:9 135 {*movdf_internal}
     (nil))
(insn 561 560 562 32 (set (reg:DF 20 xmm0 [403])
        (plus:DF (reg:DF 20 xmm0 [orig:255 _274 ] [255])
            (reg:DF 21 xmm1 [404]))) "calc.c":376:9 981 {*fop_df_comm}
     (nil))
(insn 562 561 563 32 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [2 res+0 S8 A64])
        (reg:DF 20 xmm0 [403])) "calc.c":376:9 135 {*movdf_internal}
     (nil))
(insn 563 562 564 32 (set (reg:XF 9 st(1) [orig:245 _164 ] [245])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -168 [0xffffffffffffff58])) [2 res+0 S8 A64]))) "calc.c":377:13 158 {*extenddfxf2_i387}
     (nil))
(insn 564 563 565 32 (set (reg:XF 8 st [405])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [14 last_nal+0 S16 A128])) "calc.c":377:13 134 {*movxf_internal}
     (nil))
(insn 565 564 566 32 (set (reg:XF 9 st(1) [orig:246 _165 ] [246])
        (minus:XF (reg:XF 9 st(1) [orig:245 _164 ] [245])
            (reg:XF 8 st [405]))) "calc.c":377:13 983 {*fop_xf_1_i387}
     (nil))
(insn 566 565 567 32 (set (reg:XF 8 st [406])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC34") [flags 0x2]) [0  S16 A128])) "calc.c":377:8 134 {*movxf_internal}
     (expr_list:REG_EQUAL (const_double:XF 1.2e+5 [0x0.ea6p+17])
        (nil)))
(insn 567 566 568 32 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:XF 9 st(1) [orig:246 _165 ] [246])
            (reg:XF 8 st [406]))) "calc.c":377:8 42 {*cmpixf_i387}
     (nil))
(jump_insn 568 567 572 32 (set (pc)
        (if_then_else (unle (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 590)
            (pc))) "calc.c":377:8 806 {*jcc}
     (nil)
 -> 590)
;;  succ:       33 (FALLTHRU)
;;              34
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 33, loop depth 0, maybe hot
;;  prev block 32, next block 34, flags: (RTL, MODIFIED)
;;  pred:       32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 247 248 249 250 251 252 253 254 256 407 408 409 410 411
(note 572 568 573 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 573 572 574 33 (set (reg:XF 9 st(1) [orig:247 _166 ] [247])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -168 [0xffffffffffffff58])) [2 res+0 S8 A64]))) "calc.c":378:35 158 {*extenddfxf2_i387}
     (nil))
(insn 574 573 575 33 (set (reg:XF 8 st [407])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [14 last_nal+0 S16 A128])) "calc.c":378:35 134 {*movxf_internal}
     (nil))
(insn 575 574 576 33 (set (reg:XF 9 st(1) [orig:248 _167 ] [248])
        (minus:XF (reg:XF 9 st(1) [orig:247 _166 ] [247])
            (reg:XF 8 st [407]))) "calc.c":378:35 983 {*fop_xf_1_i387}
     (nil))
(insn 576 575 577 33 (set (reg:XF 8 st [408])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC34") [flags 0x2]) [0  S16 A128])) "calc.c":378:46 134 {*movxf_internal}
     (expr_list:REG_EQUAL (const_double:XF 1.2e+5 [0x0.ea6p+17])
        (nil)))
(insn 577 576 578 33 (set (reg:XF 8 st [orig:249 _168 ] [249])
        (minus:XF (reg:XF 9 st(1) [orig:248 _167 ] [248])
            (reg:XF 8 st [408]))) "calc.c":378:46 983 {*fop_xf_1_i387}
     (nil))
(insn 578 577 579 33 (set (reg:XF 9 st(1) [orig:250 _169 ] [250])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -128 [0xffffffffffffff80])) [2 nal_percent+0 S8 A128]))) "calc.c":378:64 158 {*extenddfxf2_i387}
     (nil))
(insn 579 578 580 33 (set (reg:XF 9 st(1) [orig:251 _170 ] [251])
        (mult:XF (reg:XF 9 st(1) [orig:250 _169 ] [250])
            (reg:XF 8 st [orig:249 _168 ] [249]))) "calc.c":378:64 979 {*fop_xf_comm_i387}
     (nil))
(insn 580 579 581 33 (set (reg:XF 8 st [409])
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC35") [flags 0x2]) [0  S16 A128])) "calc.c":378:78 134 {*movxf_internal}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+2 [0x0.c8p+7])
        (nil)))
(insn 581 580 582 33 (set (reg:XF 8 st [orig:252 _171 ] [252])
        (div:XF (reg:XF 9 st(1) [orig:251 _170 ] [251])
            (reg:XF 8 st [409]))) "calc.c":378:78 983 {*fop_xf_1_i387}
     (nil))
(insn 582 581 697 33 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S8 A64])
        (float_truncate:DF (reg:XF 8 st [orig:252 _171 ] [252]))) "calc.c":378:20 161 {truncxfdf2}
     (nil))
(insn 697 582 584 33 (set (reg:DF 20 xmm0 [orig:253 _172 ] [253])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S8 A64])) "calc.c":378:20 135 {*movdf_internal}
     (nil))
(call_insn 584 697 585 33 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("precision") [flags 0x3]  <function_decl 0x7f09f1657200 precision>) [0 precision S1 A8])
            (const_int 0 [0]))) "calc.c":378:20 824 {*call_value}
     (nil)
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 585 584 698 33 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S8 A64])
        (reg:DF 20 xmm0)) "calc.c":378:20 135 {*movdf_internal}
     (nil))
(note 698 585 699 33 NOTE_INSN_DELETED)
(note 699 698 586 33 NOTE_INSN_DELETED)
(insn 586 699 587 33 (set (reg:XF 9 st(1) [orig:254 _173 ] [254])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                    (const_int -296 [0xfffffffffffffed8])) [12 %sfp+-280 S8 A64]))) "calc.c":378:20 158 {*extenddfxf2_i387}
     (nil))
(insn 587 586 588 33 (set (reg:XF 8 st [411])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [14 sum_nal+0 S16 A128])) "calc.c":378:17 134 {*movxf_internal}
     (nil))
(insn 588 587 589 33 (set (reg:XF 8 st [410])
        (plus:XF (reg:XF 8 st [411])
            (reg:XF 9 st(1) [orig:254 _173 ] [254]))) "calc.c":378:17 979 {*fop_xf_comm_i387}
     (nil))
(insn 589 588 590 33 (set (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [14 sum_nal+0 S16 A128])
        (reg:XF 8 st [410])) "calc.c":378:17 134 {*movxf_internal}
     (nil))
;;  succ:       34 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 34, loop depth 0, maybe hot
;;  prev block 33, next block 35, flags: (RTL, MODIFIED)
;;  pred:       33 (FALLTHRU)
;;              32
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 412 413 414 415 416
(code_label 590 589 591 34 110 (nil) [1 uses])
(note 591 590 592 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 592 591 593 34 (set (mem:XF (pre_dec:DI (reg/f:DI 7 sp)) [14  S16 A128])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [14 sum_nal+0 S16 A128])) "calc.c":379:5 129 {*pushxf}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 593 592 594 34 (set (reg:DI 0 ax [412])
        (symbol_ref/f:DI ("*.LC39") [flags 0x2]  <var_decl 0x7f09f12af000 *.LC39>)) "calc.c":379:5 74 {*movdi_internal}
     (nil))
(insn 594 593 595 34 (set (reg:DI 5 di)
        (reg:DI 0 ax [412])) "calc.c":379:5 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC39") [flags 0x2]  <var_decl 0x7f09f12af000 *.LC39>)
        (nil)))
(insn 595 594 596 34 (set (reg:QI 0 ax)
        (const_int 0 [0])) "calc.c":379:5 77 {*movqi_internal}
     (nil))
(call_insn 596 595 597 34 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f09f183f100 printf>) [0 __builtin_printf S1 A8])
            (const_int 16 [0x10]))) "calc.c":379:5 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 597 596 598 34 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":379:5 210 {*adddi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 598 597 599 34 (set (reg:XF 8 st [413])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [14 sum+0 S16 A128])) "calc.c":381:13 134 {*movxf_internal}
     (nil))
(insn 599 598 600 34 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [2 sum_res+0 S8 A128])
        (float_truncate:DF (reg:XF 8 st [413]))) "calc.c":381:13 161 {truncxfdf2}
     (nil))
(insn 600 599 601 34 (set (reg:XF 8 st [414])
        (mem/c:XF (plus:DI (reg/f:DI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [14 sum_nal+0 S16 A128])) "calc.c":382:15 134 {*movxf_internal}
     (nil))
(insn 601 600 602 34 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [2 nalog_res+0 S8 A64])
        (float_truncate:DF (reg:XF 8 st [414]))) "calc.c":382:15 161 {truncxfdf2}
     (nil))
(insn 602 601 603 34 (set (reg:DI 0 ax [415])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [10 change+0 S8 A64])) "calc.c":384:5 74 {*movdi_internal}
     (nil))
(insn 603 602 604 34 (set (reg:DI 5 di)
        (reg:DI 0 ax [415])) "calc.c":384:5 74 {*movdi_internal}
     (nil))
(call_insn 604 603 605 34 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f09f1857d00 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "calc.c":384:5 813 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 605 604 606 34 (set (reg:DI 0 ax [416])
        (mem/f/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [10 sort_change+0 S8 A64])) "calc.c":385:5 74 {*movdi_internal}
     (nil))
(insn 606 605 607 34 (set (reg:DI 5 di)
        (reg:DI 0 ax [416])) "calc.c":385:5 74 {*movdi_internal}
     (nil))
(call_insn 607 606 608 34 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f09f1857d00 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "calc.c":385:5 813 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 608 607 609 34 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int 40 [0x28])) [5 flag+0 S4 A64])
            (const_int 3 [0x3]))) "calc.c":387:8 11 {*cmpsi_1}
     (nil))
(jump_insn 609 608 610 34 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 615)
            (pc))) "calc.c":387:8 806 {*jcc}
     (nil)
 -> 615)
;;  succ:       35 (FALLTHRU)
;;              36
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 35, loop depth 0, maybe hot
;;  prev block 34, next block 36, flags: (RTL, MODIFIED)
;;  pred:       34 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 417
(note 610 609 611 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 611 610 612 35 (set (reg:DF 20 xmm0 [417])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [2 sum_res+0 S8 A128])) "calc.c":389:13 135 {*movdf_internal}
     (nil))
(insn 612 611 667 35 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [2 res+0 S8 A64])
        (reg:DF 20 xmm0 [417])) "calc.c":389:13 135 {*movdf_internal}
     (nil))
(jump_insn 667 612 668 35 (set (pc)
        (label_ref 622)) 807 {jump}
     (nil)
 -> 622)
;;  succ:       38 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 668 667 615)
;; basic block 36, loop depth 0, maybe hot
;;  prev block 35, next block 37, flags: (RTL, MODIFIED)
;;  pred:       34
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 615 668 616 36 112 (nil) [1 uses])
(note 616 615 617 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 617 616 618 36 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int 40 [0x28])) [5 flag+0 S4 A64])
            (const_int 2 [0x2]))) "calc.c":391:13 11 {*cmpsi_1}
     (nil))
(jump_insn 618 617 619 36 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 622)
            (pc))) "calc.c":391:13 806 {*jcc}
     (nil)
 -> 622)
;;  succ:       37 (FALLTHRU)
;;              38
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 37, loop depth 0, maybe hot
;;  prev block 36, next block 38, flags: (RTL, MODIFIED)
;;  pred:       36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 418
(note 619 618 620 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 620 619 621 37 (set (reg:DF 20 xmm0 [418])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [2 nalog_res+0 S8 A64])) "calc.c":393:13 135 {*movdf_internal}
     (nil))
(insn 621 620 622 37 (set (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [2 res+0 S8 A64])
        (reg:DF 20 xmm0 [418])) "calc.c":393:13 135 {*movdf_internal}
     (nil))
;;  succ:       38 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 38, loop depth 0, maybe hot
;;  prev block 37, next block 39, flags: (RTL, MODIFIED)
;;  pred:       37 (FALLTHRU)
;;              36
;;              35 [always] 
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 257 262 421
(code_label 622 621 623 38 113 (nil) [2 uses])
(note 623 622 624 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 624 623 627 38 (set (reg:DF 20 xmm0 [orig:257 _287 ] [257])
        (mem/c:DF (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [2 res+0 S8 A64])) "calc.c":395:12 135 {*movdf_internal}
     (nil))
(insn 627 624 631 38 (set (reg:DF 0 ax [orig:262 <retval> ] [262])
        (reg:DF 20 xmm0 [orig:257 _287 ] [257])) "calc.c":395:12 135 {*movdf_internal}
     (nil))
(insn 631 627 632 38 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 6 bp)
                                (const_int -24 [0xffffffffffffffe8])) [8 D.4788+0 S8 A64])
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_TEST))
            (clobber (reg:DI 1 dx [421]))
        ]) "calc.c":396:1 1164 {stack_protect_test_1_di}
     (nil))
(jump_insn 632 631 650 38 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 635)
            (pc))) "calc.c":396:1 806 {*jcc}
     (nil)
 -> 635)
;;  succ:       40
;;              39 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 262

;; basic block 39, loop depth 0, maybe hot
;;  prev block 38, next block 40, flags: (RTL, MODIFIED)
;;  pred:       38 (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
(note 650 632 633 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(call_insn 633 650 634 39 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f09f16df600 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "calc.c":396:1 813 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 634 633 635)
;; basic block 40, loop depth 0, maybe hot
;;  prev block 39, next block 1, flags: (RTL, MODIFIED)
;;  pred:       38
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 262
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 262
;; lr  def 	 20 [xmm0]
(code_label 635 634 651 40 115 (nil) [1 uses])
(note 651 635 636 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 636 651 637 40 (set (reg/i:DF 20 xmm0)
        (reg:DF 0 ax [orig:262 <retval> ] [262])) "calc.c":396:1 135 {*movdf_internal}
     (nil))
(insn 637 636 669 40 (use (reg/i:DF 20 xmm0)) "calc.c":396:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0]

(note 669 637 0 NOTE_INSN_DELETED)

;; Function main (main, funcdef_no=15, decl_uid=4628, cgraph_uid=16, symbol_order=15)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=0)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 13: point = 0, n_alt = -1
   Insn 12: point = 0, n_alt = -2
   Insn 8: point = 1, n_alt = -2
   Insn 5: point = 3, n_alt = 0
 r82: [2..3]
 r83: [0..1]
Compressing live ranges: from 4 to 4 - 100%
Ranges after the compression:
 r82: [2..3]
 r83: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=16, prev_offset=16)
Can't eliminate 19 to 7 (offset=0, prev_offset=0)
Can eliminate 19 to 6 (offset=0, prev_offset=0)
changing reg in insn 5
changing reg in insn 8
changing reg in insn 8
changing reg in insn 12
deleting insn with uid = 8.
deleting insn with uid = 12.
starting the processing of deferred insns
ending the processing of deferred insns


main

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 6 [bp]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r19={1d,1u} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r36={1d} r37={1d} 
;;    total ref usage 26{19d,7u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 82 83
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 13 2 (set (reg:SI 0 ax [orig:82 _1 ] [82])
        (const_int 0 [0])) "<built-in>":0:0 75 {*movsi_internal}
     (nil))
(insn 13 5 15 2 (use (reg/i:SI 0 ax)) "calc.c":401:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(note 15 13 0 NOTE_INSN_DELETED)
