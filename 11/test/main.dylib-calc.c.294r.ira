
;; Function printer (printer, funcdef_no=6, decl_uid=4464, cgraph_uid=7, symbol_order=6)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 4 n_edges 3 count 4 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3
;; 2 succs { 3 }
;; 3 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 8.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r82: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r82,l0) best DIREG, allocno GENERAL_REGS

  a0(r82,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 12(l0): point = 0
   Insn 8(l0): point = 3
   Insn 7(l0): point = 5
   Insn 6(l0): point = 7
   Insn 2(l0): point = 9
 a0(r82): [6..7]
Compressing live ranges: from 12 to 2 - 16%
Ranges after the compression:
 a0(r82): [0..1]
  pref0:a0(r82)<-hr5@1500
  regions=1, blocks=4, points=2
    allocnos=1 (big 0), copies=0, conflicts=0, ranges=1
Disposition:
    0:r82  l0     0
+++Costs: overall -1000, reg -1000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


printer

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 5 [di] 6 [bp] 7 [sp]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={2d} r5={3d,2u} r6={1d,3u} r7={1d,4u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,2u} r17={1d} r18={1d} r19={1d,5u} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d} r37={2d} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r82={1d,1u} 
;;    total ref usage 105{88d,17u,0e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 str+0 S8 A64])
        (reg:DI 5 di [ str ])) "calc.c":12:1 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ str ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 82)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [1 str+0 S8 A64])) "calc.c":13:5 74 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 5 di)
        (reg:DI 82)) "calc.c":13:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 82)
        (nil)))
(call_insn 8 7 11 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f09f183f800 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "calc.c":13:5 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       3 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 1, flags: (RTL)
;;  pred:       2 [always]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 11 8 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 0 3 (const_int 0 [0]) "calc.c":14:1 843 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function precision (precision, funcdef_no=7, decl_uid=4467, cgraph_uid=8, symbol_order=7)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 10.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r89: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a3 (r89,l0) best SSE_REGS, allocno SSE_REGS
    r88: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a2 (r88,l0) best SSE_REGS, allocno SSE_REGS
    r87: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a6 (r87,l0) best SSE_REGS, allocno SSE_REGS
    r86: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a7 (r86,l0) best SSE_REGS, allocno SSE_REGS
    r85: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a0 (r85,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r84: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a1 (r84,l0) best SSE_REGS, allocno SSE_REGS
    r83: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a4 (r83,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r82: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a5 (r82,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS

  a0(r85,l0) costs: AREG:6000 DREG:6000 CREG:6000 BREG:6000 SIREG:6000 DIREG:6000 AD_REGS:6000 CLOBBERED_REGS:6000 Q_REGS:6000 TLS_GOTBASE_REGS:6000 GENERAL_REGS:6000 FP_TOP_REG:19000 FP_SECOND_REG:19000 FLOAT_REGS:19000 SSE_FIRST_REG:19000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:19000 FLOAT_INT_REGS:19000 INT_SSE_REGS:19000 FLOAT_INT_SSE_REGS:19000 MEM:7000
  a1(r84,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 FP_TOP_REG:18000 FP_SECOND_REG:18000 FLOAT_REGS:18000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:18000 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 MEM:7000
  a2(r88,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a3(r89,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:11000
  a4(r83,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:26000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:12000
  a5(r82,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:26000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:12000
  a6(r87,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:11000
  a7(r86,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:11000

   Insn 23(l0): point = 0
   Insn 22(l0): point = 2
   Insn 18(l0): point = 4
   Insn 15(l0): point = 6
   Insn 14(l0): point = 8
   Insn 13(l0): point = 10
   Insn 12(l0): point = 13
   Insn 11(l0): point = 15
   Insn 10(l0): point = 17
   Insn 9(l0): point = 19
   Insn 8(l0): point = 21
   Insn 7(l0): point = 23
   Insn 6(l0): point = 25
   Insn 2(l0): point = 27
 a0(r85): [3..4]
 a1(r84): [5..6]
 a2(r88): [9..11]
 a3(r89): [11..13]
 a4(r83): [12..15]
 a5(r82): [20..21]
 a6(r87): [22..23]
 a7(r86): [22..25]
Compressing live ranges: from 30 to 12 - 40%
Ranges after the compression:
 a0(r85): [0..1]
 a1(r84): [2..3]
 a2(r88): [4..5]
 a3(r89): [5..7]
 a4(r83): [6..7]
 a5(r82): [8..9]
 a6(r87): [10..11]
 a7(r86): [10..11]
  pref0:a0(r85)<-hr20@1538
  pref1:a4(r83)<-hr20@2076
  pref2:a5(r82)<-hr20@2076
  regions=1, blocks=3, points=12
    allocnos=8 (big 0), copies=0, conflicts=0, ranges=8
Disposition:
    5:r82  l0     0    4:r83  l0     0    1:r84  l0    20    0:r85  l0     0
    7:r86  l0    21    6:r87  l0    20    2:r88  l0    20    3:r89  l0    21
+++Costs: overall -3000, reg -3000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


precision

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame] 20 [xmm0]
;;  regs ever live 	 6 [bp] 7 [sp] 20 [xmm0]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={2d} r5={2d} r6={1d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1d,1u} r17={1d} r18={1d} r19={1d,6u} r20={4d,5u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={2d} r37={2d} r38={1d} r39={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} 
;;    total ref usage 121{96d,25u,0e} in 14{13 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 84 85 86 87 88 89
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [2 number+0 S8 A64])
        (reg:DF 20 xmm0 [ number ])) "calc.c":16:1 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0 [ number ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DF 86)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [2 number+0 S8 A64])) "calc.c":18:21 135 {*movdf_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DF 87)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S8 A64])) "calc.c":18:21 135 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+2 [0x0.c8p+7])
        (nil)))
(insn 8 7 9 2 (set (reg:DF 82 [ _1 ])
        (mult:DF (reg:DF 86)
            (reg:DF 87))) "calc.c":18:21 981 {*fop_df_comm}
     (expr_list:REG_DEAD (reg:DF 87)
        (expr_list:REG_DEAD (reg:DF 86)
            (nil))))
(insn 9 8 10 2 (set (reg:DF 20 xmm0)
        (reg:DF 82 [ _1 ])) "calc.c":18:21 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 82 [ _1 ])
        (nil)))
(call_insn/u 10 9 11 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("round") [flags 0x41]  <function_decl 0x7f09f180cc00 round>) [0 __builtin_round S1 A8])
            (const_int 0 [0]))) "calc.c":18:21 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 11 10 12 2 (set (reg:DF 83 [ _2 ])
        (reg:DF 20 xmm0)) "calc.c":18:21 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 12 11 13 2 (set (reg:DF 89)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S8 A64])) "calc.c":18:19 135 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+2 [0x0.c8p+7])
        (nil)))
(insn 13 12 14 2 (set (reg:DF 88)
        (div:DF (reg:DF 83 [ _2 ])
            (reg:DF 89))) "calc.c":18:19 985 {*fop_df_1}
     (expr_list:REG_DEAD (reg:DF 89)
        (expr_list:REG_DEAD (reg:DF 83 [ _2 ])
            (nil))))
(insn 14 13 15 2 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [2 number+0 S8 A64])
        (reg:DF 88)) "calc.c":18:19 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 88)
        (nil)))
(insn 15 14 18 2 (set (reg:DF 84 [ _5 ])
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [2 number+0 S8 A64])) "calc.c":18:19 135 {*movdf_internal}
     (nil))
(insn 18 15 22 2 (set (reg:DF 85 [ <retval> ])
        (reg:DF 84 [ _5 ])) "calc.c":18:19 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 84 [ _5 ])
        (nil)))
(insn 22 18 23 2 (set (reg/i:DF 20 xmm0)
        (reg:DF 85 [ <retval> ])) "calc.c":19:1 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 85 [ <retval> ])
        (nil)))
(insn 23 22 0 2 (use (reg/i:DF 20 xmm0)) "calc.c":19:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0]


;; Function what_the_func (what_the_func, funcdef_no=8, decl_uid=4470, cgraph_uid=9, symbol_order=8)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 21 n_edges 29 count 21 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
;; 2 succs { 3 4 }
;; 3 succs { 20 }
;; 4 succs { 5 6 }
;; 5 succs { 20 }
;; 6 succs { 7 8 }
;; 7 succs { 20 }
;; 8 succs { 9 10 }
;; 9 succs { 20 }
;; 10 succs { 11 12 }
;; 11 succs { 20 }
;; 12 succs { 13 14 }
;; 13 succs { 20 }
;; 14 succs { 15 16 }
;; 15 succs { 20 }
;; 16 succs { 17 18 }
;; 17 succs { 20 }
;; 18 succs { 19 20 }
;; 19 succs { 20 }
;; 20 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 38.
verify found no changes in insn with uid = 52.
verify found no changes in insn with uid = 66.
verify found no changes in insn with uid = 80.
verify found no changes in insn with uid = 94.
verify found no changes in insn with uid = 108.
verify found no changes in insn with uid = 122.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r110: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a4 (r110,l0) best SIREG, allocno GENERAL_REGS
    r109: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r109,l0) best DIREG, allocno GENERAL_REGS
    r108: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a7 (r108,l0) best SIREG, allocno GENERAL_REGS
    r107: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a6 (r107,l0) best DIREG, allocno GENERAL_REGS
    r106: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a10 (r106,l0) best SIREG, allocno GENERAL_REGS
    r105: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r105,l0) best DIREG, allocno GENERAL_REGS
    r104: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a13 (r104,l0) best SIREG, allocno GENERAL_REGS
    r103: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a12 (r103,l0) best DIREG, allocno GENERAL_REGS
    r102: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a16 (r102,l0) best SIREG, allocno GENERAL_REGS
    r101: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a15 (r101,l0) best DIREG, allocno GENERAL_REGS
    r100: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a19 (r100,l0) best SIREG, allocno GENERAL_REGS
    r99: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a18 (r99,l0) best DIREG, allocno GENERAL_REGS
    r98: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a22 (r98,l0) best SIREG, allocno GENERAL_REGS
    r97: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a21 (r97,l0) best DIREG, allocno GENERAL_REGS
    r96: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a25 (r96,l0) best SIREG, allocno GENERAL_REGS
    r95: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a24 (r95,l0) best DIREG, allocno GENERAL_REGS
    r94: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a28 (r94,l0) best SIREG, allocno GENERAL_REGS
    r93: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a27 (r93,l0) best DIREG, allocno GENERAL_REGS
    r92: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r92,l0) best AREG, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r90,l0) best AREG, allocno GENERAL_REGS
    r89: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r89,l0) best AREG, allocno GENERAL_REGS
    r88: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a8 (r88,l0) best AREG, allocno GENERAL_REGS
    r87: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a11 (r87,l0) best AREG, allocno GENERAL_REGS
    r86: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a14 (r86,l0) best AREG, allocno GENERAL_REGS
    r85: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a17 (r85,l0) best AREG, allocno GENERAL_REGS
    r84: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a20 (r84,l0) best AREG, allocno GENERAL_REGS
    r83: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a23 (r83,l0) best AREG, allocno GENERAL_REGS
    r82: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a26 (r82,l0) best AREG, allocno GENERAL_REGS

  a0(r92,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:7000
  a1(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:7000
  a2(r90,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a3(r109,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a4(r110,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a5(r89,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a6(r107,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a7(r108,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a8(r88,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a9(r105,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a10(r106,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a11(r87,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a12(r103,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a13(r104,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a14(r86,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a15(r101,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a16(r102,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a17(r85,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a18(r99,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a19(r100,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a20(r84,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a21(r97,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a22(r98,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a23(r83,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a24(r95,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a25(r96,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a26(r82,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a27(r93,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a28(r94,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000

   Insn 138(l0): point = 0
   Insn 137(l0): point = 2
   Insn 133(l0): point = 4
   Insn 130(l0): point = 6
   Insn 127(l0): point = 9
   Insn 125(l0): point = 12
   Insn 124(l0): point = 14
   Insn 123(l0): point = 16
   Insn 122(l0): point = 18
   Insn 121(l0): point = 20
   Insn 120(l0): point = 22
   Insn 119(l0): point = 24
   Insn 118(l0): point = 26
   Insn 154(l0): point = 29
   Insn 113(l0): point = 31
   Insn 111(l0): point = 34
   Insn 110(l0): point = 36
   Insn 109(l0): point = 38
   Insn 108(l0): point = 40
   Insn 107(l0): point = 42
   Insn 106(l0): point = 44
   Insn 105(l0): point = 46
   Insn 104(l0): point = 48
   Insn 152(l0): point = 51
   Insn 99(l0): point = 53
   Insn 97(l0): point = 56
   Insn 96(l0): point = 58
   Insn 95(l0): point = 60
   Insn 94(l0): point = 62
   Insn 93(l0): point = 64
   Insn 92(l0): point = 66
   Insn 91(l0): point = 68
   Insn 90(l0): point = 70
   Insn 150(l0): point = 73
   Insn 85(l0): point = 75
   Insn 83(l0): point = 78
   Insn 82(l0): point = 80
   Insn 81(l0): point = 82
   Insn 80(l0): point = 84
   Insn 79(l0): point = 86
   Insn 78(l0): point = 88
   Insn 77(l0): point = 90
   Insn 76(l0): point = 92
   Insn 148(l0): point = 95
   Insn 71(l0): point = 97
   Insn 69(l0): point = 100
   Insn 68(l0): point = 102
   Insn 67(l0): point = 104
   Insn 66(l0): point = 106
   Insn 65(l0): point = 108
   Insn 64(l0): point = 110
   Insn 63(l0): point = 112
   Insn 62(l0): point = 114
   Insn 146(l0): point = 117
   Insn 57(l0): point = 119
   Insn 55(l0): point = 122
   Insn 54(l0): point = 124
   Insn 53(l0): point = 126
   Insn 52(l0): point = 128
   Insn 51(l0): point = 130
   Insn 50(l0): point = 132
   Insn 49(l0): point = 134
   Insn 48(l0): point = 136
   Insn 144(l0): point = 139
   Insn 43(l0): point = 141
   Insn 41(l0): point = 144
   Insn 40(l0): point = 146
   Insn 39(l0): point = 148
   Insn 38(l0): point = 150
   Insn 37(l0): point = 152
   Insn 36(l0): point = 154
   Insn 35(l0): point = 156
   Insn 34(l0): point = 158
   Insn 142(l0): point = 161
   Insn 29(l0): point = 163
   Insn 27(l0): point = 166
   Insn 26(l0): point = 168
   Insn 25(l0): point = 170
   Insn 24(l0): point = 172
   Insn 23(l0): point = 174
   Insn 22(l0): point = 176
   Insn 21(l0): point = 178
   Insn 20(l0): point = 180
   Insn 140(l0): point = 183
   Insn 15(l0): point = 185
   Insn 13(l0): point = 188
   Insn 12(l0): point = 190
   Insn 11(l0): point = 192
   Insn 10(l0): point = 194
   Insn 9(l0): point = 196
   Insn 8(l0): point = 198
   Insn 7(l0): point = 200
   Insn 6(l0): point = 202
   Insn 2(l0): point = 204
 a0(r92): [3..4]
 a1(r91): [5..6]
 a2(r90): [15..16]
 a3(r109): [21..26]
 a4(r110): [23..24]
 a5(r89): [37..38]
 a6(r107): [43..48]
 a7(r108): [45..46]
 a8(r88): [59..60]
 a9(r105): [65..70]
 a10(r106): [67..68]
 a11(r87): [81..82]
 a12(r103): [87..92]
 a13(r104): [89..90]
 a14(r86): [103..104]
 a15(r101): [109..114]
 a16(r102): [111..112]
 a17(r85): [125..126]
 a18(r99): [131..136]
 a19(r100): [133..134]
 a20(r84): [147..148]
 a21(r97): [153..158]
 a22(r98): [155..156]
 a23(r83): [169..170]
 a24(r95): [175..180]
 a25(r96): [177..178]
 a26(r82): [191..192]
 a27(r93): [197..202]
 a28(r94): [199..200]
Compressing live ranges: from 207 to 40 - 19%
Ranges after the compression:
 a0(r92): [0..1]
 a1(r91): [2..3]
 a2(r90): [4..5]
 a3(r109): [6..7]
 a4(r110): [6..7]
 a5(r89): [8..9]
 a6(r107): [10..11]
 a7(r108): [10..11]
 a8(r88): [12..13]
 a9(r105): [14..15]
 a10(r106): [14..15]
 a11(r87): [16..17]
 a12(r103): [18..19]
 a13(r104): [18..19]
 a14(r86): [20..21]
 a15(r101): [22..23]
 a16(r102): [22..23]
 a17(r85): [24..25]
 a18(r99): [26..27]
 a19(r100): [26..27]
 a20(r84): [28..29]
 a21(r97): [30..31]
 a22(r98): [30..31]
 a23(r83): [32..33]
 a24(r95): [34..35]
 a25(r96): [34..35]
 a26(r82): [36..37]
 a27(r93): [38..39]
 a28(r94): [38..39]
  pref0:a4(r110)<-hr4@1500
  pref1:a3(r109)<-hr5@1500
  pref2:a7(r108)<-hr4@1500
  pref3:a6(r107)<-hr5@1500
  pref4:a10(r106)<-hr4@1500
  pref5:a9(r105)<-hr5@1500
  pref6:a13(r104)<-hr4@1500
  pref7:a12(r103)<-hr5@1500
  pref8:a16(r102)<-hr4@1500
  pref9:a15(r101)<-hr5@1500
  pref10:a19(r100)<-hr4@1500
  pref11:a18(r99)<-hr5@1500
  pref12:a22(r98)<-hr4@1500
  pref13:a21(r97)<-hr5@1500
  pref14:a25(r96)<-hr4@1500
  pref15:a24(r95)<-hr5@1500
  pref16:a28(r94)<-hr4@1500
  pref17:a27(r93)<-hr5@1500
  pref18:a0(r92)<-hr0@1500
  pref19:a2(r90)<-hr0@1500
  pref20:a5(r89)<-hr0@1500
  pref21:a8(r88)<-hr0@1500
  pref22:a11(r87)<-hr0@1500
  pref23:a14(r86)<-hr0@1500
  pref24:a17(r85)<-hr0@1500
  pref25:a20(r84)<-hr0@1500
  pref26:a23(r83)<-hr0@1500
  pref27:a26(r82)<-hr0@1500
  regions=1, blocks=21, points=40
    allocnos=29 (big 0), copies=0, conflicts=0, ranges=29
Disposition:
   26:r82  l0     0   23:r83  l0     0   20:r84  l0     0   17:r85  l0     0
   14:r86  l0     0   11:r87  l0     0    8:r88  l0     0    5:r89  l0     0
    2:r90  l0     0    1:r91  l0     0    0:r92  l0     0   27:r93  l0     0
   28:r94  l0     1   24:r95  l0     0   25:r96  l0     1   21:r97  l0     0
   22:r98  l0     1   18:r99  l0     0   19:r100 l0     1   15:r101 l0     0
   16:r102 l0     1   12:r103 l0     0   13:r104 l0     1    9:r105 l0     0
   10:r106 l0     1    6:r107 l0     0    7:r108 l0     1    3:r109 l0     0
    4:r110 l0     1
+++Costs: overall -28000, reg -28000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


what_the_func

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={11d,11u} r1={10d} r2={10d} r4={19d,9u} r5={19d,10u} r6={1d,20u} r7={1d,29u} r8={9d} r9={9d} r10={9d} r11={9d} r12={9d} r13={9d} r14={9d} r15={9d} r16={1d,19u} r17={18d,9u} r18={9d} r19={1d,40u} r20={10d} r21={10d} r22={10d} r23={10d} r24={10d} r25={10d} r26={10d} r27={10d} r28={9d} r29={9d} r30={9d} r31={9d} r32={9d} r33={9d} r34={9d} r35={9d} r36={10d} r37={10d} r38={9d} r39={9d} r44={9d} r45={9d} r46={9d} r47={9d} r48={9d} r49={9d} r50={9d} r51={9d} r52={9d} r53={9d} r54={9d} r55={9d} r56={9d} r57={9d} r58={9d} r59={9d} r60={9d} r61={9d} r62={9d} r63={9d} r64={9d} r65={9d} r66={9d} r67={9d} r68={9d} r69={9d} r70={9d} r71={9d} r72={9d} r73={9d} r74={9d} r75={9d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} 
;;    total ref usage 855{679d,176u,0e} in 94{85 regular + 9 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 93 94
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 func+0 S8 A64])
        (reg:DI 5 di [ func ])) "calc.c":22:1 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ func ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 93)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 func+0 S8 A64])) "calc.c":24:9 74 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:DI 94)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f09f16b1d80 *.LC1>)) "calc.c":24:9 74 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 4 si)
        (reg:DI 94)) "calc.c":24:9 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 94)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f09f16b1d80 *.LC1>)
            (nil))))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg:DI 93)) "calc.c":24:9 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 93)
        (nil)))
(call_insn/i 10 9 11 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strstr") [flags 0x41]  <function_decl 0x7f09f183b900 strstr>) [0 __builtin_strstr S1 A8])
            (const_int 0 [0]))) "calc.c":24:9 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 11 10 12 2 (set (reg/f:DI 82 [ _1 ])
        (reg:DI 0 ax)) "calc.c":24:9 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 82 [ _1 ])
            (const_int 0 [0]))) "calc.c":24:8 8 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 82 [ _1 ])
        (nil)))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 18)
            (pc))) "calc.c":24:8 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 18)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 140 3 (set (mem/c:QI (plus:DI (reg/f:DI 19 frame)
                (const_int -1 [0xffffffffffffffff])) [0 value+0 S1 A8])
        (const_int 65 [0x41])) "calc.c":25:15 77 {*movqi_internal}
     (nil))
(jump_insn 140 15 141 3 (set (pc)
        (label_ref 128)) 807 {jump}
     (nil)
 -> 128)
;;  succ:       20 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 141 140 18)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 83 95 96
(code_label 18 141 19 4 5 (nil) [1 uses])
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 4 (set (reg:DI 95)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 func+0 S8 A64])) "calc.c":26:14 74 {*movdi_internal}
     (nil))
(insn 21 20 22 4 (set (reg:DI 96)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f09f16b1e10 *.LC2>)) "calc.c":26:14 74 {*movdi_internal}
     (nil))
(insn 22 21 23 4 (set (reg:DI 4 si)
        (reg:DI 96)) "calc.c":26:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 96)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f09f16b1e10 *.LC2>)
            (nil))))
(insn 23 22 24 4 (set (reg:DI 5 di)
        (reg:DI 95)) "calc.c":26:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 95)
        (nil)))
(call_insn/i 24 23 25 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strstr") [flags 0x41]  <function_decl 0x7f09f183b900 strstr>) [0 __builtin_strstr S1 A8])
            (const_int 0 [0]))) "calc.c":26:14 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 25 24 26 4 (set (reg/f:DI 83 [ _2 ])
        (reg:DI 0 ax)) "calc.c":26:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 26 25 27 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 83 [ _2 ])
            (const_int 0 [0]))) "calc.c":26:13 8 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 83 [ _2 ])
        (nil)))
(jump_insn 27 26 28 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 32)
            (pc))) "calc.c":26:13 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 32)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 28 27 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 142 5 (set (mem/c:QI (plus:DI (reg/f:DI 19 frame)
                (const_int -1 [0xffffffffffffffff])) [0 value+0 S1 A8])
        (const_int 66 [0x42])) "calc.c":27:15 77 {*movqi_internal}
     (nil))
(jump_insn 142 29 143 5 (set (pc)
        (label_ref 128)) 807 {jump}
     (nil)
 -> 128)
;;  succ:       20 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 143 142 32)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 84 97 98
(code_label 32 143 33 6 7 (nil) [1 uses])
(note 33 32 34 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 6 (set (reg:DI 97)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 func+0 S8 A64])) "calc.c":28:14 74 {*movdi_internal}
     (nil))
(insn 35 34 36 6 (set (reg:DI 98)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f09f16b1ea0 *.LC3>)) "calc.c":28:14 74 {*movdi_internal}
     (nil))
(insn 36 35 37 6 (set (reg:DI 4 si)
        (reg:DI 98)) "calc.c":28:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 98)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f09f16b1ea0 *.LC3>)
            (nil))))
(insn 37 36 38 6 (set (reg:DI 5 di)
        (reg:DI 97)) "calc.c":28:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 97)
        (nil)))
(call_insn/i 38 37 39 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strstr") [flags 0x41]  <function_decl 0x7f09f183b900 strstr>) [0 __builtin_strstr S1 A8])
            (const_int 0 [0]))) "calc.c":28:14 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 39 38 40 6 (set (reg/f:DI 84 [ _3 ])
        (reg:DI 0 ax)) "calc.c":28:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 40 39 41 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 84 [ _3 ])
            (const_int 0 [0]))) "calc.c":28:13 8 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 84 [ _3 ])
        (nil)))
(jump_insn 41 40 42 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 46)
            (pc))) "calc.c":28:13 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 46)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 42 41 43 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 144 7 (set (mem/c:QI (plus:DI (reg/f:DI 19 frame)
                (const_int -1 [0xffffffffffffffff])) [0 value+0 S1 A8])
        (const_int 67 [0x43])) "calc.c":29:15 77 {*movqi_internal}
     (nil))
(jump_insn 144 43 145 7 (set (pc)
        (label_ref 128)) 807 {jump}
     (nil)
 -> 128)
;;  succ:       20 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 145 144 46)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       6
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 85 99 100
(code_label 46 145 47 8 8 (nil) [1 uses])
(note 47 46 48 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 8 (set (reg:DI 99)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 func+0 S8 A64])) "calc.c":30:14 74 {*movdi_internal}
     (nil))
(insn 49 48 50 8 (set (reg:DI 100)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f09f16b1f30 *.LC4>)) "calc.c":30:14 74 {*movdi_internal}
     (nil))
(insn 50 49 51 8 (set (reg:DI 4 si)
        (reg:DI 100)) "calc.c":30:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 100)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f09f16b1f30 *.LC4>)
            (nil))))
(insn 51 50 52 8 (set (reg:DI 5 di)
        (reg:DI 99)) "calc.c":30:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 99)
        (nil)))
(call_insn/i 52 51 53 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strstr") [flags 0x41]  <function_decl 0x7f09f183b900 strstr>) [0 __builtin_strstr S1 A8])
            (const_int 0 [0]))) "calc.c":30:14 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 53 52 54 8 (set (reg/f:DI 85 [ _4 ])
        (reg:DI 0 ax)) "calc.c":30:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 54 53 55 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 85 [ _4 ])
            (const_int 0 [0]))) "calc.c":30:13 8 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 85 [ _4 ])
        (nil)))
(jump_insn 55 54 56 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 60)
            (pc))) "calc.c":30:13 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 60)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 56 55 57 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 146 9 (set (mem/c:QI (plus:DI (reg/f:DI 19 frame)
                (const_int -1 [0xffffffffffffffff])) [0 value+0 S1 A8])
        (const_int 68 [0x44])) "calc.c":31:15 77 {*movqi_internal}
     (nil))
(jump_insn 146 57 147 9 (set (pc)
        (label_ref 128)) 807 {jump}
     (nil)
 -> 128)
;;  succ:       20 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 147 146 60)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 86 101 102
(code_label 60 147 61 10 9 (nil) [1 uses])
(note 61 60 62 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 10 (set (reg:DI 101)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 func+0 S8 A64])) "calc.c":32:14 74 {*movdi_internal}
     (nil))
(insn 63 62 64 10 (set (reg:DI 102)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f09f16da000 *.LC5>)) "calc.c":32:14 74 {*movdi_internal}
     (nil))
(insn 64 63 65 10 (set (reg:DI 4 si)
        (reg:DI 102)) "calc.c":32:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 102)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f09f16da000 *.LC5>)
            (nil))))
(insn 65 64 66 10 (set (reg:DI 5 di)
        (reg:DI 101)) "calc.c":32:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 101)
        (nil)))
(call_insn/i 66 65 67 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strstr") [flags 0x41]  <function_decl 0x7f09f183b900 strstr>) [0 __builtin_strstr S1 A8])
            (const_int 0 [0]))) "calc.c":32:14 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 67 66 68 10 (set (reg/f:DI 86 [ _5 ])
        (reg:DI 0 ax)) "calc.c":32:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 68 67 69 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 86 [ _5 ])
            (const_int 0 [0]))) "calc.c":32:13 8 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 86 [ _5 ])
        (nil)))
(jump_insn 69 68 70 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 74)
            (pc))) "calc.c":32:13 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 74)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 70 69 71 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 148 11 (set (mem/c:QI (plus:DI (reg/f:DI 19 frame)
                (const_int -1 [0xffffffffffffffff])) [0 value+0 S1 A8])
        (const_int 69 [0x45])) "calc.c":33:15 77 {*movqi_internal}
     (nil))
(jump_insn 148 71 149 11 (set (pc)
        (label_ref 128)) 807 {jump}
     (nil)
 -> 128)
;;  succ:       20 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 149 148 74)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 87 103 104
(code_label 74 149 75 12 10 (nil) [1 uses])
(note 75 74 76 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 77 12 (set (reg:DI 103)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 func+0 S8 A64])) "calc.c":34:14 74 {*movdi_internal}
     (nil))
(insn 77 76 78 12 (set (reg:DI 104)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f09f16da090 *.LC6>)) "calc.c":34:14 74 {*movdi_internal}
     (nil))
(insn 78 77 79 12 (set (reg:DI 4 si)
        (reg:DI 104)) "calc.c":34:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 104)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f09f16da090 *.LC6>)
            (nil))))
(insn 79 78 80 12 (set (reg:DI 5 di)
        (reg:DI 103)) "calc.c":34:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 103)
        (nil)))
(call_insn/i 80 79 81 12 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strstr") [flags 0x41]  <function_decl 0x7f09f183b900 strstr>) [0 __builtin_strstr S1 A8])
            (const_int 0 [0]))) "calc.c":34:14 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 81 80 82 12 (set (reg/f:DI 87 [ _6 ])
        (reg:DI 0 ax)) "calc.c":34:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 82 81 83 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 87 [ _6 ])
            (const_int 0 [0]))) "calc.c":34:13 8 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 87 [ _6 ])
        (nil)))
(jump_insn 83 82 84 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 88)
            (pc))) "calc.c":34:13 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 88)
;;  succ:       13 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 84 83 85 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 150 13 (set (mem/c:QI (plus:DI (reg/f:DI 19 frame)
                (const_int -1 [0xffffffffffffffff])) [0 value+0 S1 A8])
        (const_int 70 [0x46])) "calc.c":35:15 77 {*movqi_internal}
     (nil))
(jump_insn 150 85 151 13 (set (pc)
        (label_ref 128)) 807 {jump}
     (nil)
 -> 128)
;;  succ:       20 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 151 150 88)
;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       12
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 88 105 106
(code_label 88 151 89 14 11 (nil) [1 uses])
(note 89 88 90 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 91 14 (set (reg:DI 105)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 func+0 S8 A64])) "calc.c":36:14 74 {*movdi_internal}
     (nil))
(insn 91 90 92 14 (set (reg:DI 106)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f09f16da120 *.LC7>)) "calc.c":36:14 74 {*movdi_internal}
     (nil))
(insn 92 91 93 14 (set (reg:DI 4 si)
        (reg:DI 106)) "calc.c":36:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 106)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7f09f16da120 *.LC7>)
            (nil))))
(insn 93 92 94 14 (set (reg:DI 5 di)
        (reg:DI 105)) "calc.c":36:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 105)
        (nil)))
(call_insn/i 94 93 95 14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strstr") [flags 0x41]  <function_decl 0x7f09f183b900 strstr>) [0 __builtin_strstr S1 A8])
            (const_int 0 [0]))) "calc.c":36:14 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 95 94 96 14 (set (reg/f:DI 88 [ _7 ])
        (reg:DI 0 ax)) "calc.c":36:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 96 95 97 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 88 [ _7 ])
            (const_int 0 [0]))) "calc.c":36:13 8 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 88 [ _7 ])
        (nil)))
(jump_insn 97 96 98 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 102)
            (pc))) "calc.c":36:13 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 102)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 98 97 99 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 152 15 (set (mem/c:QI (plus:DI (reg/f:DI 19 frame)
                (const_int -1 [0xffffffffffffffff])) [0 value+0 S1 A8])
        (const_int 71 [0x47])) "calc.c":37:15 77 {*movqi_internal}
     (nil))
(jump_insn 152 99 153 15 (set (pc)
        (label_ref 128)) 807 {jump}
     (nil)
 -> 128)
;;  succ:       20 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 153 152 102)
;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL)
;;  pred:       14
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 89 107 108
(code_label 102 153 103 16 12 (nil) [1 uses])
(note 103 102 104 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 104 103 105 16 (set (reg:DI 107)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 func+0 S8 A64])) "calc.c":38:14 74 {*movdi_internal}
     (nil))
(insn 105 104 106 16 (set (reg:DI 108)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f09f16da1b0 *.LC8>)) "calc.c":38:14 74 {*movdi_internal}
     (nil))
(insn 106 105 107 16 (set (reg:DI 4 si)
        (reg:DI 108)) "calc.c":38:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 108)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7f09f16da1b0 *.LC8>)
            (nil))))
(insn 107 106 108 16 (set (reg:DI 5 di)
        (reg:DI 107)) "calc.c":38:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 107)
        (nil)))
(call_insn/i 108 107 109 16 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strstr") [flags 0x41]  <function_decl 0x7f09f183b900 strstr>) [0 __builtin_strstr S1 A8])
            (const_int 0 [0]))) "calc.c":38:14 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 109 108 110 16 (set (reg/f:DI 89 [ _8 ])
        (reg:DI 0 ax)) "calc.c":38:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 110 109 111 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 89 [ _8 ])
            (const_int 0 [0]))) "calc.c":38:13 8 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 89 [ _8 ])
        (nil)))
(jump_insn 111 110 112 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 116)
            (pc))) "calc.c":38:13 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 116)
;;  succ:       17 (FALLTHRU)
;;              18
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 112 111 113 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 113 112 154 17 (set (mem/c:QI (plus:DI (reg/f:DI 19 frame)
                (const_int -1 [0xffffffffffffffff])) [0 value+0 S1 A8])
        (const_int 72 [0x48])) "calc.c":39:15 77 {*movqi_internal}
     (nil))
(jump_insn 154 113 155 17 (set (pc)
        (label_ref 128)) 807 {jump}
     (nil)
 -> 128)
;;  succ:       20 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 155 154 116)
;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL)
;;  pred:       16
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 90 109 110
(code_label 116 155 117 18 13 (nil) [1 uses])
(note 117 116 118 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 118 117 119 18 (set (reg:DI 109)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 func+0 S8 A64])) "calc.c":40:14 74 {*movdi_internal}
     (nil))
(insn 119 118 120 18 (set (reg:DI 110)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f09f16da240 *.LC9>)) "calc.c":40:14 74 {*movdi_internal}
     (nil))
(insn 120 119 121 18 (set (reg:DI 4 si)
        (reg:DI 110)) "calc.c":40:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 110)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7f09f16da240 *.LC9>)
            (nil))))
(insn 121 120 122 18 (set (reg:DI 5 di)
        (reg:DI 109)) "calc.c":40:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 109)
        (nil)))
(call_insn/i 122 121 123 18 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strstr") [flags 0x41]  <function_decl 0x7f09f183b900 strstr>) [0 __builtin_strstr S1 A8])
            (const_int 0 [0]))) "calc.c":40:14 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 123 122 124 18 (set (reg/f:DI 90 [ _9 ])
        (reg:DI 0 ax)) "calc.c":40:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 124 123 125 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 90 [ _9 ])
            (const_int 0 [0]))) "calc.c":40:13 8 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 90 [ _9 ])
        (nil)))
(jump_insn 125 124 126 18 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 128)
            (pc))) "calc.c":40:13 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 128)
;;  succ:       19 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 126 125 127 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 127 126 128 19 (set (mem/c:QI (plus:DI (reg/f:DI 19 frame)
                (const_int -1 [0xffffffffffffffff])) [0 value+0 S1 A8])
        (const_int 73 [0x49])) "calc.c":41:15 77 {*movqi_internal}
     (nil))
;;  succ:       20 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 1, flags: (RTL)
;;  pred:       19 (FALLTHRU)
;;              3 [always] 
;;              5 [always] 
;;              7 [always] 
;;              9 [always] 
;;              11 [always] 
;;              13 [always] 
;;              15 [always] 
;;              18
;;              17 [always] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 91 92
(code_label 128 127 129 20 6 (nil) [9 uses])
(note 129 128 130 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 130 129 133 20 (set (reg:QI 91 [ _23 ])
        (mem/c:QI (plus:DI (reg/f:DI 19 frame)
                (const_int -1 [0xffffffffffffffff])) [0 value+0 S1 A8])) "calc.c":43:12 77 {*movqi_internal}
     (nil))
(insn 133 130 137 20 (set (reg:QI 92 [ <retval> ])
        (reg:QI 91 [ _23 ])) "calc.c":43:12 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 91 [ _23 ])
        (nil)))
(insn 137 133 138 20 (set (reg/i:QI 0 ax)
        (reg:QI 92 [ <retval> ])) "calc.c":44:1 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 92 [ <retval> ])
        (nil)))
(insn 138 137 0 20 (use (reg/i:QI 0 ax)) "calc.c":44:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function calc (calc, funcdef_no=9, decl_uid=4475, cgraph_uid=10, symbol_order=9)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 30 n_edges 47 count 30 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 27 25 28 26 29
;; 2 succs { 13 3 }
;; 3 succs { 12 4 5 6 7 8 9 10 11 }
;; 4 succs { 26 }
;; 5 succs { 26 }
;; 6 succs { 26 }
;; 7 succs { 26 }
;; 8 succs { 26 }
;; 9 succs { 26 }
;; 10 succs { 26 }
;; 11 succs { 26 }
;; 12 succs { 26 }
;; 13 succs { 14 17 }
;; 14 succs { 27 15 }
;; 15 succs { 27 16 }
;; 16 succs { 27 24 21 19 20 22 }
;; 17 succs { 18 23 }
;; 18 succs { 27 }
;; 19 succs { 25 }
;; 20 succs { 25 }
;; 21 succs { 25 }
;; 22 succs { 25 }
;; 23 succs { 25 }
;; 24 succs { 25 }
;; 27 succs { 25 }
;; 25 succs { 28 }
;; 28 succs { 26 }
;; 26 succs { 29 }
;; 29 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 35.
verify found no changes in insn with uid = 44.
verify found no changes in insn with uid = 53.
verify found no changes in insn with uid = 62.
verify found no changes in insn with uid = 71.
verify found no changes in insn with uid = 80.
verify found no changes in insn with uid = 89.
verify found no changes in insn with uid = 98.
verify found no changes in insn with uid = 107.
verify found no changes in insn with uid = 116.
verify found no changes in insn with uid = 187.
verify found no changes in insn with uid = 200.
verify found no changes in insn with uid = 215.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r141: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r141,l0) best DIREG, allocno GENERAL_REGS
    r140: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a1 (r140,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r139: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a2 (r139,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r138: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a3 (r138,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r137: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a4 (r137,l0) best SSE_REGS, allocno SSE_REGS
    r136: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a5 (r136,l0) best SSE_REGS, allocno SSE_REGS
    r134: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a10 (r134,l0) best SSE_REGS, allocno SSE_REGS
    r133: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a9 (r133,l0) best SSE_REGS, allocno SSE_REGS
    r132: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a12 (r132,l0) best SSE_REGS, allocno SSE_REGS
    r131: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a11 (r131,l0) best SSE_REGS, allocno SSE_REGS
    r130: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a14 (r130,l0) best SSE_REGS, allocno SSE_REGS
    r129: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a13 (r129,l0) best SSE_REGS, allocno SSE_REGS
    r128: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a16 (r128,l0) best SSE_REGS, allocno SSE_REGS
    r127: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a15 (r127,l0) best SSE_REGS, allocno SSE_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a26 (r118,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r117: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a27 (r117,l0) best DIREG, allocno GENERAL_REGS
    r116: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a28 (r116,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r115: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a29 (r115,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r114: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a30 (r114,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r113: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a31 (r113,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r112: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a32 (r112,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r111: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a33 (r111,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r110: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a34 (r110,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r109: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a35 (r109,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r108: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a36 (r108,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r107: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a37 (r107,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r106: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a38 (r106,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r105: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a39 (r105,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r104: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a40 (r104,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r103: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a41 (r103,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r102: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a42 (r102,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r101: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a43 (r101,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r100: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a44 (r100,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r99: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a45 (r99,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a55 (r90,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r89: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a56 (r89,l0) best DIREG, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a58 (r87,l0) best SIREG, allocno GENERAL_REGS
    r86: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a6 (r86,l0) best SSE_FIRST_REG, allocno SSE_REGS
    r85: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a7 (r85,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r84: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a8 (r84,l0) best SSE_REGS, allocno SSE_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r141,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a1(r140,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a2(r139,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a3(r138,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a4(r137,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:2000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a5(r136,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a6(r86,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:19000 FP_SECOND_REG:19000 FLOAT_REGS:19000 SSE_FIRST_REG:2000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 MMX_REGS:19000 FLOAT_SSE_REGS:19000 FLOAT_INT_REGS:19000 INT_SSE_REGS:19000 FLOAT_INT_SSE_REGS:19000 ALL_REGS:19000 MEM:7000
  a7(r85,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:26000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 MMX_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:12000
  a8(r84,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:2000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 MMX_REGS:26000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 ALL_REGS:26000 MEM:12000
  a9(r133,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a10(r134,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a11(r131,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a12(r132,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a13(r129,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a14(r130,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a15(r127,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a16(r128,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a17(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:30000 NO_REX_SSE_REGS:30000 SSE_REGS:30000 MMX_REGS:62000 INT_SSE_REGS:62000 ALL_REGS:952000 MEM:26000
  a18(r125,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a19(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:16000 INT_SSE_REGS:16000 ALL_REGS:204000 MEM:6000
  a20(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a21(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a22(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a23(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a24(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a25(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:32000 INT_SSE_REGS:32000 ALL_REGS:524000 MEM:11000
  a26(r118,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a27(r117,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a28(r116,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a29(r115,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a30(r114,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a31(r113,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a32(r112,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a33(r111,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a34(r110,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a35(r109,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a36(r108,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a37(r107,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a38(r106,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a39(r105,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a40(r104,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a41(r103,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a42(r102,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a43(r101,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a44(r100,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a45(r99,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a46(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a47(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:16000 INT_SSE_REGS:16000 ALL_REGS:204000 MEM:6000
  a48(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a49(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a50(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a51(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a52(r92,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a53(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:32000 INT_SSE_REGS:32000 ALL_REGS:524000 MEM:11000
  a54(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a55(r90,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a56(r89,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a57(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:7000
  a58(r87,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:7000

   Insn 259(l0): point = 0
   Insn 215(l0): point = 3
   Insn 214(l0): point = 5
   Insn 213(l0): point = 7
   Insn 212(l0): point = 9
   Insn 211(l0): point = 11
   Insn 257(l0): point = 14
   Insn 255(l0): point = 18
   Insn 251(l0): point = 21
   Insn 202(l0): point = 23
   Insn 201(l0): point = 25
   Insn 200(l0): point = 27
   Insn 199(l0): point = 29
   Insn 198(l0): point = 31
   Insn 197(l0): point = 33
   Insn 196(l0): point = 35
   Insn 249(l0): point = 38
   Insn 191(l0): point = 40
   Insn 190(l0): point = 42
   Insn 188(l0): point = 44
   Insn 187(l0): point = 46
   Insn 186(l0): point = 48
   Insn 185(l0): point = 50
   Insn 184(l0): point = 52
   Insn 183(l0): point = 54
   Insn 247(l0): point = 57
   Insn 178(l0): point = 59
   Insn 177(l0): point = 61
   Insn 176(l0): point = 63
   Insn 245(l0): point = 66
   Insn 171(l0): point = 68
   Insn 170(l0): point = 70
   Insn 169(l0): point = 72
   Insn 243(l0): point = 75
   Insn 164(l0): point = 77
   Insn 163(l0): point = 79
   Insn 162(l0): point = 81
   Insn 241(l0): point = 84
   Insn 157(l0): point = 86
   Insn 156(l0): point = 88
   Insn 155(l0): point = 90
   Insn 239(l0): point = 93
   Insn 149(l0): point = 96
   Insn 148(l0): point = 98
   Insn 142(l0): point = 101
   Insn 141(l0): point = 103
   Insn 140(l0): point = 105
   Insn 139(l0): point = 107
   Insn 138(l0): point = 109
   Insn 137(l0): point = 111
   Insn 136(l0): point = 113
   Insn 135(l0): point = 115
   Insn 134(l0): point = 118
   Insn 133(l0): point = 120
   Insn 130(l0): point = 122
   Insn 128(l0): point = 125
   Insn 127(l0): point = 127
   Insn 123(l0): point = 130
   Insn 122(l0): point = 132
   Insn 119(l0): point = 134
   Insn 118(l0): point = 136
   Insn 117(l0): point = 138
   Insn 116(l0): point = 140
   Insn 115(l0): point = 142
   Insn 114(l0): point = 144
   Insn 236(l0): point = 147
   Insn 109(l0): point = 149
   Insn 108(l0): point = 151
   Insn 107(l0): point = 153
   Insn 106(l0): point = 155
   Insn 105(l0): point = 157
   Insn 234(l0): point = 160
   Insn 100(l0): point = 162
   Insn 99(l0): point = 164
   Insn 98(l0): point = 166
   Insn 97(l0): point = 168
   Insn 96(l0): point = 170
   Insn 232(l0): point = 173
   Insn 91(l0): point = 175
   Insn 90(l0): point = 177
   Insn 89(l0): point = 179
   Insn 88(l0): point = 181
   Insn 87(l0): point = 183
   Insn 230(l0): point = 186
   Insn 82(l0): point = 188
   Insn 81(l0): point = 190
   Insn 80(l0): point = 192
   Insn 79(l0): point = 194
   Insn 78(l0): point = 196
   Insn 228(l0): point = 199
   Insn 73(l0): point = 201
   Insn 72(l0): point = 203
   Insn 71(l0): point = 205
   Insn 70(l0): point = 207
   Insn 69(l0): point = 209
   Insn 226(l0): point = 212
   Insn 64(l0): point = 214
   Insn 63(l0): point = 216
   Insn 62(l0): point = 218
   Insn 61(l0): point = 220
   Insn 60(l0): point = 222
   Insn 224(l0): point = 225
   Insn 55(l0): point = 227
   Insn 54(l0): point = 229
   Insn 53(l0): point = 231
   Insn 52(l0): point = 233
   Insn 51(l0): point = 235
   Insn 222(l0): point = 238
   Insn 46(l0): point = 240
   Insn 45(l0): point = 242
   Insn 44(l0): point = 244
   Insn 43(l0): point = 246
   Insn 42(l0): point = 248
   Insn 220(l0): point = 251
   Insn 37(l0): point = 253
   Insn 36(l0): point = 255
   Insn 35(l0): point = 257
   Insn 34(l0): point = 259
   Insn 33(l0): point = 261
   Insn 27(l0): point = 264
   Insn 26(l0): point = 266
   Insn 25(l0): point = 268
   Insn 24(l0): point = 270
   Insn 23(l0): point = 272
   Insn 22(l0): point = 274
   Insn 21(l0): point = 276
   Insn 20(l0): point = 278
   Insn 19(l0): point = 281
   Insn 18(l0): point = 283
   Insn 15(l0): point = 285
   Insn 14(l0): point = 287
   Insn 13(l0): point = 289
   Insn 12(l0): point = 291
   Insn 11(l0): point = 293
   Insn 10(l0): point = 295
   Insn 9(l0): point = 297
   Insn 5(l0): point = 299
   Insn 4(l0): point = 301
   Insn 3(l0): point = 303
   Insn 2(l0): point = 305
 a0(r141): [6..9]
 a1(r140): [8..11]
 a2(r139): [24..25]
 a3(r138): [30..33]
 a4(r137): [32..35]
 a5(r136): [41..42]
 a6(r86): [43..44]
 a7(r85): [49..52]
 a8(r84): [51..54]
 a9(r133): [60..61]
 a10(r134): [62..63]
 a11(r131): [69..70]
 a12(r132): [71..72]
 a13(r129): [78..79]
 a14(r130): [80..81]
 a15(r127): [87..88]
 a16(r128): [89..90]
 a17(r83): [123..134] [99..100]
 a18(r125): [102..103]
 a19(r126): [104..105]
 a20(r124): [104..107]
 a21(r123): [108..109]
 a22(r122): [110..111]
 a23(r121): [110..113]
 a24(r120): [114..115]
 a25(r119): [116..122]
 a26(r118): [137..138]
 a27(r117): [143..144]
 a28(r116): [150..151]
 a29(r115): [156..157]
 a30(r114): [163..164]
 a31(r113): [169..170]
 a32(r112): [176..177]
 a33(r111): [182..183]
 a34(r110): [189..190]
 a35(r109): [195..196]
 a36(r108): [202..203]
 a37(r107): [208..209]
 a38(r106): [215..216]
 a39(r105): [221..222]
 a40(r104): [228..229]
 a41(r103): [234..235]
 a42(r102): [241..242]
 a43(r101): [247..248]
 a44(r100): [254..255]
 a45(r99): [260..261]
 a46(r97): [265..266]
 a47(r98): [267..268]
 a48(r96): [267..270]
 a49(r95): [271..272]
 a50(r94): [273..274]
 a51(r93): [273..276]
 a52(r92): [277..278]
 a53(r91): [279..285]
 a54(r82): [286..287]
 a55(r90): [290..291]
 a56(r89): [296..297]
 a57(r88): [300..301]
 a58(r87): [302..303]
Compressing live ranges: from 308 to 106 - 34%
Ranges after the compression:
 a0(r141): [0..1]
 a1(r140): [0..1]
 a2(r139): [2..3]
 a3(r138): [4..5]
 a4(r137): [4..5]
 a5(r136): [6..7]
 a6(r86): [8..9]
 a7(r85): [10..11]
 a8(r84): [10..11]
 a9(r133): [12..13]
 a10(r134): [14..15]
 a11(r131): [16..17]
 a12(r132): [18..19]
 a13(r129): [20..21]
 a14(r130): [22..23]
 a15(r127): [24..25]
 a16(r128): [26..27]
 a17(r83): [42..43] [28..29]
 a18(r125): [30..31]
 a19(r126): [32..33]
 a20(r124): [32..33]
 a21(r123): [34..35]
 a22(r122): [36..37]
 a23(r121): [36..37]
 a24(r120): [38..39]
 a25(r119): [40..41]
 a26(r118): [44..45]
 a27(r117): [46..47]
 a28(r116): [48..49]
 a29(r115): [50..51]
 a30(r114): [52..53]
 a31(r113): [54..55]
 a32(r112): [56..57]
 a33(r111): [58..59]
 a34(r110): [60..61]
 a35(r109): [62..63]
 a36(r108): [64..65]
 a37(r107): [66..67]
 a38(r106): [68..69]
 a39(r105): [70..71]
 a40(r104): [72..73]
 a41(r103): [74..75]
 a42(r102): [76..77]
 a43(r101): [78..79]
 a44(r100): [80..81]
 a45(r99): [82..83]
 a46(r97): [84..85]
 a47(r98): [86..87]
 a48(r96): [86..87]
 a49(r95): [88..89]
 a50(r94): [90..91]
 a51(r93): [90..91]
 a52(r92): [92..93]
 a53(r91): [94..95]
 a54(r82): [96..97]
 a55(r90): [98..99]
 a56(r89): [100..101]
 a57(r88): [102..103]
 a58(r87): [104..105]
  pref0:a0(r141)<-hr5@1500
  pref1:a1(r140)<-hr20@2000
  pref2:a2(r139)<-hr20@2000
  pref3:a3(r138)<-hr20@2000
  pref4:a26(r118)<-hr20@2000
  pref5:a27(r117)<-hr5@1500
  pref6:a28(r116)<-hr20@2000
  pref7:a29(r115)<-hr20@2000
  pref8:a30(r114)<-hr20@2000
  pref9:a31(r113)<-hr20@2000
  pref10:a32(r112)<-hr20@2000
  pref11:a33(r111)<-hr20@2000
  pref12:a34(r110)<-hr20@2000
  pref13:a35(r109)<-hr20@2000
  pref14:a36(r108)<-hr20@2000
  pref15:a37(r107)<-hr20@2000
  pref16:a38(r106)<-hr20@2000
  pref17:a39(r105)<-hr20@2000
  pref18:a40(r104)<-hr20@2000
  pref19:a41(r103)<-hr20@2000
  pref20:a42(r102)<-hr20@2000
  pref21:a43(r101)<-hr20@2000
  pref22:a44(r100)<-hr20@2000
  pref23:a45(r99)<-hr20@2000
  pref24:a55(r90)<-hr20@2000
  pref25:a56(r89)<-hr5@1500
  pref26:a58(r87)<-hr4@1500
  pref27:a6(r86)<-hr20@1500
  pref28:a7(r85)<-hr20@2076
  regions=1, blocks=30, points=106
    allocnos=59 (big 0), copies=0, conflicts=0, ranges=60
Disposition:
   54:r82  l0     0   17:r83  l0     0    8:r84  l0    20    7:r85  l0     0
    6:r86  l0    20   58:r87  l0     0   57:r88  l0     0   56:r89  l0     0
   55:r90  l0     0   53:r91  l0     0   52:r92  l0     0   51:r93  l0     1
   50:r94  l0     0   49:r95  l0     0   48:r96  l0     0   46:r97  l0     0
   47:r98  l0     1   45:r99  l0     0   44:r100 l0     0   43:r101 l0     0
   42:r102 l0     0   41:r103 l0     0   40:r104 l0     0   39:r105 l0     0
   38:r106 l0     0   37:r107 l0     0   36:r108 l0     0   35:r109 l0     0
   34:r110 l0     0   33:r111 l0     0   32:r112 l0     0   31:r113 l0     0
   30:r114 l0     0   29:r115 l0     0   28:r116 l0     0   27:r117 l0     0
   26:r118 l0     0   25:r119 l0     0   24:r120 l0     0   23:r121 l0     1
   22:r122 l0     0   21:r123 l0     0   20:r124 l0     0   18:r125 l0     0
   19:r126 l0     1   15:r127 l0    20   16:r128 l0    20   13:r129 l0    20
   14:r130 l0    20   11:r131 l0    20   12:r132 l0    20    9:r133 l0    20
   10:r134 l0    20    5:r136 l0    20    4:r137 l0    20    3:r138 l0     0
    2:r139 l0     0    1:r140 l0     1    0:r141 l0     0
+++Costs: overall -25000, reg -25000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


calc

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [xmm0] 21 [xmm1]
;;  ref usage 	r0={15d} r1={15d} r2={15d} r4={15d,1u} r5={18d,4u} r6={1d,29u} r7={1d,43u} r8={14d} r9={14d} r10={14d} r11={14d} r12={14d} r13={14d} r14={14d} r15={14d} r16={1d,28u} r17={25d,5u} r18={14d} r19={1d,75u} r20={27d,25u} r21={17d,2u} r22={15d} r23={15d} r24={15d} r25={15d} r26={15d} r27={15d} r28={14d} r29={14d} r30={14d} r31={14d} r32={14d} r33={14d} r34={14d} r35={14d} r36={15d} r37={15d} r38={14d} r39={14d} r44={14d} r45={14d} r46={14d} r47={14d} r48={14d} r49={14d} r50={14d} r51={14d} r52={14d} r53={14d} r54={14d} r55={14d} r56={14d} r57={14d} r58={14d} r59={14d} r60={14d} r61={14d} r62={14d} r63={14d} r64={14d} r65={14d} r66={14d} r67={14d} r68={14d} r69={14d} r70={14d} r71={14d} r72={14d} r73={14d} r74={14d} r75={14d} r82={1d,1u} r83={1d,4u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,2u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,2u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} 
;;    total ref usage 1320{1044d,276u,0e} in 140{126 regular + 14 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 87 88 89 90 91
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 Stack_double+0 S8 A64])
        (reg:DI 5 di [ Stack_double ])) "calc.c":46:1 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ Stack_double ])
        (nil)))
(insn 3 2 4 2 (set (reg:SI 87)
        (reg:SI 4 si [ func ])) "calc.c":46:1 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ func ])
        (nil)))
(insn 4 3 5 2 (set (reg:QI 88)
        (subreg:QI (reg:SI 87) 0)) "calc.c":46:1 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 87)
        (nil)))
(insn 5 4 6 2 (set (mem/c:QI (plus:DI (reg/f:DI 19 frame)
                (const_int -44 [0xffffffffffffffd4])) [0 func+0 S1 A32])
        (reg:QI 88)) "calc.c":46:1 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 88)
        (nil)))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg:DI 89)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 Stack_double+0 S8 A64])) "calc.c":48:26 74 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg:DI 89)) "calc.c":48:26 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 89)
        (nil)))
(call_insn 11 10 12 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("Fpop") [flags 0x41]  <function_decl 0x7f09f164ee00 Fpop>) [0 Fpop S1 A8])
            (const_int 0 [0]))) "calc.c":48:26 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 12 11 13 2 (set (reg:DF 90)
        (reg:DF 20 xmm0)) "calc.c":48:26 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 13 12 14 2 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64])
        (reg:DF 90)) "calc.c":48:26 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 90)
        (nil)))
(insn 14 13 15 2 (set (reg:SI 82 [ _1 ])
        (sign_extend:SI (mem/c:QI (plus:DI (reg/f:DI 19 frame)
                    (const_int -44 [0xffffffffffffffd4])) [0 func+0 S1 A32]))) "calc.c":49:5 153 {extendqisi2}
     (nil))
(insn 15 14 18 2 (parallel [
            (set (reg:SI 91)
                (plus:SI (reg:SI 82 [ _1 ])
                    (const_int -65 [0xffffffffffffffbf])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":49:5 209 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 82 [ _1 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 18 15 19 2 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 91)
            (const_int 8 [0x8]))) "calc.c":49:5 11 {*cmpsi_1}
     (nil))
(jump_insn 19 18 218 2 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 112)
            (pc))) "calc.c":49:5 806 {*jcc}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil))
 -> 112)
;;  succ:       13
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 91

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 91
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 91
;; lr  def 	 17 [flags] 92 93 94 95 96 97 98
(note 218 19 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 20 218 21 3 (set (reg:DI 92)
        (zero_extend:DI (reg:SI 91))) "calc.c":49:5 138 {*zero_extendsidi2}
     (expr_list:REG_DEAD (reg:SI 91)
        (nil)))
(insn 21 20 22 3 (parallel [
            (set (reg:DI 93)
                (ashift:DI (reg:DI 92)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":49:5 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 92)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 22 21 23 3 (set (reg:DI 94)
        (label_ref:DI 28)) "calc.c":49:5 74 {*movdi_internal}
     (insn_list:REG_LABEL_OPERAND 28 (nil)))
(insn 23 22 24 3 (set (reg:SI 95)
        (mem/u/c:SI (plus:DI (reg:DI 93)
                (reg:DI 94)) [0  S4 A8])) "calc.c":49:5 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 94)
        (expr_list:REG_DEAD (reg:DI 93)
            (nil))))
(insn 24 23 25 3 (set (reg:DI 96)
        (sign_extend:DI (reg:SI 95))) "calc.c":49:5 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 95)
        (nil)))
(insn 25 24 26 3 (set (reg:DI 98)
        (label_ref:DI 28)) "calc.c":49:5 74 {*movdi_internal}
     (insn_list:REG_LABEL_OPERAND 28 (nil)))
(insn 26 25 27 3 (parallel [
            (set (reg:DI 97)
                (plus:DI (reg:DI 96)
                    (reg:DI 98)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":49:5 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 98)
        (expr_list:REG_DEAD (reg:DI 96)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(jump_insn 27 26 28 3 (parallel [
            (set (pc)
                (reg:DI 97))
            (use (label_ref 28))
        ]) "calc.c":49:5 811 {*tablejump_1}
     (expr_list:REG_DEAD (reg:DI 97)
        (nil))
 -> 28)
;;  succ:       12 [11.1% (adjusted)] 
;;              4 [11.1% (adjusted)] 
;;              5 [11.1% (adjusted)] 
;;              6 [11.1% (adjusted)] 
;;              7 [11.1% (adjusted)] 
;;              8 [11.1% (adjusted)] 
;;              9 [11.1% (adjusted)] 
;;              10 [11.1% (adjusted)] 
;;              11 [11.1% (adjusted)] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; Insn is not within a basic block
(code_label 28 27 29 18 (nil) [3 uses])
;; Insn is not within a basic block
(jump_table_data 29 28 30 (addr_diff_vec:SI (label_ref:DI 28)
         [
            (label_ref:DI 31)
            (label_ref:DI 40)
            (label_ref:DI 49)
            (label_ref:DI 58)
            (label_ref:DI 67)
            (label_ref:DI 76)
            (label_ref:DI 85)
            (label_ref:DI 94)
            (label_ref:DI 103)
        ]
        (const_int 0 [0])
        (const_int 0 [0])))
(barrier 30 29 31)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 [11.1% (adjusted)] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 99 100
(code_label 31 30 32 4 26 (nil) [1 uses])
(note 32 31 33 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 4 (set (reg:DF 99)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64])) "calc.c":52:15 135 {*movdf_internal}
     (nil))
(insn 34 33 35 4 (set (reg:DF 20 xmm0)
        (reg:DF 99)) "calc.c":52:15 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 99)
        (nil)))
(call_insn/u 35 34 36 4 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("cos") [flags 0x41]  <function_decl 0x7f09f17d3700 cos>) [0 __builtin_cos S1 A8])
            (const_int 0 [0]))) "calc.c":52:15 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 36 35 37 4 (set (reg:DF 100)
        (reg:DF 20 xmm0)) "calc.c":52:15 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 37 36 220 4 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])
        (reg:DF 100)) "calc.c":52:15 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 100)
        (nil)))
(jump_insn 220 37 221 4 (set (pc)
        (label_ref 209)) "calc.c":53:9 807 {jump}
     (nil)
 -> 209)
;;  succ:       26 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 221 220 40)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       3 [11.1% (adjusted)] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 101 102
(code_label 40 221 41 5 25 (nil) [1 uses])
(note 41 40 42 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 5 (set (reg:DF 101)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64])) "calc.c":55:15 135 {*movdf_internal}
     (nil))
(insn 43 42 44 5 (set (reg:DF 20 xmm0)
        (reg:DF 101)) "calc.c":55:15 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 101)
        (nil)))
(call_insn/u 44 43 45 5 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("sin") [flags 0x41]  <function_decl 0x7f09f1814a00 sin>) [0 __builtin_sin S1 A8])
            (const_int 0 [0]))) "calc.c":55:15 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 45 44 46 5 (set (reg:DF 102)
        (reg:DF 20 xmm0)) "calc.c":55:15 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 46 45 222 5 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])
        (reg:DF 102)) "calc.c":55:15 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 102)
        (nil)))
(jump_insn 222 46 223 5 (set (pc)
        (label_ref 209)) "calc.c":56:9 807 {jump}
     (nil)
 -> 209)
;;  succ:       26 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 223 222 49)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       3 [11.1% (adjusted)] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 103 104
(code_label 49 223 50 6 24 (nil) [1 uses])
(note 50 49 51 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 52 6 (set (reg:DF 103)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64])) "calc.c":58:15 135 {*movdf_internal}
     (nil))
(insn 52 51 53 6 (set (reg:DF 20 xmm0)
        (reg:DF 103)) "calc.c":58:15 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 103)
        (nil)))
(call_insn/u 53 52 54 6 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("tan") [flags 0x41]  <function_decl 0x7f09f1819c00 tan>) [0 __builtin_tan S1 A8])
            (const_int 0 [0]))) "calc.c":58:15 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 54 53 55 6 (set (reg:DF 104)
        (reg:DF 20 xmm0)) "calc.c":58:15 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 55 54 224 6 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])
        (reg:DF 104)) "calc.c":58:15 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 104)
        (nil)))
(jump_insn 224 55 225 6 (set (pc)
        (label_ref 209)) "calc.c":59:9 807 {jump}
     (nil)
 -> 209)
;;  succ:       26 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 225 224 58)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       3 [11.1% (adjusted)] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 105 106
(code_label 58 225 59 7 23 (nil) [1 uses])
(note 59 58 60 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 7 (set (reg:DF 105)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64])) "calc.c":61:15 135 {*movdf_internal}
     (nil))
(insn 61 60 62 7 (set (reg:DF 20 xmm0)
        (reg:DF 105)) "calc.c":61:15 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 105)
        (nil)))
(call_insn 62 61 63 7 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("acos") [flags 0x41]  <function_decl 0x7f09f1787500 acos>) [0 __builtin_acos S1 A8])
            (const_int 0 [0]))) "calc.c":61:15 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 63 62 64 7 (set (reg:DF 106)
        (reg:DF 20 xmm0)) "calc.c":61:15 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 64 63 226 7 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])
        (reg:DF 106)) "calc.c":61:15 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 106)
        (nil)))
(jump_insn 226 64 227 7 (set (pc)
        (label_ref 209)) "calc.c":62:9 807 {jump}
     (nil)
 -> 209)
;;  succ:       26 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 227 226 67)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       3 [11.1% (adjusted)] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 107 108
(code_label 67 227 68 8 22 (nil) [1 uses])
(note 68 67 69 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 8 (set (reg:DF 107)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64])) "calc.c":64:15 135 {*movdf_internal}
     (nil))
(insn 70 69 71 8 (set (reg:DF 20 xmm0)
        (reg:DF 107)) "calc.c":64:15 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 107)
        (nil)))
(call_insn 71 70 72 8 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("asin") [flags 0x41]  <function_decl 0x7f09f17cb300 asin>) [0 __builtin_asin S1 A8])
            (const_int 0 [0]))) "calc.c":64:15 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 72 71 73 8 (set (reg:DF 108)
        (reg:DF 20 xmm0)) "calc.c":64:15 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 73 72 228 8 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])
        (reg:DF 108)) "calc.c":64:15 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 108)
        (nil)))
(jump_insn 228 73 229 8 (set (pc)
        (label_ref 209)) "calc.c":65:9 807 {jump}
     (nil)
 -> 209)
;;  succ:       26 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 229 228 76)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       3 [11.1% (adjusted)] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 109 110
(code_label 76 229 77 9 21 (nil) [1 uses])
(note 77 76 78 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 78 77 79 9 (set (reg:DF 109)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64])) "calc.c":67:15 135 {*movdf_internal}
     (nil))
(insn 79 78 80 9 (set (reg:DF 20 xmm0)
        (reg:DF 109)) "calc.c":67:15 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 109)
        (nil)))
(call_insn/u 80 79 81 9 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atan") [flags 0x41]  <function_decl 0x7f09f17cbf00 atan>) [0 __builtin_atan S1 A8])
            (const_int 0 [0]))) "calc.c":67:15 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 81 80 82 9 (set (reg:DF 110)
        (reg:DF 20 xmm0)) "calc.c":67:15 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 82 81 230 9 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])
        (reg:DF 110)) "calc.c":67:15 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 110)
        (nil)))
(jump_insn 230 82 231 9 (set (pc)
        (label_ref 209)) "calc.c":68:9 807 {jump}
     (nil)
 -> 209)
;;  succ:       26 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 231 230 85)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       3 [11.1% (adjusted)] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 111 112
(code_label 85 231 86 10 20 (nil) [1 uses])
(note 86 85 87 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 88 10 (set (reg:DF 111)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64])) "calc.c":70:15 135 {*movdf_internal}
     (nil))
(insn 88 87 89 10 (set (reg:DF 20 xmm0)
        (reg:DF 111)) "calc.c":70:15 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 111)
        (nil)))
(call_insn 89 88 90 10 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("sqrt") [flags 0x41]  <function_decl 0x7f09f1816c00 sqrt>) [0 __builtin_sqrt S1 A8])
            (const_int 0 [0]))) "calc.c":70:15 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 90 89 91 10 (set (reg:DF 112)
        (reg:DF 20 xmm0)) "calc.c":70:15 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 91 90 232 10 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])
        (reg:DF 112)) "calc.c":70:15 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 112)
        (nil)))
(jump_insn 232 91 233 10 (set (pc)
        (label_ref 209)) "calc.c":71:9 807 {jump}
     (nil)
 -> 209)
;;  succ:       26 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 233 232 94)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       3 [11.1% (adjusted)] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 113 114
(code_label 94 233 95 11 19 (nil) [1 uses])
(note 95 94 96 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 96 95 97 11 (set (reg:DF 113)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64])) "calc.c":73:15 135 {*movdf_internal}
     (nil))
(insn 97 96 98 11 (set (reg:DF 20 xmm0)
        (reg:DF 113)) "calc.c":73:15 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 113)
        (nil)))
(call_insn 98 97 99 11 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("log") [flags 0x41]  <function_decl 0x7f09f17f9e00 log>) [0 __builtin_log S1 A8])
            (const_int 0 [0]))) "calc.c":73:15 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 99 98 100 11 (set (reg:DF 114)
        (reg:DF 20 xmm0)) "calc.c":73:15 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 100 99 234 11 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])
        (reg:DF 114)) "calc.c":73:15 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 114)
        (nil)))
(jump_insn 234 100 235 11 (set (pc)
        (label_ref 209)) "calc.c":74:9 807 {jump}
     (nil)
 -> 209)
;;  succ:       26 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 235 234 103)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       3 [11.1% (adjusted)] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 115 116
(code_label 103 235 104 12 17 (nil) [1 uses])
(note 104 103 105 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 12 (set (reg:DF 115)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64])) "calc.c":76:15 135 {*movdf_internal}
     (nil))
(insn 106 105 107 12 (set (reg:DF 20 xmm0)
        (reg:DF 115)) "calc.c":76:15 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 115)
        (nil)))
(call_insn 107 106 108 12 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("log10") [flags 0x41]  <function_decl 0x7f09f17fa000 log10>) [0 __builtin_log10 S1 A8])
            (const_int 0 [0]))) "calc.c":76:15 824 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 108 107 109 12 (set (reg:DF 116)
        (reg:DF 20 xmm0)) "calc.c":76:15 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 109 108 236 12 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])
        (reg:DF 116)) "calc.c":76:15 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 116)
        (nil)))
(jump_insn 236 109 237 12 (set (pc)
        (label_ref 209)) "calc.c":77:9 807 {jump}
     (nil)
 -> 209)
;;  succ:       26 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 237 236 112)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       2
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 83 117 118
(code_label 112 237 113 13 16 (nil) [1 uses])
(note 113 112 114 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 114 113 115 13 (set (reg:DI 117)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 Stack_double+0 S8 A64])) "calc.c":82:29 74 {*movdi_internal}
     (nil))
(insn 115 114 116 13 (set (reg:DI 5 di)
        (reg:DI 117)) "calc.c":82:29 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 117)
        (nil)))
(call_insn 116 115 117 13 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("Fpop") [flags 0x41]  <function_decl 0x7f09f164ee00 Fpop>) [0 Fpop S1 A8])
            (const_int 0 [0]))) "calc.c":82:29 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 117 116 118 13 (set (reg:DF 118)
        (reg:DF 20 xmm0)) "calc.c":82:29 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 118 117 119 13 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [2 left_token+0 S8 A64])
        (reg:DF 118)) "calc.c":82:29 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 118)
        (nil)))
(insn 119 118 122 13 (set (reg:SI 83 [ _2 ])
        (sign_extend:SI (mem/c:QI (plus:DI (reg/f:DI 19 frame)
                    (const_int -44 [0xffffffffffffffd4])) [0 func+0 S1 A32]))) "calc.c":84:9 153 {extendqisi2}
     (nil))
(insn 122 119 123 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 83 [ _2 ])
            (const_int 47 [0x2f]))) 11 {*cmpsi_1}
     (nil))
(jump_insn 123 122 124 13 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 146)
            (pc))) 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 146)
;;  succ:       14 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83
;; lr  def 	 17 [flags]
(note 124 123 127 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 127 124 128 14 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 83 [ _2 ])
            (const_int 37 [0x25]))) 11 {*cmpsi_1}
     (nil))
(jump_insn 128 127 129 14 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 254)
            (pc))) 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 254)
;;  succ:       27
;;              15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83
;; lr  def 	 17 [flags] 119
(note 129 128 130 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 130 129 133 15 (parallel [
            (set (reg:SI 119)
                (plus:SI (reg:SI 83 [ _2 ])
                    (const_int -37 [0xffffffffffffffdb])))
            (clobber (reg:CC 17 flags))
        ]) 209 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 83 [ _2 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 133 130 134 15 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 119)
            (const_int 10 [0xa]))) 11 {*cmpsi_1}
     (nil))
(jump_insn 134 133 219 15 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 254)
            (pc))) 806 {*jcc}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil))
 -> 254)
;;  succ:       27
;;              16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 119

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 119
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 119
;; lr  def 	 17 [flags] 120 121 122 123 124 125 126
(note 219 134 135 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 135 219 136 16 (set (reg:DI 120)
        (zero_extend:DI (reg:SI 119))) 138 {*zero_extendsidi2}
     (expr_list:REG_DEAD (reg:SI 119)
        (nil)))
(insn 136 135 137 16 (parallel [
            (set (reg:DI 121)
                (ashift:DI (reg:DI 120)
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 120)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 137 136 138 16 (set (reg:DI 122)
        (label_ref:DI 143)) 74 {*movdi_internal}
     (insn_list:REG_LABEL_OPERAND 143 (nil)))
(insn 138 137 139 16 (set (reg:SI 123)
        (mem/u/c:SI (plus:DI (reg:DI 121)
                (reg:DI 122)) [0  S4 A8])) 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:DI 122)
        (expr_list:REG_DEAD (reg:DI 121)
            (nil))))
(insn 139 138 140 16 (set (reg:DI 124)
        (sign_extend:DI (reg:SI 123))) 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 123)
        (nil)))
(insn 140 139 141 16 (set (reg:DI 126)
        (label_ref:DI 143)) 74 {*movdi_internal}
     (insn_list:REG_LABEL_OPERAND 143 (nil)))
(insn 141 140 142 16 (parallel [
            (set (reg:DI 125)
                (plus:DI (reg:DI 124)
                    (reg:DI 126)))
            (clobber (reg:CC 17 flags))
        ]) 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 126)
        (expr_list:REG_DEAD (reg:DI 124)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(jump_insn 142 141 143 16 (parallel [
            (set (pc)
                (reg:DI 125))
            (use (label_ref 143))
        ]) 811 {*tablejump_1}
     (expr_list:REG_DEAD (reg:DI 125)
        (nil))
 -> 143)
;;  succ:       27 [37.5% (adjusted)] 
;;              24 [12.5% (adjusted)] 
;;              21 [12.5% (adjusted)] 
;;              19 [12.5% (adjusted)] 
;;              20 [12.5% (adjusted)] 
;;              22 [12.5% (adjusted)] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; Insn is not within a basic block
(code_label 143 142 144 31 (nil) [3 uses])
;; Insn is not within a basic block
(jump_table_data 144 143 145 (addr_diff_vec:SI (label_ref:DI 143)
         [
            (label_ref:DI 194)
            (label_ref:DI 254)
            (label_ref:DI 254)
            (label_ref:DI 254)
            (label_ref:DI 254)
            (label_ref:DI 167)
            (label_ref:DI 153)
            (label_ref:DI 254)
            (label_ref:DI 160)
            (label_ref:DI 254)
            (label_ref:DI 174)
        ]
        (const_int 0 [0])
        (const_int 0 [0])))
(barrier 145 144 146)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL)
;;  pred:       13
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 83
;; lr  def 	 17 [flags]
(code_label 146 145 147 17 28 (nil) [1 uses])
(note 147 146 148 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 148 147 149 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 83 [ _2 ])
            (const_int 94 [0x5e]))) 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 83 [ _2 ])
        (nil)))
(jump_insn 149 148 238 17 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 181)
            (pc))) 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 181)
;;  succ:       18 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 238 149 239 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(jump_insn 239 238 240 18 (set (pc)
        (label_ref:DI 254)) "calc.c":107:13 807 {jump}
     (nil)
 -> 254)
;;  succ:       27 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 240 239 153)
;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL)
;;  pred:       16 [12.5% (adjusted)] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 127 128
(code_label 153 240 154 19 33 (nil) [1 uses])
(note 154 153 155 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 155 154 156 19 (set (reg:DF 128)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64])) "calc.c":87:17 135 {*movdf_internal}
     (nil))
(insn 156 155 157 19 (set (reg:DF 127)
        (plus:DF (reg:DF 128)
            (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [2 left_token+0 S8 A64]))) "calc.c":87:17 981 {*fop_df_comm}
     (expr_list:REG_DEAD (reg:DF 128)
        (nil)))
(insn 157 156 241 19 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])
        (reg:DF 127)) "calc.c":87:17 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 127)
        (nil)))
(jump_insn 241 157 242 19 (set (pc)
        (label_ref 207)) "calc.c":88:13 807 {jump}
     (nil)
 -> 207)
;;  succ:       25 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 242 241 160)
;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL)
;;  pred:       16 [12.5% (adjusted)] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 129 130
(code_label 160 242 161 20 32 (nil) [1 uses])
(note 161 160 162 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 162 161 163 20 (set (reg:DF 130)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [2 left_token+0 S8 A64])) "calc.c":90:17 135 {*movdf_internal}
     (nil))
(insn 163 162 164 20 (set (reg:DF 129)
        (minus:DF (reg:DF 130)
            (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64]))) "calc.c":90:17 985 {*fop_df_1}
     (expr_list:REG_DEAD (reg:DF 130)
        (nil)))
(insn 164 163 243 20 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])
        (reg:DF 129)) "calc.c":90:17 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 129)
        (nil)))
(jump_insn 243 164 244 20 (set (pc)
        (label_ref 207)) "calc.c":91:13 807 {jump}
     (nil)
 -> 207)
;;  succ:       25 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 244 243 167)
;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL)
;;  pred:       16 [12.5% (adjusted)] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 131 132
(code_label 167 244 168 21 34 (nil) [1 uses])
(note 168 167 169 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 169 168 170 21 (set (reg:DF 132)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64])) "calc.c":93:17 135 {*movdf_internal}
     (nil))
(insn 170 169 171 21 (set (reg:DF 131)
        (mult:DF (reg:DF 132)
            (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [2 left_token+0 S8 A64]))) "calc.c":93:17 981 {*fop_df_comm}
     (expr_list:REG_DEAD (reg:DF 132)
        (nil)))
(insn 171 170 245 21 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])
        (reg:DF 131)) "calc.c":93:17 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 131)
        (nil)))
(jump_insn 245 171 246 21 (set (pc)
        (label_ref 207)) "calc.c":94:13 807 {jump}
     (nil)
 -> 207)
;;  succ:       25 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 246 245 174)
;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL)
;;  pred:       16 [12.5% (adjusted)] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 133 134
(code_label 174 246 175 22 30 (nil) [1 uses])
(note 175 174 176 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 176 175 177 22 (set (reg:DF 134)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [2 left_token+0 S8 A64])) "calc.c":96:17 135 {*movdf_internal}
     (nil))
(insn 177 176 178 22 (set (reg:DF 133)
        (div:DF (reg:DF 134)
            (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64]))) "calc.c":96:17 985 {*fop_df_1}
     (expr_list:REG_DEAD (reg:DF 134)
        (nil)))
(insn 178 177 247 22 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])
        (reg:DF 133)) "calc.c":96:17 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 133)
        (nil)))
(jump_insn 247 178 248 22 (set (pc)
        (label_ref 207)) "calc.c":97:13 807 {jump}
     (nil)
 -> 207)
;;  succ:       25 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 248 247 181)
;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL)
;;  pred:       17
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 84 85 86 136
(code_label 181 248 182 23 36 (nil) [1 uses])
(note 182 181 183 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 183 182 184 23 (set (reg:SF 84 [ _3 ])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [2 left_token+0 S8 A64]))) "calc.c":99:19 159 {truncdfsf2}
     (nil))
(insn 184 183 185 23 (set (reg:SF 85 [ _4 ])
        (float_truncate:SF (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64]))) "calc.c":99:19 159 {truncdfsf2}
     (nil))
(insn 185 184 186 23 (set (reg:SF 21 xmm1)
        (reg:SF 84 [ _3 ])) "calc.c":99:19 136 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 84 [ _3 ])
        (nil)))
(insn 186 185 187 23 (set (reg:SF 20 xmm0)
        (reg:SF 85 [ _4 ])) "calc.c":99:19 136 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 85 [ _4 ])
        (nil)))
(call_insn 187 186 188 23 (set (reg:SF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("powf") [flags 0x41]  <function_decl 0x7f09f1809300 powf>) [0 __builtin_powf S1 A8])
            (const_int 0 [0]))) "calc.c":99:19 824 {*call_value}
     (expr_list:REG_DEAD (reg:SF 21 xmm1)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:SF (use (reg:SF 20 xmm0))
        (expr_list:SF (use (reg:SF 21 xmm1))
            (nil))))
(insn 188 187 190 23 (set (reg:SF 86 [ _5 ])
        (reg:SF 20 xmm0)) "calc.c":99:19 136 {*movsf_internal}
     (expr_list:REG_DEAD (reg:SF 20 xmm0)
        (nil)))
(insn 190 188 191 23 (set (reg:DF 136)
        (float_extend:DF (reg:SF 86 [ _5 ]))) "calc.c":99:17 156 {*extendsfdf2}
     (expr_list:REG_DEAD (reg:SF 86 [ _5 ])
        (nil)))
(insn 191 190 249 23 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])
        (reg:DF 136)) "calc.c":99:17 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 136)
        (nil)))
(jump_insn 249 191 250 23 (set (pc)
        (label_ref 207)) "calc.c":100:13 807 {jump}
     (nil)
 -> 207)
;;  succ:       25 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 250 249 194)
;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 27, flags: (RTL)
;;  pred:       16 [12.5% (adjusted)] 
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 137 138 139
(code_label 194 250 195 24 35 (nil) [1 uses])
(note 195 194 196 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 196 195 197 24 (set (reg:DF 137)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [2 left_token+0 S8 A64])) "calc.c":102:19 135 {*movdf_internal}
     (nil))
(insn 197 196 198 24 (set (reg:DF 138)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 right_token+0 S8 A64])) "calc.c":102:19 135 {*movdf_internal}
     (nil))
(insn 198 197 199 24 (set (reg:DF 21 xmm1)
        (reg:DF 137)) "calc.c":102:19 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 137)
        (nil)))
(insn 199 198 200 24 (set (reg:DF 20 xmm0)
        (reg:DF 138)) "calc.c":102:19 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 138)
        (nil)))
(call_insn 200 199 201 24 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("fmod") [flags 0x41]  <function_decl 0x7f09f17e6f00 fmod>) [0 __builtin_fmod S1 A8])
            (const_int 0 [0]))) "calc.c":102:19 824 {*call_value}
     (expr_list:REG_DEAD (reg:DF 21 xmm1)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (expr_list:DF (use (reg:DF 21 xmm1))
            (nil))))
(insn 201 200 202 24 (set (reg:DF 139)
        (reg:DF 20 xmm0)) "calc.c":102:19 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 202 201 251 24 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])
        (reg:DF 139)) "calc.c":102:19 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 139)
        (nil)))
(jump_insn 251 202 252 24 (set (pc)
        (label_ref 207)) "calc.c":103:13 807 {jump}
     (nil)
 -> 207)
;;  succ:       25 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 252 251 254)
;; basic block 27, loop depth 0, maybe hot
;;  prev block 24, next block 25, flags: (RTL)
;;  pred:       14
;;              18 [always] 
;;              16 [37.5% (adjusted)] 
;;              15
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 254 252 253 27 38 (nil) [9 uses])
(note 253 254 255 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 255 253 207 27 (const_int 0 [0]) "calc.c":107:13 843 {nop}
     (nil))
;;  succ:       25 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 25, loop depth 0, maybe hot
;;  prev block 27, next block 28, flags: (RTL)
;;  pred:       24 [always] 
;;              19 [always] 
;;              20 [always] 
;;              21 [always] 
;;              22 [always] 
;;              23 [always] 
;;              27 [always]  (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 207 255 208 25 37 (nil) [6 uses])
(note 208 207 256 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
;;  succ:       28 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 28, loop depth 0, maybe hot
;;  prev block 25, next block 26, flags: (RTL)
;;  pred:       25 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 256 208 257 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 257 256 209 28 (const_int 0 [0]) "calc.c":110:5 843 {nop}
     (nil))
;;  succ:       26 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 26, loop depth 0, maybe hot
;;  prev block 28, next block 29, flags: (RTL)
;;  pred:       28 [always]  (FALLTHRU)
;;              4 [always] 
;;              5 [always] 
;;              6 [always] 
;;              7 [always] 
;;              8 [always] 
;;              9 [always] 
;;              10 [always] 
;;              11 [always] 
;;              12 [always] 
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 140 141
(code_label 209 257 210 26 27 (nil) [9 uses])
(note 210 209 211 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 211 210 212 26 (set (reg:DF 140)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 res+0 S8 A64])) "calc.c":113:5 135 {*movdf_internal}
     (nil))
(insn 212 211 213 26 (set (reg:DI 141)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [3 Stack_double+0 S8 A64])) "calc.c":113:5 74 {*movdi_internal}
     (nil))
(insn 213 212 214 26 (set (reg:DF 20 xmm0)
        (reg:DF 140)) "calc.c":113:5 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 140)
        (nil)))
(insn 214 213 215 26 (set (reg:DI 5 di)
        (reg:DI 141)) "calc.c":113:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 141)
        (nil)))
(call_insn 215 214 258 26 (call (mem:QI (symbol_ref:DI ("Fpush") [flags 0x41]  <function_decl 0x7f09f164ed00 Fpush>) [0 Fpush S1 A8])
        (const_int 0 [0])) "calc.c":113:5 813 {*call}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DF (use (reg:DF 20 xmm0))
            (nil))))
;;  succ:       29 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 29, loop depth 0, maybe hot
;;  prev block 26, next block 1, flags: (RTL)
;;  pred:       26 [always]  (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 258 215 259 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 259 258 0 29 (const_int 0 [0]) "calc.c":115:1 843 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function push_func (push_func, funcdef_no=10, decl_uid=4504, cgraph_uid=11, symbol_order=10)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 18 n_edges 24 count 18 (    1)
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 17 16
;;
;; Loop 2
;;  header 8, latch 7
;;  depth 1, outer 0
;;  nodes: 8 7
;;
;; Loop 1
;;  header 13, latch 12
;;  depth 1, outer 0
;;  nodes: 13 12 14
;; 2 succs { 4 3 }
;; 3 succs { 4 5 }
;; 4 succs { 17 }
;; 5 succs { 6 11 }
;; 6 succs { 8 }
;; 7 succs { 8 }
;; 8 succs { 7 9 }
;; 9 succs { 10 17 }
;; 10 succs { 17 }
;; 11 succs { 13 }
;; 12 succs { 13 }
;; 13 succs { 14 15 }
;; 14 succs { 12 15 }
;; 15 succs { 17 }
;; 17 succs { 16 }
;; 16 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 25.
verify found no changes in insn with uid = 32.
verify found no changes in insn with uid = 45.
verify found no changes in insn with uid = 51.
verify found no changes in insn with uid = 54.
verify found no changes in insn with uid = 59.
verify found no changes in insn with uid = 67.
verify found no changes in insn with uid = 70.
verify found no changes in insn with uid = 73.
verify found no changes in insn with uid = 80.
verify found no changes in insn with uid = 86.
verify found no changes in insn with uid = 89.
verify found no changes in insn with uid = 99.
verify found no changes in insn with uid = 105.
verify found no changes in insn with uid = 108.
verify found no changes in insn with uid = 118.
verify found no changes in insn with uid = 130.
verify found no changes in insn with uid = 137.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r123: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r123,l0) best DIREG, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a4 (r121,l0) best DIREG, allocno GENERAL_REGS
    r120: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a8 (r120,l0) best DIREG, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a11 (r118,l0) best DIREG, allocno GENERAL_REGS
    r117: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a12 (r117,l0) best DIREG, allocno GENERAL_REGS
    r116: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a15 (r116,l0) best DIREG, allocno GENERAL_REGS
    r115: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a16 (r115,l0) best DIREG, allocno GENERAL_REGS
    r114: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a17 (r114,l0) best DIREG, allocno GENERAL_REGS
    r113: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a20 (r113,l0) best DIREG, allocno GENERAL_REGS
    r112: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a22 (r112,l0) best DIREG, allocno GENERAL_REGS
    r111: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a23 (r111,l0) best DIREG, allocno GENERAL_REGS
    r110: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a24 (r110,l0) best DIREG, allocno GENERAL_REGS
    r109: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a26 (r109,l0) best DIREG, allocno GENERAL_REGS
    r108: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a27 (r108,l0) best DIREG, allocno GENERAL_REGS
    r107: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a28 (r107,l0) best DIREG, allocno GENERAL_REGS
    r106: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a31 (r106,l0) best DIREG, allocno GENERAL_REGS
    r105: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a32 (r105,l0) best DIREG, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a36 (r103,l0) best DIREG, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a41 (r100,l0) best DREG, allocno GENERAL_REGS
    r99: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a1 (r99,l0) best SIREG, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r97,l0) best SIREG, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a7 (r95,l0) best AREG, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a13 (r93,l0) best SIREG, allocno GENERAL_REGS
    r92: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a14 (r92,l0) best AREG, allocno GENERAL_REGS
    r91: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a18 (r91,l0) best SIREG, allocno GENERAL_REGS
    r90: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a19 (r90,l0) best AREG, allocno GENERAL_REGS
    r89: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a21 (r89,l0) best AREG, allocno GENERAL_REGS
    r88: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a25 (r88,l0) best AREG, allocno GENERAL_REGS
    r87: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a29 (r87,l0) best SIREG, allocno GENERAL_REGS
    r86: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a30 (r86,l0) best AREG, allocno GENERAL_REGS
    r85: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a33 (r85,l0) best SIREG, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a37 (r83,l0) best SIREG, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r123,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a1(r99,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a2(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:6000
  a3(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:7000
  a4(r121,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a5(r97,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a6(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a7(r95,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:11000
  a8(r120,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a9(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a10(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a11(r118,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a12(r117,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a13(r93,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a14(r92,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:11000
  a15(r116,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a16(r115,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a17(r114,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a18(r91,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a19(r90,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:11000
  a20(r113,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a21(r89,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:11000
  a22(r112,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a23(r111,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a24(r110,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a25(r88,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:11000
  a26(r109,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a27(r108,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a28(r107,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a29(r87,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a30(r86,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:11000
  a31(r106,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a32(r105,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a33(r85,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a34(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:6000
  a35(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:7000
  a36(r103,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a37(r83,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a38(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a39(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a40(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:7000
  a41(r100,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:7000

   Insn 154(l0): point = 1
   Insn 137(l0): point = 4
   Insn 136(l0): point = 6
   Insn 135(l0): point = 8
   Insn 134(l0): point = 10
   Insn 133(l0): point = 12
   Insn 132(l0): point = 14
   Insn 131(l0): point = 16
   Insn 130(l0): point = 18
   Insn 129(l0): point = 20
   Insn 128(l0): point = 22
   Insn 127(l0): point = 24
   Insn 126(l0): point = 26
   Insn 108(l0): point = 29
   Insn 107(l0): point = 31
   Insn 106(l0): point = 33
   Insn 105(l0): point = 35
   Insn 104(l0): point = 37
   Insn 103(l0): point = 39
   Insn 102(l0): point = 41
   Insn 101(l0): point = 43
   Insn 100(l0): point = 45
   Insn 99(l0): point = 47
   Insn 98(l0): point = 49
   Insn 97(l0): point = 51
   Insn 123(l0): point = 54
   Insn 122(l0): point = 56
   Insn 120(l0): point = 58
   Insn 119(l0): point = 60
   Insn 118(l0): point = 62
   Insn 117(l0): point = 64
   Insn 116(l0): point = 66
   Insn 114(l0): point = 69
   Insn 113(l0): point = 71
   Insn 112(l0): point = 73
   Insn 111(l0): point = 75
   Insn 148(l0): point = 78
   Insn 146(l0): point = 81
   Insn 89(l0): point = 83
   Insn 88(l0): point = 85
   Insn 87(l0): point = 87
   Insn 86(l0): point = 89
   Insn 85(l0): point = 91
   Insn 84(l0): point = 93
   Insn 83(l0): point = 95
   Insn 82(l0): point = 97
   Insn 81(l0): point = 99
   Insn 80(l0): point = 101
   Insn 79(l0): point = 103
   Insn 78(l0): point = 105
   Insn 76(l0): point = 108
   Insn 75(l0): point = 110
   Insn 74(l0): point = 112
   Insn 73(l0): point = 114
   Insn 72(l0): point = 116
   Insn 71(l0): point = 118
   Insn 70(l0): point = 120
   Insn 69(l0): point = 122
   Insn 68(l0): point = 124
   Insn 67(l0): point = 126
   Insn 66(l0): point = 128
   Insn 65(l0): point = 130
   Insn 54(l0): point = 133
   Insn 53(l0): point = 135
   Insn 52(l0): point = 137
   Insn 51(l0): point = 139
   Insn 50(l0): point = 141
   Insn 49(l0): point = 143
   Insn 48(l0): point = 145
   Insn 47(l0): point = 147
   Insn 46(l0): point = 149
   Insn 45(l0): point = 151
   Insn 44(l0): point = 153
   Insn 43(l0): point = 155
   Insn 63(l0): point = 158
   Insn 62(l0): point = 160
   Insn 60(l0): point = 162
   Insn 59(l0): point = 164
   Insn 58(l0): point = 166
   Insn 57(l0): point = 168
   Insn 144(l0): point = 171
   Insn 38(l0): point = 174
   Insn 37(l0): point = 176
   Insn 142(l0): point = 179
   Insn 32(l0): point = 181
   Insn 31(l0): point = 183
   Insn 30(l0): point = 185
   Insn 29(l0): point = 187
   Insn 28(l0): point = 189
   Insn 27(l0): point = 191
   Insn 26(l0): point = 193
   Insn 25(l0): point = 195
   Insn 24(l0): point = 197
   Insn 23(l0): point = 199
   Insn 22(l0): point = 201
   Insn 21(l0): point = 203
   Insn 18(l0): point = 206
   Insn 17(l0): point = 208
   Insn 15(l0): point = 211
   Insn 14(l0): point = 213
   Insn 13(l0): point = 215
   Insn 12(l0): point = 217
   Insn 6(l0): point = 219
   Insn 5(l0): point = 221
   Insn 8(l0): point = 223
   Insn 7(l0): point = 225
   Insn 4(l0): point = 227
   Insn 3(l0): point = 229
   Insn 2(l0): point = 231
 a0(r123): [7..10]
 a1(r99): [9..12]
 a2(r98): [13..14]
 a3(r122): [15..16]
 a4(r121): [21..24]
 a5(r97): [23..26]
 a6(r96): [57..58]
 a7(r95): [59..60]
 a8(r120): [65..66]
 a9(r94): [72..73]
 a10(r119): [74..75]
 a11(r118): [32..33]
 a12(r117): [38..41]
 a13(r93): [40..43]
 a14(r92): [44..45]
 a15(r116): [50..51]
 a16(r115): [86..87]
 a17(r114): [92..95]
 a18(r91): [94..97]
 a19(r90): [98..99]
 a20(r113): [104..105]
 a21(r89): [111..112]
 a22(r112): [117..118]
 a23(r111): [123..124]
 a24(r110): [129..130]
 a25(r88): [161..162]
 a26(r109): [167..168]
 a27(r108): [136..137]
 a28(r107): [142..145]
 a29(r87): [144..147]
 a30(r86): [148..149]
 a31(r106): [154..155]
 a32(r105): [184..187]
 a33(r85): [186..189]
 a34(r84): [190..191]
 a35(r104): [192..193]
 a36(r103): [198..201]
 a37(r83): [200..203]
 a38(r82): [214..215]
 a39(r102): [216..217]
 a40(r101): [220..221]
 a41(r100): [222..227]
Compressing live ranges: from 234 to 70 - 29%
Ranges after the compression:
 a0(r123): [0..1]
 a1(r99): [0..1]
 a2(r98): [2..3]
 a3(r122): [4..5]
 a4(r121): [6..7]
 a5(r97): [6..7]
 a6(r96): [16..17]
 a7(r95): [18..19]
 a8(r120): [20..21]
 a9(r94): [22..23]
 a10(r119): [24..25]
 a11(r118): [8..9]
 a12(r117): [10..11]
 a13(r93): [10..11]
 a14(r92): [12..13]
 a15(r116): [14..15]
 a16(r115): [26..27]
 a17(r114): [28..29]
 a18(r91): [28..29]
 a19(r90): [30..31]
 a20(r113): [32..33]
 a21(r89): [34..35]
 a22(r112): [36..37]
 a23(r111): [38..39]
 a24(r110): [40..41]
 a25(r88): [50..51]
 a26(r109): [52..53]
 a27(r108): [42..43]
 a28(r107): [44..45]
 a29(r87): [44..45]
 a30(r86): [46..47]
 a31(r106): [48..49]
 a32(r105): [54..55]
 a33(r85): [54..55]
 a34(r84): [56..57]
 a35(r104): [58..59]
 a36(r103): [60..61]
 a37(r83): [60..61]
 a38(r82): [62..63]
 a39(r102): [64..65]
 a40(r101): [66..67]
 a41(r100): [68..69]
  pref0:a0(r123)<-hr5@1500
  pref1:a4(r121)<-hr5@1500
  pref2:a8(r120)<-hr5@1500
  pref3:a11(r118)<-hr5@1500
  pref4:a12(r117)<-hr5@1500
  pref5:a15(r116)<-hr5@1500
  pref6:a16(r115)<-hr5@1500
  pref7:a17(r114)<-hr5@1500
  pref8:a20(r113)<-hr5@1500
  pref9:a22(r112)<-hr5@1500
  pref10:a23(r111)<-hr5@1500
  pref11:a24(r110)<-hr5@1500
  pref12:a26(r109)<-hr5@1500
  pref13:a27(r108)<-hr5@1500
  pref14:a28(r107)<-hr5@1500
  pref15:a31(r106)<-hr5@1500
  pref16:a32(r105)<-hr5@1500
  pref17:a36(r103)<-hr5@1500
  pref18:a41(r100)<-hr1@1500
  pref19:a1(r99)<-hr4@1500
  pref20:a5(r97)<-hr4@1500
  pref21:a7(r95)<-hr0@1500
  pref22:a13(r93)<-hr4@1500
  pref23:a14(r92)<-hr0@1500
  pref24:a18(r91)<-hr4@1500
  pref25:a19(r90)<-hr0@1500
  pref26:a21(r89)<-hr0@1500
  pref27:a25(r88)<-hr0@1500
  pref28:a29(r87)<-hr4@1500
  pref29:a30(r86)<-hr0@1500
  pref30:a33(r85)<-hr4@1500
  pref31:a37(r83)<-hr4@1500
  regions=1, blocks=18, points=70
    allocnos=42 (big 0), copies=0, conflicts=0, ranges=42
Disposition:
   38:r82  l0     0   37:r83  l0     1   34:r84  l0     0   33:r85  l0     1
   30:r86  l0     0   29:r87  l0     1   25:r88  l0     0   21:r89  l0     0
   19:r90  l0     0   18:r91  l0     1   14:r92  l0     0   13:r93  l0     1
    9:r94  l0     0    7:r95  l0     0    6:r96  l0     0    5:r97  l0     1
    2:r98  l0     0    1:r99  l0     1   41:r100 l0     0   40:r101 l0     0
   39:r102 l0     0   36:r103 l0     0   35:r104 l0     0   32:r105 l0     0
   31:r106 l0     0   28:r107 l0     0   27:r108 l0     0   26:r109 l0     0
   24:r110 l0     0   23:r111 l0     0   22:r112 l0     0   20:r113 l0     0
   17:r114 l0     0   16:r115 l0     0   15:r116 l0     0   12:r117 l0     0
   11:r118 l0     0   10:r119 l0     0    8:r120 l0     0    4:r121 l0     0
    3:r122 l0     0    0:r123 l0     0
+++Costs: overall -32000, reg -32000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


push_func

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 36 [r8]
;;  ref usage 	r0={19d,6u} r1={19d,1u} r2={19d,1u} r4={26d,8u} r5={37d,19u} r6={1d,17u} r7={1d,35u} r8={18d} r9={18d} r10={18d} r11={18d} r12={18d} r13={18d} r14={18d} r15={18d} r16={1d,16u} r17={25d,7u} r18={18d} r19={1d,49u} r20={19d} r21={19d} r22={19d} r23={19d} r24={19d} r25={19d} r26={19d} r27={19d} r28={18d} r29={18d} r30={18d} r31={18d} r32={18d} r33={18d} r34={18d} r35={18d} r36={19d,1u} r37={19d} r38={18d} r39={18d} r44={18d} r45={18d} r46={18d} r47={18d} r48={18d} r49={18d} r50={18d} r51={18d} r52={18d} r53={18d} r54={18d} r55={18d} r56={18d} r57={18d} r58={18d} r59={18d} r60={18d} r61={18d} r62={18d} r63={18d} r64={18d} r65={18d} r66={18d} r67={18d} r68={18d} r69={18d} r70={18d} r71={18d} r72={18d} r73={18d} r74={18d} r75={18d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} 
;;    total ref usage 1501{1299d,202u,0e} in 109{91 regular + 18 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8]
;; lr  def 	 17 [flags] 82 100 101 102
(note 10 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 10 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [4 stack+0 S8 A64])
        (reg:DI 5 di [ stack ])) "calc.c":117:1 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ stack ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [4 stack_prior+0 S8 A64])
        (reg:DI 4 si [ stack_prior ])) "calc.c":117:1 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ stack_prior ])
        (nil)))
(insn 4 3 7 2 (set (reg:SI 100)
        (reg:SI 1 dx [ spec ])) "calc.c":117:1 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 1 dx [ spec ])
        (nil)))
(insn 7 4 8 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [5 priority+0 S4 A32])
        (reg:SI 2 cx [ priority ])) "calc.c":117:1 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 2 cx [ priority ])
        (nil)))
(insn 8 7 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [3 Stack_double+0 S8 A64])
        (reg:DI 36 r8 [ Stack_double ])) "calc.c":117:1 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 36 r8 [ Stack_double ])
        (nil)))
(insn 5 8 6 2 (set (reg:QI 101)
        (subreg:QI (reg:SI 100) 0)) "calc.c":117:1 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 100)
        (nil)))
(insn 6 5 9 2 (set (mem/c:QI (plus:DI (reg/f:DI 19 frame)
                (const_int -20 [0xffffffffffffffec])) [0 spec+0 S1 A32])
        (reg:QI 101)) "calc.c":117:1 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 101)
        (nil)))
(note 9 6 12 2 NOTE_INSN_FUNCTION_BEG)
(insn 12 9 13 2 (set (reg/f:DI 102)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [4 stack+0 S8 A64])) "calc.c":119:14 74 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 82 [ _1 ])
        (mem:DI (plus:DI (reg/f:DI 102)
                (const_int 16 [0x10])) [7 stack_24(D)->top+0 S8 A64])) "calc.c":119:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 102)
        (nil)))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 82 [ _1 ])
            (const_int 0 [0]))) "calc.c":119:8 8 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg:DI 82 [ _1 ])
        (nil)))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) "calc.c":119:8 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 19)
;;  succ:       4
;;              3 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 19 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 spec+0 S1 A32])
            (const_int 40 [0x28]))) "calc.c":119:25 9 {*cmpqi_1}
     (nil))
(jump_insn 18 17 19 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 35)
            (pc))) "calc.c":119:25 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 35)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 83 84 85 103 104 105
(code_label 19 18 20 4 40 (nil) [1 uses])
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg:SI 83 [ _2 ])
        (sign_extend:SI (mem/c:QI (plus:DI (reg/f:DI 19 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 spec+0 S1 A32]))) "calc.c":121:9 153 {extendqisi2}
     (nil))
(insn 22 21 23 4 (set (reg:DI 103)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [4 stack+0 S8 A64])) "calc.c":121:9 74 {*movdi_internal}
     (nil))
(insn 23 22 24 4 (set (reg:SI 4 si)
        (reg:SI 83 [ _2 ])) "calc.c":121:9 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 83 [ _2 ])
        (nil)))
(insn 24 23 25 4 (set (reg:DI 5 di)
        (reg:DI 103)) "calc.c":121:9 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 103)
        (nil)))
(call_insn 25 24 26 4 (call (mem:QI (symbol_ref:DI ("push") [flags 0x41]  <function_decl 0x7f09f164e700 push>) [0 push S1 A8])
        (const_int 0 [0])) "calc.c":121:9 813 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 26 25 27 4 (set (reg:SI 104)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [5 priority+0 S4 A32])) "calc.c":122:9 75 {*movsi_internal}
     (nil))
(insn 27 26 28 4 (set (reg:QI 84 [ _3 ])
        (subreg:QI (reg:SI 104) 0)) "calc.c":122:9 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 104)
        (nil)))
(insn 28 27 29 4 (set (reg:SI 85 [ _4 ])
        (sign_extend:SI (reg:QI 84 [ _3 ]))) "calc.c":122:9 153 {extendqisi2}
     (expr_list:REG_DEAD (reg:QI 84 [ _3 ])
        (nil)))
(insn 29 28 30 4 (set (reg:DI 105)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [4 stack_prior+0 S8 A64])) "calc.c":122:9 74 {*movdi_internal}
     (nil))
(insn 30 29 31 4 (set (reg:SI 4 si)
        (reg:SI 85 [ _4 ])) "calc.c":122:9 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 85 [ _4 ])
        (nil)))
(insn 31 30 32 4 (set (reg:DI 5 di)
        (reg:DI 105)) "calc.c":122:9 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 105)
        (nil)))
(call_insn 32 31 142 4 (call (mem:QI (symbol_ref:DI ("push") [flags 0x41]  <function_decl 0x7f09f164e700 push>) [0 push S1 A8])
        (const_int 0 [0])) "calc.c":122:9 813 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(jump_insn 142 32 143 4 (set (pc)
        (label_ref:DI 153)) "calc.c":150:1 807 {jump}
     (nil)
 -> 153)
;;  succ:       17 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 143 142 35)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 35 143 36 5 41 (nil) [1 uses])
(note 36 35 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:QI (plus:DI (reg/f:DI 19 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 spec+0 S1 A32])
            (const_int 41 [0x29]))) "calc.c":124:13 9 {*cmpqi_1}
     (nil))
(jump_insn 38 37 39 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 92)
            (pc))) "calc.c":124:13 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 92)
;;  succ:       6 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 39 38 144 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(jump_insn 144 39 145 6 (set (pc)
        (label_ref 55)) "calc.c":126:15 807 {jump}
     (nil)
 -> 55)
;;  succ:       8 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 145 144 61)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       8
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 86 87 106 107 108
(code_label 61 145 42 7 45 (nil) [1 uses])
(note 42 61 43 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 44 7 (set (reg:DI 106)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [4 stack+0 S8 A64])) "calc.c":128:32 74 {*movdi_internal}
     (nil))
(insn 44 43 45 7 (set (reg:DI 5 di)
        (reg:DI 106)) "calc.c":128:32 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 106)
        (nil)))
(call_insn 45 44 46 7 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("pop") [flags 0x41]  <function_decl 0x7f09f164e800 pop>) [0 pop S1 A8])
            (const_int 0 [0]))) "calc.c":128:32 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 46 45 47 7 (set (reg:QI 86 [ _5 ])
        (reg:QI 0 ax)) "calc.c":128:32 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax)
        (nil)))
(insn 47 46 48 7 (set (reg:SI 87 [ _6 ])
        (sign_extend:SI (reg:QI 86 [ _5 ]))) "calc.c":128:13 153 {extendqisi2}
     (expr_list:REG_DEAD (reg:QI 86 [ _5 ])
        (nil)))
(insn 48 47 49 7 (set (reg:DI 107)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [3 Stack_double+0 S8 A64])) "calc.c":128:13 74 {*movdi_internal}
     (nil))
(insn 49 48 50 7 (set (reg:SI 4 si)
        (reg:SI 87 [ _6 ])) "calc.c":128:13 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 87 [ _6 ])
        (nil)))
(insn 50 49 51 7 (set (reg:DI 5 di)
        (reg:DI 107)) "calc.c":128:13 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 107)
        (nil)))
(call_insn 51 50 52 7 (call (mem:QI (symbol_ref:DI ("calc") [flags 0x3]  <function_decl 0x7f09f1657800 calc>) [0 calc S1 A8])
        (const_int 0 [0])) "calc.c":128:13 813 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 52 51 53 7 (set (reg:DI 108)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [4 stack_prior+0 S8 A64])) "calc.c":129:13 74 {*movdi_internal}
     (nil))
(insn 53 52 54 7 (set (reg:DI 5 di)
        (reg:DI 108)) "calc.c":129:13 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 108)
        (nil)))
(call_insn 54 53 55 7 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("pop") [flags 0x41]  <function_decl 0x7f09f164e800 pop>) [0 pop S1 A8])
            (const_int 0 [0]))) "calc.c":129:13 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:QI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              6 [always] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 88 109
(code_label 55 54 56 8 44 (nil) [1 uses])
(note 56 55 57 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 58 8 (set (reg:DI 109)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [4 stack+0 S8 A64])) "calc.c":126:16 74 {*movdi_internal}
     (nil))
(insn 58 57 59 8 (set (reg:DI 5 di)
        (reg:DI 109)) "calc.c":126:16 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 109)
        (nil)))
(call_insn 59 58 60 8 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("peek") [flags 0x41]  <function_decl 0x7f09f164e900 peek>) [0 peek S1 A8])
            (const_int 0 [0]))) "calc.c":126:16 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 60 59 62 8 (set (reg:QI 88 [ _7 ])
        (reg:QI 0 ax)) "calc.c":126:16 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax)
        (nil)))
(insn 62 60 63 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 88 [ _7 ])
            (const_int 40 [0x28]))) "calc.c":126:28 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 88 [ _7 ])
        (nil)))
(jump_insn 63 62 64 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 61)
            (pc))) "calc.c":126:28 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 61)
;;  succ:       7
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 89 110 111 112
(note 64 63 65 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 9 (set (reg:DI 110)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [4 stack+0 S8 A64])) "calc.c":131:9 74 {*movdi_internal}
     (nil))
(insn 66 65 67 9 (set (reg:DI 5 di)
        (reg:DI 110)) "calc.c":131:9 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 110)
        (nil)))
(call_insn 67 66 68 9 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("pop") [flags 0x41]  <function_decl 0x7f09f164e800 pop>) [0 pop S1 A8])
            (const_int 0 [0]))) "calc.c":131:9 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:QI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 68 67 69 9 (set (reg:DI 111)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [4 stack_prior+0 S8 A64])) "calc.c":132:9 74 {*movdi_internal}
     (nil))
(insn 69 68 70 9 (set (reg:DI 5 di)
        (reg:DI 111)) "calc.c":132:9 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 111)
        (nil)))
(call_insn 70 69 71 9 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("pop") [flags 0x41]  <function_decl 0x7f09f164e800 pop>) [0 pop S1 A8])
            (const_int 0 [0]))) "calc.c":132:9 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:QI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 71 70 72 9 (set (reg:DI 112)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [4 stack_prior+0 S8 A64])) "calc.c":133:13 74 {*movdi_internal}
     (nil))
(insn 72 71 73 9 (set (reg:DI 5 di)
        (reg:DI 112)) "calc.c":133:13 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 112)
        (nil)))
(call_insn 73 72 74 9 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("peek") [flags 0x41]  <function_decl 0x7f09f164e900 peek>) [0 peek S1 A8])
            (const_int 0 [0]))) "calc.c":133:13 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 74 73 75 9 (set (reg:QI 89 [ _8 ])
        (reg:QI 0 ax)) "calc.c":133:13 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax)
        (nil)))
(insn 75 74 76 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 89 [ _8 ])
            (const_int 5 [0x5]))) "calc.c":133:12 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 89 [ _8 ])
        (nil)))
(jump_insn 76 75 77 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 153)
            (pc))) "calc.c":133:12 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 153)
;;  succ:       10 (FALLTHRU)
;;              17
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 90 91 113 114 115
(note 77 76 78 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 78 77 79 10 (set (reg:DI 113)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [4 stack+0 S8 A64])) "calc.c":135:32 74 {*movdi_internal}
     (nil))
(insn 79 78 80 10 (set (reg:DI 5 di)
        (reg:DI 113)) "calc.c":135:32 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 113)
        (nil)))
(call_insn 80 79 81 10 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("pop") [flags 0x41]  <function_decl 0x7f09f164e800 pop>) [0 pop S1 A8])
            (const_int 0 [0]))) "calc.c":135:32 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 81 80 82 10 (set (reg:QI 90 [ _9 ])
        (reg:QI 0 ax)) "calc.c":135:32 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax)
        (nil)))
(insn 82 81 83 10 (set (reg:SI 91 [ _10 ])
        (sign_extend:SI (reg:QI 90 [ _9 ]))) "calc.c":135:13 153 {extendqisi2}
     (expr_list:REG_DEAD (reg:QI 90 [ _9 ])
        (nil)))
(insn 83 82 84 10 (set (reg:DI 114)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [3 Stack_double+0 S8 A64])) "calc.c":135:13 74 {*movdi_internal}
     (nil))
(insn 84 83 85 10 (set (reg:SI 4 si)
        (reg:SI 91 [ _10 ])) "calc.c":135:13 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 91 [ _10 ])
        (nil)))
(insn 85 84 86 10 (set (reg:DI 5 di)
        (reg:DI 114)) "calc.c":135:13 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 114)
        (nil)))
(call_insn 86 85 87 10 (call (mem:QI (symbol_ref:DI ("calc") [flags 0x3]  <function_decl 0x7f09f1657800 calc>) [0 calc S1 A8])
        (const_int 0 [0])) "calc.c":135:13 813 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 87 86 88 10 (set (reg:DI 115)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [4 stack_prior+0 S8 A64])) "calc.c":136:13 74 {*movdi_internal}
     (nil))
(insn 88 87 89 10 (set (reg:DI 5 di)
        (reg:DI 115)) "calc.c":136:13 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 115)
        (nil)))
(call_insn 89 88 146 10 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("pop") [flags 0x41]  <function_decl 0x7f09f164e800 pop>) [0 pop S1 A8])
            (const_int 0 [0]))) "calc.c":136:13 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:QI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 146 89 147 10 (set (pc)
        (label_ref:DI 153)) "calc.c":150:1 807 {jump}
     (nil)
 -> 153)
;;  succ:       17 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 147 146 92)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       5
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 92 147 93 11 43 (nil) [1 uses])
(note 93 92 148 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(jump_insn 148 93 149 11 (set (pc)
        (label_ref 109)) "calc.c":142:15 807 {jump}
     (nil)
 -> 109)
;;  succ:       13 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 149 148 121)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       14
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 92 93 116 117 118
(code_label 121 149 96 12 48 (nil) [1 uses])
(note 96 121 97 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 97 96 98 12 (set (reg:DI 116)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [4 stack+0 S8 A64])) "calc.c":144:32 74 {*movdi_internal}
     (nil))
(insn 98 97 99 12 (set (reg:DI 5 di)
        (reg:DI 116)) "calc.c":144:32 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 116)
        (nil)))
(call_insn 99 98 100 12 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("pop") [flags 0x41]  <function_decl 0x7f09f164e800 pop>) [0 pop S1 A8])
            (const_int 0 [0]))) "calc.c":144:32 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 100 99 101 12 (set (reg:QI 92 [ _11 ])
        (reg:QI 0 ax)) "calc.c":144:32 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax)
        (nil)))
(insn 101 100 102 12 (set (reg:SI 93 [ _12 ])
        (sign_extend:SI (reg:QI 92 [ _11 ]))) "calc.c":144:13 153 {extendqisi2}
     (expr_list:REG_DEAD (reg:QI 92 [ _11 ])
        (nil)))
(insn 102 101 103 12 (set (reg:DI 117)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [3 Stack_double+0 S8 A64])) "calc.c":144:13 74 {*movdi_internal}
     (nil))
(insn 103 102 104 12 (set (reg:SI 4 si)
        (reg:SI 93 [ _12 ])) "calc.c":144:13 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 93 [ _12 ])
        (nil)))
(insn 104 103 105 12 (set (reg:DI 5 di)
        (reg:DI 117)) "calc.c":144:13 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 117)
        (nil)))
(call_insn 105 104 106 12 (call (mem:QI (symbol_ref:DI ("calc") [flags 0x3]  <function_decl 0x7f09f1657800 calc>) [0 calc S1 A8])
        (const_int 0 [0])) "calc.c":144:13 813 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 106 105 107 12 (set (reg:DI 118)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [4 stack_prior+0 S8 A64])) "calc.c":145:13 74 {*movdi_internal}
     (nil))
(insn 107 106 108 12 (set (reg:DI 5 di)
        (reg:DI 118)) "calc.c":145:13 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 118)
        (nil)))
(call_insn 108 107 109 12 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("pop") [flags 0x41]  <function_decl 0x7f09f164e800 pop>) [0 pop S1 A8])
            (const_int 0 [0]))) "calc.c":145:13 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:QI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       13 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       12 (FALLTHRU,DFS_BACK)
;;              11 [always] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 94 119
(code_label 109 108 110 13 46 (nil) [1 uses])
(note 110 109 111 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 111 110 112 13 (set (reg/f:DI 119)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [4 stack+0 S8 A64])) "calc.c":142:21 74 {*movdi_internal}
     (nil))
(insn 112 111 113 13 (set (reg:DI 94 [ _13 ])
        (mem:DI (plus:DI (reg/f:DI 119)
                (const_int 16 [0x10])) [7 stack_24(D)->top+0 S8 A64])) "calc.c":142:21 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 119)
        (nil)))
(insn 113 112 114 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 94 [ _13 ])
            (const_int 0 [0]))) "calc.c":142:32 8 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg:DI 94 [ _13 ])
        (nil)))
(jump_insn 114 113 115 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 124)
            (pc))) "calc.c":142:32 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 124)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 95 96 120
(note 115 114 116 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 14 (set (reg:DI 120)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [4 stack_prior+0 S8 A64])) "calc.c":142:47 74 {*movdi_internal}
     (nil))
(insn 117 116 118 14 (set (reg:DI 5 di)
        (reg:DI 120)) "calc.c":142:47 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 120)
        (nil)))
(call_insn 118 117 119 14 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("peek") [flags 0x41]  <function_decl 0x7f09f164e900 peek>) [0 peek S1 A8])
            (const_int 0 [0]))) "calc.c":142:47 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 119 118 120 14 (set (reg:QI 95 [ _14 ])
        (reg:QI 0 ax)) "calc.c":142:47 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax)
        (nil)))
(insn 120 119 122 14 (set (reg:SI 96 [ _15 ])
        (sign_extend:SI (reg:QI 95 [ _14 ]))) "calc.c":142:47 153 {extendqisi2}
     (expr_list:REG_DEAD (reg:QI 95 [ _14 ])
        (nil)))
(insn 122 120 123 14 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -24 [0xffffffffffffffe8])) [5 priority+0 S4 A32])
            (reg:SI 96 [ _15 ]))) "calc.c":142:32 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 96 [ _15 ])
        (nil)))
(jump_insn 123 122 124 14 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 121)
            (pc))) "calc.c":142:32 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 121)
;;  succ:       12
;;              15 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 17, flags: (RTL)
;;  pred:       13
;;              14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 97 98 99 121 122 123
(code_label 124 123 125 15 47 (nil) [1 uses])
(note 125 124 126 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 126 125 127 15 (set (reg:SI 97 [ _16 ])
        (sign_extend:SI (mem/c:QI (plus:DI (reg/f:DI 19 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 spec+0 S1 A32]))) "calc.c":147:9 153 {extendqisi2}
     (nil))
(insn 127 126 128 15 (set (reg:DI 121)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [4 stack+0 S8 A64])) "calc.c":147:9 74 {*movdi_internal}
     (nil))
(insn 128 127 129 15 (set (reg:SI 4 si)
        (reg:SI 97 [ _16 ])) "calc.c":147:9 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 97 [ _16 ])
        (nil)))
(insn 129 128 130 15 (set (reg:DI 5 di)
        (reg:DI 121)) "calc.c":147:9 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 121)
        (nil)))
(call_insn 130 129 131 15 (call (mem:QI (symbol_ref:DI ("push") [flags 0x41]  <function_decl 0x7f09f164e700 push>) [0 push S1 A8])
        (const_int 0 [0])) "calc.c":147:9 813 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 131 130 132 15 (set (reg:SI 122)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [5 priority+0 S4 A32])) "calc.c":148:9 75 {*movsi_internal}
     (nil))
(insn 132 131 133 15 (set (reg:QI 98 [ _17 ])
        (subreg:QI (reg:SI 122) 0)) "calc.c":148:9 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg:SI 122)
        (nil)))
(insn 133 132 134 15 (set (reg:SI 99 [ _18 ])
        (sign_extend:SI (reg:QI 98 [ _17 ]))) "calc.c":148:9 153 {extendqisi2}
     (expr_list:REG_DEAD (reg:QI 98 [ _17 ])
        (nil)))
(insn 134 133 135 15 (set (reg:DI 123)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [4 stack_prior+0 S8 A64])) "calc.c":148:9 74 {*movdi_internal}
     (nil))
(insn 135 134 136 15 (set (reg:SI 4 si)
        (reg:SI 99 [ _18 ])) "calc.c":148:9 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 99 [ _18 ])
        (nil)))
(insn 136 135 137 15 (set (reg:DI 5 di)
        (reg:DI 123)) "calc.c":148:9 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 123)
        (nil)))
(call_insn 137 136 153 15 (call (mem:QI (symbol_ref:DI ("push") [flags 0x41]  <function_decl 0x7f09f164e700 push>) [0 push S1 A8])
        (const_int 0 [0])) "calc.c":148:9 813 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
;;  succ:       17 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 17, loop depth 0, maybe hot
;;  prev block 15, next block 16, flags: (RTL)
;;  pred:       9
;;              10 [always] 
;;              15 [always]  (FALLTHRU)
;;              4 [always] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 153 137 152 17 49 (nil) [3 uses])
(note 152 153 154 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 154 152 140 17 (const_int 0 [0]) "calc.c":150:1 843 {nop}
     (nil))
;;  succ:       16 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 17, next block 1, flags: (RTL)
;;  pred:       17 [always]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 140 154 141 16 39 (nil) [0 uses])
(note 141 140 0 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]


;; Function not_main (not_main, funcdef_no=11, decl_uid=4513, cgraph_uid=12, symbol_order=11)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 52 n_edges 75 count 52 (    1)
;; 5 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 50 51 41 42 43 44 45 46 47 48 49
;;
;; Loop 4
;;  header 43, latch 42
;;  depth 1, outer 0
;;  nodes: 43 42
;;
;; Loop 1
;;  header 40, latch 39
;;  depth 1, outer 0
;;  nodes: 40 39 38 36 37 35 30 34 33 32 31 13 22 23 24 28 29 15 19 27 25 26 17 16 14 18 20 21 3 4 12 11 9 10 8 7 5 6
;;
;; Loop 3
;;  header 33, latch 32
;;  depth 2, outer 1
;;  nodes: 33 32
;;
;; Loop 2
;;  header 9, latch 8
;;  depth 2, outer 1
;;  nodes: 9 8 10 11
;; 2 succs { 40 }
;; 3 succs { 4 13 }
;; 4 succs { 5 13 }
;; 5 succs { 6 7 }
;; 6 succs { 7 }
;; 7 succs { 9 }
;; 8 succs { 9 }
;; 9 succs { 10 11 }
;; 10 succs { 8 11 }
;; 11 succs { 8 12 }
;; 12 succs { 13 }
;; 13 succs { 14 30 }
;; 14 succs { 15 16 }
;; 15 succs { 30 }
;; 16 succs { 18 17 }
;; 17 succs { 18 25 }
;; 18 succs { 19 20 }
;; 19 succs { 30 }
;; 20 succs { 21 24 }
;; 21 succs { 22 23 }
;; 22 succs { 30 }
;; 23 succs { 30 }
;; 24 succs { 30 }
;; 25 succs { 27 26 }
;; 26 succs { 27 28 }
;; 27 succs { 30 }
;; 28 succs { 29 30 }
;; 29 succs { 30 }
;; 30 succs { 31 35 }
;; 31 succs { 33 }
;; 32 succs { 33 }
;; 33 succs { 32 34 }
;; 34 succs { 35 }
;; 35 succs { 37 36 }
;; 36 succs { 37 38 }
;; 37 succs { 38 }
;; 38 succs { 51 39 }
;; 39 succs { 40 }
;; 40 succs { 3 50 }
;; 50 succs { 41 }
;; 51 succs { 41 }
;; 41 succs { 43 }
;; 42 succs { 43 }
;; 43 succs { 42 44 }
;; 44 succs { 45 46 }
;; 45 succs { 47 }
;; 46 succs { 47 }
;; 47 succs { 49 48 }
;; 48 succs { }
;; 49 succs { 1 }
Removing SCRATCH to p262 in insn #4 (nop 2)
rescanning insn with uid = 4.
Removing SCRATCH to p263 in insn #492 (nop 3)
rescanning insn with uid = 492.
Building IRA IR
verify found no changes in insn with uid = 12.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 57.
verify found no changes in insn with uid = 73.
verify found no changes in insn with uid = 76.
verify found no changes in insn with uid = 82.
verify found no changes in insn with uid = 118.
verify found no changes in insn with uid = 124.
verify found no changes in insn with uid = 136.
verify found no changes in insn with uid = 156.
verify found no changes in insn with uid = 193.
verify found no changes in insn with uid = 254.
verify found no changes in insn with uid = 280.
verify found no changes in insn with uid = 292.
verify found no changes in insn with uid = 327.
verify found no changes in insn with uid = 337.
verify found no changes in insn with uid = 369.
verify found no changes in insn with uid = 388.
verify found no changes in insn with uid = 398.
verify found no changes in insn with uid = 408.
verify found no changes in insn with uid = 415.
verify found no changes in insn with uid = 418.
verify found no changes in insn with uid = 424.
verify found no changes in insn with uid = 436.
verify found no changes in insn with uid = 439.
verify found no changes in insn with uid = 449.
verify found no changes in insn with uid = 457.
verify found no changes in insn with uid = 467.
verify found no changes in insn with uid = 472.
verify found no changes in insn with uid = 475.
verify found no changes in insn with uid = 478.
verify found no changes in insn with uid = 484.
verify found no changes in insn with uid = 494.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 52 n_edges 75 count 52 (    1)

Pass 0 for finding pseudo/allocno costs

    r263: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r263,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r262: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a180 (r262,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r260: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r260,l0) best DIREG, allocno GENERAL_REGS
    r259: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a4 (r259,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r258: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r258,l0) best DIREG, allocno GENERAL_REGS
    r257: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a6 (r257,l0) best DIREG, allocno GENERAL_REGS
    r256: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a7 (r256,l0) best DIREG, allocno GENERAL_REGS
    r255: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r255,l0) best SIREG, allocno GENERAL_REGS
    r254: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a8 (r254,l0) best DIREG, allocno GENERAL_REGS
    r253: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a11 (r253,l0) best SIREG, allocno GENERAL_REGS
    r252: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a10 (r252,l0) best DIREG, allocno GENERAL_REGS
    r251: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a16 (r251,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r250: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a18 (r250,l0) best DIREG, allocno GENERAL_REGS
    r249: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r249,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r248: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a24 (r248,l0) best DIREG, allocno GENERAL_REGS
    r247: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r247,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r246: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a30 (r246,l0) best DIREG, allocno GENERAL_REGS
    r245: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a32 (r245,l0) best DIREG, allocno GENERAL_REGS
    r244: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r244,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r243: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r243,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r242: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r242,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r241: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r241,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r240: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r240,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r239: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r239,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r238: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r238,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r237: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r237,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r236: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a58 (r236,l0) best DIREG, allocno GENERAL_REGS
    r235: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r235,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r234: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r234,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r233: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r233,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r232: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r232,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r231: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r231,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r230: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r230,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r229: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r229,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r228: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r228,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r227: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a72 (r227,l0) best DIREG, allocno GENERAL_REGS
    r226: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a76 (r226,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r225: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a77 (r225,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r224: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a84 (r224,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r223: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a85 (r223,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r222: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a88 (r222,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r221: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a89 (r221,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a96 (r220,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r219: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a97 (r219,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r218: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a100 (r218,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r217: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a101 (r217,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a104 (r216,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a105 (r215,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r214: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a108 (r214,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a109 (r213,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a116 (r212,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r211: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a117 (r211,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a120 (r210,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r209: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a121 (r209,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r208: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a124 (r208,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r207: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a125 (r207,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a131 (r206,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a132 (r205,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r204: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a134 (r204,l0) best DIREG, allocno GENERAL_REGS
    r203: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a138 (r203,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a139 (r202,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r201: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a140 (r201,l0) best DIREG, allocno GENERAL_REGS
    r200: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a142 (r200,l0) best DIREG, allocno GENERAL_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a145 (r199,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r198: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a146 (r198,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a149 (r197,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a150 (r196,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a153 (r195,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a154 (r194,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r193: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a155 (r193,l0) best DIREG, allocno GENERAL_REGS
    r192: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a159 (r192,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r191: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a162 (r191,l0) best SSE_REGS, allocno SSE_REGS
    r190: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a161 (r190,l0) best SSE_REGS, allocno SSE_REGS
    r189: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a160 (r189,l0) best SSE_REGS, allocno SSE_REGS
    r188: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a163 (r188,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a165 (r187,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a166 (r186,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a169 (r185,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a170 (r184,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a173 (r183,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a174 (r182,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r181: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a178 (r181,l0) best DIREG, allocno GENERAL_REGS
    r180: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a179 (r180,l0) best SIREG, allocno GENERAL_REGS
    r179: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a0 (r179,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r178: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a2 (r178,l0) best SSE_REGS, allocno SSE_REGS
    r177: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a12 (r177,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r176: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a13 (r176,l0) best DIREG, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r174,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r173: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a17 (r173,l0) best DIREG, allocno GENERAL_REGS
    r172: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a20 (r172,l0) best DIREG, allocno GENERAL_REGS
    r171: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a21 (r171,l0) best SIREG, allocno GENERAL_REGS
    r170: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a22 (r170,l0) best AREG, allocno GENERAL_REGS
    r169: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a23 (r169,l0) best DIREG, allocno GENERAL_REGS
    r168: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a25 (r168,l0) best SIREG, allocno GENERAL_REGS
    r167: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a26 (r167,l0) best AREG, allocno GENERAL_REGS
    r166: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a27 (r166,l0) best DIREG, allocno GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r165,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r164: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a31 (r164,l0) best AREG, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a37 (r161,l0) best DIREG, allocno GENERAL_REGS
    r160: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a38 (r160,l0) best SIREG, allocno GENERAL_REGS
    r159: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a39 (r159,l0) best DREG, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a53 (r151,l0) best DIREG, allocno GENERAL_REGS
    r150: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a54 (r150,l0) best SIREG, allocno GENERAL_REGS
    r149: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a55 (r149,l0) best DREG, allocno GENERAL_REGS
    r148: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a57 (r148,l0) best AREG, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a71 (r142,l0) best AREG, allocno GENERAL_REGS
    r141: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a73 (r141,l0) best SIREG, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a74 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a75 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a78 (r138,l0) best DIREG, allocno GENERAL_REGS
    r137: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a79 (r137,l0) best SIREG, allocno GENERAL_REGS
    r136: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a80 (r136,l0) best DREG, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a82 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a83 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a81 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a86 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a87 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a90 (r130,l0) best DIREG, allocno GENERAL_REGS
    r129: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a91 (r129,l0) best SIREG, allocno GENERAL_REGS
    r128: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a92 (r128,l0) best DREG, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a94 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a95 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a93 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a98 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a99 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a102 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a103 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a106 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a107 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a110 (r118,l0) best DIREG, allocno GENERAL_REGS
    r117: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a111 (r117,l0) best SIREG, allocno GENERAL_REGS
    r116: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a112 (r116,l0) best DREG, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a114 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a115 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a113 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a118 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a119 (r111,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a122 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a123 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a126 (r108,l0) best DIREG, allocno GENERAL_REGS
    r107: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a127 (r107,l0) best SIREG, allocno GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a128 (r106,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a129 (r105,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a130 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a133 (r103,l0) best AREG, allocno GENERAL_REGS
    r102: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a135 (r102,l0) best SIREG, allocno GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a136 (r101,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a137 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a141 (r99,l0) best AREG, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a143 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a144 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a147 (r96,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a148 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a151 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a152 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a156 (r92,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r91: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a157 (r91,l0) best DIREG, allocno GENERAL_REGS
    r90: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a158 (r90,l0) best DIREG, allocno GENERAL_REGS
    r89: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a164 (r89,l0) best DIREG, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a167 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a168 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a171 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a172 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a175 (r84,l0) best AREG, allocno GENERAL_REGS
    r83: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a176 (r83,l0) best AREG, allocno GENERAL_REGS
    r82: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a177 (r82,l0) best AREG, allocno GENERAL_REGS

  a0(r179,l0) costs: AREG:6000 DREG:6000 CREG:6000 BREG:6000 SIREG:6000 DIREG:6000 AD_REGS:6000 CLOBBERED_REGS:6000 Q_REGS:6000 TLS_GOTBASE_REGS:6000 GENERAL_REGS:6000 FP_TOP_REG:19000 FP_SECOND_REG:19000 FLOAT_REGS:19000 SSE_FIRST_REG:19000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:19000 FLOAT_INT_REGS:19000 INT_SSE_REGS:19000 FLOAT_INT_SSE_REGS:19000 MEM:7000
  a1(r263,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:13000 INT_SSE_REGS:13000 ALL_REGS:212000 MEM:6000
  a2(r178,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 FP_TOP_REG:18000 FP_SECOND_REG:18000 FLOAT_REGS:18000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:18000 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 MEM:7000
  a3(r260,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a4(r259,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a5(r258,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a6(r257,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a7(r256,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a8(r254,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a9(r255,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a10(r252,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a11(r253,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a12(r177,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:26000 NO_REX_SSE_REGS:4000 SSE_REGS:4000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:12000
  a13(r176,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a14(r175,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a15(r174,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a16(r251,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a17(r173,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a18(r250,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a19(r249,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a20(r172,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a21(r171,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a22(r170,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:11000
  a23(r169,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a24(r248,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a25(r168,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a26(r167,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:11000
  a27(r166,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a28(r247,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a29(r165,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a30(r246,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a31(r164,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a32(r245,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a33(r163,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a34(r162,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a35(r244,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a36(r243,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a37(r161,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a38(r160,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a39(r159,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a40(r156,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a41(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a42(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a43(r242,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a44(r241,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a45(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a46(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a47(r240,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a48(r239,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a49(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a50(r152,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a51(r238,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a52(r237,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a53(r151,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a54(r150,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a55(r149,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a56(r147,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a57(r148,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 MEM:11000
  a58(r236,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a59(r234,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a60(r235,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a61(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a62(r145,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a63(r233,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a64(r232,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a65(r230,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a66(r144,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a67(r231,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a68(r143,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a69(r229,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a70(r228,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a71(r142,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a72(r227,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a73(r141,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a74(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a75(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a76(r226,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a77(r225,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a78(r138,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a79(r137,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a80(r136,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a81(r133,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a82(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a83(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a84(r224,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a85(r223,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a86(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a87(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a88(r222,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a89(r221,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a90(r130,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a91(r129,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a92(r128,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a93(r125,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a94(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a95(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a96(r220,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a97(r219,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a98(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a99(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a100(r218,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a101(r217,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a102(r122,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a103(r121,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a104(r216,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a105(r215,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a106(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a107(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a108(r214,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a109(r213,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a110(r118,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a111(r117,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a112(r116,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a113(r113,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a114(r115,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a115(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a116(r212,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a117(r211,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a118(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a119(r111,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a120(r210,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a121(r209,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a122(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a123(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a124(r208,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a125(r207,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a126(r108,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a127(r107,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a128(r106,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a129(r105,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a130(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a131(r206,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a132(r205,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a133(r103,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a134(r204,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a135(r102,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a136(r101,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a137(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a138(r203,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a139(r202,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a140(r201,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a141(r99,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:1000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a142(r200,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a143(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a144(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a145(r199,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a146(r198,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a147(r96,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a148(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a149(r197,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a150(r196,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a151(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a152(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a153(r195,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a154(r194,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a155(r193,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a156(r92,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:26000 NO_REX_SSE_REGS:4000 SSE_REGS:4000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:12000
  a157(r91,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a158(r90,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a159(r192,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a160(r189,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a161(r190,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a162(r191,l0) costs: SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 MEM:11000
  a163(r188,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a164(r89,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a165(r187,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a166(r186,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a167(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a168(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a169(r185,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a170(r184,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a171(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a172(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a173(r183,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a174(r182,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a175(r84,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a176(r83,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a177(r82,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a178(r181,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a179(r180,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a180(r262,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:13000 INT_SSE_REGS:13000 ALL_REGS:212000 MEM:6000

   Insn 498(l0): point = 0
   Insn 497(l0): point = 2
   Insn 494(l0): point = 5
   Insn 493(l0): point = 8
   Insn 492(l0): point = 10
   Insn 488(l0): point = 12
   Insn 485(l0): point = 14
   Insn 484(l0): point = 16
   Insn 483(l0): point = 18
   Insn 482(l0): point = 20
   Insn 481(l0): point = 22
   Insn 480(l0): point = 24
   Insn 479(l0): point = 26
   Insn 478(l0): point = 28
   Insn 477(l0): point = 30
   Insn 476(l0): point = 32
   Insn 475(l0): point = 34
   Insn 474(l0): point = 36
   Insn 473(l0): point = 38
   Insn 472(l0): point = 40
   Insn 471(l0): point = 42
   Insn 470(l0): point = 44
   Insn 467(l0): point = 47
   Insn 466(l0): point = 49
   Insn 465(l0): point = 51
   Insn 464(l0): point = 53
   Insn 463(l0): point = 55
   Insn 462(l0): point = 57
   Insn 522(l0): point = 60
   Insn 457(l0): point = 62
   Insn 456(l0): point = 64
   Insn 455(l0): point = 66
   Insn 454(l0): point = 68
   Insn 453(l0): point = 70
   Insn 452(l0): point = 72
   Insn 451(l0): point = 74
   Insn 450(l0): point = 76
   Insn 449(l0): point = 78
   Insn 448(l0): point = 80
   Insn 447(l0): point = 82
   Insn 445(l0): point = 85
   Insn 444(l0): point = 87
   Insn 443(l0): point = 89
   Insn 442(l0): point = 91
   Insn 441(l0): point = 93
   Insn 440(l0): point = 95
   Insn 439(l0): point = 97
   Insn 438(l0): point = 99
   Insn 437(l0): point = 101
   Insn 436(l0): point = 103
   Insn 435(l0): point = 105
   Insn 434(l0): point = 107
   Insn 433(l0): point = 109
   Insn 425(l0): point = 112
   Insn 424(l0): point = 114
   Insn 423(l0): point = 116
   Insn 422(l0): point = 118
   Insn 421(l0): point = 120
   Insn 420(l0): point = 122
   Insn 419(l0): point = 124
   Insn 418(l0): point = 126
   Insn 417(l0): point = 128
   Insn 416(l0): point = 130
   Insn 415(l0): point = 132
   Insn 414(l0): point = 134
   Insn 413(l0): point = 136
   Insn 412(l0): point = 138
   Insn 411(l0): point = 140
   Insn 410(l0): point = 142
   Insn 409(l0): point = 144
   Insn 408(l0): point = 146
   Insn 407(l0): point = 148
   Insn 406(l0): point = 150
   Insn 431(l0): point = 153
   Insn 430(l0): point = 155
   Insn 429(l0): point = 157
   Insn 520(l0): point = 160
   Insn 402(l0): point = 162
   Insn 401(l0): point = 164
   Insn 400(l0): point = 166
   Insn 399(l0): point = 168
   Insn 398(l0): point = 170
   Insn 397(l0): point = 172
   Insn 396(l0): point = 174
   Insn 395(l0): point = 176
   Insn 529(l0): point = 179
   Insn 525(l0): point = 182
   Insn 42(l0): point = 185
   Insn 41(l0): point = 187
   Insn 38(l0): point = 189
   Insn 37(l0): point = 191
   Insn 36(l0): point = 193
   Insn 35(l0): point = 195
   Insn 392(l0): point = 198
   Insn 391(l0): point = 200
   Insn 389(l0): point = 202
   Insn 388(l0): point = 204
   Insn 387(l0): point = 206
   Insn 386(l0): point = 208
   Insn 383(l0): point = 211
   Insn 377(l0): point = 214
   Insn 376(l0): point = 216
   Insn 375(l0): point = 218
   Insn 374(l0): point = 220
   Insn 373(l0): point = 222
   Insn 372(l0): point = 224
   Insn 352(l0): point = 227
   Insn 351(l0): point = 229
   Insn 350(l0): point = 231
   Insn 349(l0): point = 233
   Insn 348(l0): point = 235
   Insn 347(l0): point = 237
   Insn 369(l0): point = 240
   Insn 368(l0): point = 242
   Insn 367(l0): point = 244
   Insn 366(l0): point = 246
   Insn 365(l0): point = 248
   Insn 364(l0): point = 250
   Insn 363(l0): point = 252
   Insn 362(l0): point = 254
   Insn 361(l0): point = 256
   Insn 360(l0): point = 258
   Insn 359(l0): point = 260
   Insn 358(l0): point = 262
   Insn 357(l0): point = 264
   Insn 356(l0): point = 266
   Insn 355(l0): point = 268
   Insn 345(l0): point = 271
   Insn 344(l0): point = 273
   Insn 343(l0): point = 275
   Insn 342(l0): point = 277
   Insn 341(l0): point = 279
   Insn 340(l0): point = 281
   Insn 295(l0): point = 284
   Insn 294(l0): point = 286
   Insn 293(l0): point = 288
   Insn 292(l0): point = 290
   Insn 291(l0): point = 292
   Insn 290(l0): point = 294
   Insn 289(l0): point = 296
   Insn 288(l0): point = 298
   Insn 287(l0): point = 300
   Insn 286(l0): point = 302
   Insn 285(l0): point = 304
   Insn 284(l0): point = 306
   Insn 139(l0): point = 309
   Insn 138(l0): point = 311
   Insn 137(l0): point = 313
   Insn 136(l0): point = 315
   Insn 135(l0): point = 317
   Insn 134(l0): point = 319
   Insn 133(l0): point = 321
   Insn 132(l0): point = 323
   Insn 131(l0): point = 325
   Insn 130(l0): point = 327
   Insn 129(l0): point = 329
   Insn 128(l0): point = 331
   Insn 51(l0): point = 334
   Insn 50(l0): point = 336
   Insn 47(l0): point = 338
   Insn 46(l0): point = 340
   Insn 45(l0): point = 342
   Insn 44(l0): point = 344
   Insn 125(l0): point = 347
   Insn 124(l0): point = 349
   Insn 123(l0): point = 351
   Insn 122(l0): point = 353
   Insn 121(l0): point = 355
   Insn 120(l0): point = 357
   Insn 119(l0): point = 359
   Insn 118(l0): point = 361
   Insn 117(l0): point = 363
   Insn 116(l0): point = 365
   Insn 114(l0): point = 368
   Insn 113(l0): point = 370
   Insn 112(l0): point = 372
   Insn 111(l0): point = 374
   Insn 110(l0): point = 376
   Insn 109(l0): point = 378
   Insn 96(l0): point = 381
   Insn 95(l0): point = 383
   Insn 92(l0): point = 385
   Insn 91(l0): point = 387
   Insn 90(l0): point = 389
   Insn 89(l0): point = 391
   Insn 86(l0): point = 394
   Insn 504(l0): point = 397
   Insn 82(l0): point = 399
   Insn 81(l0): point = 401
   Insn 80(l0): point = 403
   Insn 79(l0): point = 405
   Insn 78(l0): point = 407
   Insn 77(l0): point = 409
   Insn 76(l0): point = 411
   Insn 75(l0): point = 413
   Insn 74(l0): point = 415
   Insn 73(l0): point = 417
   Insn 72(l0): point = 419
   Insn 71(l0): point = 421
   Insn 70(l0): point = 423
   Insn 69(l0): point = 425
   Insn 61(l0): point = 428
   Insn 60(l0): point = 430
   Insn 59(l0): point = 432
   Insn 58(l0): point = 434
   Insn 57(l0): point = 436
   Insn 56(l0): point = 438
   Insn 55(l0): point = 440
   Insn 54(l0): point = 442
   Insn 53(l0): point = 444
   Insn 66(l0): point = 447
   Insn 65(l0): point = 449
   Insn 64(l0): point = 451
   Insn 63(l0): point = 453
   Insn 106(l0): point = 456
   Insn 105(l0): point = 458
   Insn 101(l0): point = 460
   Insn 100(l0): point = 462
   Insn 99(l0): point = 464
   Insn 98(l0): point = 466
   Insn 510(l0): point = 469
   Insn 209(l0): point = 471
   Insn 512(l0): point = 474
   Insn 214(l0): point = 476
   Insn 207(l0): point = 479
   Insn 206(l0): point = 481
   Insn 514(l0): point = 484
   Insn 219(l0): point = 486
   Insn 204(l0): point = 489
   Insn 203(l0): point = 491
   Insn 202(l0): point = 493
   Insn 201(l0): point = 495
   Insn 200(l0): point = 497
   Insn 199(l0): point = 499
   Insn 265(l0): point = 502
   Insn 264(l0): point = 504
   Insn 263(l0): point = 506
   Insn 262(l0): point = 508
   Insn 261(l0): point = 510
   Insn 260(l0): point = 512
   Insn 281(l0): point = 515
   Insn 280(l0): point = 517
   Insn 279(l0): point = 519
   Insn 278(l0): point = 521
   Insn 277(l0): point = 523
   Insn 276(l0): point = 525
   Insn 275(l0): point = 527
   Insn 274(l0): point = 529
   Insn 273(l0): point = 531
   Insn 272(l0): point = 533
   Insn 271(l0): point = 535
   Insn 270(l0): point = 537
   Insn 269(l0): point = 539
   Insn 268(l0): point = 541
   Insn 267(l0): point = 543
   Insn 506(l0): point = 546
   Insn 157(l0): point = 548
   Insn 156(l0): point = 550
   Insn 155(l0): point = 552
   Insn 154(l0): point = 554
   Insn 153(l0): point = 556
   Insn 152(l0): point = 558
   Insn 151(l0): point = 560
   Insn 150(l0): point = 562
   Insn 149(l0): point = 564
   Insn 148(l0): point = 566
   Insn 508(l0): point = 569
   Insn 194(l0): point = 571
   Insn 193(l0): point = 573
   Insn 192(l0): point = 575
   Insn 191(l0): point = 577
   Insn 190(l0): point = 579
   Insn 189(l0): point = 581
   Insn 188(l0): point = 583
   Insn 187(l0): point = 585
   Insn 186(l0): point = 587
   Insn 185(l0): point = 589
   Insn 184(l0): point = 591
   Insn 183(l0): point = 593
   Insn 182(l0): point = 595
   Insn 181(l0): point = 597
   Insn 180(l0): point = 599
   Insn 178(l0): point = 602
   Insn 177(l0): point = 604
   Insn 516(l0): point = 607
   Insn 255(l0): point = 609
   Insn 254(l0): point = 611
   Insn 253(l0): point = 613
   Insn 252(l0): point = 615
   Insn 251(l0): point = 617
   Insn 250(l0): point = 619
   Insn 249(l0): point = 621
   Insn 248(l0): point = 623
   Insn 247(l0): point = 625
   Insn 246(l0): point = 627
   Insn 245(l0): point = 629
   Insn 244(l0): point = 631
   Insn 243(l0): point = 633
   Insn 242(l0): point = 635
   Insn 241(l0): point = 637
   Insn 231(l0): point = 640
   Insn 230(l0): point = 642
   Insn 229(l0): point = 644
   Insn 228(l0): point = 646
   Insn 227(l0): point = 648
   Insn 226(l0): point = 650
   Insn 174(l0): point = 653
   Insn 173(l0): point = 655
   Insn 172(l0): point = 657
   Insn 171(l0): point = 659
   Insn 170(l0): point = 661
   Insn 169(l0): point = 663
   Insn 167(l0): point = 666
   Insn 166(l0): point = 668
   Insn 165(l0): point = 670
   Insn 164(l0): point = 672
   Insn 163(l0): point = 674
   Insn 162(l0): point = 676
   Insn 146(l0): point = 679
   Insn 145(l0): point = 681
   Insn 144(l0): point = 683
   Insn 143(l0): point = 685
   Insn 142(l0): point = 687
   Insn 141(l0): point = 689
   Insn 238(l0): point = 692
   Insn 237(l0): point = 694
   Insn 236(l0): point = 696
   Insn 235(l0): point = 698
   Insn 234(l0): point = 700
   Insn 233(l0): point = 702
   Insn 337(l0): point = 705
   Insn 336(l0): point = 707
   Insn 335(l0): point = 709
   Insn 334(l0): point = 711
   Insn 333(l0): point = 713
   Insn 332(l0): point = 715
   Insn 331(l0): point = 717
   Insn 330(l0): point = 719
   Insn 329(l0): point = 721
   Insn 328(l0): point = 723
   Insn 327(l0): point = 725
   Insn 326(l0): point = 727
   Insn 325(l0): point = 729
   Insn 324(l0): point = 731
   Insn 323(l0): point = 733
   Insn 322(l0): point = 735
   Insn 321(l0): point = 737
   Insn 319(l0): point = 740
   Insn 318(l0): point = 742
   Insn 316(l0): point = 744
   Insn 315(l0): point = 746
   Insn 314(l0): point = 748
   Insn 313(l0): point = 750
   Insn 310(l0): point = 753
   Insn 309(l0): point = 755
   Insn 308(l0): point = 757
   Insn 307(l0): point = 759
   Insn 306(l0): point = 761
   Insn 305(l0): point = 763
   Insn 304(l0): point = 765
   Insn 303(l0): point = 767
   Insn 302(l0): point = 769
   Insn 518(l0): point = 772
   Insn 298(l0): point = 774
   Insn 297(l0): point = 776
   Insn 502(l0): point = 779
   Insn 31(l0): point = 781
   Insn 30(l0): point = 783
   Insn 29(l0): point = 785
   Insn 28(l0): point = 787
   Insn 27(l0): point = 789
   Insn 26(l0): point = 791
   Insn 25(l0): point = 793
   Insn 24(l0): point = 795
   Insn 23(l0): point = 797
   Insn 22(l0): point = 799
   Insn 21(l0): point = 801
   Insn 20(l0): point = 803
   Insn 19(l0): point = 805
   Insn 18(l0): point = 807
   Insn 17(l0): point = 809
   Insn 16(l0): point = 811
   Insn 15(l0): point = 813
   Insn 14(l0): point = 815
   Insn 13(l0): point = 817
   Insn 12(l0): point = 819
   Insn 11(l0): point = 821
   Insn 10(l0): point = 823
   Insn 9(l0): point = 825
   Insn 8(l0): point = 827
   Insn 7(l0): point = 829
   Insn 4(l0): point = 831
   Insn 2(l0): point = 833
 a0(r179): [8..12] [3..4]
 a1(r263): [10..10]
 a2(r178): [13..14]
 a3(r260): [21..22]
 a4(r259): [25..26]
 a5(r258): [31..32]
 a6(r257): [37..38]
 a7(r256): [43..44]
 a8(r254): [52..57]
 a9(r255): [54..55]
 a10(r252): [67..74]
 a11(r253): [69..70]
 a12(r177): [73..76]
 a13(r176): [81..82]
 a14(r175): [88..89]
 a15(r174): [90..91]
 a16(r251): [94..95]
 a17(r173): [100..101]
 a18(r250): [108..109]
 a19(r249): [156..157]
 a20(r172): [117..120]
 a21(r171): [119..122]
 a22(r170): [123..124]
 a23(r169): [129..130]
 a24(r248): [137..138]
 a25(r168): [141..142]
 a26(r167): [143..144]
 a27(r166): [149..150]
 a28(r247): [165..166]
 a29(r165): [167..168]
 a30(r246): [175..176]
 a31(r164): [201..202]
 a32(r245): [207..208]
 a33(r163): [217..218]
 a34(r162): [219..220]
 a35(r244): [221..222]
 a36(r243): [221..224]
 a37(r161): [243..252]
 a38(r160): [245..254]
 a39(r159): [247..256]
 a40(r156): [251..266]
 a41(r158): [257..258]
 a42(r157): [259..260]
 a43(r242): [261..262]
 a44(r241): [261..264]
 a45(r155): [230..231]
 a46(r154): [232..233]
 a47(r240): [234..235]
 a48(r239): [234..237]
 a49(r153): [274..275]
 a50(r152): [276..277]
 a51(r238): [278..279]
 a52(r237): [278..281]
 a53(r151): [708..717]
 a54(r150): [710..719]
 a55(r149): [712..721]
 a56(r147): [716..731]
 a57(r148): [722..723]
 a58(r236): [728..729]
 a59(r234): [734..735]
 a60(r235): [736..737]
 a61(r146): [743..744]
 a62(r145): [745..746]
 a63(r233): [747..748]
 a64(r232): [747..750]
 a65(r230): [758..759]
 a66(r144): [758..763]
 a67(r231): [760..761]
 a68(r143): [764..765]
 a69(r229): [766..767]
 a70(r228): [766..769]
 a71(r142): [287..288]
 a72(r227): [293..296]
 a73(r141): [295..298]
 a74(r140): [299..300]
 a75(r139): [301..302]
 a76(r226): [303..304]
 a77(r225): [303..306]
 a78(r138): [520..529]
 a79(r137): [522..531]
 a80(r136): [524..533]
 a81(r133): [528..543]
 a82(r135): [534..535]
 a83(r134): [536..537]
 a84(r224): [538..539]
 a85(r223): [538..541]
 a86(r132): [505..506]
 a87(r131): [507..508]
 a88(r222): [509..510]
 a89(r221): [509..512]
 a90(r130): [614..623]
 a91(r129): [616..625]
 a92(r128): [618..627]
 a93(r125): [622..637]
 a94(r127): [628..629]
 a95(r126): [630..631]
 a96(r220): [632..633]
 a97(r219): [632..635]
 a98(r124): [695..696]
 a99(r123): [697..698]
 a100(r218): [699..700]
 a101(r217): [699..702]
 a102(r122): [643..644]
 a103(r121): [645..646]
 a104(r216): [647..648]
 a105(r215): [647..650]
 a106(r120): [492..493]
 a107(r119): [494..495]
 a108(r214): [496..497]
 a109(r213): [496..499]
 a110(r118): [576..585]
 a111(r117): [578..587]
 a112(r116): [580..589]
 a113(r113): [584..599]
 a114(r115): [590..591]
 a115(r114): [592..593]
 a116(r212): [594..595]
 a117(r211): [594..597]
 a118(r112): [656..657]
 a119(r111): [658..659]
 a120(r210): [660..661]
 a121(r209): [660..663]
 a122(r110): [669..670]
 a123(r109): [671..672]
 a124(r208): [673..674]
 a125(r207): [673..676]
 a126(r108): [553..562]
 a127(r107): [555..564]
 a128(r106): [561..566]
 a129(r105): [682..683]
 a130(r104): [684..685]
 a131(r206): [686..687]
 a132(r205): [686..689]
 a133(r103): [312..313]
 a134(r204): [318..321]
 a135(r102): [320..323]
 a136(r101): [324..325]
 a137(r100): [326..327]
 a138(r203): [328..329]
 a139(r202): [328..331]
 a140(r201): [354..355]
 a141(r99): [358..359]
 a142(r200): [364..365]
 a143(r98): [371..372]
 a144(r97): [373..374]
 a145(r199): [375..376]
 a146(r198): [375..378]
 a147(r96): [459..460]
 a148(r95): [461..462]
 a149(r197): [463..464]
 a150(r196): [463..466]
 a151(r94): [384..385]
 a152(r93): [386..387]
 a153(r195): [388..389]
 a154(r194): [388..391]
 a155(r193): [404..405]
 a156(r92): [408..409]
 a157(r91): [414..415]
 a158(r90): [420..425]
 a159(r192): [422..423]
 a160(r189): [448..449]
 a161(r190): [450..453]
 a162(r191): [450..451]
 a163(r188): [433..434]
 a164(r89): [439..440]
 a165(r187): [441..442]
 a166(r186): [441..444]
 a167(r88): [337..338]
 a168(r87): [339..340]
 a169(r185): [341..342]
 a170(r184): [341..344]
 a171(r86): [188..189]
 a172(r85): [190..191]
 a173(r183): [192..193]
 a174(r182): [192..195]
 a175(r84): [786..787]
 a176(r83): [794..795]
 a177(r82): [802..803]
 a178(r181): [824..825]
 a179(r180): [828..829]
 a180(r262): [831..831]
Compressing live ranges: from 836 to 264 - 31%
Ranges after the compression:
 a0(r179): [0..4]
 a1(r263): [3..3]
 a2(r178): [5..6]
 a3(r260): [7..8]
 a4(r259): [9..10]
 a5(r258): [11..12]
 a6(r257): [13..14]
 a7(r256): [15..16]
 a8(r254): [17..18]
 a9(r255): [17..18]
 a10(r252): [19..22]
 a11(r253): [19..20]
 a12(r177): [21..22]
 a13(r176): [23..24]
 a14(r175): [25..26]
 a15(r174): [27..28]
 a16(r251): [29..30]
 a17(r173): [31..32]
 a18(r250): [33..34]
 a19(r249): [49..50]
 a20(r172): [35..36]
 a21(r171): [35..36]
 a22(r170): [37..38]
 a23(r169): [39..40]
 a24(r248): [41..42]
 a25(r168): [43..44]
 a26(r167): [45..46]
 a27(r166): [47..48]
 a28(r247): [51..52]
 a29(r165): [53..54]
 a30(r246): [55..56]
 a31(r164): [63..64]
 a32(r245): [65..66]
 a33(r163): [67..68]
 a34(r162): [69..70]
 a35(r244): [71..72]
 a36(r243): [71..72]
 a37(r161): [79..80]
 a38(r160): [79..80]
 a39(r159): [79..80]
 a40(r156): [79..86]
 a41(r158): [81..82]
 a42(r157): [83..84]
 a43(r242): [85..86]
 a44(r241): [85..86]
 a45(r155): [73..74]
 a46(r154): [75..76]
 a47(r240): [77..78]
 a48(r239): [77..78]
 a49(r153): [87..88]
 a50(r152): [89..90]
 a51(r238): [91..92]
 a52(r237): [91..92]
 a53(r151): [229..230]
 a54(r150): [229..230]
 a55(r149): [229..230]
 a56(r147): [229..234]
 a57(r148): [231..232]
 a58(r236): [233..234]
 a59(r234): [235..236]
 a60(r235): [237..238]
 a61(r146): [239..240]
 a62(r145): [241..242]
 a63(r233): [243..244]
 a64(r232): [243..244]
 a65(r230): [245..246]
 a66(r144): [245..248]
 a67(r231): [247..248]
 a68(r143): [249..250]
 a69(r229): [251..252]
 a70(r228): [251..252]
 a71(r142): [93..94]
 a72(r227): [95..96]
 a73(r141): [95..96]
 a74(r140): [97..98]
 a75(r139): [99..100]
 a76(r226): [101..102]
 a77(r225): [101..102]
 a78(r138): [173..174]
 a79(r137): [173..174]
 a80(r136): [173..174]
 a81(r133): [173..180]
 a82(r135): [175..176]
 a83(r134): [177..178]
 a84(r224): [179..180]
 a85(r223): [179..180]
 a86(r132): [167..168]
 a87(r131): [169..170]
 a88(r222): [171..172]
 a89(r221): [171..172]
 a90(r130): [191..192]
 a91(r129): [191..192]
 a92(r128): [191..192]
 a93(r125): [191..198]
 a94(r127): [193..194]
 a95(r126): [195..196]
 a96(r220): [197..198]
 a97(r219): [197..198]
 a98(r124): [223..224]
 a99(r123): [225..226]
 a100(r218): [227..228]
 a101(r217): [227..228]
 a102(r122): [199..200]
 a103(r121): [201..202]
 a104(r216): [203..204]
 a105(r215): [203..204]
 a106(r120): [161..162]
 a107(r119): [163..164]
 a108(r214): [165..166]
 a109(r213): [165..166]
 a110(r118): [183..184]
 a111(r117): [183..184]
 a112(r116): [183..184]
 a113(r113): [183..190]
 a114(r115): [185..186]
 a115(r114): [187..188]
 a116(r212): [189..190]
 a117(r211): [189..190]
 a118(r112): [205..206]
 a119(r111): [207..208]
 a120(r210): [209..210]
 a121(r209): [209..210]
 a122(r110): [211..212]
 a123(r109): [213..214]
 a124(r208): [215..216]
 a125(r207): [215..216]
 a126(r108): [181..182]
 a127(r107): [181..182]
 a128(r106): [181..182]
 a129(r105): [217..218]
 a130(r104): [219..220]
 a131(r206): [221..222]
 a132(r205): [221..222]
 a133(r103): [103..104]
 a134(r204): [105..106]
 a135(r102): [105..106]
 a136(r101): [107..108]
 a137(r100): [109..110]
 a138(r203): [111..112]
 a139(r202): [111..112]
 a140(r201): [119..120]
 a141(r99): [121..122]
 a142(r200): [123..124]
 a143(r98): [125..126]
 a144(r97): [127..128]
 a145(r199): [129..130]
 a146(r198): [129..130]
 a147(r96): [155..156]
 a148(r95): [157..158]
 a149(r197): [159..160]
 a150(r196): [159..160]
 a151(r94): [131..132]
 a152(r93): [133..134]
 a153(r195): [135..136]
 a154(r194): [135..136]
 a155(r193): [137..138]
 a156(r92): [139..140]
 a157(r91): [141..142]
 a158(r90): [143..144]
 a159(r192): [143..144]
 a160(r189): [151..152]
 a161(r190): [153..154]
 a162(r191): [153..154]
 a163(r188): [145..146]
 a164(r89): [147..148]
 a165(r187): [149..150]
 a166(r186): [149..150]
 a167(r88): [113..114]
 a168(r87): [115..116]
 a169(r185): [117..118]
 a170(r184): [117..118]
 a171(r86): [57..58]
 a172(r85): [59..60]
 a173(r183): [61..62]
 a174(r182): [61..62]
 a175(r84): [253..254]
 a176(r83): [255..256]
 a177(r82): [257..258]
 a178(r181): [259..260]
 a179(r180): [261..262]
 a180(r262): [263..263]
  pref0:a3(r260)<-hr5@1500
  pref1:a4(r259)<-hr20@2000
  pref2:a5(r258)<-hr5@1500
  pref3:a6(r257)<-hr5@1500
  pref4:a7(r256)<-hr5@1500
  pref5:a9(r255)<-hr4@1500
  pref6:a8(r254)<-hr5@1500
  pref7:a11(r253)<-hr4@1500
  pref8:a10(r252)<-hr5@1500
  pref9:a16(r251)<-hr20@2000
  pref10:a18(r250)<-hr5@1500
  pref11:a24(r248)<-hr5@1500
  pref12:a30(r246)<-hr5@1500
  pref13:a32(r245)<-hr5@1500
  pref14:a58(r236)<-hr5@1500
  pref15:a72(r227)<-hr5@1500
  pref16:a134(r204)<-hr5@1500
  pref17:a140(r201)<-hr5@1500
  pref18:a142(r200)<-hr5@1500
  pref19:a155(r193)<-hr5@1500
  pref20:a159(r192)<-hr20@2000
  pref21:a163(r188)<-hr20@2000
  pref22:a178(r181)<-hr5@1500
  pref23:a179(r180)<-hr4@1500
  pref24:a0(r179)<-hr20@1538
  pref25:a12(r177)<-hr20@2153
  pref26:a13(r176)<-hr5@1500
  pref27:a17(r173)<-hr5@1500
  pref28:a20(r172)<-hr5@1500
  pref29:a21(r171)<-hr4@1500
  pref30:a22(r170)<-hr0@1500
  pref31:a23(r169)<-hr5@1500
  pref32:a25(r168)<-hr4@1500
  pref33:a26(r167)<-hr0@1500
  pref34:a27(r166)<-hr5@1500
  pref35:a31(r164)<-hr0@1500
  pref36:a37(r161)<-hr5@1500
  pref37:a38(r160)<-hr4@1500
  pref38:a39(r159)<-hr1@1500
  pref39:a53(r151)<-hr5@1500
  pref40:a54(r150)<-hr4@1500
  pref41:a55(r149)<-hr1@1500
  pref42:a57(r148)<-hr0@1500
  pref43:a71(r142)<-hr0@1500
  pref44:a73(r141)<-hr4@1500
  pref45:a78(r138)<-hr5@1500
  pref46:a79(r137)<-hr4@1500
  pref47:a80(r136)<-hr1@1500
  pref48:a90(r130)<-hr5@1500
  pref49:a91(r129)<-hr4@1500
  pref50:a92(r128)<-hr1@1500
  pref51:a110(r118)<-hr5@1500
  pref52:a111(r117)<-hr4@1500
  pref53:a112(r116)<-hr1@1500
  pref54:a126(r108)<-hr5@1500
  pref55:a127(r107)<-hr4@1500
  pref56:a133(r103)<-hr0@1500
  pref57:a135(r102)<-hr4@1500
  pref58:a141(r99)<-hr0@1500
  pref59:a156(r92)<-hr20@2153
  pref60:a157(r91)<-hr5@1500
  pref61:a158(r90)<-hr5@1500
  pref62:a164(r89)<-hr5@1500
  pref63:a175(r84)<-hr0@1500
  pref64:a176(r83)<-hr0@1500
  pref65:a177(r82)<-hr0@1500
  regions=1, blocks=52, points=264
    allocnos=181 (big 0), copies=0, conflicts=0, ranges=181
Disposition:
  177:r82  l0     0  176:r83  l0     0  175:r84  l0     0  172:r85  l0     0
  171:r86  l0     0  168:r87  l0     0  167:r88  l0     0  164:r89  l0     0
  158:r90  l0     0  157:r91  l0     0  156:r92  l0     0  152:r93  l0     0
  151:r94  l0     0  148:r95  l0     0  147:r96  l0     0  144:r97  l0     0
  143:r98  l0     0  141:r99  l0     0  137:r100 l0     0  136:r101 l0     0
  135:r102 l0     1  133:r103 l0     0  130:r104 l0     0  129:r105 l0     0
  128:r106 l0     1  127:r107 l0     4  126:r108 l0     0  123:r109 l0     0
  122:r110 l0     0  119:r111 l0     0  118:r112 l0     0  113:r113 l0     2
  115:r114 l0     0  114:r115 l0     0  112:r116 l0     1  111:r117 l0     4
  110:r118 l0     0  107:r119 l0     0  106:r120 l0     0  103:r121 l0     0
  102:r122 l0     0   99:r123 l0     0   98:r124 l0     0   93:r125 l0     2
   95:r126 l0     0   94:r127 l0     0   92:r128 l0     1   91:r129 l0     4
   90:r130 l0     0   87:r131 l0     0   86:r132 l0     0   81:r133 l0     2
   83:r134 l0     0   82:r135 l0     0   80:r136 l0     1   79:r137 l0     4
   78:r138 l0     0   75:r139 l0     0   74:r140 l0     0   73:r141 l0     1
   71:r142 l0     0   68:r143 l0     0   66:r144 l0     1   62:r145 l0     0
   61:r146 l0     0   56:r147 l0     3   57:r148 l0     0   55:r149 l0     1
   54:r150 l0     4   53:r151 l0     0   50:r152 l0     0   49:r153 l0     0
   46:r154 l0     0   45:r155 l0     0   40:r156 l0     2   42:r157 l0     0
   41:r158 l0     0   39:r159 l0     1   38:r160 l0     4   37:r161 l0     0
   34:r162 l0     0   33:r163 l0     0   31:r164 l0     0   29:r165 l0     0
   27:r166 l0     0   26:r167 l0     0   25:r168 l0     0   23:r169 l0     0
   22:r170 l0     0   21:r171 l0     1   20:r172 l0     0   17:r173 l0     0
   15:r174 l0     0   14:r175 l0     0   13:r176 l0     0   12:r177 l0     0
    2:r178 l0    20    0:r179 l0     0  179:r180 l0     0  178:r181 l0     0
  174:r182 l0     1  173:r183 l0     0  170:r184 l0     1  169:r185 l0     0
  166:r186 l0     1  165:r187 l0     0  163:r188 l0     0  160:r189 l0    20
  161:r190 l0    20  162:r191 l0    21  159:r192 l0     1  155:r193 l0     0
  154:r194 l0     1  153:r195 l0     0  150:r196 l0     1  149:r197 l0     0
  146:r198 l0     1  145:r199 l0     0  142:r200 l0     0  140:r201 l0     0
  139:r202 l0     1  138:r203 l0     0  134:r204 l0     0  132:r205 l0     1
  131:r206 l0     0  125:r207 l0     1  124:r208 l0     0  121:r209 l0     1
  120:r210 l0     0  117:r211 l0     1  116:r212 l0     0  109:r213 l0     1
  108:r214 l0     0  105:r215 l0     1  104:r216 l0     0  101:r217 l0     1
  100:r218 l0     0   97:r219 l0     1   96:r220 l0     0   89:r221 l0     1
   88:r222 l0     0   85:r223 l0     1   84:r224 l0     0   77:r225 l0     1
   76:r226 l0     0   72:r227 l0     0   70:r228 l0     1   69:r229 l0     0
   65:r230 l0     0   67:r231 l0     0   64:r232 l0     1   63:r233 l0     0
   59:r234 l0     0   60:r235 l0     0   58:r236 l0     0   52:r237 l0     1
   51:r238 l0     0   48:r239 l0     1   47:r240 l0     0   44:r241 l0     1
   43:r242 l0     0   36:r243 l0     1   35:r244 l0     0   32:r245 l0     0
   30:r246 l0     0   28:r247 l0     0   24:r248 l0     0   19:r249 l0     0
   18:r250 l0     0   16:r251 l0     0   10:r252 l0     1   11:r253 l0     0
    8:r254 l0     0    9:r255 l0     1    7:r256 l0     0    6:r257 l0     0
    5:r258 l0     0    4:r259 l0     0    3:r260 l0     0  180:r262 l0     0
    1:r263 l0     1
+++Costs: overall -54000, reg -54000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


not_main

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame] 20 [xmm0]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [xmm0] 36 [r8]
;;  ref usage 	r0={48d,22u} r1={42d,6u} r2={42d,6u} r4={50d,14u} r5={67d,32u} r6={1d,51u} r7={1d,86u} r8={35d} r9={35d} r10={35d} r11={35d} r12={35d} r13={35d} r14={35d} r15={35d} r16={1d,50u} r17={100d,25u} r18={35d} r19={1d,190u,48e} r20={41d,10u} r21={36d} r22={36d} r23={36d} r24={36d} r25={36d} r26={36d} r27={36d} r28={35d} r29={35d} r30={35d} r31={35d} r32={35d} r33={35d} r34={35d} r35={35d} r36={42d,6u} r37={36d} r38={35d} r39={35d} r44={35d} r45={35d} r46={35d} r47={35d} r48={35d} r49={35d} r50={35d} r51={35d} r52={35d} r53={35d} r54={35d} r55={35d} r56={35d} r57={35d} r58={35d} r59={35d} r60={35d} r61={35d} r62={35d} r63={35d} r64={35d} r65={35d} r66={35d} r67={35d} r68={35d} r69={35d} r70={35d} r71={35d} r72={35d} r73={35d} r74={35d} r75={35d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={1d,1u} r180={1d,1u} r181={1d,1u} r182={1d,1u} r183={1d,1u} r184={1d,1u} r185={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,1u} r189={1d,1u} r190={1d,1u,1e} r191={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,1u} r198={1d,1u} r199={1d,1u} r200={1d,1u} r201={1d,1u} r202={1d,1u} r203={1d,1u} r204={1d,1u} r205={1d,1u} r206={1d,1u} r207={1d,1u} r208={1d,1u} r209={1d,1u} r210={1d,1u} r211={1d,1u} r212={1d,1u} r213={1d,1u} r214={1d,1u} r215={1d,1u} r216={1d,1u} r217={1d,1u} r218={1d,1u} r219={1d,1u} r220={1d,1u} r221={1d,1u} r222={1d,1u} r223={1d,1u} r224={1d,1u} r225={1d,1u} r226={1d,1u} r227={1d,1u} r228={1d,1u} r229={1d,1u} r230={1d,1u} r231={1d,1u} r232={1d,1u} r233={1d,1u} r234={1d,1u} r235={1d,1u} r236={1d,1u} r237={1d,1u} r238={1d,1u} r239={1d,1u} r240={1d,1u} r241={1d,1u} r242={1d,1u} r243={1d,1u} r244={1d,1u} r245={1d,1u} r246={1d,1u} r247={1d,1u} r248={1d,1u} r249={1d,1u} r250={1d,1u} r251={1d,1u} r252={1d,1u} r253={1d,1u} r254={1d,1u} r255={1d,1u} r256={1d,1u} r257={1d,1u} r258={1d,1u} r259={1d,1u} r260={1d,1u} r262={1d} r263={1d} 
;;    total ref usage 3416{2690d,677u,49e} in 393{358 regular + 35 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 84 180 181 262
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
        (reg:DI 5 di [ input ])) "calc.c":153:1 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ input ])
        (nil)))
(note 3 2 4 2 NOTE_INSN_FUNCTION_BEG)
(insn 4 3 7 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 19 frame)
                        (const_int -8 [0xfffffffffffffff8])) [8 D.4773+0 S8 A64])
                (unspec:DI [
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_SET))
            (set (reg:DI 262)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":153:1 1159 {stack_protect_set_1_di}
     (expr_list:REG_UNUSED (reg:DI 262)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 7 4 8 2 (set (reg:DI 180)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])) "calc.c":154:5 74 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:DI 4 si)
        (reg:DI 180)) "calc.c":154:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 180)
        (nil)))
(insn 9 8 10 2 (set (reg:DI 181)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f09f16f8990 *.LC10>)) "calc.c":154:5 74 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg:DI 181)) "calc.c":154:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 181)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7f09f16f8990 *.LC10>)
            (nil))))
(insn 11 10 12 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "calc.c":154:5 77 {*movqi_internal}
     (nil))
(call_insn 12 11 13 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f09f183f100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "calc.c":154:5 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 13 12 14 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -311 [0xfffffffffffffec9])) [0 signs+0 S4 A8])
        (const_int 791293227 [0x2f2a2d2b])) "calc.c":156:10 75 {*movsi_internal}
     (nil))
(insn 14 13 15 2 (set (mem/c:HI (plus:DI (reg/f:DI 19 frame)
                (const_int -307 [0xfffffffffffffecd])) [0 signs+4 S2 A8])
        (const_int 27998 [0x6d5e])) "calc.c":156:10 76 {*movhi_internal}
     (nil))
(insn 15 14 16 2 (set (mem/c:QI (plus:DI (reg/f:DI 19 frame)
                (const_int -305 [0xfffffffffffffecf])) [0 signs+6 S1 A8])
        (const_int 0 [0])) "calc.c":156:10 77 {*movqi_internal}
     (nil))
(insn 16 15 17 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -317 [0xfffffffffffffec3])) [0 flfunc+0 S4 A8])
        (const_int 1953719137 [0x74736361])) "calc.c":157:10 75 {*movsi_internal}
     (nil))
(insn 17 16 18 2 (set (mem/c:HI (plus:DI (reg/f:DI 19 frame)
                (const_int -313 [0xfffffffffffffec7])) [0 flfunc+4 S2 A8])
        (const_int 108 [0x6c])) "calc.c":157:10 76 {*movhi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "calc.c":163:22 77 {*movqi_internal}
     (nil))
(call_insn 19 18 20 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("createStack") [flags 0x41]  <function_decl 0x7f09f164e500 createStack>) [0 createStack S1 A8])
            (const_int 0 [0]))) "calc.c":163:22 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (nil)))
(insn 20 19 21 2 (set (reg/f:DI 82 [ _1 ])
        (reg:DI 0 ax)) "calc.c":163:22 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 21 20 22 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -384 [0xfffffffffffffe80])) [4 stack+0 S8 A128])
        (reg/f:DI 82 [ _1 ])) "calc.c":163:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 82 [ _1 ])
        (nil)))
(insn 22 21 23 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "calc.c":164:28 77 {*movqi_internal}
     (nil))
(call_insn 23 22 24 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("createStack") [flags 0x41]  <function_decl 0x7f09f164e500 createStack>) [0 createStack S1 A8])
            (const_int 0 [0]))) "calc.c":164:28 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (nil)))
(insn 24 23 25 2 (set (reg/f:DI 83 [ _2 ])
        (reg:DI 0 ax)) "calc.c":164:28 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 25 24 26 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -376 [0xfffffffffffffe88])) [4 stack_prior+0 S8 A64])
        (reg/f:DI 83 [ _2 ])) "calc.c":164:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 83 [ _2 ])
        (nil)))
(insn 26 25 27 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "calc.c":165:29 77 {*movqi_internal}
     (nil))
(call_insn 27 26 28 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("createFStack") [flags 0x41]  <function_decl 0x7f09f164eb00 createFStack>) [0 createFStack S1 A8])
            (const_int 0 [0]))) "calc.c":165:29 824 {*call_value}
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (nil)))
(insn 28 27 29 2 (set (reg/f:DI 84 [ _3 ])
        (reg:DI 0 ax)) "calc.c":165:29 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 29 28 30 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -368 [0xfffffffffffffe90])) [3 stack_double+0 S8 A128])
        (reg/f:DI 84 [ _3 ])) "calc.c":165:14 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 84 [ _3 ])
        (nil)))
(insn 30 29 31 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -392 [0xfffffffffffffe78])) [5 last_sign+0 S4 A64])
        (const_int 3 [0x3])) "calc.c":166:9 75 {*movsi_internal}
     (nil))
(insn 31 30 502 2 (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])
        (const_int 0 [0])) "calc.c":168:17 74 {*movdi_internal}
     (nil))
(jump_insn 502 31 503 2 (set (pc)
        (label_ref 384)) "calc.c":168:5 807 {jump}
     (nil)
 -> 384)
;;  succ:       40 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 503 502 390)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       40
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 85 86 182 183
(code_label 390 503 34 3 74 (nil) [1 uses])
(note 34 390 35 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 3 (set (reg/f:DI 182)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])) "calc.c":170:18 74 {*movdi_internal}
     (nil))
(insn 36 35 37 3 (set (reg:DI 183)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])) "calc.c":170:18 74 {*movdi_internal}
     (nil))
(insn 37 36 38 3 (parallel [
            (set (reg/f:DI 85 [ _4 ])
                (plus:DI (reg/f:DI 182)
                    (reg:DI 183)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":170:18 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 183)
        (expr_list:REG_DEAD (reg/f:DI 182)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
                        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
                    (nil))))))
(insn 38 37 41 3 (set (reg:QI 86 [ _5 ])
        (mem:QI (reg/f:DI 85 [ _4 ]) [0 *_4+0 S1 A8])) "calc.c":170:18 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 85 [ _4 ])
        (nil)))
(insn 41 38 42 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:QI 86 [ _5 ])
            (const_int 47 [0x2f]))) "calc.c":170:12 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 86 [ _5 ])
        (nil)))
(jump_insn 42 41 43 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 126)
            (pc))) "calc.c":170:12 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 126)
;;  succ:       4 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 87 88 184 185
(note 43 42 44 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 4 (set (reg/f:DI 184)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])) "calc.c":170:37 74 {*movdi_internal}
     (nil))
(insn 45 44 46 4 (set (reg:DI 185)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])) "calc.c":170:37 74 {*movdi_internal}
     (nil))
(insn 46 45 47 4 (parallel [
            (set (reg/f:DI 87 [ _6 ])
                (plus:DI (reg/f:DI 184)
                    (reg:DI 185)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":170:37 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 185)
        (expr_list:REG_DEAD (reg/f:DI 184)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
                        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
                    (nil))))))
(insn 47 46 50 4 (set (reg:QI 88 [ _7 ])
        (mem:QI (reg/f:DI 87 [ _6 ]) [0 *_6+0 S1 A8])) "calc.c":170:37 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87 [ _6 ])
        (nil)))
(insn 50 47 51 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:QI 88 [ _7 ])
            (const_int 57 [0x39]))) "calc.c":170:29 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 88 [ _7 ])
        (nil)))
(jump_insn 51 50 52 4 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 126)
            (pc))) "calc.c":170:29 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 126)
;;  succ:       5 (FALLTHRU)
;;              13
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 89 186 187 188
(note 52 51 53 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 5 (set (reg/f:DI 186)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])) "calc.c":173:27 74 {*movdi_internal}
     (nil))
(insn 54 53 55 5 (set (reg:DI 187)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])) "calc.c":173:27 74 {*movdi_internal}
     (nil))
(insn 55 54 56 5 (parallel [
            (set (reg/f:DI 89 [ _8 ])
                (plus:DI (reg/f:DI 186)
                    (reg:DI 187)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":173:27 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 187)
        (expr_list:REG_DEAD (reg/f:DI 186)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
                        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
                    (nil))))))
(insn 56 55 57 5 (set (reg:DI 5 di)
        (reg/f:DI 89 [ _8 ])) "calc.c":173:22 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 89 [ _8 ])
        (nil)))
(call_insn/i 57 56 58 5 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":173:22 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 58 57 59 5 (set (reg:DF 188)
        (reg:DF 20 xmm0)) "calc.c":173:22 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 59 58 60 5 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -360 [0xfffffffffffffe98])) [2 values+0 S8 A64])
        (reg:DF 188)) "calc.c":173:22 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 188)
        (nil)))
(insn 60 59 61 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -392 [0xfffffffffffffe78])) [5 last_sign+0 S4 A64])
            (const_int 2 [0x2]))) "calc.c":174:16 11 {*cmpsi_1}
     (nil))
(jump_insn 61 60 62 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) "calc.c":174:16 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 67)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 189 190 191
(note 62 61 63 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 6 (set (reg:DF 190)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -360 [0xfffffffffffffe98])) [2 values+0 S8 A64])) "calc.c":174:37 135 {*movdf_internal}
     (nil))
(insn 64 63 65 6 (set (reg:V2DF 191)
        (mem/u/c:V2DF (symbol_ref/u:DI ("*.LC11") [flags 0x2]) [0  S16 A128])) "calc.c":174:37 1448 {movv2df_internal}
     (expr_list:REG_EQUAL (const_vector:V2DF [
                (const_double:DF -0.0 [-0x0.0p+0])
                (const_double:DF 0.0 [0x0.0p+0])
            ])
        (nil)))
(insn 65 64 66 6 (parallel [
            (set (reg:DF 189)
                (neg:DF (reg:DF 190)))
            (use (reg:V2DF 191))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":174:37 613 {*negdf2_1}
     (expr_list:REG_DEAD (reg:V2DF 191)
        (expr_list:REG_DEAD (reg:DF 190)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (neg:DF (reg:DF 190))
                    (nil))))))
(insn 66 65 67 6 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -360 [0xfffffffffffffe98])) [2 values+0 S8 A64])
        (reg:DF 189)) "calc.c":174:37 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 189)
        (nil)))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 90 91 92 192 193
(code_label 67 66 68 7 53 (nil) [1 uses])
(note 68 67 69 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 7 (set (reg/f:DI 90 [ stack_double.0_9 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -368 [0xfffffffffffffe90])) [3 stack_double+0 S8 A128])) "calc.c":175:13 74 {*movdi_internal}
     (nil))
(insn 70 69 71 7 (set (reg:DF 192)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -360 [0xfffffffffffffe98])) [2 values+0 S8 A64])) "calc.c":175:13 135 {*movdf_internal}
     (nil))
(insn 71 70 72 7 (set (reg:DF 20 xmm0)
        (reg:DF 192)) "calc.c":175:13 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 192)
        (nil)))
(insn 72 71 73 7 (set (reg:DI 5 di)
        (reg/f:DI 90 [ stack_double.0_9 ])) "calc.c":175:13 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 90 [ stack_double.0_9 ])
        (nil)))
(call_insn 73 72 74 7 (call (mem:QI (symbol_ref:DI ("Fpush") [flags 0x41]  <function_decl 0x7f09f164ed00 Fpush>) [0 Fpush S1 A8])
        (const_int 0 [0])) "calc.c":175:13 813 {*call}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DF (use (reg:DF 20 xmm0))
            (nil))))
(insn 74 73 75 7 (set (reg/f:DI 91 [ stack_double.1_10 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -368 [0xfffffffffffffe90])) [3 stack_double+0 S8 A128])) "calc.c":176:13 74 {*movdi_internal}
     (nil))
(insn 75 74 76 7 (set (reg:DI 5 di)
        (reg/f:DI 91 [ stack_double.1_10 ])) "calc.c":176:13 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 91 [ stack_double.1_10 ])
        (nil)))
(call_insn 76 75 77 7 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("Fpeek") [flags 0x41]  <function_decl 0x7f09f164ef00 Fpeek>) [0 Fpeek S1 A8])
            (const_int 0 [0]))) "calc.c":176:13 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 77 76 78 7 (set (reg:DF 92 [ _11 ])
        (reg:DF 20 xmm0)) "calc.c":176:13 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 78 77 79 7 (set (reg:DF 20 xmm0)
        (reg:DF 92 [ _11 ])) "calc.c":176:13 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 92 [ _11 ])
        (nil)))
(insn 79 78 80 7 (set (reg:DI 193)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7f09f16f8a20 *.LC12>)) "calc.c":176:13 74 {*movdi_internal}
     (nil))
(insn 80 79 81 7 (set (reg:DI 5 di)
        (reg:DI 193)) "calc.c":176:13 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 193)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7f09f16f8a20 *.LC12>)
            (nil))))
(insn 81 80 82 7 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) "calc.c":176:13 77 {*movqi_internal}
     (nil))
(call_insn 82 81 504 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f09f183f100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "calc.c":176:13 824 {*call_value}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DF (use (reg:DF 20 xmm0))
                (nil)))))
(jump_insn 504 82 505 7 (set (pc)
        (label_ref 87)) "calc.c":177:19 807 {jump}
     (nil)
 -> 87)
;;  succ:       9 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 505 504 102)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       10
;;              11
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 102 505 85 8 56 (nil) [2 uses])
(note 85 102 86 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 87 8 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                        (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])
                (plus:DI (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":178:18 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       9 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 (FALLTHRU,DFS_BACK)
;;              7 [always] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 93 94 194 195
(code_label 87 86 88 9 54 (nil) [1 uses])
(note 88 87 89 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 89 88 90 9 (set (reg/f:DI 194)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])) "calc.c":177:27 74 {*movdi_internal}
     (nil))
(insn 90 89 91 9 (set (reg:DI 195)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])) "calc.c":177:27 74 {*movdi_internal}
     (nil))
(insn 91 90 92 9 (parallel [
            (set (reg/f:DI 93 [ _12 ])
                (plus:DI (reg/f:DI 194)
                    (reg:DI 195)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":177:27 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 195)
        (expr_list:REG_DEAD (reg/f:DI 194)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
                        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
                    (nil))))))
(insn 92 91 95 9 (set (reg:QI 94 [ _13 ])
        (mem:QI (reg/f:DI 93 [ _12 ]) [0 *_12+0 S1 A8])) "calc.c":177:27 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 93 [ _12 ])
        (nil)))
(insn 95 92 96 9 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:QI 94 [ _13 ])
            (const_int 47 [0x2f]))) "calc.c":177:58 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 94 [ _13 ])
        (nil)))
(jump_insn 96 95 97 9 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 107)
            (pc))) "calc.c":177:58 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 107)
;;  succ:       10 (FALLTHRU)
;;              11
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 95 96 196 197
(note 97 96 98 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 98 97 99 10 (set (reg/f:DI 196)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])) "calc.c":177:46 74 {*movdi_internal}
     (nil))
(insn 99 98 100 10 (set (reg:DI 197)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])) "calc.c":177:46 74 {*movdi_internal}
     (nil))
(insn 100 99 101 10 (parallel [
            (set (reg/f:DI 95 [ _14 ])
                (plus:DI (reg/f:DI 196)
                    (reg:DI 197)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":177:46 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 197)
        (expr_list:REG_DEAD (reg/f:DI 196)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
                        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
                    (nil))))))
(insn 101 100 105 10 (set (reg:QI 96 [ _15 ])
        (mem:QI (reg/f:DI 95 [ _14 ]) [0 *_14+0 S1 A8])) "calc.c":177:46 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 95 [ _14 ])
        (nil)))
(insn 105 101 106 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:QI 96 [ _15 ])
            (const_int 57 [0x39]))) "calc.c":177:38 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 96 [ _15 ])
        (nil)))
(jump_insn 106 105 107 10 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 102)
            (pc))) "calc.c":177:38 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 102)
;;  succ:       8
;;              11 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       9
;;              10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 97 98 198 199
(code_label 107 106 108 11 55 (nil) [1 uses])
(note 108 107 109 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 109 108 110 11 (set (reg/f:DI 198)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])) "calc.c":177:66 74 {*movdi_internal}
     (nil))
(insn 110 109 111 11 (set (reg:DI 199)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])) "calc.c":177:66 74 {*movdi_internal}
     (nil))
(insn 111 110 112 11 (parallel [
            (set (reg/f:DI 97 [ _16 ])
                (plus:DI (reg/f:DI 198)
                    (reg:DI 199)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":177:66 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 199)
        (expr_list:REG_DEAD (reg/f:DI 198)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
                        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
                    (nil))))))
(insn 112 111 113 11 (set (reg:QI 98 [ _17 ])
        (mem:QI (reg/f:DI 97 [ _16 ]) [0 *_16+0 S1 A8])) "calc.c":177:66 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 97 [ _16 ])
        (nil)))
(insn 113 112 114 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 98 [ _17 ])
            (const_int 46 [0x2e]))) "calc.c":177:58 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 98 [ _17 ])
        (nil)))
(jump_insn 114 113 115 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 102)
            (pc))) "calc.c":177:58 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 102)
;;  succ:       8
;;              12 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 99 200 201
(note 115 114 116 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 116 115 117 12 (parallel [
            (set (reg:DI 200)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -304 [0xfffffffffffffed0])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":179:13 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 117 116 118 12 (set (reg:DI 5 di)
        (reg:DI 200)) "calc.c":179:13 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 200)
        (nil)))
(call_insn/i 118 117 119 12 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x7f09f1838700 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) "calc.c":179:13 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 119 118 120 12 (set (reg:DI 99 [ _18 ])
        (reg:DI 0 ax)) "calc.c":179:13 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 120 119 121 12 (set (reg:DI 4 si)
        (reg:DI 99 [ _18 ])) "calc.c":179:13 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 99 [ _18 ])
        (nil)))
(insn 121 120 122 12 (set (reg:DI 201)
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f09f16f8ab0 *.LC13>)) "calc.c":179:13 74 {*movdi_internal}
     (nil))
(insn 122 121 123 12 (set (reg:DI 5 di)
        (reg:DI 201)) "calc.c":179:13 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 201)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7f09f16f8ab0 *.LC13>)
            (nil))))
(insn 123 122 124 12 (set (reg:QI 0 ax)
        (const_int 0 [0])) "calc.c":179:13 77 {*movqi_internal}
     (nil))
(call_insn 124 123 125 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f09f183f100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "calc.c":179:13 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 125 124 126 12 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -392 [0xfffffffffffffe78])) [5 last_sign+0 S4 A64])
        (const_int 0 [0])) "calc.c":180:22 75 {*movsi_internal}
     (nil))
;;  succ:       13 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       3
;;              4
;;              12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 100 101 102 103 202 203 204
(code_label 126 125 127 13 52 (nil) [2 uses])
(note 127 126 128 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 128 127 129 13 (set (reg/f:DI 202)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])) "calc.c":182:32 74 {*movdi_internal}
     (nil))
(insn 129 128 130 13 (set (reg:DI 203)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])) "calc.c":182:32 74 {*movdi_internal}
     (nil))
(insn 130 129 131 13 (parallel [
            (set (reg/f:DI 100 [ _19 ])
                (plus:DI (reg/f:DI 202)
                    (reg:DI 203)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":182:32 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 203)
        (expr_list:REG_DEAD (reg/f:DI 202)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
                        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
                    (nil))))))
(insn 131 130 132 13 (set (reg:QI 101 [ _20 ])
        (mem:QI (reg/f:DI 100 [ _19 ]) [0 *_19+0 S1 A8])) "calc.c":182:32 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 100 [ _19 ])
        (nil)))
(insn 132 131 133 13 (set (reg:SI 102 [ _21 ])
        (sign_extend:SI (reg:QI 101 [ _20 ]))) "calc.c":182:13 153 {extendqisi2}
     (expr_list:REG_DEAD (reg:QI 101 [ _20 ])
        (nil)))
(insn 133 132 134 13 (parallel [
            (set (reg:DI 204)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -311 [0xfffffffffffffec9])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":182:13 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 134 133 135 13 (set (reg:SI 4 si)
        (reg:SI 102 [ _21 ])) "calc.c":182:13 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 102 [ _21 ])
        (nil)))
(insn 135 134 136 13 (set (reg:DI 5 di)
        (reg:DI 204)) "calc.c":182:13 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 204)
        (nil)))
(call_insn/i 136 135 137 13 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strchr") [flags 0x41]  <function_decl 0x7f09f1835b00 strchr>) [0 __builtin_strchr S1 A8])
            (const_int 0 [0]))) "calc.c":182:13 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 137 136 138 13 (set (reg/f:DI 103 [ _22 ])
        (reg:DI 0 ax)) "calc.c":182:13 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 138 137 139 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 103 [ _22 ])
            (const_int 0 [0]))) "calc.c":182:12 8 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 103 [ _22 ])
        (nil)))
(jump_insn 139 138 140 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 282)
            (pc))) "calc.c":182:12 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 282)
;;  succ:       14 (FALLTHRU)
;;              30
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 104 105 205 206
(note 140 139 141 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 141 140 142 14 (set (reg/f:DI 205)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])) "calc.c":184:22 74 {*movdi_internal}
     (nil))
(insn 142 141 143 14 (set (reg:DI 206)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])) "calc.c":184:22 74 {*movdi_internal}
     (nil))
(insn 143 142 144 14 (parallel [
            (set (reg/f:DI 104 [ _23 ])
                (plus:DI (reg/f:DI 205)
                    (reg:DI 206)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":184:22 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 206)
        (expr_list:REG_DEAD (reg/f:DI 205)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
                        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
                    (nil))))))
(insn 144 143 145 14 (set (reg:QI 105 [ _24 ])
        (mem:QI (reg/f:DI 104 [ _23 ]) [0 *_23+0 S1 A8])) "calc.c":184:22 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 104 [ _23 ])
        (nil)))
(insn 145 144 146 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 105 [ _24 ])
            (const_int 109 [0x6d]))) "calc.c":184:16 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 105 [ _24 ])
        (nil)))
(jump_insn 146 145 147 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 160)
            (pc))) "calc.c":184:16 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 160)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 106 107 108
(note 147 146 148 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 148 147 149 15 (set (reg/f:DI 106 [ stack_double.2_25 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -368 [0xfffffffffffffe90])) [3 stack_double+0 S8 A128])) "calc.c":186:17 74 {*movdi_internal}
     (nil))
(insn 149 148 150 15 (set (reg/f:DI 107 [ stack_prior.3_26 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -376 [0xfffffffffffffe88])) [4 stack_prior+0 S8 A64])) "calc.c":186:17 74 {*movdi_internal}
     (nil))
(insn 150 149 151 15 (set (reg/f:DI 108 [ stack.4_27 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -384 [0xfffffffffffffe80])) [4 stack+0 S8 A128])) "calc.c":186:17 74 {*movdi_internal}
     (nil))
(insn 151 150 152 15 (set (reg:DI 36 r8)
        (reg/f:DI 106 [ stack_double.2_25 ])) "calc.c":186:17 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 106 [ stack_double.2_25 ])
        (nil)))
(insn 152 151 153 15 (set (reg:SI 2 cx)
        (const_int 2 [0x2])) "calc.c":186:17 75 {*movsi_internal}
     (nil))
(insn 153 152 154 15 (set (reg:SI 1 dx)
        (const_int 37 [0x25])) "calc.c":186:17 75 {*movsi_internal}
     (nil))
(insn 154 153 155 15 (set (reg:DI 4 si)
        (reg/f:DI 107 [ stack_prior.3_26 ])) "calc.c":186:17 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 107 [ stack_prior.3_26 ])
        (nil)))
(insn 155 154 156 15 (set (reg:DI 5 di)
        (reg/f:DI 108 [ stack.4_27 ])) "calc.c":186:17 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 108 [ stack.4_27 ])
        (nil)))
(call_insn 156 155 157 15 (call (mem:QI (symbol_ref:DI ("push_func") [flags 0x3]  <function_decl 0x7f09f1657a00 push_func>) [0 push_func S1 A8])
        (const_int 0 [0])) "calc.c":186:17 813 {*call}
     (expr_list:REG_DEAD (reg:DI 36 r8)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:DI 4 si)
                (expr_list:REG_DEAD (reg:SI 2 cx)
                    (expr_list:REG_DEAD (reg:SI 1 dx)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (nil)))))))
(insn 157 156 506 15 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -392 [0xfffffffffffffe78])) [5 last_sign+0 S4 A64])
        (const_int 3 [0x3])) "calc.c":187:26 75 {*movsi_internal}
     (nil))
(jump_insn 506 157 507 15 (set (pc)
        (label_ref 282)) 807 {jump}
     (nil)
 -> 282)
;;  succ:       30 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 507 506 160)
;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL)
;;  pred:       14
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 109 110 207 208
(code_label 160 507 161 16 58 (nil) [1 uses])
(note 161 160 162 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 162 161 163 16 (set (reg/f:DI 207)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])) "calc.c":189:27 74 {*movdi_internal}
     (nil))
(insn 163 162 164 16 (set (reg:DI 208)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])) "calc.c":189:27 74 {*movdi_internal}
     (nil))
(insn 164 163 165 16 (parallel [
            (set (reg/f:DI 109 [ _28 ])
                (plus:DI (reg/f:DI 207)
                    (reg:DI 208)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":189:27 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 208)
        (expr_list:REG_DEAD (reg/f:DI 207)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
                        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
                    (nil))))))
(insn 165 164 166 16 (set (reg:QI 110 [ _29 ])
        (mem:QI (reg/f:DI 109 [ _28 ]) [0 *_28+0 S1 A8])) "calc.c":189:27 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 109 [ _28 ])
        (nil)))
(insn 166 165 167 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 110 [ _29 ])
            (const_int 43 [0x2b]))) "calc.c":189:21 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 110 [ _29 ])
        (nil)))
(jump_insn 167 166 168 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 175)
            (pc))) "calc.c":189:21 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 175)
;;  succ:       18
;;              17 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 111 112 209 210
(note 168 167 169 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 169 168 170 17 (set (reg/f:DI 209)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])) "calc.c":189:46 74 {*movdi_internal}
     (nil))
(insn 170 169 171 17 (set (reg:DI 210)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])) "calc.c":189:46 74 {*movdi_internal}
     (nil))
(insn 171 170 172 17 (parallel [
            (set (reg/f:DI 111 [ _30 ])
                (plus:DI (reg/f:DI 209)
                    (reg:DI 210)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":189:46 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 210)
        (expr_list:REG_DEAD (reg/f:DI 209)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
                        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
                    (nil))))))
(insn 172 171 173 17 (set (reg:QI 112 [ _31 ])
        (mem:QI (reg/f:DI 111 [ _30 ]) [0 *_30+0 S1 A8])) "calc.c":189:46 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 111 [ _30 ])
        (nil)))
(insn 173 172 174 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 112 [ _31 ])
            (const_int 45 [0x2d]))) "calc.c":189:38 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 112 [ _31 ])
        (nil)))
(jump_insn 174 173 175 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 224)
            (pc))) "calc.c":189:38 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 224)
;;  succ:       18 (FALLTHRU)
;;              25
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL)
;;  pred:       16
;;              17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 175 174 176 18 59 (nil) [1 uses])
(note 176 175 177 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 177 176 178 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -392 [0xfffffffffffffe78])) [5 last_sign+0 S4 A64])
            (const_int 0 [0]))) "calc.c":190:20 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 178 177 179 18 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 197)
            (pc))) "calc.c":190:20 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 197)
;;  succ:       19 (FALLTHRU)
;;              20
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 113 114 115 116 117 118 211 212
(note 179 178 180 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 180 179 181 19 (set (reg/f:DI 113 [ stack_double.5_32 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -368 [0xfffffffffffffe90])) [3 stack_double+0 S8 A128])) "calc.c":190:37 74 {*movdi_internal}
     (nil))
(insn 181 180 182 19 (set (reg/f:DI 211)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])) "calc.c":190:72 74 {*movdi_internal}
     (nil))
(insn 182 181 183 19 (set (reg:DI 212)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])) "calc.c":190:72 74 {*movdi_internal}
     (nil))
(insn 183 182 184 19 (parallel [
            (set (reg/f:DI 114 [ _33 ])
                (plus:DI (reg/f:DI 211)
                    (reg:DI 212)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":190:72 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 212)
        (expr_list:REG_DEAD (reg/f:DI 211)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
                        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
                    (nil))))))
(insn 184 183 185 19 (set (reg:QI 115 [ _34 ])
        (mem:QI (reg/f:DI 114 [ _33 ]) [0 *_33+0 S1 A8])) "calc.c":190:72 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 114 [ _33 ])
        (nil)))
(insn 185 184 186 19 (set (reg:SI 116 [ _35 ])
        (sign_extend:SI (reg:QI 115 [ _34 ]))) "calc.c":190:37 153 {extendqisi2}
     (expr_list:REG_DEAD (reg:QI 115 [ _34 ])
        (nil)))
(insn 186 185 187 19 (set (reg/f:DI 117 [ stack_prior.6_36 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -376 [0xfffffffffffffe88])) [4 stack_prior+0 S8 A64])) "calc.c":190:37 74 {*movdi_internal}
     (nil))
(insn 187 186 188 19 (set (reg/f:DI 118 [ stack.7_37 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -384 [0xfffffffffffffe80])) [4 stack+0 S8 A128])) "calc.c":190:37 74 {*movdi_internal}
     (nil))
(insn 188 187 189 19 (set (reg:DI 36 r8)
        (reg/f:DI 113 [ stack_double.5_32 ])) "calc.c":190:37 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 113 [ stack_double.5_32 ])
        (nil)))
(insn 189 188 190 19 (set (reg:SI 2 cx)
        (const_int 1 [0x1])) "calc.c":190:37 75 {*movsi_internal}
     (nil))
(insn 190 189 191 19 (set (reg:SI 1 dx)
        (reg:SI 116 [ _35 ])) "calc.c":190:37 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 116 [ _35 ])
        (nil)))
(insn 191 190 192 19 (set (reg:DI 4 si)
        (reg/f:DI 117 [ stack_prior.6_36 ])) "calc.c":190:37 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 117 [ stack_prior.6_36 ])
        (nil)))
(insn 192 191 193 19 (set (reg:DI 5 di)
        (reg/f:DI 118 [ stack.7_37 ])) "calc.c":190:37 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 118 [ stack.7_37 ])
        (nil)))
(call_insn 193 192 194 19 (call (mem:QI (symbol_ref:DI ("push_func") [flags 0x3]  <function_decl 0x7f09f1657a00 push_func>) [0 push_func S1 A8])
        (const_int 0 [0])) "calc.c":190:37 813 {*call}
     (expr_list:REG_DEAD (reg:DI 36 r8)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:DI 4 si)
                (expr_list:REG_DEAD (reg:SI 2 cx)
                    (expr_list:REG_DEAD (reg:SI 1 dx)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (nil)))))))
(insn 194 193 508 19 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -392 [0xfffffffffffffe78])) [5 last_sign+0 S4 A64])
        (const_int 3 [0x3])) "calc.c":190:103 75 {*movsi_internal}
     (nil))
(jump_insn 508 194 509 19 (set (pc)
        (label_ref 282)) "calc.c":190:20 807 {jump}
     (nil)
 -> 282)
;;  succ:       30 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 509 508 197)
;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL)
;;  pred:       18
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 119 120 213 214
(code_label 197 509 198 20 61 (nil) [1 uses])
(note 198 197 199 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 199 198 200 20 (set (reg/f:DI 213)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])) "calc.c":191:30 74 {*movdi_internal}
     (nil))
(insn 200 199 201 20 (set (reg:DI 214)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])) "calc.c":191:30 74 {*movdi_internal}
     (nil))
(insn 201 200 202 20 (parallel [
            (set (reg/f:DI 119 [ _38 ])
                (plus:DI (reg/f:DI 213)
                    (reg:DI 214)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":191:30 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 214)
        (expr_list:REG_DEAD (reg/f:DI 213)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
                        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
                    (nil))))))
(insn 202 201 203 20 (set (reg:QI 120 [ _39 ])
        (mem:QI (reg/f:DI 119 [ _38 ]) [0 *_38+0 S1 A8])) "calc.c":191:30 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 119 [ _38 ])
        (nil)))
(insn 203 202 204 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 120 [ _39 ])
            (const_int 45 [0x2d]))) "calc.c":191:24 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 120 [ _39 ])
        (nil)))
(jump_insn 204 203 205 20 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 217)
            (pc))) "calc.c":191:24 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 217)
;;  succ:       21 (FALLTHRU)
;;              24
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 205 204 206 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 206 205 207 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -392 [0xfffffffffffffe78])) [5 last_sign+0 S4 A64])
            (const_int 2 [0x2]))) "calc.c":192:24 11 {*cmpsi_1}
     (nil))
(jump_insn 207 206 208 21 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 212)
            (pc))) "calc.c":192:24 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 212)
;;  succ:       22 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 208 207 209 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 209 208 510 22 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -392 [0xfffffffffffffe78])) [5 last_sign+0 S4 A64])
        (const_int 1 [0x1])) "calc.c":192:50 75 {*movsi_internal}
     (nil))
(jump_insn 510 209 511 22 (set (pc)
        (label_ref 282)) "calc.c":190:20 807 {jump}
     (nil)
 -> 282)
;;  succ:       30 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 511 510 212)
;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL)
;;  pred:       21
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 212 511 213 23 64 (nil) [1 uses])
(note 213 212 214 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 214 213 512 23 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -392 [0xfffffffffffffe78])) [5 last_sign+0 S4 A64])
        (const_int 2 [0x2])) "calc.c":193:35 75 {*movsi_internal}
     (nil))
(jump_insn 512 214 513 23 (set (pc)
        (label_ref 282)) "calc.c":190:20 807 {jump}
     (nil)
 -> 282)
;;  succ:       30 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 513 512 217)
;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL)
;;  pred:       20
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 217 513 218 24 63 (nil) [1 uses])
(note 218 217 219 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 219 218 514 24 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -392 [0xfffffffffffffe78])) [5 last_sign+0 S4 A64])
        (const_int 1 [0x1])) "calc.c":195:31 75 {*movsi_internal}
     (nil))
(jump_insn 514 219 515 24 (set (pc)
        (label_ref 282)) "calc.c":190:20 807 {jump}
     (nil)
 -> 282)
;;  succ:       30 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 515 514 224)
;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL)
;;  pred:       17
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 121 122 215 216
(code_label 224 515 225 25 60 (nil) [1 uses])
(note 225 224 226 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 226 225 227 25 (set (reg/f:DI 215)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])) "calc.c":196:27 74 {*movdi_internal}
     (nil))
(insn 227 226 228 25 (set (reg:DI 216)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])) "calc.c":196:27 74 {*movdi_internal}
     (nil))
(insn 228 227 229 25 (parallel [
            (set (reg/f:DI 121 [ _40 ])
                (plus:DI (reg/f:DI 215)
                    (reg:DI 216)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":196:27 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 216)
        (expr_list:REG_DEAD (reg/f:DI 215)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
                        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
                    (nil))))))
(insn 229 228 230 25 (set (reg:QI 122 [ _41 ])
        (mem:QI (reg/f:DI 121 [ _40 ]) [0 *_40+0 S1 A8])) "calc.c":196:27 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 121 [ _40 ])
        (nil)))
(insn 230 229 231 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 122 [ _41 ])
            (const_int 42 [0x2a]))) "calc.c":196:21 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 122 [ _41 ])
        (nil)))
(jump_insn 231 230 232 25 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 239)
            (pc))) "calc.c":196:21 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 239)
;;  succ:       27
;;              26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 123 124 217 218
(note 232 231 233 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 233 232 234 26 (set (reg/f:DI 217)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])) "calc.c":196:46 74 {*movdi_internal}
     (nil))
(insn 234 233 235 26 (set (reg:DI 218)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])) "calc.c":196:46 74 {*movdi_internal}
     (nil))
(insn 235 234 236 26 (parallel [
            (set (reg/f:DI 123 [ _42 ])
                (plus:DI (reg/f:DI 217)
                    (reg:DI 218)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":196:46 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 218)
        (expr_list:REG_DEAD (reg/f:DI 217)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
                        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
                    (nil))))))
(insn 236 235 237 26 (set (reg:QI 124 [ _43 ])
        (mem:QI (reg/f:DI 123 [ _42 ]) [0 *_42+0 S1 A8])) "calc.c":196:46 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 123 [ _42 ])
        (nil)))
(insn 237 236 238 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 124 [ _43 ])
            (const_int 47 [0x2f]))) "calc.c":196:38 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 124 [ _43 ])
        (nil)))
(jump_insn 238 237 239 26 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 258)
            (pc))) "calc.c":196:38 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 258)
;;  succ:       27 (FALLTHRU)
;;              28
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 27, loop depth 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL)
;;  pred:       25
;;              26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 125 126 127 128 129 130 219 220
(code_label 239 238 240 27 65 (nil) [1 uses])
(note 240 239 241 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 241 240 242 27 (set (reg/f:DI 125 [ stack_double.8_44 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -368 [0xfffffffffffffe90])) [3 stack_double+0 S8 A128])) "calc.c":197:18 74 {*movdi_internal}
     (nil))
(insn 242 241 243 27 (set (reg/f:DI 219)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])) "calc.c":197:53 74 {*movdi_internal}
     (nil))
(insn 243 242 244 27 (set (reg:DI 220)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])) "calc.c":197:53 74 {*movdi_internal}
     (nil))
(insn 244 243 245 27 (parallel [
            (set (reg/f:DI 126 [ _45 ])
                (plus:DI (reg/f:DI 219)
                    (reg:DI 220)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":197:53 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 220)
        (expr_list:REG_DEAD (reg/f:DI 219)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
                        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
                    (nil))))))
(insn 245 244 246 27 (set (reg:QI 127 [ _46 ])
        (mem:QI (reg/f:DI 126 [ _45 ]) [0 *_45+0 S1 A8])) "calc.c":197:53 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 126 [ _45 ])
        (nil)))
(insn 246 245 247 27 (set (reg:SI 128 [ _47 ])
        (sign_extend:SI (reg:QI 127 [ _46 ]))) "calc.c":197:18 153 {extendqisi2}
     (expr_list:REG_DEAD (reg:QI 127 [ _46 ])
        (nil)))
(insn 247 246 248 27 (set (reg/f:DI 129 [ stack_prior.9_48 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -376 [0xfffffffffffffe88])) [4 stack_prior+0 S8 A64])) "calc.c":197:18 74 {*movdi_internal}
     (nil))
(insn 248 247 249 27 (set (reg/f:DI 130 [ stack.10_49 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -384 [0xfffffffffffffe80])) [4 stack+0 S8 A128])) "calc.c":197:18 74 {*movdi_internal}
     (nil))
(insn 249 248 250 27 (set (reg:DI 36 r8)
        (reg/f:DI 125 [ stack_double.8_44 ])) "calc.c":197:18 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 125 [ stack_double.8_44 ])
        (nil)))
(insn 250 249 251 27 (set (reg:SI 2 cx)
        (const_int 3 [0x3])) "calc.c":197:18 75 {*movsi_internal}
     (nil))
(insn 251 250 252 27 (set (reg:SI 1 dx)
        (reg:SI 128 [ _47 ])) "calc.c":197:18 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 128 [ _47 ])
        (nil)))
(insn 252 251 253 27 (set (reg:DI 4 si)
        (reg/f:DI 129 [ stack_prior.9_48 ])) "calc.c":197:18 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 129 [ stack_prior.9_48 ])
        (nil)))
(insn 253 252 254 27 (set (reg:DI 5 di)
        (reg/f:DI 130 [ stack.10_49 ])) "calc.c":197:18 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 130 [ stack.10_49 ])
        (nil)))
(call_insn 254 253 255 27 (call (mem:QI (symbol_ref:DI ("push_func") [flags 0x3]  <function_decl 0x7f09f1657a00 push_func>) [0 push_func S1 A8])
        (const_int 0 [0])) "calc.c":197:18 813 {*call}
     (expr_list:REG_DEAD (reg:DI 36 r8)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:DI 4 si)
                (expr_list:REG_DEAD (reg:SI 2 cx)
                    (expr_list:REG_DEAD (reg:SI 1 dx)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (nil)))))))
(insn 255 254 516 27 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -392 [0xfffffffffffffe78])) [5 last_sign+0 S4 A64])
        (const_int 3 [0x3])) "calc.c":197:84 75 {*movsi_internal}
     (nil))
(jump_insn 516 255 517 27 (set (pc)
        (label_ref 282)) "calc.c":197:84 807 {jump}
     (nil)
 -> 282)
;;  succ:       30 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 517 516 258)
;; basic block 28, loop depth 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL)
;;  pred:       26
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 131 132 221 222
(code_label 258 517 259 28 66 (nil) [1 uses])
(note 259 258 260 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 260 259 261 28 (set (reg/f:DI 221)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])) "calc.c":198:27 74 {*movdi_internal}
     (nil))
(insn 261 260 262 28 (set (reg:DI 222)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])) "calc.c":198:27 74 {*movdi_internal}
     (nil))
(insn 262 261 263 28 (parallel [
            (set (reg/f:DI 131 [ _50 ])
                (plus:DI (reg/f:DI 221)
                    (reg:DI 222)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":198:27 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 222)
        (expr_list:REG_DEAD (reg/f:DI 221)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
                        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
                    (nil))))))
(insn 263 262 264 28 (set (reg:QI 132 [ _51 ])
        (mem:QI (reg/f:DI 131 [ _50 ]) [0 *_50+0 S1 A8])) "calc.c":198:27 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 131 [ _50 ])
        (nil)))
(insn 264 263 265 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 132 [ _51 ])
            (const_int 94 [0x5e]))) "calc.c":198:21 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 132 [ _51 ])
        (nil)))
(jump_insn 265 264 266 28 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 282)
            (pc))) "calc.c":198:21 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 282)
;;  succ:       29 (FALLTHRU)
;;              30
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 29, loop depth 0, maybe hot
;;  prev block 28, next block 30, flags: (RTL)
;;  pred:       28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 133 134 135 136 137 138 223 224
(note 266 265 267 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 267 266 268 29 (set (reg/f:DI 133 [ stack_double.11_52 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -368 [0xfffffffffffffe90])) [3 stack_double+0 S8 A128])) "calc.c":199:18 74 {*movdi_internal}
     (nil))
(insn 268 267 269 29 (set (reg/f:DI 223)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])) "calc.c":199:53 74 {*movdi_internal}
     (nil))
(insn 269 268 270 29 (set (reg:DI 224)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])) "calc.c":199:53 74 {*movdi_internal}
     (nil))
(insn 270 269 271 29 (parallel [
            (set (reg/f:DI 134 [ _53 ])
                (plus:DI (reg/f:DI 223)
                    (reg:DI 224)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":199:53 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 224)
        (expr_list:REG_DEAD (reg/f:DI 223)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
                        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
                    (nil))))))
(insn 271 270 272 29 (set (reg:QI 135 [ _54 ])
        (mem:QI (reg/f:DI 134 [ _53 ]) [0 *_53+0 S1 A8])) "calc.c":199:53 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 134 [ _53 ])
        (nil)))
(insn 272 271 273 29 (set (reg:SI 136 [ _55 ])
        (sign_extend:SI (reg:QI 135 [ _54 ]))) "calc.c":199:18 153 {extendqisi2}
     (expr_list:REG_DEAD (reg:QI 135 [ _54 ])
        (nil)))
(insn 273 272 274 29 (set (reg/f:DI 137 [ stack_prior.12_56 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -376 [0xfffffffffffffe88])) [4 stack_prior+0 S8 A64])) "calc.c":199:18 74 {*movdi_internal}
     (nil))
(insn 274 273 275 29 (set (reg/f:DI 138 [ stack.13_57 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -384 [0xfffffffffffffe80])) [4 stack+0 S8 A128])) "calc.c":199:18 74 {*movdi_internal}
     (nil))
(insn 275 274 276 29 (set (reg:DI 36 r8)
        (reg/f:DI 133 [ stack_double.11_52 ])) "calc.c":199:18 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 133 [ stack_double.11_52 ])
        (nil)))
(insn 276 275 277 29 (set (reg:SI 2 cx)
        (const_int 4 [0x4])) "calc.c":199:18 75 {*movsi_internal}
     (nil))
(insn 277 276 278 29 (set (reg:SI 1 dx)
        (reg:SI 136 [ _55 ])) "calc.c":199:18 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 136 [ _55 ])
        (nil)))
(insn 278 277 279 29 (set (reg:DI 4 si)
        (reg/f:DI 137 [ stack_prior.12_56 ])) "calc.c":199:18 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 137 [ stack_prior.12_56 ])
        (nil)))
(insn 279 278 280 29 (set (reg:DI 5 di)
        (reg/f:DI 138 [ stack.13_57 ])) "calc.c":199:18 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 138 [ stack.13_57 ])
        (nil)))
(call_insn 280 279 281 29 (call (mem:QI (symbol_ref:DI ("push_func") [flags 0x3]  <function_decl 0x7f09f1657a00 push_func>) [0 push_func S1 A8])
        (const_int 0 [0])) "calc.c":199:18 813 {*call}
     (expr_list:REG_DEAD (reg:DI 36 r8)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:DI 4 si)
                (expr_list:REG_DEAD (reg:SI 2 cx)
                    (expr_list:REG_DEAD (reg:SI 1 dx)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (nil)))))))
(insn 281 280 282 29 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -392 [0xfffffffffffffe78])) [5 last_sign+0 S4 A64])
        (const_int 3 [0x3])) "calc.c":199:84 75 {*movsi_internal}
     (nil))
;;  succ:       30 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 30, loop depth 0, maybe hot
;;  prev block 29, next block 31, flags: (RTL)
;;  pred:       13
;;              22 [always] 
;;              23 [always] 
;;              24 [always] 
;;              28
;;              29 (FALLTHRU)
;;              15 [always] 
;;              19 [always] 
;;              27 [always] 
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 139 140 141 142 225 226 227
(code_label 282 281 283 30 57 (nil) [8 uses])
(note 283 282 284 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 284 283 285 30 (set (reg/f:DI 225)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])) "calc.c":201:33 74 {*movdi_internal}
     (nil))
(insn 285 284 286 30 (set (reg:DI 226)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])) "calc.c":201:33 74 {*movdi_internal}
     (nil))
(insn 286 285 287 30 (parallel [
            (set (reg/f:DI 139 [ _58 ])
                (plus:DI (reg/f:DI 225)
                    (reg:DI 226)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":201:33 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 226)
        (expr_list:REG_DEAD (reg/f:DI 225)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
                        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
                    (nil))))))
(insn 287 286 288 30 (set (reg:QI 140 [ _59 ])
        (mem:QI (reg/f:DI 139 [ _58 ]) [0 *_58+0 S1 A8])) "calc.c":201:33 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 139 [ _58 ])
        (nil)))
(insn 288 287 289 30 (set (reg:SI 141 [ _60 ])
        (sign_extend:SI (reg:QI 140 [ _59 ]))) "calc.c":201:13 153 {extendqisi2}
     (expr_list:REG_DEAD (reg:QI 140 [ _59 ])
        (nil)))
(insn 289 288 290 30 (parallel [
            (set (reg:DI 227)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -317 [0xfffffffffffffec3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":201:13 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 290 289 291 30 (set (reg:SI 4 si)
        (reg:SI 141 [ _60 ])) "calc.c":201:13 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 141 [ _60 ])
        (nil)))
(insn 291 290 292 30 (set (reg:DI 5 di)
        (reg:DI 227)) "calc.c":201:13 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 227)
        (nil)))
(call_insn/i 292 291 293 30 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strchr") [flags 0x41]  <function_decl 0x7f09f1835b00 strchr>) [0 __builtin_strchr S1 A8])
            (const_int 0 [0]))) "calc.c":201:13 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 293 292 294 30 (set (reg/f:DI 142 [ _61 ])
        (reg:DI 0 ax)) "calc.c":201:13 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 294 293 295 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 142 [ _61 ])
            (const_int 0 [0]))) "calc.c":201:12 8 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/f:DI 142 [ _61 ])
        (nil)))
(jump_insn 295 294 296 30 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 338)
            (pc))) "calc.c":201:12 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 338)
;;  succ:       31 (FALLTHRU)
;;              35
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 31, loop depth 0, maybe hot
;;  prev block 30, next block 32, flags: (RTL)
;;  pred:       30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 296 295 297 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 297 296 298 31 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -392 [0xfffffffffffffe78])) [5 last_sign+0 S4 A64])
        (const_int 0 [0])) "calc.c":202:19 75 {*movsi_internal}
     (nil))
(insn 298 297 518 31 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -388 [0xfffffffffffffe7c])) [5 j+0 S4 A32])
        (const_int 0 [0])) "calc.c":203:17 75 {*movsi_internal}
     (nil))
(jump_insn 518 298 519 31 (set (pc)
        (label_ref 311)) "calc.c":204:13 807 {jump}
     (nil)
 -> 311)
;;  succ:       33 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 519 518 317)
;; basic block 32, loop depth 0, maybe hot
;;  prev block 31, next block 33, flags: (RTL)
;;  pred:       33
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 143 144 228 229 230 231
(code_label 317 519 301 32 69 (nil) [1 uses])
(note 301 317 302 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 302 301 303 32 (set (reg/f:DI 228)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])) "calc.c":206:32 74 {*movdi_internal}
     (nil))
(insn 303 302 304 32 (set (reg:DI 229)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])) "calc.c":206:32 74 {*movdi_internal}
     (nil))
(insn 304 303 305 32 (parallel [
            (set (reg/f:DI 143 [ _62 ])
                (plus:DI (reg/f:DI 228)
                    (reg:DI 229)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":206:32 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 229)
        (expr_list:REG_DEAD (reg/f:DI 228)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
                        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
                    (nil))))))
(insn 305 304 306 32 (set (reg:QI 144 [ _63 ])
        (mem:QI (reg/f:DI 143 [ _62 ]) [0 *_62+0 S1 A8])) "calc.c":206:32 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 143 [ _62 ])
        (nil)))
(insn 306 305 307 32 (set (reg:SI 231)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -388 [0xfffffffffffffe7c])) [5 j+0 S4 A32])) "calc.c":206:25 75 {*movsi_internal}
     (nil))
(insn 307 306 308 32 (set (reg:DI 230)
        (sign_extend:DI (reg:SI 231))) "calc.c":206:25 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 231)
        (nil)))
(insn 308 307 309 32 (set (mem:QI (plus:DI (plus:DI (reg/f:DI 19 frame)
                    (reg:DI 230))
                (const_int -304 [0xfffffffffffffed0])) [0 temp[j_109]+0 S1 A8])
        (reg:QI 144 [ _63 ])) "calc.c":206:25 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 230)
        (expr_list:REG_DEAD (reg:QI 144 [ _63 ])
            (nil))))
(insn 309 308 310 32 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                        (const_int -388 [0xfffffffffffffe7c])) [5 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -388 [0xfffffffffffffe7c])) [5 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":207:18 209 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 310 309 311 32 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                        (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])
                (plus:DI (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":204:38 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       33 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 33, loop depth 0, maybe hot
;;  prev block 32, next block 34, flags: (RTL)
;;  pred:       32 (FALLTHRU,DFS_BACK)
;;              31 [always] 
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 145 146 232 233
(code_label 311 310 312 33 68 (nil) [1 uses])
(note 312 311 313 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 313 312 314 33 (set (reg/f:DI 232)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])) "calc.c":204:25 74 {*movdi_internal}
     (nil))
(insn 314 313 315 33 (set (reg:DI 233)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])) "calc.c":204:25 74 {*movdi_internal}
     (nil))
(insn 315 314 316 33 (parallel [
            (set (reg/f:DI 145 [ _64 ])
                (plus:DI (reg/f:DI 232)
                    (reg:DI 233)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":204:25 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 233)
        (expr_list:REG_DEAD (reg/f:DI 232)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
                        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
                    (nil))))))
(insn 316 315 318 33 (set (reg:QI 146 [ _65 ])
        (mem:QI (reg/f:DI 145 [ _64 ]) [0 *_64+0 S1 A8])) "calc.c":204:25 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 145 [ _64 ])
        (nil)))
(insn 318 316 319 33 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 146 [ _65 ])
            (const_int 40 [0x28]))) "calc.c":204:29 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 146 [ _65 ])
        (nil)))
(jump_insn 319 318 320 33 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 317)
            (pc))) "calc.c":204:29 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 317)
;;  succ:       32
;;              34 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 34, loop depth 0, maybe hot
;;  prev block 33, next block 35, flags: (RTL)
;;  pred:       33 (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 147 148 149 150 151 234 235 236
(note 320 319 321 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 321 320 322 34 (set (reg:SI 235)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -388 [0xfffffffffffffe7c])) [5 j+0 S4 A32])) "calc.c":209:21 75 {*movsi_internal}
     (nil))
(insn 322 321 323 34 (set (reg:DI 234)
        (sign_extend:DI (reg:SI 235))) "calc.c":209:21 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 235)
        (nil)))
(insn 323 322 324 34 (set (mem:QI (plus:DI (plus:DI (reg/f:DI 19 frame)
                    (reg:DI 234))
                (const_int -304 [0xfffffffffffffed0])) [0 temp[j_109]+0 S1 A8])
        (const_int 0 [0])) "calc.c":209:21 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg:DI 234)
        (nil)))
(insn 324 323 325 34 (set (reg/f:DI 147 [ stack_double.14_66 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -368 [0xfffffffffffffe90])) [3 stack_double+0 S8 A128])) "calc.c":212:13 74 {*movdi_internal}
     (nil))
(insn 325 324 326 34 (parallel [
            (set (reg:DI 236)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -304 [0xfffffffffffffed0])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":212:43 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 326 325 327 34 (set (reg:DI 5 di)
        (reg:DI 236)) "calc.c":212:43 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 236)
        (nil)))
(call_insn 327 326 328 34 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("what_the_func") [flags 0x3]  <function_decl 0x7f09f1657400 what_the_func>) [0 what_the_func S1 A8])
            (const_int 0 [0]))) "calc.c":212:43 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 328 327 329 34 (set (reg:QI 148 [ _67 ])
        (reg:QI 0 ax)) "calc.c":212:43 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax)
        (nil)))
(insn 329 328 330 34 (set (reg:SI 149 [ _68 ])
        (sign_extend:SI (reg:QI 148 [ _67 ]))) "calc.c":212:13 153 {extendqisi2}
     (expr_list:REG_DEAD (reg:QI 148 [ _67 ])
        (nil)))
(insn 330 329 331 34 (set (reg/f:DI 150 [ stack_prior.15_69 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -376 [0xfffffffffffffe88])) [4 stack_prior+0 S8 A64])) "calc.c":212:13 74 {*movdi_internal}
     (nil))
(insn 331 330 332 34 (set (reg/f:DI 151 [ stack.16_70 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -384 [0xfffffffffffffe80])) [4 stack+0 S8 A128])) "calc.c":212:13 74 {*movdi_internal}
     (nil))
(insn 332 331 333 34 (set (reg:DI 36 r8)
        (reg/f:DI 147 [ stack_double.14_66 ])) "calc.c":212:13 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 147 [ stack_double.14_66 ])
        (nil)))
(insn 333 332 334 34 (set (reg:SI 2 cx)
        (const_int 5 [0x5])) "calc.c":212:13 75 {*movsi_internal}
     (nil))
(insn 334 333 335 34 (set (reg:SI 1 dx)
        (reg:SI 149 [ _68 ])) "calc.c":212:13 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 149 [ _68 ])
        (nil)))
(insn 335 334 336 34 (set (reg:DI 4 si)
        (reg/f:DI 150 [ stack_prior.15_69 ])) "calc.c":212:13 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 150 [ stack_prior.15_69 ])
        (nil)))
(insn 336 335 337 34 (set (reg:DI 5 di)
        (reg/f:DI 151 [ stack.16_70 ])) "calc.c":212:13 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 151 [ stack.16_70 ])
        (nil)))
(call_insn 337 336 338 34 (call (mem:QI (symbol_ref:DI ("push_func") [flags 0x3]  <function_decl 0x7f09f1657a00 push_func>) [0 push_func S1 A8])
        (const_int 0 [0])) "calc.c":212:13 813 {*call}
     (expr_list:REG_DEAD (reg:DI 36 r8)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:DI 4 si)
                (expr_list:REG_DEAD (reg:SI 2 cx)
                    (expr_list:REG_DEAD (reg:SI 1 dx)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (nil)))))))
;;  succ:       35 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 35, loop depth 0, maybe hot
;;  prev block 34, next block 36, flags: (RTL)
;;  pred:       30
;;              34 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 152 153 237 238
(code_label 338 337 339 35 67 (nil) [1 uses])
(note 339 338 340 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 340 339 341 35 (set (reg/f:DI 237)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])) "calc.c":214:18 74 {*movdi_internal}
     (nil))
(insn 341 340 342 35 (set (reg:DI 238)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])) "calc.c":214:18 74 {*movdi_internal}
     (nil))
(insn 342 341 343 35 (parallel [
            (set (reg/f:DI 152 [ _71 ])
                (plus:DI (reg/f:DI 237)
                    (reg:DI 238)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":214:18 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 238)
        (expr_list:REG_DEAD (reg/f:DI 237)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
                        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
                    (nil))))))
(insn 343 342 344 35 (set (reg:QI 153 [ _72 ])
        (mem:QI (reg/f:DI 152 [ _71 ]) [0 *_71+0 S1 A8])) "calc.c":214:18 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 152 [ _71 ])
        (nil)))
(insn 344 343 345 35 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 153 [ _72 ])
            (const_int 40 [0x28]))) "calc.c":214:12 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 153 [ _72 ])
        (nil)))
(jump_insn 345 344 346 35 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 353)
            (pc))) "calc.c":214:12 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 353)
;;  succ:       37
;;              36 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 36, loop depth 0, maybe hot
;;  prev block 35, next block 37, flags: (RTL)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 154 155 239 240
(note 346 345 347 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 347 346 348 36 (set (reg/f:DI 239)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])) "calc.c":214:37 74 {*movdi_internal}
     (nil))
(insn 348 347 349 36 (set (reg:DI 240)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])) "calc.c":214:37 74 {*movdi_internal}
     (nil))
(insn 349 348 350 36 (parallel [
            (set (reg/f:DI 154 [ _73 ])
                (plus:DI (reg/f:DI 239)
                    (reg:DI 240)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":214:37 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 240)
        (expr_list:REG_DEAD (reg/f:DI 239)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
                        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
                    (nil))))))
(insn 350 349 351 36 (set (reg:QI 155 [ _74 ])
        (mem:QI (reg/f:DI 154 [ _73 ]) [0 *_73+0 S1 A8])) "calc.c":214:37 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 154 [ _73 ])
        (nil)))
(insn 351 350 352 36 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 155 [ _74 ])
            (const_int 41 [0x29]))) "calc.c":214:29 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 155 [ _74 ])
        (nil)))
(jump_insn 352 351 353 36 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 370)
            (pc))) "calc.c":214:29 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 370)
;;  succ:       37 (FALLTHRU)
;;              38
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 37, loop depth 0, maybe hot
;;  prev block 36, next block 38, flags: (RTL)
;;  pred:       35
;;              36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 156 157 158 159 160 161 241 242
(code_label 353 352 354 37 70 (nil) [1 uses])
(note 354 353 355 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 355 354 356 37 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -392 [0xfffffffffffffe78])) [5 last_sign+0 S4 A64])
        (const_int 3 [0x3])) "calc.c":215:19 75 {*movsi_internal}
     (nil))
(insn 356 355 357 37 (set (reg/f:DI 156 [ stack_double.17_75 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -368 [0xfffffffffffffe90])) [3 stack_double+0 S8 A128])) "calc.c":216:13 74 {*movdi_internal}
     (nil))
(insn 357 356 358 37 (set (reg/f:DI 241)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])) "calc.c":216:48 74 {*movdi_internal}
     (nil))
(insn 358 357 359 37 (set (reg:DI 242)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])) "calc.c":216:48 74 {*movdi_internal}
     (nil))
(insn 359 358 360 37 (parallel [
            (set (reg/f:DI 157 [ _76 ])
                (plus:DI (reg/f:DI 241)
                    (reg:DI 242)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":216:48 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 242)
        (expr_list:REG_DEAD (reg/f:DI 241)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
                        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
                    (nil))))))
(insn 360 359 361 37 (set (reg:QI 158 [ _77 ])
        (mem:QI (reg/f:DI 157 [ _76 ]) [0 *_76+0 S1 A8])) "calc.c":216:48 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 157 [ _76 ])
        (nil)))
(insn 361 360 362 37 (set (reg:SI 159 [ _78 ])
        (sign_extend:SI (reg:QI 158 [ _77 ]))) "calc.c":216:13 153 {extendqisi2}
     (expr_list:REG_DEAD (reg:QI 158 [ _77 ])
        (nil)))
(insn 362 361 363 37 (set (reg/f:DI 160 [ stack_prior.18_79 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -376 [0xfffffffffffffe88])) [4 stack_prior+0 S8 A64])) "calc.c":216:13 74 {*movdi_internal}
     (nil))
(insn 363 362 364 37 (set (reg/f:DI 161 [ stack.19_80 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -384 [0xfffffffffffffe80])) [4 stack+0 S8 A128])) "calc.c":216:13 74 {*movdi_internal}
     (nil))
(insn 364 363 365 37 (set (reg:DI 36 r8)
        (reg/f:DI 156 [ stack_double.17_75 ])) "calc.c":216:13 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 156 [ stack_double.17_75 ])
        (nil)))
(insn 365 364 366 37 (set (reg:SI 2 cx)
        (const_int 0 [0])) "calc.c":216:13 75 {*movsi_internal}
     (nil))
(insn 366 365 367 37 (set (reg:SI 1 dx)
        (reg:SI 159 [ _78 ])) "calc.c":216:13 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 159 [ _78 ])
        (nil)))
(insn 367 366 368 37 (set (reg:DI 4 si)
        (reg/f:DI 160 [ stack_prior.18_79 ])) "calc.c":216:13 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 160 [ stack_prior.18_79 ])
        (nil)))
(insn 368 367 369 37 (set (reg:DI 5 di)
        (reg/f:DI 161 [ stack.19_80 ])) "calc.c":216:13 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 161 [ stack.19_80 ])
        (nil)))
(call_insn 369 368 370 37 (call (mem:QI (symbol_ref:DI ("push_func") [flags 0x3]  <function_decl 0x7f09f1657a00 push_func>) [0 push_func S1 A8])
        (const_int 0 [0])) "calc.c":216:13 813 {*call}
     (expr_list:REG_DEAD (reg:DI 36 r8)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:DI 4 si)
                (expr_list:REG_DEAD (reg:SI 2 cx)
                    (expr_list:REG_DEAD (reg:SI 1 dx)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (expr_list:DI (use (reg:DI 36 r8))
                        (nil)))))))
;;  succ:       38 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 38, loop depth 0, maybe hot
;;  prev block 37, next block 39, flags: (RTL)
;;  pred:       36
;;              37 (FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 162 163 243 244
(code_label 370 369 371 38 71 (nil) [1 uses])
(note 371 370 372 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 372 371 373 38 (set (reg/f:DI 243)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])) "calc.c":218:18 74 {*movdi_internal}
     (nil))
(insn 373 372 374 38 (set (reg:DI 244)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])) "calc.c":218:18 74 {*movdi_internal}
     (nil))
(insn 374 373 375 38 (parallel [
            (set (reg/f:DI 162 [ _81 ])
                (plus:DI (reg/f:DI 243)
                    (reg:DI 244)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":218:18 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 244)
        (expr_list:REG_DEAD (reg/f:DI 243)
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])
                        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128]))
                    (nil))))))
(insn 375 374 376 38 (set (reg:QI 163 [ _82 ])
        (mem:QI (reg/f:DI 162 [ _81 ]) [0 *_81+0 S1 A8])) "calc.c":218:18 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 162 [ _81 ])
        (nil)))
(insn 376 375 377 38 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 163 [ _82 ])
            (const_int 61 [0x3d]))) "calc.c":218:12 9 {*cmpqi_1}
     (expr_list:REG_DEAD (reg:QI 163 [ _82 ])
        (nil)))
(jump_insn 377 376 382 38 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 528)
            (pc))) "calc.c":218:12 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 528)
;;  succ:       51
;;              39 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 39, loop depth 0, maybe hot
;;  prev block 38, next block 40, flags: (RTL)
;;  pred:       38 (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(note 382 377 383 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 383 382 384 39 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                        (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])
                (plus:DI (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":168:44 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       40 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 40, loop depth 0, maybe hot
;;  prev block 39, next block 50, flags: (RTL)
;;  pred:       39 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 164 245
(code_label 384 383 385 40 51 (nil) [1 uses])
(note 385 384 386 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 386 385 387 40 (set (reg:DI 245)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -408 [0xfffffffffffffe68])) [1 input+0 S8 A64])) "calc.c":168:28 74 {*movdi_internal}
     (nil))
(insn 387 386 388 40 (set (reg:DI 5 di)
        (reg:DI 245)) "calc.c":168:28 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 245)
        (nil)))
(call_insn/i 388 387 389 40 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x7f09f1838700 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) "calc.c":168:28 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 389 388 391 40 (set (reg:DI 164 [ _83 ])
        (reg:DI 0 ax)) "calc.c":168:28 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 391 389 392 40 (set (reg:CC 17 flags)
        (compare:CC (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -352 [0xfffffffffffffea0])) [7 i+0 S8 A128])
            (reg:DI 164 [ _83 ]))) "calc.c":168:26 12 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 164 [ _83 ])
        (nil)))
(jump_insn 392 391 524 40 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 390)
            (pc))) "calc.c":168:26 806 {*jcc}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil))
 -> 390)
;;  succ:       3
;;              50 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 50, loop depth 0, maybe hot
;;  prev block 40, next block 51, flags: (RTL)
;;  pred:       40 (FALLTHRU)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(note 524 392 525 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(jump_insn 525 524 526 50 (set (pc)
        (label_ref 393)) 807 {jump}
     (nil)
 -> 393)
;;  succ:       41 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 526 525 528)
;; basic block 51, loop depth 0, maybe hot
;;  prev block 50, next block 41, flags: (RTL)
;;  pred:       38
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	
(code_label 528 526 527 51 81 (nil) [1 uses])
(note 527 528 529 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 529 527 393 51 (const_int 0 [0]) "calc.c":219:13 843 {nop}
     (nil))
;;  succ:       41 [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 41, loop depth 0, maybe hot
;;  prev block 51, next block 42, flags: (RTL)
;;  pred:       51 [always]  (FALLTHRU)
;;              50 [always] 
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 165 246 247
(code_label 393 529 394 41 73 (nil) [1 uses])
(note 394 393 395 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 395 394 396 41 (set (reg:DI 246)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f09f16f8b40 *.LC14>)) "calc.c":221:5 74 {*movdi_internal}
     (nil))
(insn 396 395 397 41 (set (reg:DI 5 di)
        (reg:DI 246)) "calc.c":221:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 246)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f09f16f8b40 *.LC14>)
            (nil))))
(insn 397 396 398 41 (set (reg:QI 0 ax)
        (const_int 0 [0])) "calc.c":221:5 77 {*movqi_internal}
     (nil))
(call_insn 398 397 399 41 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f09f183f100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "calc.c":221:5 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 399 398 400 41 (set (reg/f:DI 165 [ stack.20_84 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -384 [0xfffffffffffffe80])) [4 stack+0 S8 A128])) "calc.c":224:30 74 {*movdi_internal}
     (nil))
(insn 400 399 401 41 (set (reg:DI 247)
        (mem:DI (plus:DI (reg/f:DI 165 [ stack.20_84 ])
                (const_int 16 [0x10])) [7 stack.20_84->top+0 S8 A64])) "calc.c":224:12 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 165 [ stack.20_84 ])
        (nil)))
(insn 401 400 402 41 (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -336 [0xfffffffffffffeb0])) [7 size_stack+0 S8 A128])
        (reg:DI 247)) "calc.c":224:12 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 247)
        (nil)))
(insn 402 401 520 41 (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -344 [0xfffffffffffffea8])) [7 i+0 S8 A64])
        (const_int 0 [0])) "calc.c":225:17 74 {*movdi_internal}
     (nil))
(jump_insn 520 402 521 41 (set (pc)
        (label_ref 426)) "calc.c":225:5 807 {jump}
     (nil)
 -> 426)
;;  succ:       43 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 521 520 428)
;; basic block 42, loop depth 0, maybe hot
;;  prev block 41, next block 43, flags: (RTL)
;;  pred:       43
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 166 167 168 169 170 171 172 248
(code_label 428 521 405 42 76 (nil) [1 uses])
(note 405 428 406 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 406 405 407 42 (set (reg/f:DI 166 [ stack.21_85 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -384 [0xfffffffffffffe80])) [4 stack+0 S8 A128])) "calc.c":227:32 74 {*movdi_internal}
     (nil))
(insn 407 406 408 42 (set (reg:DI 5 di)
        (reg/f:DI 166 [ stack.21_85 ])) "calc.c":227:32 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 166 [ stack.21_85 ])
        (nil)))
(call_insn 408 407 409 42 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("peek") [flags 0x41]  <function_decl 0x7f09f164e900 peek>) [0 peek S1 A8])
            (const_int 0 [0]))) "calc.c":227:32 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 409 408 410 42 (set (reg:QI 167 [ _86 ])
        (reg:QI 0 ax)) "calc.c":227:32 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax)
        (nil)))
(insn 410 409 411 42 (set (reg:SI 168 [ _87 ])
        (sign_extend:SI (reg:QI 167 [ _86 ]))) "calc.c":227:9 153 {extendqisi2}
     (expr_list:REG_DEAD (reg:QI 167 [ _86 ])
        (nil)))
(insn 411 410 412 42 (set (reg:SI 4 si)
        (reg:SI 168 [ _87 ])) "calc.c":227:9 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 168 [ _87 ])
        (nil)))
(insn 412 411 413 42 (set (reg:DI 248)
        (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7f09f16f8bd0 *.LC15>)) "calc.c":227:9 74 {*movdi_internal}
     (nil))
(insn 413 412 414 42 (set (reg:DI 5 di)
        (reg:DI 248)) "calc.c":227:9 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 248)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC15") [flags 0x2]  <var_decl 0x7f09f16f8bd0 *.LC15>)
            (nil))))
(insn 414 413 415 42 (set (reg:QI 0 ax)
        (const_int 0 [0])) "calc.c":227:9 77 {*movqi_internal}
     (nil))
(call_insn 415 414 416 42 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f09f183f100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "calc.c":227:9 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 416 415 417 42 (set (reg/f:DI 169 [ stack.22_88 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -384 [0xfffffffffffffe80])) [4 stack+0 S8 A128])) "calc.c":228:28 74 {*movdi_internal}
     (nil))
(insn 417 416 418 42 (set (reg:DI 5 di)
        (reg/f:DI 169 [ stack.22_88 ])) "calc.c":228:28 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 169 [ stack.22_88 ])
        (nil)))
(call_insn 418 417 419 42 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("pop") [flags 0x41]  <function_decl 0x7f09f164e800 pop>) [0 pop S1 A8])
            (const_int 0 [0]))) "calc.c":228:28 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 419 418 420 42 (set (reg:QI 170 [ _89 ])
        (reg:QI 0 ax)) "calc.c":228:28 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg:QI 0 ax)
        (nil)))
(insn 420 419 421 42 (set (reg:SI 171 [ _90 ])
        (sign_extend:SI (reg:QI 170 [ _89 ]))) "calc.c":228:9 153 {extendqisi2}
     (expr_list:REG_DEAD (reg:QI 170 [ _89 ])
        (nil)))
(insn 421 420 422 42 (set (reg/f:DI 172 [ stack_double.23_91 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -368 [0xfffffffffffffe90])) [3 stack_double+0 S8 A128])) "calc.c":228:9 74 {*movdi_internal}
     (nil))
(insn 422 421 423 42 (set (reg:SI 4 si)
        (reg:SI 171 [ _90 ])) "calc.c":228:9 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 171 [ _90 ])
        (nil)))
(insn 423 422 424 42 (set (reg:DI 5 di)
        (reg/f:DI 172 [ stack_double.23_91 ])) "calc.c":228:9 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 172 [ stack_double.23_91 ])
        (nil)))
(call_insn 424 423 425 42 (call (mem:QI (symbol_ref:DI ("calc") [flags 0x3]  <function_decl 0x7f09f1657800 calc>) [0 calc S1 A8])
        (const_int 0 [0])) "calc.c":228:9 813 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 425 424 426 42 (parallel [
            (set (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                        (const_int -344 [0xfffffffffffffea8])) [7 i+0 S8 A64])
                (plus:DI (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -344 [0xfffffffffffffea8])) [7 i+0 S8 A64])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":225:41 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       43 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 43, loop depth 0, maybe hot
;;  prev block 42, next block 44, flags: (RTL)
;;  pred:       42 (FALLTHRU,DFS_BACK)
;;              41 [always] 
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 249
(code_label 426 425 427 43 75 (nil) [1 uses])
(note 427 426 429 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 429 427 430 43 (set (reg:DI 249)
        (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -344 [0xfffffffffffffea8])) [7 i+0 S8 A64])) "calc.c":225:26 74 {*movdi_internal}
     (nil))
(insn 430 429 431 43 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 249)
            (mem/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -336 [0xfffffffffffffeb0])) [7 size_stack+0 S8 A128]))) "calc.c":225:26 12 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 249)
        (nil)))
(jump_insn 431 430 432 43 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 428)
            (pc))) "calc.c":225:26 806 {*jcc}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (nil))
 -> 428)
;;  succ:       42
;;              44 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 44, loop depth 0, maybe hot
;;  prev block 43, next block 45, flags: (RTL)
;;  pred:       43 (FALLTHRU)
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 173 174 175 250 251
(note 432 431 433 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 433 432 434 44 (set (reg:DI 250)
        (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f09f16f8b40 *.LC14>)) "calc.c":230:5 74 {*movdi_internal}
     (nil))
(insn 434 433 435 44 (set (reg:DI 5 di)
        (reg:DI 250)) "calc.c":230:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 250)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC14") [flags 0x2]  <var_decl 0x7f09f16f8b40 *.LC14>)
            (nil))))
(insn 435 434 436 44 (set (reg:QI 0 ax)
        (const_int 0 [0])) "calc.c":230:5 77 {*movqi_internal}
     (nil))
(call_insn 436 435 437 44 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f09f183f100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "calc.c":230:5 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 437 436 438 44 (set (reg/f:DI 173 [ stack_double.24_92 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -368 [0xfffffffffffffe90])) [3 stack_double+0 S8 A128])) "calc.c":231:18 74 {*movdi_internal}
     (nil))
(insn 438 437 439 44 (set (reg:DI 5 di)
        (reg/f:DI 173 [ stack_double.24_92 ])) "calc.c":231:18 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 173 [ stack_double.24_92 ])
        (nil)))
(call_insn 439 438 440 44 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("Fpeek") [flags 0x41]  <function_decl 0x7f09f164ef00 Fpeek>) [0 Fpeek S1 A8])
            (const_int 0 [0]))) "calc.c":231:18 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 440 439 441 44 (set (reg:DF 251)
        (reg:DF 20 xmm0)) "calc.c":231:18 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 441 440 442 44 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -328 [0xfffffffffffffeb8])) [2 res+0 S8 A64])
        (reg:DF 251)) "calc.c":231:18 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 251)
        (nil)))
(insn 442 441 443 44 (set (reg/f:DI 174 [ stack_double.25_93 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -368 [0xfffffffffffffe90])) [3 stack_double+0 S8 A128])) "calc.c":232:21 74 {*movdi_internal}
     (nil))
(insn 443 442 444 44 (set (reg:DI 175 [ _94 ])
        (mem:DI (plus:DI (reg/f:DI 174 [ stack_double.25_93 ])
                (const_int 16 [0x10])) [7 stack_double.25_93->top+0 S8 A64])) "calc.c":232:21 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 174 [ stack_double.25_93 ])
        (nil)))
(insn 444 443 445 44 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 175 [ _94 ])
            (const_int 1 [0x1]))) "calc.c":232:8 12 {*cmpdi_1}
     (expr_list:REG_DEAD (reg:DI 175 [ _94 ])
        (nil)))
(jump_insn 445 444 446 44 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 460)
            (pc))) "calc.c":232:8 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 460)
;;  succ:       45 (FALLTHRU)
;;              46
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 45, loop depth 0, maybe hot
;;  prev block 44, next block 46, flags: (RTL)
;;  pred:       44 (FALLTHRU)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 176 177 252 253
(note 446 445 447 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 447 446 448 45 (set (reg/f:DI 176 [ stack_double.26_95 ])
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -368 [0xfffffffffffffe90])) [3 stack_double+0 S8 A128])) "calc.c":233:9 74 {*movdi_internal}
     (nil))
(insn 448 447 449 45 (set (reg:DI 5 di)
        (reg/f:DI 176 [ stack_double.26_95 ])) "calc.c":233:9 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 176 [ stack_double.26_95 ])
        (nil)))
(call_insn 449 448 450 45 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("Fpop") [flags 0x41]  <function_decl 0x7f09f164ee00 Fpop>) [0 Fpop S1 A8])
            (const_int 0 [0]))) "calc.c":233:9 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 450 449 451 45 (set (reg:DF 177 [ _96 ])
        (reg:DF 20 xmm0)) "calc.c":233:9 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 451 450 452 45 (parallel [
            (set (reg:DI 252)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -272 [0xfffffffffffffef0])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":233:9 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 452 451 453 45 (set (reg:DF 20 xmm0)
        (reg:DF 177 [ _96 ])) "calc.c":233:9 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 177 [ _96 ])
        (nil)))
(insn 453 452 454 45 (set (reg:DI 253)
        (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f09f16f8c60 *.LC16>)) "calc.c":233:9 74 {*movdi_internal}
     (nil))
(insn 454 453 455 45 (set (reg:DI 4 si)
        (reg:DI 253)) "calc.c":233:9 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 253)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC16") [flags 0x2]  <var_decl 0x7f09f16f8c60 *.LC16>)
            (nil))))
(insn 455 454 456 45 (set (reg:DI 5 di)
        (reg:DI 252)) "calc.c":233:9 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 252)
        (nil)))
(insn 456 455 457 45 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) "calc.c":233:9 77 {*movqi_internal}
     (nil))
(call_insn 457 456 522 45 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sprintf") [flags 0x41]  <function_decl 0x7f09f1842100 sprintf>) [0 __builtin_sprintf S1 A8])
            (const_int 0 [0]))) "calc.c":233:9 824 {*call_value}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:DI 4 si)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_EH_REGION (const_int 0 [0])
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DF (use (reg:DF 20 xmm0))
                    (nil))))))
(jump_insn 522 457 523 45 (set (pc)
        (label_ref 468)) 807 {jump}
     (nil)
 -> 468)
;;  succ:       47 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 523 522 460)
;; basic block 46, loop depth 0, maybe hot
;;  prev block 45, next block 47, flags: (RTL)
;;  pred:       44
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 254 255
(code_label 460 523 461 46 77 (nil) [1 uses])
(note 461 460 462 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 462 461 463 46 (parallel [
            (set (reg:DI 254)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -272 [0xfffffffffffffef0])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":235:9 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 463 462 464 46 (set (reg:DI 255)
        (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f09f16f8cf0 *.LC17>)) "calc.c":235:9 74 {*movdi_internal}
     (nil))
(insn 464 463 465 46 (set (reg:DI 4 si)
        (reg:DI 255)) "calc.c":235:9 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 255)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC17") [flags 0x2]  <var_decl 0x7f09f16f8cf0 *.LC17>)
            (nil))))
(insn 465 464 466 46 (set (reg:DI 5 di)
        (reg:DI 254)) "calc.c":235:9 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 254)
        (nil)))
(insn 466 465 467 46 (set (reg:QI 0 ax)
        (const_int 0 [0])) "calc.c":235:9 77 {*movqi_internal}
     (nil))
(call_insn 467 466 468 46 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("sprintf") [flags 0x41]  <function_decl 0x7f09f1842100 sprintf>) [0 __builtin_sprintf S1 A8])
            (const_int 0 [0]))) "calc.c":235:9 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
;;  succ:       47 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 47, loop depth 0, maybe hot
;;  prev block 46, next block 48, flags: (RTL, MODIFIED)
;;  pred:       46 (FALLTHRU)
;;              45 [always] 
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 178 179 256 257 258 259 260 263
(code_label 468 467 469 47 78 (nil) [1 uses])
(note 469 468 470 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn 470 469 471 47 (parallel [
            (set (reg:DI 256)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -384 [0xfffffffffffffe80])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":243:5 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 471 470 472 47 (set (reg:DI 5 di)
        (reg:DI 256)) "calc.c":243:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 256)
        (nil)))
(call_insn 472 471 473 47 (call (mem:QI (symbol_ref:DI ("deleteStack") [flags 0x41]  <function_decl 0x7f09f164e400 deleteStack>) [0 deleteStack S1 A8])
        (const_int 0 [0])) "calc.c":243:5 813 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 473 472 474 47 (parallel [
            (set (reg:DI 257)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -376 [0xfffffffffffffe88])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":244:5 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 474 473 475 47 (set (reg:DI 5 di)
        (reg:DI 257)) "calc.c":244:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 257)
        (nil)))
(call_insn 475 474 476 47 (call (mem:QI (symbol_ref:DI ("deleteStack") [flags 0x41]  <function_decl 0x7f09f164e400 deleteStack>) [0 deleteStack S1 A8])
        (const_int 0 [0])) "calc.c":244:5 813 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 476 475 477 47 (parallel [
            (set (reg:DI 258)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -368 [0xfffffffffffffe90])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":245:5 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 477 476 478 47 (set (reg:DI 5 di)
        (reg:DI 258)) "calc.c":245:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 258)
        (nil)))
(call_insn 478 477 479 47 (call (mem:QI (symbol_ref:DI ("deleteFStack") [flags 0x41]  <function_decl 0x7f09f164ea00 deleteFStack>) [0 deleteFStack S1 A8])
        (const_int 0 [0])) "calc.c":245:5 813 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 479 478 480 47 (set (reg:DF 259)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -328 [0xfffffffffffffeb8])) [2 res+0 S8 A64])) "calc.c":246:5 135 {*movdf_internal}
     (nil))
(insn 480 479 481 47 (set (reg:DF 20 xmm0)
        (reg:DF 259)) "calc.c":246:5 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 259)
        (nil)))
(insn 481 480 482 47 (set (reg:DI 260)
        (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f09f16f8d80 *.LC18>)) "calc.c":246:5 74 {*movdi_internal}
     (nil))
(insn 482 481 483 47 (set (reg:DI 5 di)
        (reg:DI 260)) "calc.c":246:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 260)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC18") [flags 0x2]  <var_decl 0x7f09f16f8d80 *.LC18>)
            (nil))))
(insn 483 482 484 47 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) "calc.c":246:5 77 {*movqi_internal}
     (nil))
(call_insn 484 483 485 47 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f09f183f100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "calc.c":246:5 824 {*call_value}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DF (use (reg:DF 20 xmm0))
                (nil)))))
(insn 485 484 488 47 (set (reg:DF 178 [ _177 ])
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -328 [0xfffffffffffffeb8])) [2 res+0 S8 A64])) "calc.c":247:12 135 {*movdf_internal}
     (nil))
(insn 488 485 492 47 (set (reg:DF 179 [ <retval> ])
        (reg:DF 178 [ _177 ])) "calc.c":247:12 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 178 [ _177 ])
        (nil)))
(insn 492 488 493 47 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -8 [0xfffffffffffffff8])) [8 D.4773+0 S8 A64])
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_TEST))
            (clobber (reg:DI 263))
        ]) "calc.c":248:1 1164 {stack_protect_test_1_di}
     (expr_list:REG_UNUSED (reg:DI 263)
        (nil)))
(jump_insn 493 492 500 47 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 496)
            (pc))) "calc.c":248:1 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 496)
;;  succ:       49
;;              48 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 179

;; basic block 48, loop depth 0, maybe hot
;;  prev block 47, next block 49, flags: (RTL)
;;  pred:       47 (FALLTHRU)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
(note 500 493 494 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(call_insn 494 500 495 48 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f09f16df600 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "calc.c":248:1 813 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 495 494 496)
;; basic block 49, loop depth 0, maybe hot
;;  prev block 48, next block 1, flags: (RTL)
;;  pred:       47
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 179
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 179
;; lr  def 	 20 [xmm0]
(code_label 496 495 501 49 80 (nil) [1 uses])
(note 501 496 497 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(insn 497 501 498 49 (set (reg/i:DF 20 xmm0)
        (reg:DF 179 [ <retval> ])) "calc.c":248:1 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 179 [ <retval> ])
        (nil)))
(insn 498 497 0 49 (use (reg/i:DF 20 xmm0)) "calc.c":248:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0]


;; Function credit_a (credit_a, funcdef_no=12, decl_uid=4548, cgraph_uid=13, symbol_order=12)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 20.
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 38.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r108: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a2 (r108,l0) best SSE_REGS, allocno SSE_REGS
    r107: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a7 (r107,l0) best SSE_REGS, allocno SSE_REGS
    r106: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a8 (r106,l0) best SSE_REGS, allocno SSE_REGS
    r105: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a12 (r105,l0) best SSE_REGS, allocno SSE_REGS
    r104: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a13 (r104,l0) best SSE_REGS, allocno SSE_REGS
    r103: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a16 (r103,l0) best SSE_REGS, allocno SSE_REGS
    r102: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a18 (r102,l0) best DIREG, allocno GENERAL_REGS
    r101: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a19 (r101,l0) best DIREG, allocno GENERAL_REGS
    r100: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a20 (r100,l0) best DIREG, allocno GENERAL_REGS
    r99: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a22 (r99,l0) best SSE_REGS, allocno SSE_REGS
    r98: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a21 (r98,l0) best SSE_REGS, allocno SSE_REGS
    r97: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a24 (r97,l0) best SSE_REGS, allocno SSE_REGS
    r96: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a26 (r96,l0) best DIREG, allocno GENERAL_REGS
    r95: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a0 (r95,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r94: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a1 (r94,l0) best SSE_REGS, allocno SSE_REGS
    r93: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a3 (r93,l0) best SSE_REGS, allocno SSE_REGS
    r92: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a5 (r92,l0) best SSE_REGS, allocno SSE_REGS
    r91: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a6 (r91,l0) best SSE_REGS, allocno SSE_REGS
    r90: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a9 (r90,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r89: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a10 (r89,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r88: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a11 (r88,l0) best SSE_REGS, allocno SSE_REGS
    r87: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a14 (r87,l0) best SSE_REGS, allocno SSE_REGS
    r86: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a17 (r86,l0) best SSE_FIRST_REG, allocno SSE_REGS
    r85: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a15 (r85,l0) best SSE_FIRST_REG, allocno SSE_REGS
    r84: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a4 (r84,l0) best SSE_FIRST_REG, allocno SSE_REGS
    r83: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a23 (r83,l0) best SSE_REGS, allocno SSE_REGS
    r82: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a25 (r82,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS

  a0(r95,l0) costs: AREG:6000 DREG:6000 CREG:6000 BREG:6000 SIREG:6000 DIREG:6000 AD_REGS:6000 CLOBBERED_REGS:6000 Q_REGS:6000 TLS_GOTBASE_REGS:6000 GENERAL_REGS:6000 FP_TOP_REG:19000 FP_SECOND_REG:19000 FLOAT_REGS:19000 SSE_FIRST_REG:19000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:19000 FLOAT_INT_REGS:19000 INT_SSE_REGS:19000 FLOAT_INT_SSE_REGS:19000 MEM:7000
  a1(r94,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 FP_TOP_REG:18000 FP_SECOND_REG:18000 FLOAT_REGS:18000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:18000 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 MEM:7000
  a2(r108,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a3(r93,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:11000
  a4(r84,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:2000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:11000
  a5(r92,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:12000
  a6(r91,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:11000
  a7(r107,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a8(r106,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:11000
  a9(r90,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:26000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:12000
  a10(r89,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:26000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:12000
  a11(r88,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:2000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:12000
  a12(r105,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:11000
  a13(r104,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:11000
  a14(r87,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:11000
  a15(r85,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:2000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:11000
  a16(r103,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:11000
  a17(r86,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:2000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:11000
  a18(r102,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a19(r101,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a20(r100,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a21(r98,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a22(r99,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:11000
  a23(r83,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:12000
  a24(r97,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:11000
  a25(r82,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:26000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:12000
  a26(r96,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 55(l0): point = 0
   Insn 54(l0): point = 2
   Insn 50(l0): point = 4
   Insn 47(l0): point = 6
   Insn 46(l0): point = 8
   Insn 45(l0): point = 10
   Insn 44(l0): point = 12
   Insn 43(l0): point = 14
   Insn 42(l0): point = 17
   Insn 41(l0): point = 19
   Insn 40(l0): point = 22
   Insn 39(l0): point = 24
   Insn 38(l0): point = 26
   Insn 37(l0): point = 28
   Insn 36(l0): point = 30
   Insn 35(l0): point = 32
   Insn 34(l0): point = 34
   Insn 33(l0): point = 36
   Insn 32(l0): point = 38
   Insn 31(l0): point = 40
   Insn 30(l0): point = 42
   Insn 29(l0): point = 44
   Insn 28(l0): point = 46
   Insn 27(l0): point = 48
   Insn 26(l0): point = 50
   Insn 25(l0): point = 52
   Insn 24(l0): point = 54
   Insn 23(l0): point = 56
   Insn 22(l0): point = 58
   Insn 21(l0): point = 60
   Insn 20(l0): point = 62
   Insn 19(l0): point = 64
   Insn 18(l0): point = 66
   Insn 17(l0): point = 68
   Insn 16(l0): point = 70
   Insn 15(l0): point = 73
   Insn 14(l0): point = 75
   Insn 13(l0): point = 78
   Insn 12(l0): point = 80
   Insn 11(l0): point = 82
   Insn 10(l0): point = 84
   Insn 9(l0): point = 86
   Insn 5(l0): point = 88
   Insn 4(l0): point = 90
   Insn 3(l0): point = 92
   Insn 2(l0): point = 94
 a0(r95): [3..4]
 a1(r94): [5..6]
 a2(r108): [9..10]
 a3(r93): [11..12]
 a4(r84): [11..60]
 a5(r92): [13..15]
 a6(r91): [15..20]
 a7(r107): [16..17]
 a8(r106): [20..22]
 a9(r90): [21..24]
 a10(r89): [29..32]
 a11(r88): [31..38]
 a12(r105): [33..34]
 a13(r104): [33..36]
 a14(r87): [39..40]
 a15(r85): [39..52]
 a16(r103): [41..42]
 a17(r86): [41..44]
 a18(r102): [49..50]
 a19(r101): [57..58]
 a20(r100): [65..66]
 a21(r98): [69..71]
 a22(r99): [71..73]
 a23(r83): [72..76]
 a24(r97): [76..78]
 a25(r82): [77..80]
 a26(r96): [85..86]
Compressing live ranges: from 97 to 38 - 39%
Ranges after the compression:
 a0(r95): [0..1]
 a1(r94): [2..3]
 a2(r108): [4..5]
 a3(r93): [6..7]
 a4(r84): [6..26]
 a5(r92): [8..9]
 a6(r91): [9..12]
 a7(r107): [10..11]
 a8(r106): [12..14]
 a9(r90): [13..14]
 a10(r89): [15..16]
 a11(r88): [15..18]
 a12(r105): [17..18]
 a13(r104): [17..18]
 a14(r87): [19..20]
 a15(r85): [19..24]
 a16(r103): [21..22]
 a17(r86): [21..22]
 a18(r102): [23..24]
 a19(r101): [25..26]
 a20(r100): [27..28]
 a21(r98): [29..30]
 a22(r99): [30..32]
 a23(r83): [31..33]
 a24(r97): [33..35]
 a25(r82): [34..35]
 a26(r96): [36..37]
  pref0:a18(r102)<-hr5@1500
  pref1:a19(r101)<-hr5@1500
  pref2:a20(r100)<-hr5@1500
  pref3:a26(r96)<-hr5@1500
  pref4:a0(r95)<-hr20@1538
  pref5:a9(r90)<-hr20@2076
  pref6:a10(r89)<-hr20@2076
  pref7:a17(r86)<-hr20@1500
  pref8:a15(r85)<-hr20@1500
  pref9:a4(r84)<-hr20@1500
  pref10:a25(r82)<-hr20@2076
  regions=1, blocks=3, points=38
    allocnos=27 (big 0), copies=0, conflicts=0, ranges=27
Disposition:
   25:r82  l0     0   23:r83  l0    20    4:r84  l0   mem   15:r85  l0   mem
   17:r86  l0    20   14:r87  l0    20   11:r88  l0    22   10:r89  l0     0
    9:r90  l0     0    6:r91  l0    21    5:r92  l0    20    3:r93  l0    20
    1:r94  l0    20    0:r95  l0     0   26:r96  l0     0   24:r97  l0    21
   21:r98  l0    20   22:r99  l0    21   20:r100 l0     0   19:r101 l0     0
   18:r102 l0     0   16:r103 l0    21   13:r104 l0    21   12:r105 l0    20
    8:r106 l0    20    7:r107 l0    20    2:r108 l0    20
+++Costs: overall 15000, reg -7000, mem 22000, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


credit_a

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame] 20 [xmm0]
;;  regs ever live 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [xmm0] 21 [xmm1]
;;  ref usage 	r0={6d} r1={6d,1u} r2={6d,1u} r4={6d,1u} r5={10d,5u} r6={1d,2u} r7={1d,7u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r16={1d,1u} r17={5d} r18={5d} r19={1d,16u} r20={8d,8u} r21={7d,1u} r22={6d} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={5d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={6d} r37={6d} r38={5d} r39={5d} r44={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} 
;;    total ref usage 458{388d,70u,0e} in 46{41 regular + 5 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 summ+0 S8 A64])
        (reg:DI 5 di [ summ ])) "calc.c":251:1 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ summ ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [1 years+0 S8 A64])
        (reg:DI 4 si [ years ])) "calc.c":251:1 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ years ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [1 month+0 S8 A64])
        (reg:DI 1 dx [ month ])) "calc.c":251:1 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ month ])
        (nil)))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -48 [0xffffffffffffffd0])) [1 percent+0 S8 A64])
        (reg:DI 2 cx [ percent ])) "calc.c":251:1 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [ percent ])
        (nil)))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg:DI 96)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -48 [0xffffffffffffffd0])) [1 percent+0 S8 A64])) "calc.c":252:16 74 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg:DI 96)) "calc.c":252:16 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 96)
        (nil)))
(call_insn/i 11 10 12 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":252:16 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 12 11 13 2 (set (reg:DF 82 [ _1 ])
        (reg:DF 20 xmm0)) "calc.c":252:16 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 13 12 14 2 (set (reg:DF 97)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S8 A64])) "calc.c":252:30 135 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+2 [0x0.c8p+7])
        (nil)))
(insn 14 13 15 2 (set (reg:DF 83 [ _2 ])
        (div:DF (reg:DF 82 [ _1 ])
            (reg:DF 97))) "calc.c":252:30 985 {*fop_df_1}
     (expr_list:REG_DEAD (reg:DF 97)
        (expr_list:REG_DEAD (reg:DF 82 [ _1 ])
            (nil))))
(insn 15 14 16 2 (set (reg:DF 99)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC19") [flags 0x2]) [0  S8 A64])) "calc.c":252:12 135 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.2e+1 [0x0.cp+4])
        (nil)))
(insn 16 15 17 2 (set (reg:DF 98)
        (div:DF (reg:DF 83 [ _2 ])
            (reg:DF 99))) "calc.c":252:12 985 {*fop_df_1}
     (expr_list:REG_DEAD (reg:DF 99)
        (expr_list:REG_DEAD (reg:DF 83 [ _2 ])
            (nil))))
(insn 17 16 18 2 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 p+0 S8 A64])
        (reg:DF 98)) "calc.c":252:12 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 98)
        (nil)))
(insn 18 17 19 2 (set (reg:DI 100)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [1 summ+0 S8 A64])) "calc.c":253:17 74 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:DI 5 di)
        (reg:DI 100)) "calc.c":253:17 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 100)
        (nil)))
(call_insn/i 20 19 21 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":253:17 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 21 20 22 2 (set (reg:DF 84 [ _3 ])
        (reg:DF 20 xmm0)) "calc.c":253:17 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 22 21 23 2 (set (reg:DI 101)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [1 month+0 S8 A64])) "calc.c":253:53 74 {*movdi_internal}
     (nil))
(insn 23 22 24 2 (set (reg:DI 5 di)
        (reg:DI 101)) "calc.c":253:53 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 101)
        (nil)))
(call_insn/i 24 23 25 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":253:53 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 25 24 26 2 (set (reg:DF 85 [ _4 ])
        (reg:DF 20 xmm0)) "calc.c":253:53 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 26 25 27 2 (set (reg:DI 102)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [1 years+0 S8 A64])) "calc.c":253:72 74 {*movdi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:DI 5 di)
        (reg:DI 102)) "calc.c":253:72 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 102)
        (nil)))
(call_insn/i 28 27 29 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":253:72 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 29 28 30 2 (set (reg:DF 86 [ _5 ])
        (reg:DF 20 xmm0)) "calc.c":253:72 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 30 29 31 2 (set (reg:DF 103)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC19") [flags 0x2]) [0  S8 A64])) "calc.c":253:70 135 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.2e+1 [0x0.cp+4])
        (nil)))
(insn 31 30 32 2 (set (reg:DF 87 [ _6 ])
        (mult:DF (reg:DF 86 [ _5 ])
            (reg:DF 103))) "calc.c":253:70 981 {*fop_df_comm}
     (expr_list:REG_DEAD (reg:DF 103)
        (expr_list:REG_DEAD (reg:DF 86 [ _5 ])
            (nil))))
(insn 32 31 33 2 (set (reg:DF 88 [ _7 ])
        (plus:DF (reg:DF 85 [ _4 ])
            (reg:DF 87 [ _6 ]))) "calc.c":253:40 981 {*fop_df_comm}
     (expr_list:REG_DEAD (reg:DF 87 [ _6 ])
        (expr_list:REG_DEAD (reg:DF 85 [ _4 ])
            (nil))))
(insn 33 32 34 2 (set (reg:DF 104)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 p+0 S8 A64])) "calc.c":253:40 135 {*movdf_internal}
     (nil))
(insn 34 33 35 2 (set (reg:DF 105)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC20") [flags 0x2]) [0  S8 A64])) "calc.c":253:40 135 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 35 34 36 2 (set (reg:DF 89 [ _8 ])
        (plus:DF (reg:DF 104)
            (reg:DF 105))) "calc.c":253:40 981 {*fop_df_comm}
     (expr_list:REG_DEAD (reg:DF 105)
        (expr_list:REG_DEAD (reg:DF 104)
            (nil))))
(insn 36 35 37 2 (set (reg:DF 21 xmm1)
        (reg:DF 88 [ _7 ])) "calc.c":253:40 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 88 [ _7 ])
        (nil)))
(insn 37 36 38 2 (set (reg:DF 20 xmm0)
        (reg:DF 89 [ _8 ])) "calc.c":253:40 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 89 [ _8 ])
        (nil)))
(call_insn 38 37 39 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("pow") [flags 0x41]  <function_decl 0x7f09f1807b00 pow>) [0 __builtin_pow S1 A8])
            (const_int 0 [0]))) "calc.c":253:40 824 {*call_value}
     (expr_list:REG_DEAD (reg:DF 21 xmm1)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DF (use (reg:DF 20 xmm0))
        (expr_list:DF (use (reg:DF 21 xmm1))
            (nil))))
(insn 39 38 40 2 (set (reg:DF 90 [ _9 ])
        (reg:DF 20 xmm0)) "calc.c":253:40 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 40 39 41 2 (set (reg:DF 106)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC20") [flags 0x2]) [0  S8 A64])) "calc.c":253:85 135 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+0 [0x0.8p+1])
        (nil)))
(insn 41 40 42 2 (set (reg:DF 91 [ _10 ])
        (minus:DF (reg:DF 90 [ _9 ])
            (reg:DF 106))) "calc.c":253:85 985 {*fop_df_1}
     (expr_list:REG_DEAD (reg:DF 106)
        (expr_list:REG_DEAD (reg:DF 90 [ _9 ])
            (nil))))
(insn 42 41 43 2 (set (reg:DF 107)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 p+0 S8 A64])) "calc.c":253:37 135 {*movdf_internal}
     (nil))
(insn 43 42 44 2 (set (reg:DF 92 [ _11 ])
        (div:DF (reg:DF 107)
            (reg:DF 91 [ _10 ]))) "calc.c":253:37 985 {*fop_df_1}
     (expr_list:REG_DEAD (reg:DF 107)
        (expr_list:REG_DEAD (reg:DF 91 [ _10 ])
            (nil))))
(insn 44 43 45 2 (set (reg:DF 93 [ _12 ])
        (plus:DF (reg:DF 92 [ _11 ])
            (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])) [2 p+0 S8 A64]))) "calc.c":253:33 981 {*fop_df_comm}
     (expr_list:REG_DEAD (reg:DF 92 [ _11 ])
        (nil)))
(insn 45 44 46 2 (set (reg:DF 108)
        (mult:DF (reg:DF 84 [ _3 ])
            (reg:DF 93 [ _12 ]))) "calc.c":253:15 981 {*fop_df_comm}
     (expr_list:REG_DEAD (reg:DF 93 [ _12 ])
        (expr_list:REG_DEAD (reg:DF 84 [ _3 ])
            (nil))))
(insn 46 45 47 2 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [2 month_pay+0 S8 A64])
        (reg:DF 108)) "calc.c":253:15 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 108)
        (nil)))
(insn 47 46 50 2 (set (reg:DF 94 [ _21 ])
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [2 month_pay+0 S8 A64])) "calc.c":254:12 135 {*movdf_internal}
     (nil))
(insn 50 47 54 2 (set (reg:DF 95 [ <retval> ])
        (reg:DF 94 [ _21 ])) "calc.c":254:12 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 94 [ _21 ])
        (nil)))
(insn 54 50 55 2 (set (reg/i:DF 20 xmm0)
        (reg:DF 95 [ <retval> ])) "calc.c":255:1 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 95 [ <retval> ])
        (nil)))
(insn 55 54 0 2 (use (reg/i:DF 20 xmm0)) "calc.c":255:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0]


;; Function credit_d (credit_d, funcdef_no=13, decl_uid=4556, cgraph_uid=14, symbol_order=13)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 6 n_edges 6 count 6 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 46.
verify found no changes in insn with uid = 55.
verify found no changes in insn with uid = 73.
verify found no changes in insn with uid = 91.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r121: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a2 (r121,l0) best DIREG, allocno GENERAL_REGS
    r120: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a4 (r120,l0) best SSE_REGS, allocno SSE_REGS
    r119: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a6 (r119,l0) best SSE_REGS, allocno SSE_REGS
    r118: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a5 (r118,l0) best SSE_REGS, allocno SSE_REGS
    r117: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a8 (r117,l0) best SSE_REGS, allocno SSE_REGS
    r116: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a7 (r116,l0) best SSE_REGS, allocno SSE_REGS
    r115: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a10 (r115,l0) best SIREG, allocno GENERAL_REGS
    r114: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r114,l0) best DIREG, allocno GENERAL_REGS
    r113: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a11 (r113,l0) best DREG, allocno GENERAL_REGS
    r112: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a13 (r112,l0) best SSE_REGS, allocno SSE_REGS
    r111: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a15 (r111,l0) best SSE_REGS, allocno SSE_REGS
    r110: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a14 (r110,l0) best SSE_REGS, allocno SSE_REGS
    r109: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a16 (r109,l0) best DIREG, allocno GENERAL_REGS
    r108: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a17 (r108,l0) best CREG, allocno GENERAL_REGS
    r107: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a18 (r107,l0) best AREG, allocno GENERAL_REGS
    r106: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a19 (r106,l0) best DIREG, allocno GENERAL_REGS
    r105: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a20 (r105,l0) best SIREG, allocno GENERAL_REGS
    r104: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a22 (r104,l0) best SSE_REGS, allocno SSE_REGS
    r103: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a21 (r103,l0) best SSE_REGS, allocno SSE_REGS
    r102: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a24 (r102,l0) best SSE_REGS, allocno SSE_REGS
    r101: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a25 (r101,l0) best SSE_REGS, allocno SSE_REGS
    r100: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a26 (r100,l0) best SSE_REGS, allocno SSE_REGS
    r99: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a28 (r99,l0) best SSE_REGS, allocno SSE_REGS
    r98: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a27 (r98,l0) best SSE_REGS, allocno SSE_REGS
    r97: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a29 (r97,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r96: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a30 (r96,l0) best DIREG, allocno GENERAL_REGS
    r95: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a31 (r95,l0) best SSE_REGS, allocno SSE_REGS
    r94: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a34 (r94,l0) best DIREG, allocno GENERAL_REGS
    r93: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a35 (r93,l0) best SSE_REGS, allocno SSE_REGS
    r92: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a37 (r92,l0) best DIREG, allocno GENERAL_REGS
    r91: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a38 (r91,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r90: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a39 (r90,l0) best DIREG, allocno GENERAL_REGS
    r89: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a0 (r89,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r88: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a1 (r88,l0) best SSE_REGS, allocno SSE_REGS
    r87: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a3 (r87,l0) best SSE_REGS, allocno SSE_REGS
    r86: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a12 (r86,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r85: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a23 (r85,l0) best SSE_REGS, allocno SSE_REGS
    r84: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a32 (r84,l0) best SSE_FIRST_REG, allocno SSE_REGS
    r83: preferred SSE_REGS, alternative NO_REGS, allocno SSE_REGS
    a33 (r83,l0) best SSE_REGS, allocno SSE_REGS
    r82: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a36 (r82,l0) best SSE_FIRST_REG, allocno SSE_REGS

  a0(r89,l0) costs: AREG:6000 DREG:6000 CREG:6000 BREG:6000 SIREG:6000 DIREG:6000 AD_REGS:6000 CLOBBERED_REGS:6000 Q_REGS:6000 TLS_GOTBASE_REGS:6000 GENERAL_REGS:6000 FP_TOP_REG:19000 FP_SECOND_REG:19000 FLOAT_REGS:19000 SSE_FIRST_REG:19000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:19000 FLOAT_INT_REGS:19000 INT_SSE_REGS:19000 FLOAT_INT_SSE_REGS:19000 MEM:7000
  a1(r88,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 FP_TOP_REG:18000 FP_SECOND_REG:18000 FLOAT_REGS:18000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:18000 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 MEM:7000
  a2(r121,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a3(r87,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:11000
  a4(r120,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a5(r118,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a6(r119,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a7(r116,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a8(r117,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a9(r114,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a10(r115,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a11(r113,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a12(r86,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:26000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:12000
  a13(r112,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a14(r110,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a15(r111,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a16(r109,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a17(r108,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a18(r107,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a19(r106,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a20(r105,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a21(r103,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a22(r104,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:11000
  a23(r85,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:12000
  a24(r102,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:11000
  a25(r101,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a26(r100,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 FP_TOP_REG:24000 FP_SECOND_REG:24000 FLOAT_REGS:24000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:24000 FLOAT_INT_REGS:24000 INT_SSE_REGS:24000 FLOAT_INT_SSE_REGS:24000 MEM:12000
  a27(r98,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a28(r99,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a29(r97,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a30(r96,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a31(r95,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a32(r84,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:2000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:11000
  a33(r83,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:11000
  a34(r94,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a35(r93,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:11000
  a36(r82,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:2000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:11000
  a37(r92,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a38(r91,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a39(r90,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 100(l0): point = 0
   Insn 99(l0): point = 2
   Insn 95(l0): point = 4
   Insn 92(l0): point = 6
   Insn 91(l0): point = 8
   Insn 90(l0): point = 10
   Insn 89(l0): point = 12
   Insn 80(l0): point = 15
   Insn 79(l0): point = 17
   Insn 78(l0): point = 19
   Insn 77(l0): point = 21
   Insn 76(l0): point = 23
   Insn 75(l0): point = 25
   Insn 74(l0): point = 27
   Insn 73(l0): point = 29
   Insn 72(l0): point = 31
   Insn 71(l0): point = 33
   Insn 70(l0): point = 35
   Insn 69(l0): point = 37
   Insn 68(l0): point = 39
   Insn 67(l0): point = 41
   Insn 66(l0): point = 43
   Insn 65(l0): point = 45
   Insn 64(l0): point = 47
   Insn 63(l0): point = 49
   Insn 62(l0): point = 51
   Insn 61(l0): point = 53
   Insn 60(l0): point = 55
   Insn 87(l0): point = 58
   Insn 86(l0): point = 60
   Insn 85(l0): point = 62
   Insn 83(l0): point = 64
   Insn 102(l0): point = 67
   Insn 56(l0): point = 69
   Insn 55(l0): point = 71
   Insn 54(l0): point = 73
   Insn 53(l0): point = 75
   Insn 52(l0): point = 77
   Insn 51(l0): point = 79
   Insn 50(l0): point = 81
   Insn 49(l0): point = 83
   Insn 48(l0): point = 85
   Insn 47(l0): point = 87
   Insn 46(l0): point = 89
   Insn 45(l0): point = 91
   Insn 44(l0): point = 93
   Insn 43(l0): point = 95
   Insn 42(l0): point = 97
   Insn 41(l0): point = 99
   Insn 40(l0): point = 101
   Insn 39(l0): point = 104
   Insn 38(l0): point = 106
   Insn 37(l0): point = 109
   Insn 36(l0): point = 111
   Insn 35(l0): point = 113
   Insn 34(l0): point = 115
   Insn 33(l0): point = 117
   Insn 32(l0): point = 119
   Insn 31(l0): point = 121
   Insn 30(l0): point = 123
   Insn 29(l0): point = 125
   Insn 28(l0): point = 127
   Insn 27(l0): point = 129
   Insn 26(l0): point = 131
   Insn 25(l0): point = 133
   Insn 24(l0): point = 135
   Insn 23(l0): point = 137
   Insn 22(l0): point = 139
   Insn 21(l0): point = 141
   Insn 20(l0): point = 143
   Insn 19(l0): point = 145
   Insn 18(l0): point = 147
   Insn 17(l0): point = 149
   Insn 16(l0): point = 151
   Insn 15(l0): point = 153
   Insn 14(l0): point = 155
   Insn 13(l0): point = 157
   Insn 12(l0): point = 159
   Insn 11(l0): point = 161
   Insn 10(l0): point = 163
   Insn 9(l0): point = 165
   Insn 5(l0): point = 167
   Insn 4(l0): point = 169
   Insn 3(l0): point = 171
   Insn 2(l0): point = 173
 a0(r89): [3..4]
 a1(r88): [5..6]
 a2(r121): [11..12]
 a3(r87): [61..64]
 a4(r120): [61..62]
 a5(r118): [18..19]
 a6(r119): [20..21]
 a7(r116): [24..25]
 a8(r117): [26..27]
 a9(r114): [34..43]
 a10(r115): [36..37]
 a11(r113): [40..45]
 a12(r86): [42..47]
 a13(r112): [48..49]
 a14(r110): [52..53]
 a15(r111): [54..55]
 a16(r109): [74..75]
 a17(r108): [82..83]
 a18(r107): [86..87]
 a19(r106): [92..93]
 a20(r105): [96..97]
 a21(r103): [100..102]
 a22(r104): [102..104]
 a23(r85): [103..107]
 a24(r102): [107..109]
 a25(r101): [108..111]
 a26(r100): [114..115]
 a27(r98): [118..119]
 a28(r99): [120..121]
 a29(r97): [124..125]
 a30(r96): [130..131]
 a31(r95): [134..135]
 a32(r84): [136..137]
 a33(r83): [136..145]
 a34(r94): [142..143]
 a35(r93): [146..147]
 a36(r82): [146..149]
 a37(r92): [154..155]
 a38(r91): [158..159]
 a39(r90): [164..165]
Compressing live ranges: from 176 to 67 - 38%
Ranges after the compression:
 a0(r89): [0..1]
 a1(r88): [2..3]
 a2(r121): [4..5]
 a3(r87): [24..25]
 a4(r120): [24..25]
 a5(r118): [6..7]
 a6(r119): [8..9]
 a7(r116): [10..11]
 a8(r117): [12..13]
 a9(r114): [14..17]
 a10(r115): [14..15]
 a11(r113): [16..17]
 a12(r86): [16..17]
 a13(r112): [18..19]
 a14(r110): [20..21]
 a15(r111): [22..23]
 a16(r109): [26..27]
 a17(r108): [28..29]
 a18(r107): [30..31]
 a19(r106): [32..33]
 a20(r105): [34..35]
 a21(r103): [36..37]
 a22(r104): [37..39]
 a23(r85): [38..40]
 a24(r102): [40..42]
 a25(r101): [41..42]
 a26(r100): [43..44]
 a27(r98): [45..46]
 a28(r99): [47..48]
 a29(r97): [49..50]
 a30(r96): [51..52]
 a31(r95): [53..54]
 a32(r84): [55..56]
 a33(r83): [55..58]
 a34(r94): [57..58]
 a35(r93): [59..60]
 a36(r82): [59..60]
 a37(r92): [61..62]
 a38(r91): [63..64]
 a39(r90): [65..66]
  pref0:a2(r121)<-hr5@1500
  pref1:a10(r115)<-hr4@1500
  pref2:a9(r114)<-hr5@1500
  pref3:a11(r113)<-hr1@1500
  pref4:a16(r109)<-hr5@1500
  pref5:a17(r108)<-hr2@1500
  pref6:a18(r107)<-hr0@1500
  pref7:a19(r106)<-hr5@1500
  pref8:a20(r105)<-hr4@1500
  pref9:a29(r97)<-hr20@2000
  pref10:a30(r96)<-hr5@1500
  pref11:a34(r94)<-hr5@1500
  pref12:a37(r92)<-hr5@1500
  pref13:a38(r91)<-hr20@2000
  pref14:a39(r90)<-hr5@1500
  pref15:a0(r89)<-hr20@1538
  pref16:a12(r86)<-hr20@2076
  pref17:a32(r84)<-hr20@1500
  pref18:a36(r82)<-hr20@1500
  regions=1, blocks=6, points=67
    allocnos=40 (big 0), copies=0, conflicts=0, ranges=40
Disposition:
   36:r82  l0    20   33:r83  l0   mem   32:r84  l0    20   23:r85  l0    20
   12:r86  l0     2    3:r87  l0    21    1:r88  l0    20    0:r89  l0     0
   39:r90  l0     0   38:r91  l0     0   37:r92  l0     0   35:r93  l0    21
   34:r94  l0     0   31:r95  l0    20   30:r96  l0     0   29:r97  l0     0
   27:r98  l0    20   28:r99  l0    20   26:r100 l0    20   25:r101 l0    20
   24:r102 l0    21   21:r103 l0    20   22:r104 l0    21   20:r105 l0     0
   19:r106 l0     0   18:r107 l0     0   17:r108 l0     0   16:r109 l0     0
   14:r110 l0    20   15:r111 l0    20   13:r112 l0    20   11:r113 l0     1
    9:r114 l0     0   10:r115 l0     2    7:r116 l0    20    8:r117 l0    20
    5:r118 l0    20    6:r119 l0    20    4:r120 l0    20    2:r121 l0     0
+++Costs: overall -8000, reg -19000, mem 11000, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


credit_d

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame] 20 [xmm0]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [xmm0]
;;  ref usage 	r0={10d,2u} r1={11d,3u} r2={10d,2u} r4={12d,4u} r5={17d,9u} r6={1d,5u} r7={1d,13u} r8={8d} r9={8d} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r16={1d,4u} r17={10d,1u} r18={8d} r19={1d,45u} r20={11d,7u} r21={9d} r22={9d} r23={9d} r24={9d} r25={9d} r26={9d} r27={9d} r28={8d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={9d} r37={9d} r38={8d} r39={8d} r44={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} 
;;    total ref usage 749{614d,135u,0e} in 85{77 regular + 8 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 83 84 85 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -88 [0xffffffffffffffa8])) [1 summ_c+0 S8 A64])
        (reg:DI 5 di [ summ_c ])) "calc.c":258:1 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ summ_c ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -96 [0xffffffffffffffa0])) [1 years_c+0 S8 A64])
        (reg:DI 4 si [ years_c ])) "calc.c":258:1 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ years_c ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -104 [0xffffffffffffff98])) [1 month_c+0 S8 A64])
        (reg:DI 1 dx [ month_c ])) "calc.c":258:1 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ month_c ])
        (nil)))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -112 [0xffffffffffffff90])) [1 percent_c+0 S8 A64])
        (reg:DI 2 cx [ percent_c ])) "calc.c":258:1 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [ percent_c ])
        (nil)))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -88 [0xffffffffffffffa8])) [1 summ_c+0 S8 A64])) "calc.c":259:18 74 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg:DI 90)) "calc.c":259:18 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 90)
        (nil)))
(call_insn/i 11 10 12 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":259:18 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 12 11 13 2 (set (reg:DF 91)
        (reg:DF 20 xmm0)) "calc.c":259:18 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 13 12 14 2 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -64 [0xffffffffffffffc0])) [2 sum+0 S8 A64])
        (reg:DF 91)) "calc.c":259:18 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 91)
        (nil)))
(insn 14 13 15 2 (set (reg:DI 92)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -96 [0xffffffffffffffa0])) [1 years_c+0 S8 A64])) "calc.c":259:45 74 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (reg:DI 92)) "calc.c":259:45 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 92)
        (nil)))
(call_insn/i 16 15 17 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":259:45 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 17 16 18 2 (set (reg:DF 82 [ _1 ])
        (reg:DF 20 xmm0)) "calc.c":259:45 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 18 17 19 2 (set (reg:DF 93)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC19") [flags 0x2]) [0  S8 A64])) "calc.c":259:43 135 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.2e+1 [0x0.cp+4])
        (nil)))
(insn 19 18 20 2 (set (reg:DF 83 [ _2 ])
        (mult:DF (reg:DF 82 [ _1 ])
            (reg:DF 93))) "calc.c":259:43 981 {*fop_df_comm}
     (expr_list:REG_DEAD (reg:DF 93)
        (expr_list:REG_DEAD (reg:DF 82 [ _1 ])
            (nil))))
(insn 20 19 21 2 (set (reg:DI 94)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -104 [0xffffffffffffff98])) [1 month_c+0 S8 A64])) "calc.c":259:61 74 {*movdi_internal}
     (nil))
(insn 21 20 22 2 (set (reg:DI 5 di)
        (reg:DI 94)) "calc.c":259:61 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 94)
        (nil)))
(call_insn/i 22 21 23 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":259:61 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 23 22 24 2 (set (reg:DF 84 [ _3 ])
        (reg:DF 20 xmm0)) "calc.c":259:61 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 24 23 25 2 (set (reg:DF 95)
        (plus:DF (reg:DF 83 [ _2 ])
            (reg:DF 84 [ _3 ]))) "calc.c":259:32 981 {*fop_df_comm}
     (expr_list:REG_DEAD (reg:DF 84 [ _3 ])
        (expr_list:REG_DEAD (reg:DF 83 [ _2 ])
            (nil))))
(insn 25 24 26 2 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -48 [0xffffffffffffffd0])) [2 month+0 S8 A64])
        (reg:DF 95)) "calc.c":259:32 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 95)
        (nil)))
(insn 26 25 27 2 (set (reg:DI 96)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -112 [0xffffffffffffff90])) [1 percent_c+0 S8 A64])) "calc.c":259:86 74 {*movdi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:DI 5 di)
        (reg:DI 96)) "calc.c":259:86 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 96)
        (nil)))
(call_insn/i 28 27 29 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":259:86 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 29 28 30 2 (set (reg:DF 97)
        (reg:DF 20 xmm0)) "calc.c":259:86 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 30 29 31 2 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [2 percent+0 S8 A64])
        (reg:DF 97)) "calc.c":259:86 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 97)
        (nil)))
(insn 31 30 32 2 (set (reg:DF 99)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -64 [0xffffffffffffffc0])) [2 sum+0 S8 A64])) "calc.c":260:12 135 {*movdf_internal}
     (nil))
(insn 32 31 33 2 (set (reg:DF 98)
        (div:DF (reg:DF 99)
            (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                    (const_int -48 [0xffffffffffffffd0])) [2 month+0 S8 A64]))) "calc.c":260:12 985 {*fop_df_1}
     (expr_list:REG_DEAD (reg:DF 99)
        (nil)))
(insn 33 32 34 2 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [2 base+0 S8 A64])
        (reg:DF 98)) "calc.c":260:12 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 98)
        (nil)))
(insn 34 33 35 2 (set (reg:DF 100)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -64 [0xffffffffffffffc0])) [2 sum+0 S8 A64])) "calc.c":260:32 135 {*movdf_internal}
     (nil))
(insn 35 34 36 2 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -56 [0xffffffffffffffc8])) [2 res+0 S8 A64])
        (reg:DF 100)) "calc.c":260:32 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 100)
        (nil)))
(insn 36 35 37 2 (set (reg:DF 101)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -40 [0xffffffffffffffd8])) [2 percent+0 S8 A64])) "calc.c":260:55 135 {*movdf_internal}
     (nil))
(insn 37 36 38 2 (set (reg:DF 102)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0  S8 A64])) "calc.c":260:55 135 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.0e+2 [0x0.c8p+7])
        (nil)))
(insn 38 37 39 2 (set (reg:DF 85 [ _4 ])
        (div:DF (reg:DF 101)
            (reg:DF 102))) "calc.c":260:55 985 {*fop_df_1}
     (expr_list:REG_DEAD (reg:DF 102)
        (expr_list:REG_DEAD (reg:DF 101)
            (nil))))
(insn 39 38 40 2 (set (reg:DF 104)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC19") [flags 0x2]) [0  S8 A64])) "calc.c":260:43 135 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 1.2e+1 [0x0.cp+4])
        (nil)))
(insn 40 39 41 2 (set (reg:DF 103)
        (div:DF (reg:DF 85 [ _4 ])
            (reg:DF 104))) "calc.c":260:43 985 {*fop_df_1}
     (expr_list:REG_DEAD (reg:DF 104)
        (expr_list:REG_DEAD (reg:DF 85 [ _4 ])
            (nil))))
(insn 41 40 42 2 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 p+0 S8 A64])
        (reg:DF 103)) "calc.c":260:43 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 103)
        (nil)))
(insn 42 41 43 2 (set (reg:DI 105)
        (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f09f171d3f0 *.LC21>)) "calc.c":262:12 74 {*movdi_internal}
     (nil))
(insn 43 42 44 2 (set (reg:DI 4 si)
        (reg:DI 105)) "calc.c":262:12 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 105)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC21") [flags 0x2]  <var_decl 0x7f09f171d3f0 *.LC21>)
            (nil))))
(insn 44 43 45 2 (set (reg:DI 106)
        (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7f09f171d480 *.LC22>)) "calc.c":262:12 74 {*movdi_internal}
     (nil))
(insn 45 44 46 2 (set (reg:DI 5 di)
        (reg:DI 106)) "calc.c":262:12 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 106)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC22") [flags 0x2]  <var_decl 0x7f09f171d480 *.LC22>)
            (nil))))
(call_insn 46 45 47 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f09f1904500 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) "calc.c":262:12 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 47 46 48 2 (set (reg/f:DI 107)
        (reg:DI 0 ax)) "calc.c":262:12 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 107)
            (nil))))
(insn 48 47 49 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [13 data+0 S8 A64])
        (reg/f:DI 107)) "calc.c":262:12 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 107)
        (nil)))
(insn 49 48 50 2 (set (reg:DI 108)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [13 data+0 S8 A64])) "calc.c":263:5 74 {*movdi_internal}
     (nil))
(insn 50 49 51 2 (set (reg:DI 2 cx)
        (reg:DI 108)) "calc.c":263:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 108)
        (nil)))
(insn 51 50 52 2 (set (reg:DI 1 dx)
        (const_int 15 [0xf])) "calc.c":263:5 74 {*movdi_internal}
     (nil))
(insn 52 51 53 2 (set (reg:DI 4 si)
        (const_int 1 [0x1])) "calc.c":263:5 74 {*movdi_internal}
     (nil))
(insn 53 52 54 2 (set (reg:DI 109)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7f09f171d510 *.LC23>)) "calc.c":263:5 74 {*movdi_internal}
     (nil))
(insn 54 53 55 2 (set (reg:DI 5 di)
        (reg:DI 109)) "calc.c":263:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 109)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7f09f171d510 *.LC23>)
            (nil))))
(call_insn 55 54 56 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fwrite") [flags 0x41]  <function_decl 0x7f09f183ec00 __builtin_fwrite>) [0 __builtin_fwrite S1 A8])
            (const_int 0 [0]))) "calc.c":263:5 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_UNUSED (reg:DI 0 ax)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 56 55 102 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -68 [0xffffffffffffffbc])) [5 i+0 S4 A32])
        (const_int 1 [0x1])) "calc.c":264:14 75 {*movsi_internal}
     (nil))
(jump_insn 102 56 103 2 (set (pc)
        (label_ref 81)) "calc.c":264:5 807 {jump}
     (nil)
 -> 81)
;;  succ:       4 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 103 102 84)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 86 110 111 112 113 114 115 116 117 118 119
(code_label 84 103 59 3 86 (nil) [1 uses])
(note 59 84 60 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 3 (set (reg:DF 111)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -64 [0xffffffffffffffc0])) [2 sum+0 S8 A64])) "calc.c":266:13 135 {*movdf_internal}
     (nil))
(insn 61 60 62 3 (set (reg:DF 110)
        (mult:DF (reg:DF 111)
            (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                    (const_int -24 [0xffffffffffffffe8])) [2 p+0 S8 A64]))) "calc.c":266:13 981 {*fop_df_comm}
     (expr_list:REG_DEAD (reg:DF 111)
        (nil)))
(insn 62 61 63 3 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [2 dop+0 S8 A64])
        (reg:DF 110)) "calc.c":266:13 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 110)
        (nil)))
(insn 63 62 64 3 (set (reg:DF 112)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -8 [0xfffffffffffffff8])) [2 dop+0 S8 A64])) "calc.c":267:9 135 {*movdf_internal}
     (nil))
(insn 64 63 65 3 (set (reg:DF 86 [ _5 ])
        (plus:DF (reg:DF 112)
            (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                    (const_int -32 [0xffffffffffffffe0])) [2 base+0 S8 A64]))) "calc.c":267:9 981 {*fop_df_comm}
     (expr_list:REG_DEAD (reg:DF 112)
        (nil)))
(insn 65 64 66 3 (set (reg:SI 113)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -68 [0xffffffffffffffbc])) [5 i+0 S4 A32])) "calc.c":267:9 75 {*movsi_internal}
     (nil))
(insn 66 65 67 3 (set (reg:DI 114)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [13 data+0 S8 A64])) "calc.c":267:9 74 {*movdi_internal}
     (nil))
(insn 67 66 68 3 (set (reg:DF 20 xmm0)
        (reg:DF 86 [ _5 ])) "calc.c":267:9 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 86 [ _5 ])
        (nil)))
(insn 68 67 69 3 (set (reg:SI 1 dx)
        (reg:SI 113)) "calc.c":267:9 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 113)
        (nil)))
(insn 69 68 70 3 (set (reg:DI 115)
        (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7f09f171d5a0 *.LC24>)) "calc.c":267:9 74 {*movdi_internal}
     (nil))
(insn 70 69 71 3 (set (reg:DI 4 si)
        (reg:DI 115)) "calc.c":267:9 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 115)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC24") [flags 0x2]  <var_decl 0x7f09f171d5a0 *.LC24>)
            (nil))))
(insn 71 70 72 3 (set (reg:DI 5 di)
        (reg:DI 114)) "calc.c":267:9 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 114)
        (nil)))
(insn 72 71 73 3 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) "calc.c":267:9 77 {*movqi_internal}
     (nil))
(call_insn 73 72 74 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fprintf") [flags 0x41]  <function_decl 0x7f09f183bb00 fprintf>) [0 __builtin_fprintf S1 A8])
            (const_int 0 [0]))) "calc.c":267:9 824 {*call_value}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:DI 4 si)
                (expr_list:REG_DEAD (reg:SI 1 dx)
                    (expr_list:REG_UNUSED (reg:SI 0 ax)
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (expr_list:DF (use (reg:DF 20 xmm0))
                        (nil)))))))
(insn 74 73 75 3 (set (reg:DF 117)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -64 [0xffffffffffffffc0])) [2 sum+0 S8 A64])) "calc.c":268:13 135 {*movdf_internal}
     (nil))
(insn 75 74 76 3 (set (reg:DF 116)
        (minus:DF (reg:DF 117)
            (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                    (const_int -32 [0xffffffffffffffe0])) [2 base+0 S8 A64]))) "calc.c":268:13 985 {*fop_df_1}
     (expr_list:REG_DEAD (reg:DF 117)
        (nil)))
(insn 76 75 77 3 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -64 [0xffffffffffffffc0])) [2 sum+0 S8 A64])
        (reg:DF 116)) "calc.c":268:13 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 116)
        (nil)))
(insn 77 76 78 3 (set (reg:DF 119)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -56 [0xffffffffffffffc8])) [2 res+0 S8 A64])) "calc.c":269:13 135 {*movdf_internal}
     (nil))
(insn 78 77 79 3 (set (reg:DF 118)
        (plus:DF (reg:DF 119)
            (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                    (const_int -8 [0xfffffffffffffff8])) [2 dop+0 S8 A64]))) "calc.c":269:13 981 {*fop_df_comm}
     (expr_list:REG_DEAD (reg:DF 119)
        (nil)))
(insn 79 78 80 3 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -56 [0xffffffffffffffc8])) [2 res+0 S8 A64])
        (reg:DF 118)) "calc.c":269:13 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 118)
        (nil)))
(insn 80 79 81 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                        (const_int -68 [0xffffffffffffffbc])) [5 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -68 [0xffffffffffffffbc])) [5 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":264:34 209 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 87 120
(code_label 81 80 82 4 85 (nil) [1 uses])
(note 82 81 83 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 85 4 (set (reg:DF 87 [ _6 ])
        (float:DF (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -68 [0xffffffffffffffbc])) [5 i+0 S4 A32]))) "calc.c":264:23 191 {*floatsidf2}
     (nil))
(insn 85 83 86 4 (set (reg:DF 120)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -48 [0xffffffffffffffd0])) [2 month+0 S8 A64])) "calc.c":264:23 135 {*movdf_internal}
     (nil))
(insn 86 85 87 4 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:DF 120)
            (reg:DF 87 [ _6 ]))) "calc.c":264:23 46 {*cmpidf}
     (expr_list:REG_DEAD (reg:DF 120)
        (expr_list:REG_DEAD (reg:DF 87 [ _6 ])
            (nil))))
(jump_insn 87 86 88 4 (set (pc)
        (if_then_else (ge (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref 84)
            (pc))) "calc.c":264:23 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCFP 17 flags)
        (nil))
 -> 84)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 88 89 121
(note 88 87 89 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 89 88 90 5 (set (reg:DI 121)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [13 data+0 S8 A64])) "calc.c":271:5 74 {*movdi_internal}
     (nil))
(insn 90 89 91 5 (set (reg:DI 5 di)
        (reg:DI 121)) "calc.c":271:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 121)
        (nil)))
(call_insn 91 90 92 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f09f18eae00 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) "calc.c":271:5 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 92 91 95 5 (set (reg:DF 88 [ _27 ])
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -56 [0xffffffffffffffc8])) [2 res+0 S8 A64])) "calc.c":272:12 135 {*movdf_internal}
     (nil))
(insn 95 92 99 5 (set (reg:DF 89 [ <retval> ])
        (reg:DF 88 [ _27 ])) "calc.c":272:12 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 88 [ _27 ])
        (nil)))
(insn 99 95 100 5 (set (reg/i:DF 20 xmm0)
        (reg:DF 89 [ <retval> ])) "calc.c":273:1 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 89 [ <retval> ])
        (nil)))
(insn 100 99 0 5 (use (reg/i:DF 20 xmm0)) "calc.c":273:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0]


;; Function vklad_not (vklad_not, funcdef_no=14, decl_uid=4582, cgraph_uid=15, symbol_order=14)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 41 n_edges 57 count 41 (    1)
;; 6 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40
;;
;; Loop 4
;;  header 31, latch 30
;;  depth 1, outer 0
;;  nodes: 31 30 26 29 27 28 25 23 24 19 22 21 20
;;
;; Loop 3
;;  header 17, latch 16
;;  depth 1, outer 0
;;  nodes: 17 16 15 14 10 13 11 12
;;
;; Loop 5
;;  header 15, latch 14
;;  depth 2, outer 3
;;  nodes: 15 14 13 11 12
;;
;; Loop 2
;;  header 8, latch 7
;;  depth 1, outer 0
;;  nodes: 8 7
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 6 9 }
;; 6 succs { 8 }
;; 7 succs { 8 }
;; 8 succs { 7 9 }
;; 9 succs { 17 }
;; 10 succs { 15 }
;; 11 succs { 12 14 }
;; 12 succs { 13 14 }
;; 13 succs { 14 }
;; 14 succs { 15 }
;; 15 succs { 11 16 }
;; 16 succs { 17 }
;; 17 succs { 10 18 }
;; 18 succs { 31 }
;; 19 succs { 20 23 }
;; 20 succs { 21 22 }
;; 21 succs { 22 }
;; 22 succs { 23 }
;; 23 succs { 26 24 }
;; 24 succs { 25 26 }
;; 25 succs { 26 }
;; 26 succs { 27 30 }
;; 27 succs { 28 29 }
;; 28 succs { 29 }
;; 29 succs { 30 }
;; 30 succs { 31 }
;; 31 succs { 19 32 }
;; 32 succs { 33 34 }
;; 33 succs { 34 }
;; 34 succs { 35 36 }
;; 35 succs { 38 }
;; 36 succs { 37 38 }
;; 37 succs { 38 }
;; 38 succs { 40 39 }
;; 39 succs { }
;; 40 succs { 1 }
Removing SCRATCH to p420 in insn #13 (nop 2)
rescanning insn with uid = 13.
Removing SCRATCH to p421 in insn #631 (nop 3)
rescanning insn with uid = 631.
Building IRA IR
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 37.
verify found no changes in insn with uid = 69.
verify found no changes in insn with uid = 80.
verify found no changes in insn with uid = 93.
verify found no changes in insn with uid = 103.
verify found no changes in insn with uid = 114.
verify found no changes in insn with uid = 123.
verify found no changes in insn with uid = 138.
verify found no changes in insn with uid = 146.
verify found no changes in insn with uid = 156.
verify found no changes in insn with uid = 164.
verify found no changes in insn with uid = 175.
verify found no changes in insn with uid = 183.
verify found no changes in insn with uid = 199.
verify found no changes in insn with uid = 314.
verify found no changes in insn with uid = 329.
verify found no changes in insn with uid = 351.
verify found no changes in insn with uid = 373.
verify found no changes in insn with uid = 396.
verify found no changes in insn with uid = 423.
verify found no changes in insn with uid = 443.
verify found no changes in insn with uid = 492.
verify found no changes in insn with uid = 512.
verify found no changes in insn with uid = 558.
verify found no changes in insn with uid = 584.
verify found no changes in insn with uid = 596.
verify found no changes in insn with uid = 604.
verify found no changes in insn with uid = 607.
verify found no changes in insn with uid = 633.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 41 n_edges 57 count 41 (    1)

Pass 0 for finding pseudo/allocno costs

    r421: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r421,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r420: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a336 (r420,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r418: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a3 (r418,l0) best SSE_REGS, allocno SSE_REGS
    r417: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a4 (r417,l0) best SSE_REGS, allocno SSE_REGS
    r416: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a5 (r416,l0) best DIREG, allocno GENERAL_REGS
    r415: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a6 (r415,l0) best DIREG, allocno GENERAL_REGS
    r414: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a7 (r414,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r413: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a8 (r413,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r412: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r412,l0) best DIREG, allocno GENERAL_REGS
    r411: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a12 (r411,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r410: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a10 (r410,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r409: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a16 (r409,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r408: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a20 (r408,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r407: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a22 (r407,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r406: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a24 (r406,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r405: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a26 (r405,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r404: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a30 (r404,l0) best SSE_REGS, allocno SSE_REGS
    r403: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a28 (r403,l0) best SSE_REGS, allocno SSE_REGS
    r402: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a33 (r402,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r401: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r401,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r400: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r400,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r399: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a45 (r399,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r398: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r398,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r397: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r397,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r396: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a52 (r396,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r395: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a50 (r395,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r394: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a53 (r394,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r393: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r393,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r392: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a56 (r392,l0) best DIREG, allocno GENERAL_REGS
    r391: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a57 (r391,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r390: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a59 (r390,l0) best DREG, allocno GENERAL_REGS
    r389: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r389,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r388: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a62 (r388,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r387: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a66 (r387,l0) best SSE_REGS, allocno SSE_REGS
    r386: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a64 (r386,l0) best SSE_REGS, allocno SSE_REGS
    r385: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a69 (r385,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r384: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a75 (r384,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r383: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a78 (r383,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r382: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a81 (r382,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r381: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a84 (r381,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r380: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a87 (r380,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r379: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a90 (r379,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r378: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a93 (r378,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r377: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a91 (r377,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r376: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a96 (r376,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r375: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a100 (r375,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r374: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a101 (r374,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r373: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a104 (r373,l0) best SSE_REGS, allocno SSE_REGS
    r372: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a102 (r372,l0) best SSE_REGS, allocno SSE_REGS
    r371: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a107 (r371,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r370: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a113 (r370,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r369: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a116 (r369,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r368: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a119 (r368,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r367: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a122 (r367,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r366: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a123 (r366,l0) best DIREG, allocno GENERAL_REGS
    r365: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a127 (r365,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r364: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a130 (r364,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r363: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a131 (r363,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r362: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a134 (r362,l0) best SSE_REGS, allocno SSE_REGS
    r361: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a132 (r361,l0) best SSE_REGS, allocno SSE_REGS
    r360: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a137 (r360,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r359: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a143 (r359,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r358: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a146 (r358,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r357: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a149 (r357,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r356: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a152 (r356,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r355: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a153 (r355,l0) best DIREG, allocno GENERAL_REGS
    r354: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a154 (r354,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r353: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a157 (r353,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r352: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a158 (r352,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r351: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a162 (r351,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r350: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a160 (r350,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r349: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a166 (r349,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r348: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a170 (r348,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r347: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a172 (r347,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r346: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a174 (r346,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r345: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a176 (r345,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r344: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a178 (r344,l0) best DIREG, allocno GENERAL_REGS
    r343: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a181 (r343,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r342: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a184 (r342,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r341: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a185 (r341,l0) best DIREG, allocno GENERAL_REGS
    r340: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a186 (r340,l0) best SSE_REGS, allocno SSE_REGS
    r339: preferred FLOAT_REGS, alternative FLOAT_INT_REGS, allocno FLOAT_REGS
    a187 (r339,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r338: preferred FLOAT_REGS, alternative FLOAT_INT_REGS, allocno FLOAT_REGS
    a188 (r338,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r337: preferred FLOAT_REGS, alternative FLOAT_INT_REGS, allocno FLOAT_REGS
    a189 (r337,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r336: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a190 (r336,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r335: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a192 (r335,l0) best SSE_REGS, allocno SSE_REGS
    r334: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a193 (r334,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r333: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a196 (r333,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r332: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a200 (r332,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r331: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a204 (r331,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r330: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a205 (r330,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r329: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a209 (r329,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r328: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a213 (r328,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r327: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a216 (r327,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r326: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a217 (r326,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r325: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a220 (r325,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r324: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a221 (r324,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r323: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a222 (r323,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r322: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a223 (r322,l0) best SSE_REGS, allocno SSE_REGS
    r321: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a225 (r321,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r320: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a228 (r320,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r319: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a229 (r319,l0) best SSE_REGS, allocno SSE_REGS
    r318: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a232 (r318,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r317: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a235 (r317,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r316: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a237 (r316,l0) best SSE_REGS, allocno SSE_REGS
    r315: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a239 (r315,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r314: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a242 (r314,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r313: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a243 (r313,l0) best SSE_REGS, allocno SSE_REGS
    r312: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a244 (r312,l0) best AREG, allocno GENERAL_REGS
    r311: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a248 (r311,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r310: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a249 (r310,l0) best AREG, allocno GENERAL_REGS
    r309: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a251 (r309,l0) best SIREG, allocno GENERAL_REGS
    r308: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a252 (r308,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r307: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a255 (r307,l0) best DIREG, allocno GENERAL_REGS
    r306: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a256 (r306,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r305: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a260 (r305,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r304: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a261 (r304,l0) best AREG, allocno GENERAL_REGS
    r303: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a263 (r303,l0) best SIREG, allocno GENERAL_REGS
    r302: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a264 (r302,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r301: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a267 (r301,l0) best DIREG, allocno GENERAL_REGS
    r300: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a268 (r300,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r299: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a271 (r299,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r298: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a272 (r298,l0) best AREG, allocno GENERAL_REGS
    r297: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a273 (r297,l0) best DIREG, allocno GENERAL_REGS
    r296: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a277 (r296,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r295: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a278 (r295,l0) best DIREG, allocno GENERAL_REGS
    r294: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a279 (r294,l0) best SIREG, allocno GENERAL_REGS
    r293: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a282 (r293,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r292: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a283 (r292,l0) best AREG, allocno GENERAL_REGS
    r291: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a285 (r291,l0) best SIREG, allocno GENERAL_REGS
    r290: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a286 (r290,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r289: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a289 (r289,l0) best DIREG, allocno GENERAL_REGS
    r288: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a290 (r288,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r287: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a293 (r287,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r286: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a296 (r286,l0) best DIREG, allocno GENERAL_REGS
    r285: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a297 (r285,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r284: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a300 (r284,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r283: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a301 (r283,l0) best AREG, allocno GENERAL_REGS
    r282: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a302 (r282,l0) best DIREG, allocno GENERAL_REGS
    r281: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a303 (r281,l0) best SIREG, allocno GENERAL_REGS
    r280: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a305 (r280,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r279: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a306 (r279,l0) best AREG, allocno GENERAL_REGS
    r278: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a307 (r278,l0) best DIREG, allocno GENERAL_REGS
    r277: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a311 (r277,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r276: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a314 (r276,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r275: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a318 (r275,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r274: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a322 (r274,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r273: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a324 (r273,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r272: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a327 (r272,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r271: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a328 (r271,l0) best DIREG, allocno GENERAL_REGS
    r270: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a329 (r270,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r269: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a330 (r269,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r268: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a331 (r268,l0) best DIREG, allocno GENERAL_REGS
    r267: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a332 (r267,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r266: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a333 (r266,l0) best DIREG, allocno GENERAL_REGS
    r265: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a335 (r265,l0) best DIREG, allocno GENERAL_REGS
    r264: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a337 (r264,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r263: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a338 (r263,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r262: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a0 (r262,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r261: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a65 (r261,l0) best SSE_FIRST_REG, allocno SSE_REGS
    r260: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a103 (r260,l0) best SSE_FIRST_REG, allocno SSE_REGS
    r259: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a133 (r259,l0) best SSE_FIRST_REG, allocno SSE_REGS
    r258: preferred NO_REGS, alternative NO_REGS, allocno NO_REGS
    a163 (r258,l0) best NO_REGS, allocno NO_REGS
    r257: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a2 (r257,l0) best SSE_REGS, allocno SSE_REGS
    r256: preferred NO_REGS, alternative NO_REGS, allocno NO_REGS
    a13 (r256,l0) best NO_REGS, allocno NO_REGS
    r255: preferred SSE_FIRST_REG, alternative SSE_REGS, allocno SSE_REGS
    a29 (r255,l0) best SSE_FIRST_REG, allocno SSE_REGS
    r254: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a11 (r254,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r253: preferred SSE_FIRST_REG, alternative NO_REGS, allocno SSE_FIRST_REG
    a14 (r253,l0) best SSE_FIRST_REG, allocno SSE_FIRST_REG
    r252: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a15 (r252,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r251: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a17 (r251,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r250: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a18 (r250,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r249: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a19 (r249,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r248: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a21 (r248,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r247: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a23 (r247,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r246: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a25 (r246,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r245: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a27 (r245,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r244: preferred SSE_FIRST_REG, alternative NO_REGS, allocno SSE_FIRST_REG
    a31 (r244,l0) best SSE_FIRST_REG, allocno SSE_FIRST_REG
    r243: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a32 (r243,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r242: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a34 (r242,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r241: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a35 (r241,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r240: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r240,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r239: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r239,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r238: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r238,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r237: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r237,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r236: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a36 (r236,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r235: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a43 (r235,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r234: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a44 (r234,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r233: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a46 (r233,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r232: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r232,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r231: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a51 (r231,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r230: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a54 (r230,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r229: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a58 (r229,l0) best SIREG, allocno GENERAL_REGS
    r228: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a60 (r228,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r227: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a63 (r227,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r226: preferred SSE_FIRST_REG, alternative NO_REGS, allocno SSE_FIRST_REG
    a67 (r226,l0) best SSE_FIRST_REG, allocno SSE_FIRST_REG
    r225: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a68 (r225,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r224: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a70 (r224,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r223: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a71 (r223,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r222: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a73 (r222,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r221: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a74 (r221,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a76 (r220,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r219: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a77 (r219,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r218: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a72 (r218,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r217: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a79 (r217,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r216: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a80 (r216,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r215: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a82 (r215,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r214: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a83 (r214,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a85 (r213,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a86 (r212,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r211: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a88 (r211,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a89 (r210,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r209: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a92 (r209,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r208: preferred NO_REGS, alternative NO_REGS, allocno NO_REGS
    a94 (r208,l0) best NO_REGS, allocno NO_REGS
    r207: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a95 (r207,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a97 (r206,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a98 (r205,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a99 (r204,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r203: preferred SSE_FIRST_REG, alternative NO_REGS, allocno SSE_FIRST_REG
    a105 (r203,l0) best SSE_FIRST_REG, allocno SSE_FIRST_REG
    r202: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a106 (r202,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r201: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a108 (r201,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r200: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a109 (r200,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a111 (r199,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r198: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a112 (r198,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a114 (r197,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a115 (r196,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r195: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a110 (r195,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r194: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a117 (r194,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r193: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a118 (r193,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r192: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a120 (r192,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a121 (r191,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r190: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a124 (r190,l0) best SSE_REGS, allocno SSE_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a126 (r189,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a128 (r188,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a129 (r187,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r186: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a125 (r186,l0) best SSE_REGS, allocno SSE_REGS
    r185: preferred SSE_FIRST_REG, alternative NO_REGS, allocno SSE_FIRST_REG
    a135 (r185,l0) best SSE_FIRST_REG, allocno SSE_FIRST_REG
    r184: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a136 (r184,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r183: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a138 (r183,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r182: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a139 (r182,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a141 (r181,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a142 (r180,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a144 (r179,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a145 (r178,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r177: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a140 (r177,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r176: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a147 (r176,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r175: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a148 (r175,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r174: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a150 (r174,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a151 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r172: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a155 (r172,l0) best SIREG, allocno GENERAL_REGS
    r171: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a156 (r171,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r170: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a159 (r170,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r169: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a161 (r169,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r168: preferred SSE_FIRST_REG, alternative NO_REGS, allocno SSE_FIRST_REG
    a164 (r168,l0) best SSE_FIRST_REG, allocno SSE_FIRST_REG
    r167: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a165 (r167,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r166: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a167 (r166,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r165: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a168 (r165,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r164: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a169 (r164,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r163: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a171 (r163,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r162: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a173 (r162,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r161: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a175 (r161,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r160: preferred FLOAT_REGS, alternative NO_REGS, allocno FLOAT_REGS
    a177 (r160,l0) best FLOAT_REGS, allocno FLOAT_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a179 (r159,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a180 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a182 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a183 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a191 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a194 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a195 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a198 (r152,l0) best SSE_REGS, allocno SSE_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a197 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a201 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a202 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a203 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a199 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a206 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a207 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a208 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a211 (r143,l0) best SSE_REGS, allocno SSE_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a210 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a214 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a215 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a212 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a218 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a219 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a224 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a226 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a227 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a230 (r133,l0) best SSE_REGS, allocno SSE_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a231 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a233 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a234 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred SSE_REGS, alternative GENERAL_REGS, allocno SSE_REGS
    a236 (r129,l0) best SSE_REGS, allocno SSE_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a238 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a240 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a241 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a245 (r125,l0) best DIREG, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a246 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a247 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a250 (r122,l0) best DIREG, allocno GENERAL_REGS
    r121: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a254 (r121,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a253 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a257 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a258 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a259 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a262 (r116,l0) best DIREG, allocno GENERAL_REGS
    r115: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a266 (r115,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a265 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a269 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a270 (r112,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r111: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a274 (r111,l0) best SIREG, allocno GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a275 (r110,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a276 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r108: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a280 (r108,l0) best DREG, allocno GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a281 (r107,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a284 (r106,l0) best DIREG, allocno GENERAL_REGS
    r105: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a288 (r105,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a287 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a291 (r103,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a292 (r102,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r101: preferred SSE_FIRST_REG, alternative GENERAL_REGS, allocno INT_SSE_REGS
    a295 (r101,l0) best SSE_FIRST_REG, allocno INT_SSE_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a294 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a298 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a299 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a304 (r97,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a308 (r96,l0) best SIREG, allocno GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a310 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a312 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a313 (r93,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a309 (r92,l0) best DREG, allocno GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a315 (r91,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a317 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a319 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a320 (r88,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a321 (r87,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a316 (r86,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a323 (r85,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a325 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a326 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred SSE_FIRST_REG, alternative NO_REGS, allocno SSE_FIRST_REG
    a334 (r82,l0) best SSE_FIRST_REG, allocno SSE_FIRST_REG

  a0(r262,l0) costs: AREG:6000 DREG:6000 CREG:6000 BREG:6000 SIREG:6000 DIREG:6000 AD_REGS:6000 CLOBBERED_REGS:6000 Q_REGS:6000 TLS_GOTBASE_REGS:6000 GENERAL_REGS:6000 FP_TOP_REG:19000 FP_SECOND_REG:19000 FLOAT_REGS:19000 SSE_FIRST_REG:19000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:19000 FLOAT_INT_REGS:19000 INT_SSE_REGS:19000 FLOAT_INT_SSE_REGS:19000 MEM:7000
  a1(r421,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:13000 INT_SSE_REGS:13000 ALL_REGS:212000 MEM:6000
  a2(r257,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 FP_TOP_REG:18000 FP_SECOND_REG:18000 FLOAT_REGS:18000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:18000 FLOAT_INT_REGS:18000 INT_SSE_REGS:18000 FLOAT_INT_SSE_REGS:18000 MEM:7000
  a3(r418,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 FP_TOP_REG:24000 FP_SECOND_REG:24000 FLOAT_REGS:24000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:24000 FLOAT_INT_REGS:24000 INT_SSE_REGS:24000 FLOAT_INT_SSE_REGS:24000 MEM:12000
  a4(r417,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 FP_TOP_REG:24000 FP_SECOND_REG:24000 FLOAT_REGS:24000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:24000 FLOAT_INT_REGS:24000 INT_SSE_REGS:24000 FLOAT_INT_SSE_REGS:24000 MEM:12000
  a5(r416,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a6(r415,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a7(r414,l0) costs: AD_REGS:47000 CLOBBERED_REGS:47000 Q_REGS:47000 TLS_GOTBASE_REGS:47000 GENERAL_REGS:47000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:69000 MEM:24000
  a8(r413,l0) costs: AD_REGS:47000 CLOBBERED_REGS:47000 Q_REGS:47000 TLS_GOTBASE_REGS:47000 GENERAL_REGS:47000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:69000 MEM:24000
  a9(r412,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a10(r410,l0) costs: AD_REGS:25000 CLOBBERED_REGS:25000 Q_REGS:25000 TLS_GOTBASE_REGS:25000 GENERAL_REGS:25000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:50000 MEM:24000
  a11(r254,l0) costs: AD_REGS:57000 CLOBBERED_REGS:57000 Q_REGS:57000 TLS_GOTBASE_REGS:57000 GENERAL_REGS:57000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:57000 MEM:13000
  a12(r411,l0) costs: AD_REGS:47000 CLOBBERED_REGS:47000 Q_REGS:47000 TLS_GOTBASE_REGS:47000 GENERAL_REGS:47000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:69000 MEM:24000
  a13(r256,l0) costs: AREG:19000 DREG:19000 CREG:19000 BREG:19000 SIREG:19000 DIREG:19000 AD_REGS:19000 CLOBBERED_REGS:19000 Q_REGS:19000 TLS_GOTBASE_REGS:19000 GENERAL_REGS:19000 FP_TOP_REG:13000 FP_SECOND_REG:13000 FLOAT_REGS:13000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:15000 SSE_REGS:15000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:11000
  a14(r253,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:19000 FP_SECOND_REG:19000 FLOAT_REGS:19000 SSE_FIRST_REG:5000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 FLOAT_SSE_REGS:19000 FLOAT_INT_REGS:19000 INT_SSE_REGS:19000 FLOAT_INT_SSE_REGS:19000 MEM:7000
  a15(r252,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a16(r409,l0) costs: AD_REGS:47000 CLOBBERED_REGS:47000 Q_REGS:47000 TLS_GOTBASE_REGS:47000 GENERAL_REGS:47000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:69000 MEM:24000
  a17(r251,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a18(r250,l0) costs: AD_REGS:63000 CLOBBERED_REGS:63000 Q_REGS:63000 TLS_GOTBASE_REGS:63000 GENERAL_REGS:63000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:63000 MEM:19000
  a19(r249,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a20(r408,l0) costs: AD_REGS:47000 CLOBBERED_REGS:47000 Q_REGS:47000 TLS_GOTBASE_REGS:47000 GENERAL_REGS:47000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:69000 MEM:24000
  a21(r248,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a22(r407,l0) costs: AD_REGS:47000 CLOBBERED_REGS:47000 Q_REGS:47000 TLS_GOTBASE_REGS:47000 GENERAL_REGS:47000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:69000 MEM:24000
  a23(r247,l0) costs: AD_REGS:63000 CLOBBERED_REGS:63000 Q_REGS:63000 TLS_GOTBASE_REGS:63000 GENERAL_REGS:63000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:63000 MEM:19000
  a24(r406,l0) costs: AD_REGS:47000 CLOBBERED_REGS:47000 Q_REGS:47000 TLS_GOTBASE_REGS:47000 GENERAL_REGS:47000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:69000 MEM:24000
  a25(r246,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a26(r405,l0) costs: AD_REGS:47000 CLOBBERED_REGS:47000 Q_REGS:47000 TLS_GOTBASE_REGS:47000 GENERAL_REGS:47000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:69000 MEM:24000
  a27(r245,l0) costs: AD_REGS:63000 CLOBBERED_REGS:63000 Q_REGS:63000 TLS_GOTBASE_REGS:63000 GENERAL_REGS:63000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:63000 MEM:19000
  a28(r403,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a29(r255,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:2000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:11000
  a30(r404,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:11000
  a31(r244,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:19000 FP_SECOND_REG:19000 FLOAT_REGS:19000 SSE_FIRST_REG:5000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 FLOAT_SSE_REGS:19000 FLOAT_INT_REGS:19000 INT_SSE_REGS:19000 FLOAT_INT_SSE_REGS:19000 MEM:7000
  a32(r243,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a33(r402,l0) costs: AD_REGS:47000 CLOBBERED_REGS:47000 Q_REGS:47000 TLS_GOTBASE_REGS:47000 GENERAL_REGS:47000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:69000 MEM:24000
  a34(r242,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a35(r241,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a36(r236,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a37(r240,l0) costs: AREG:6000 DREG:6000 CREG:6000 BREG:6000 SIREG:6000 DIREG:6000 AD_REGS:6000 CLOBBERED_REGS:6000 Q_REGS:6000 TLS_GOTBASE_REGS:6000 GENERAL_REGS:6000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a38(r239,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a39(r401,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a40(r238,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a41(r237,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a42(r400,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a43(r235,l0) costs: AD_REGS:63000 CLOBBERED_REGS:63000 Q_REGS:63000 TLS_GOTBASE_REGS:63000 GENERAL_REGS:63000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:63000 MEM:19000
  a44(r234,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a45(r399,l0) costs: AD_REGS:47000 CLOBBERED_REGS:47000 Q_REGS:47000 TLS_GOTBASE_REGS:47000 GENERAL_REGS:47000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:69000 MEM:24000
  a46(r233,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a47(r232,l0) costs: AREG:6000 DREG:6000 CREG:6000 BREG:6000 SIREG:6000 DIREG:6000 AD_REGS:6000 CLOBBERED_REGS:6000 Q_REGS:6000 TLS_GOTBASE_REGS:6000 GENERAL_REGS:6000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a48(r398,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a49(r397,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a50(r395,l0) costs: AD_REGS:25000 CLOBBERED_REGS:25000 Q_REGS:25000 TLS_GOTBASE_REGS:25000 GENERAL_REGS:25000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:50000 MEM:24000
  a51(r231,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a52(r396,l0) costs: AD_REGS:47000 CLOBBERED_REGS:47000 Q_REGS:47000 TLS_GOTBASE_REGS:47000 GENERAL_REGS:47000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:69000 MEM:24000
  a53(r394,l0) costs: AD_REGS:47000 CLOBBERED_REGS:47000 Q_REGS:47000 TLS_GOTBASE_REGS:47000 GENERAL_REGS:47000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:69000 MEM:24000
  a54(r230,l0) costs: AD_REGS:63000 CLOBBERED_REGS:63000 Q_REGS:63000 TLS_GOTBASE_REGS:63000 GENERAL_REGS:63000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:63000 MEM:19000
  a55(r393,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a56(r392,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a57(r391,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a58(r229,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a59(r390,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a60(r228,l0) costs: AD_REGS:25000 CLOBBERED_REGS:25000 Q_REGS:25000 TLS_GOTBASE_REGS:25000 GENERAL_REGS:25000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:37000 MEM:13000
  a61(r389,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a62(r388,l0) costs: AD_REGS:47000 CLOBBERED_REGS:47000 Q_REGS:47000 TLS_GOTBASE_REGS:47000 GENERAL_REGS:47000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:69000 MEM:24000
  a63(r227,l0) costs: AD_REGS:63000 CLOBBERED_REGS:63000 Q_REGS:63000 TLS_GOTBASE_REGS:63000 GENERAL_REGS:63000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:63000 MEM:19000
  a64(r386,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a65(r261,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:2000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:11000
  a66(r387,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:11000
  a67(r226,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:19000 FP_SECOND_REG:19000 FLOAT_REGS:19000 SSE_FIRST_REG:5000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 FLOAT_SSE_REGS:19000 FLOAT_INT_REGS:19000 INT_SSE_REGS:19000 FLOAT_INT_SSE_REGS:19000 MEM:7000
  a68(r225,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a69(r385,l0) costs: AD_REGS:47000 CLOBBERED_REGS:47000 Q_REGS:47000 TLS_GOTBASE_REGS:47000 GENERAL_REGS:47000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:69000 MEM:24000
  a70(r224,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a71(r223,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a72(r218,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a73(r222,l0) costs: AREG:6000 DREG:6000 CREG:6000 BREG:6000 SIREG:6000 DIREG:6000 AD_REGS:6000 CLOBBERED_REGS:6000 Q_REGS:6000 TLS_GOTBASE_REGS:6000 GENERAL_REGS:6000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a74(r221,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a75(r384,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a76(r220,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a77(r219,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a78(r383,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a79(r217,l0) costs: AD_REGS:63000 CLOBBERED_REGS:63000 Q_REGS:63000 TLS_GOTBASE_REGS:63000 GENERAL_REGS:63000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:63000 MEM:19000
  a80(r216,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a81(r382,l0) costs: AD_REGS:47000 CLOBBERED_REGS:47000 Q_REGS:47000 TLS_GOTBASE_REGS:47000 GENERAL_REGS:47000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:69000 MEM:24000
  a82(r215,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a83(r214,l0) costs: AREG:6000 DREG:6000 CREG:6000 BREG:6000 SIREG:6000 DIREG:6000 AD_REGS:6000 CLOBBERED_REGS:6000 Q_REGS:6000 TLS_GOTBASE_REGS:6000 GENERAL_REGS:6000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a84(r381,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a85(r213,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a86(r212,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a87(r380,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a88(r211,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a89(r210,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a90(r379,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a91(r377,l0) costs: AD_REGS:25000 CLOBBERED_REGS:25000 Q_REGS:25000 TLS_GOTBASE_REGS:25000 GENERAL_REGS:25000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:50000 MEM:24000
  a92(r209,l0) costs: AD_REGS:57000 CLOBBERED_REGS:57000 Q_REGS:57000 TLS_GOTBASE_REGS:57000 GENERAL_REGS:57000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:57000 MEM:13000
  a93(r378,l0) costs: AD_REGS:47000 CLOBBERED_REGS:47000 Q_REGS:47000 TLS_GOTBASE_REGS:47000 GENERAL_REGS:47000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:69000 MEM:24000
  a94(r208,l0) costs: AREG:15000 DREG:15000 CREG:15000 BREG:15000 SIREG:15000 DIREG:15000 AD_REGS:15000 CLOBBERED_REGS:15000 Q_REGS:15000 TLS_GOTBASE_REGS:15000 GENERAL_REGS:15000 FP_TOP_REG:12000 FP_SECOND_REG:12000 FLOAT_REGS:12000 SSE_FIRST_REG:13000 NO_REX_SSE_REGS:13000 SSE_REGS:13000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:11000
  a95(r207,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a96(r376,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a97(r206,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a98(r205,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a99(r204,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a100(r375,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a101(r374,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a102(r372,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a103(r260,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:2000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:11000
  a104(r373,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:11000
  a105(r203,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:19000 FP_SECOND_REG:19000 FLOAT_REGS:19000 SSE_FIRST_REG:5000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 FLOAT_SSE_REGS:19000 FLOAT_INT_REGS:19000 INT_SSE_REGS:19000 FLOAT_INT_SSE_REGS:19000 MEM:7000
  a106(r202,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a107(r371,l0) costs: AD_REGS:47000 CLOBBERED_REGS:47000 Q_REGS:47000 TLS_GOTBASE_REGS:47000 GENERAL_REGS:47000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:69000 MEM:24000
  a108(r201,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a109(r200,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a110(r195,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a111(r199,l0) costs: AREG:6000 DREG:6000 CREG:6000 BREG:6000 SIREG:6000 DIREG:6000 AD_REGS:6000 CLOBBERED_REGS:6000 Q_REGS:6000 TLS_GOTBASE_REGS:6000 GENERAL_REGS:6000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a112(r198,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a113(r370,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a114(r197,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a115(r196,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a116(r369,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a117(r194,l0) costs: AD_REGS:63000 CLOBBERED_REGS:63000 Q_REGS:63000 TLS_GOTBASE_REGS:63000 GENERAL_REGS:63000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:63000 MEM:19000
  a118(r193,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a119(r368,l0) costs: AD_REGS:47000 CLOBBERED_REGS:47000 Q_REGS:47000 TLS_GOTBASE_REGS:47000 GENERAL_REGS:47000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:69000 MEM:24000
  a120(r192,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a121(r191,l0) costs: AREG:6000 DREG:6000 CREG:6000 BREG:6000 SIREG:6000 DIREG:6000 AD_REGS:6000 CLOBBERED_REGS:6000 Q_REGS:6000 TLS_GOTBASE_REGS:6000 GENERAL_REGS:6000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a122(r367,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a123(r366,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a124(r190,l0) costs: AREG:14000 DREG:14000 CREG:14000 BREG:14000 SIREG:14000 DIREG:14000 AD_REGS:14000 CLOBBERED_REGS:14000 Q_REGS:14000 TLS_GOTBASE_REGS:14000 GENERAL_REGS:14000 FP_TOP_REG:38000 FP_SECOND_REG:38000 FLOAT_REGS:38000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:38000 FLOAT_INT_REGS:38000 INT_SSE_REGS:38000 FLOAT_INT_SSE_REGS:38000 MEM:16000
  a125(r186,l0) costs: AREG:18000 DREG:18000 CREG:18000 BREG:18000 SIREG:18000 DIREG:18000 AD_REGS:18000 CLOBBERED_REGS:18000 Q_REGS:18000 TLS_GOTBASE_REGS:18000 GENERAL_REGS:18000 FP_TOP_REG:39000 FP_SECOND_REG:39000 FLOAT_REGS:39000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:39000 FLOAT_INT_REGS:39000 INT_SSE_REGS:39000 FLOAT_INT_SSE_REGS:39000 MEM:18000
  a126(r189,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a127(r365,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a128(r188,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a129(r187,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a130(r364,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a131(r363,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a132(r361,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a133(r259,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:26000 FP_SECOND_REG:26000 FLOAT_REGS:26000 SSE_FIRST_REG:2000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:11000
  a134(r362,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:11000
  a135(r185,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:19000 FP_SECOND_REG:19000 FLOAT_REGS:19000 SSE_FIRST_REG:5000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 FLOAT_SSE_REGS:19000 FLOAT_INT_REGS:19000 INT_SSE_REGS:19000 FLOAT_INT_SSE_REGS:19000 MEM:7000
  a136(r184,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a137(r360,l0) costs: AD_REGS:47000 CLOBBERED_REGS:47000 Q_REGS:47000 TLS_GOTBASE_REGS:47000 GENERAL_REGS:47000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:69000 MEM:24000
  a138(r183,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a139(r182,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a140(r177,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a141(r181,l0) costs: AREG:6000 DREG:6000 CREG:6000 BREG:6000 SIREG:6000 DIREG:6000 AD_REGS:6000 CLOBBERED_REGS:6000 Q_REGS:6000 TLS_GOTBASE_REGS:6000 GENERAL_REGS:6000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a142(r180,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a143(r359,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a144(r179,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a145(r178,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a146(r358,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a147(r176,l0) costs: AD_REGS:63000 CLOBBERED_REGS:63000 Q_REGS:63000 TLS_GOTBASE_REGS:63000 GENERAL_REGS:63000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:63000 MEM:19000
  a148(r175,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a149(r357,l0) costs: AD_REGS:47000 CLOBBERED_REGS:47000 Q_REGS:47000 TLS_GOTBASE_REGS:47000 GENERAL_REGS:47000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:69000 MEM:24000
  a150(r174,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a151(r173,l0) costs: AREG:6000 DREG:6000 CREG:6000 BREG:6000 SIREG:6000 DIREG:6000 AD_REGS:6000 CLOBBERED_REGS:6000 Q_REGS:6000 TLS_GOTBASE_REGS:6000 GENERAL_REGS:6000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a152(r356,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a153(r355,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a154(r354,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a155(r172,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a156(r171,l0) costs: AD_REGS:25000 CLOBBERED_REGS:25000 Q_REGS:25000 TLS_GOTBASE_REGS:25000 GENERAL_REGS:25000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:37000 MEM:13000
  a157(r353,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a158(r352,l0) costs: AD_REGS:47000 CLOBBERED_REGS:47000 Q_REGS:47000 TLS_GOTBASE_REGS:47000 GENERAL_REGS:47000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:69000 MEM:24000
  a159(r170,l0) costs: AD_REGS:63000 CLOBBERED_REGS:63000 Q_REGS:63000 TLS_GOTBASE_REGS:63000 GENERAL_REGS:63000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:63000 MEM:19000
  a160(r350,l0) costs: AD_REGS:25000 CLOBBERED_REGS:25000 Q_REGS:25000 TLS_GOTBASE_REGS:25000 GENERAL_REGS:25000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:50000 MEM:24000
  a161(r169,l0) costs: AD_REGS:57000 CLOBBERED_REGS:57000 Q_REGS:57000 TLS_GOTBASE_REGS:57000 GENERAL_REGS:57000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:57000 MEM:13000
  a162(r351,l0) costs: AD_REGS:47000 CLOBBERED_REGS:47000 Q_REGS:47000 TLS_GOTBASE_REGS:47000 GENERAL_REGS:47000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:69000 MEM:24000
  a163(r258,l0) costs: AREG:19000 DREG:19000 CREG:19000 BREG:19000 SIREG:19000 DIREG:19000 AD_REGS:19000 CLOBBERED_REGS:19000 Q_REGS:19000 TLS_GOTBASE_REGS:19000 GENERAL_REGS:19000 FP_TOP_REG:13000 FP_SECOND_REG:13000 FLOAT_REGS:13000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:15000 SSE_REGS:15000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:11000
  a164(r168,l0) costs: AREG:12000 DREG:12000 CREG:12000 BREG:12000 SIREG:12000 DIREG:12000 AD_REGS:12000 CLOBBERED_REGS:12000 Q_REGS:12000 TLS_GOTBASE_REGS:12000 GENERAL_REGS:12000 FP_TOP_REG:19000 FP_SECOND_REG:19000 FLOAT_REGS:19000 SSE_FIRST_REG:5000 NO_REX_SSE_REGS:8000 SSE_REGS:8000 FLOAT_SSE_REGS:19000 FLOAT_INT_REGS:19000 INT_SSE_REGS:19000 FLOAT_INT_SSE_REGS:19000 MEM:7000
  a165(r167,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a166(r349,l0) costs: AD_REGS:47000 CLOBBERED_REGS:47000 Q_REGS:47000 TLS_GOTBASE_REGS:47000 GENERAL_REGS:47000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:69000 MEM:24000
  a167(r166,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a168(r165,l0) costs: AD_REGS:63000 CLOBBERED_REGS:63000 Q_REGS:63000 TLS_GOTBASE_REGS:63000 GENERAL_REGS:63000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:63000 MEM:19000
  a169(r164,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a170(r348,l0) costs: AD_REGS:47000 CLOBBERED_REGS:47000 Q_REGS:47000 TLS_GOTBASE_REGS:47000 GENERAL_REGS:47000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:69000 MEM:24000
  a171(r163,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a172(r347,l0) costs: AD_REGS:47000 CLOBBERED_REGS:47000 Q_REGS:47000 TLS_GOTBASE_REGS:47000 GENERAL_REGS:47000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:69000 MEM:24000
  a173(r162,l0) costs: AD_REGS:63000 CLOBBERED_REGS:63000 Q_REGS:63000 TLS_GOTBASE_REGS:63000 GENERAL_REGS:63000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:63000 MEM:19000
  a174(r346,l0) costs: AD_REGS:47000 CLOBBERED_REGS:47000 Q_REGS:47000 TLS_GOTBASE_REGS:47000 GENERAL_REGS:47000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:69000 MEM:24000
  a175(r161,l0) costs: AD_REGS:70000 CLOBBERED_REGS:70000 Q_REGS:70000 TLS_GOTBASE_REGS:70000 GENERAL_REGS:70000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:70000 MEM:24000
  a176(r345,l0) costs: AD_REGS:47000 CLOBBERED_REGS:47000 Q_REGS:47000 TLS_GOTBASE_REGS:47000 GENERAL_REGS:47000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:69000 MEM:24000
  a177(r160,l0) costs: AD_REGS:63000 CLOBBERED_REGS:63000 Q_REGS:63000 TLS_GOTBASE_REGS:63000 GENERAL_REGS:63000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:63000 MEM:19000
  a178(r344,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a179(r159,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a180(r158,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a181(r343,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a182(r157,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a183(r156,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a184(r342,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a185(r341,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a186(r340,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 FP_TOP_REG:24000 FP_SECOND_REG:24000 FLOAT_REGS:24000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:24000 FLOAT_INT_REGS:24000 INT_SSE_REGS:24000 FLOAT_INT_SSE_REGS:24000 MEM:12000
  a187(r339,l0) costs: AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:49000 MEM:24000
  a188(r338,l0) costs: AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:49000 MEM:24000
  a189(r337,l0) costs: AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 FP_TOP_REG:0 FP_SECOND_REG:0 FLOAT_REGS:0 FLOAT_INT_REGS:49000 MEM:24000
  a190(r336,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a191(r155,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a192(r335,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 FP_TOP_REG:24000 FP_SECOND_REG:24000 FLOAT_REGS:24000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:24000 FLOAT_INT_REGS:24000 INT_SSE_REGS:24000 FLOAT_INT_SSE_REGS:24000 MEM:12000
  a193(r334,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a194(r154,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a195(r153,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a196(r333,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a197(r151,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a198(r152,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 FP_TOP_REG:24000 FP_SECOND_REG:24000 FLOAT_REGS:24000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:24000 FLOAT_INT_REGS:24000 INT_SSE_REGS:24000 FLOAT_INT_SSE_REGS:24000 MEM:12000
  a199(r147,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a200(r332,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a201(r150,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a202(r149,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a203(r148,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a204(r331,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a205(r330,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a206(r146,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a207(r145,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a208(r144,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a209(r329,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a210(r142,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a211(r143,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 FP_TOP_REG:24000 FP_SECOND_REG:24000 FLOAT_REGS:24000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:24000 FLOAT_INT_REGS:24000 INT_SSE_REGS:24000 FLOAT_INT_SSE_REGS:24000 MEM:12000
  a212(r139,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a213(r328,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a214(r141,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a215(r140,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a216(r327,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a217(r326,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a218(r138,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a219(r137,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a220(r325,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a221(r324,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a222(r323,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a223(r322,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 FP_TOP_REG:24000 FP_SECOND_REG:24000 FLOAT_REGS:24000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:24000 FLOAT_INT_REGS:24000 INT_SSE_REGS:24000 FLOAT_INT_SSE_REGS:24000 MEM:12000
  a224(r136,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a225(r321,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a226(r135,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a227(r134,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a228(r320,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a229(r319,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:11000
  a230(r133,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a231(r132,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a232(r318,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a233(r131,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a234(r130,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a235(r317,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a236(r129,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:11000
  a237(r316,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a238(r128,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a239(r315,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a240(r127,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a241(r126,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a242(r314,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a243(r313,l0) costs: AREG:4000 DREG:4000 CREG:4000 BREG:4000 SIREG:4000 DIREG:4000 AD_REGS:4000 CLOBBERED_REGS:4000 Q_REGS:4000 TLS_GOTBASE_REGS:4000 GENERAL_REGS:4000 FP_TOP_REG:24000 FP_SECOND_REG:24000 FLOAT_REGS:24000 SSE_FIRST_REG:0 NO_REX_SSE_REGS:0 SSE_REGS:0 FLOAT_SSE_REGS:24000 FLOAT_INT_REGS:24000 INT_SSE_REGS:24000 FLOAT_INT_SSE_REGS:24000 MEM:12000
  a244(r312,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a245(r125,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a246(r124,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a247(r123,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a248(r311,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:22000 INT_SSE_REGS:22000 ALL_REGS:210000 MEM:11000
  a249(r310,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a250(r122,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a251(r309,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a252(r308,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:22000 INT_SSE_REGS:22000 ALL_REGS:210000 MEM:11000
  a253(r120,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a254(r121,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a255(r307,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a256(r306,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a257(r119,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a258(r118,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a259(r117,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a260(r305,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a261(r304,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a262(r116,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a263(r303,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a264(r302,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:22000 INT_SSE_REGS:22000 ALL_REGS:210000 MEM:11000
  a265(r114,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a266(r115,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a267(r301,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a268(r300,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a269(r113,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a270(r112,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a271(r299,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a272(r298,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a273(r297,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a274(r111,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a275(r110,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a276(r109,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:10000
  a277(r296,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:22000 INT_SSE_REGS:22000 ALL_REGS:210000 MEM:11000
  a278(r295,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a279(r294,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a280(r108,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a281(r107,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:11000
  a282(r293,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a283(r292,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a284(r106,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a285(r291,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a286(r290,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:22000 INT_SSE_REGS:22000 ALL_REGS:210000 MEM:11000
  a287(r104,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a288(r105,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a289(r289,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a290(r288,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a291(r103,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a292(r102,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a293(r287,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a294(r100,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a295(r101,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a296(r286,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a297(r285,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a298(r99,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a299(r98,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a300(r284,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a301(r283,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a302(r282,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a303(r281,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a304(r97,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 MEM:12000
  a305(r280,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a306(r279,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a307(r278,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a308(r96,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a309(r92,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a310(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a311(r277,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a312(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a313(r93,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a314(r276,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a315(r91,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a316(r86,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a317(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a318(r275,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a319(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a320(r88,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:10000
  a321(r87,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a322(r274,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a323(r85,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a324(r273,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:18000 INT_SSE_REGS:18000 ALL_REGS:206000 MEM:7000
  a325(r84,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a326(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:11000
  a327(r272,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:11000
  a328(r271,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a329(r270,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a330(r269,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a331(r268,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a332(r267,l0) costs: AREG:8000 DREG:8000 CREG:8000 BREG:8000 SIREG:8000 DIREG:8000 AD_REGS:8000 CLOBBERED_REGS:8000 Q_REGS:8000 TLS_GOTBASE_REGS:8000 GENERAL_REGS:8000 FP_TOP_REG:25000 FP_SECOND_REG:25000 FLOAT_REGS:25000 SSE_FIRST_REG:25000 NO_REX_SSE_REGS:2000 SSE_REGS:2000 FLOAT_SSE_REGS:25000 FLOAT_INT_REGS:25000 INT_SSE_REGS:25000 FLOAT_INT_SSE_REGS:25000 MEM:12000
  a333(r266,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a334(r82,l0) costs: AREG:19000 DREG:19000 CREG:19000 BREG:19000 SIREG:19000 DIREG:19000 AD_REGS:19000 CLOBBERED_REGS:19000 Q_REGS:19000 TLS_GOTBASE_REGS:19000 GENERAL_REGS:19000 FP_TOP_REG:13000 FP_SECOND_REG:13000 FLOAT_REGS:13000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:15000 SSE_REGS:15000 FLOAT_SSE_REGS:26000 FLOAT_INT_REGS:26000 INT_SSE_REGS:26000 FLOAT_INT_SSE_REGS:26000 MEM:12000
  a335(r265,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a336(r420,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:13000 INT_SSE_REGS:13000 ALL_REGS:212000 MEM:6000
  a337(r264,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a338(r263,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000

   Insn 637(l0): point = 0
   Insn 636(l0): point = 2
   Insn 633(l0): point = 5
   Insn 632(l0): point = 8
   Insn 631(l0): point = 10
   Insn 627(l0): point = 12
   Insn 624(l0): point = 14
   Insn 621(l0): point = 17
   Insn 620(l0): point = 19
   Insn 618(l0): point = 22
   Insn 617(l0): point = 24
   Insn 667(l0): point = 27
   Insn 612(l0): point = 29
   Insn 611(l0): point = 31
   Insn 609(l0): point = 34
   Insn 608(l0): point = 36
   Insn 607(l0): point = 38
   Insn 606(l0): point = 40
   Insn 605(l0): point = 42
   Insn 604(l0): point = 44
   Insn 603(l0): point = 46
   Insn 602(l0): point = 48
   Insn 601(l0): point = 50
   Insn 600(l0): point = 52
   Insn 599(l0): point = 54
   Insn 598(l0): point = 56
   Insn 597(l0): point = 58
   Insn 596(l0): point = 60
   Insn 595(l0): point = 62
   Insn 594(l0): point = 64
   Insn 593(l0): point = 66
   Insn 592(l0): point = 68
   Insn 589(l0): point = 71
   Insn 588(l0): point = 73
   Insn 587(l0): point = 75
   Insn 586(l0): point = 77
   Insn 585(l0): point = 79
   Insn 584(l0): point = 81
   Insn 583(l0): point = 83
   Insn 582(l0): point = 85
   Insn 581(l0): point = 87
   Insn 580(l0): point = 89
   Insn 579(l0): point = 91
   Insn 578(l0): point = 93
   Insn 577(l0): point = 95
   Insn 576(l0): point = 97
   Insn 575(l0): point = 99
   Insn 574(l0): point = 101
   Insn 573(l0): point = 103
   Insn 568(l0): point = 106
   Insn 567(l0): point = 108
   Insn 566(l0): point = 110
   Insn 565(l0): point = 112
   Insn 564(l0): point = 114
   Insn 563(l0): point = 116
   Insn 562(l0): point = 118
   Insn 561(l0): point = 120
   Insn 560(l0): point = 122
   Insn 559(l0): point = 124
   Insn 558(l0): point = 126
   Insn 557(l0): point = 128
   Insn 556(l0): point = 130
   Insn 555(l0): point = 132
   Insn 554(l0): point = 134
   Insn 553(l0): point = 136
   Insn 552(l0): point = 138
   Insn 551(l0): point = 140
   Insn 550(l0): point = 142
   Insn 549(l0): point = 144
   Insn 548(l0): point = 146
   Insn 547(l0): point = 148
   Insn 546(l0): point = 150
   Insn 545(l0): point = 152
   Insn 544(l0): point = 154
   Insn 543(l0): point = 156
   Insn 542(l0): point = 158
   Insn 541(l0): point = 160
   Insn 540(l0): point = 162
   Insn 539(l0): point = 164
   Insn 325(l0): point = 167
   Insn 324(l0): point = 169
   Insn 323(l0): point = 171
   Insn 322(l0): point = 173
   Insn 321(l0): point = 175
   Insn 320(l0): point = 177
   Insn 319(l0): point = 179
   Insn 318(l0): point = 181
   Insn 537(l0): point = 184
   Insn 536(l0): point = 186
   Insn 535(l0): point = 188
   Insn 531(l0): point = 191
   Insn 471(l0): point = 194
   Insn 470(l0): point = 196
   Insn 469(l0): point = 198
   Insn 468(l0): point = 200
   Insn 467(l0): point = 202
   Insn 466(l0): point = 204
   Insn 465(l0): point = 206
   Insn 464(l0): point = 208
   Insn 461(l0): point = 211
   Insn 460(l0): point = 213
   Insn 459(l0): point = 215
   Insn 458(l0): point = 217
   Insn 457(l0): point = 219
   Insn 456(l0): point = 221
   Insn 455(l0): point = 223
   Insn 454(l0): point = 225
   Insn 453(l0): point = 227
   Insn 452(l0): point = 229
   Insn 451(l0): point = 231
   Insn 450(l0): point = 233
   Insn 449(l0): point = 235
   Insn 448(l0): point = 237
   Insn 447(l0): point = 239
   Insn 446(l0): point = 241
   Insn 445(l0): point = 243
   Insn 444(l0): point = 245
   Insn 443(l0): point = 247
   Insn 442(l0): point = 249
   Insn 441(l0): point = 251
   Insn 440(l0): point = 253
   Insn 439(l0): point = 255
   Insn 438(l0): point = 257
   Insn 437(l0): point = 259
   Insn 436(l0): point = 261
   Insn 435(l0): point = 263
   Insn 434(l0): point = 265
   Insn 433(l0): point = 267
   Insn 432(l0): point = 269
   Insn 431(l0): point = 271
   Insn 430(l0): point = 273
   Insn 429(l0): point = 275
   Insn 428(l0): point = 277
   Insn 427(l0): point = 279
   Insn 426(l0): point = 281
   Insn 425(l0): point = 283
   Insn 424(l0): point = 285
   Insn 423(l0): point = 287
   Insn 422(l0): point = 289
   Insn 421(l0): point = 291
   Insn 414(l0): point = 294
   Insn 413(l0): point = 296
   Insn 412(l0): point = 298
   Insn 411(l0): point = 300
   Insn 410(l0): point = 302
   Insn 409(l0): point = 304
   Insn 408(l0): point = 306
   Insn 407(l0): point = 308
   Insn 406(l0): point = 310
   Insn 403(l0): point = 313
   Insn 402(l0): point = 315
   Insn 401(l0): point = 317
   Insn 400(l0): point = 319
   Insn 399(l0): point = 321
   Insn 398(l0): point = 323
   Insn 397(l0): point = 325
   Insn 396(l0): point = 327
   Insn 395(l0): point = 329
   Insn 394(l0): point = 331
   Insn 393(l0): point = 333
   Insn 392(l0): point = 335
   Insn 391(l0): point = 337
   Insn 390(l0): point = 339
   Insn 389(l0): point = 341
   Insn 388(l0): point = 343
   Insn 387(l0): point = 345
   Insn 386(l0): point = 347
   Insn 385(l0): point = 349
   Insn 384(l0): point = 351
   Insn 383(l0): point = 353
   Insn 382(l0): point = 355
   Insn 381(l0): point = 357
   Insn 380(l0): point = 359
   Insn 379(l0): point = 361
   Insn 378(l0): point = 363
   Insn 377(l0): point = 365
   Insn 376(l0): point = 367
   Insn 375(l0): point = 369
   Insn 374(l0): point = 371
   Insn 373(l0): point = 373
   Insn 372(l0): point = 375
   Insn 371(l0): point = 377
   Insn 370(l0): point = 379
   Insn 369(l0): point = 381
   Insn 368(l0): point = 383
   Insn 367(l0): point = 385
   Insn 366(l0): point = 387
   Insn 365(l0): point = 389
   Insn 364(l0): point = 391
   Insn 363(l0): point = 393
   Insn 362(l0): point = 395
   Insn 361(l0): point = 397
   Insn 360(l0): point = 399
   Insn 359(l0): point = 401
   Insn 356(l0): point = 404
   Insn 355(l0): point = 406
   Insn 354(l0): point = 408
   Insn 353(l0): point = 410
   Insn 352(l0): point = 412
   Insn 351(l0): point = 414
   Insn 350(l0): point = 416
   Insn 349(l0): point = 418
   Insn 348(l0): point = 420
   Insn 347(l0): point = 422
   Insn 346(l0): point = 424
   Insn 345(l0): point = 426
   Insn 344(l0): point = 428
   Insn 343(l0): point = 430
   Insn 342(l0): point = 432
   Insn 341(l0): point = 434
   Insn 340(l0): point = 436
   Insn 335(l0): point = 439
   Insn 334(l0): point = 441
   Insn 333(l0): point = 443
   Insn 332(l0): point = 445
   Insn 331(l0): point = 447
   Insn 330(l0): point = 449
   Insn 329(l0): point = 451
   Insn 328(l0): point = 453
   Insn 327(l0): point = 455
   Insn 416(l0): point = 458
   Insn 415(l0): point = 460
   Insn 528(l0): point = 463
   Insn 527(l0): point = 465
   Insn 517(l0): point = 468
   Insn 516(l0): point = 470
   Insn 515(l0): point = 472
   Insn 514(l0): point = 474
   Insn 513(l0): point = 476
   Insn 512(l0): point = 478
   Insn 511(l0): point = 480
   Insn 510(l0): point = 482
   Insn 509(l0): point = 484
   Insn 508(l0): point = 486
   Insn 507(l0): point = 488
   Insn 506(l0): point = 490
   Insn 505(l0): point = 492
   Insn 504(l0): point = 494
   Insn 503(l0): point = 496
   Insn 502(l0): point = 498
   Insn 501(l0): point = 500
   Insn 500(l0): point = 502
   Insn 499(l0): point = 504
   Insn 498(l0): point = 506
   Insn 497(l0): point = 508
   Insn 496(l0): point = 510
   Insn 495(l0): point = 512
   Insn 494(l0): point = 514
   Insn 493(l0): point = 516
   Insn 492(l0): point = 518
   Insn 491(l0): point = 520
   Insn 490(l0): point = 522
   Insn 489(l0): point = 524
   Insn 488(l0): point = 526
   Insn 487(l0): point = 528
   Insn 486(l0): point = 530
   Insn 485(l0): point = 532
   Insn 484(l0): point = 534
   Insn 483(l0): point = 536
   Insn 482(l0): point = 538
   Insn 481(l0): point = 540
   Insn 480(l0): point = 542
   Insn 479(l0): point = 544
   Insn 478(l0): point = 546
   Insn 477(l0): point = 548
   Insn 476(l0): point = 550
   Insn 475(l0): point = 552
   Insn 474(l0): point = 554
   Insn 473(l0): point = 556
   Insn 524(l0): point = 559
   Insn 523(l0): point = 561
   Insn 522(l0): point = 563
   Insn 521(l0): point = 565
   Insn 520(l0): point = 567
   Insn 519(l0): point = 569
   Insn 665(l0): point = 572
   Insn 314(l0): point = 574
   Insn 313(l0): point = 576
   Insn 312(l0): point = 578
   Insn 311(l0): point = 580
   Insn 310(l0): point = 582
   Insn 309(l0): point = 584
   Insn 308(l0): point = 586
   Insn 307(l0): point = 588
   Insn 306(l0): point = 590
   Insn 305(l0): point = 592
   Insn 304(l0): point = 594
   Insn 303(l0): point = 596
   Insn 302(l0): point = 598
   Insn 301(l0): point = 600
   Insn 300(l0): point = 602
   Insn 299(l0): point = 604
   Insn 298(l0): point = 606
   Insn 663(l0): point = 609
   Insn 208(l0): point = 611
   Insn 207(l0): point = 613
   Insn 206(l0): point = 615
   Insn 296(l0): point = 618
   Insn 295(l0): point = 620
   Insn 294(l0): point = 622
   Insn 290(l0): point = 625
   Insn 289(l0): point = 627
   Insn 288(l0): point = 629
   Insn 287(l0): point = 631
   Insn 286(l0): point = 633
   Insn 285(l0): point = 635
   Insn 284(l0): point = 637
   Insn 283(l0): point = 639
   Insn 282(l0): point = 641
   Insn 281(l0): point = 643
   Insn 280(l0): point = 645
   Insn 279(l0): point = 647
   Insn 278(l0): point = 649
   Insn 277(l0): point = 651
   Insn 276(l0): point = 653
   Insn 275(l0): point = 655
   Insn 274(l0): point = 657
   Insn 273(l0): point = 659
   Insn 272(l0): point = 661
   Insn 271(l0): point = 663
   Insn 270(l0): point = 665
   Insn 269(l0): point = 667
   Insn 268(l0): point = 669
   Insn 267(l0): point = 671
   Insn 266(l0): point = 673
   Insn 265(l0): point = 675
   Insn 264(l0): point = 677
   Insn 263(l0): point = 679
   Insn 262(l0): point = 681
   Insn 261(l0): point = 683
   Insn 260(l0): point = 685
   Insn 259(l0): point = 687
   Insn 258(l0): point = 689
   Insn 257(l0): point = 691
   Insn 255(l0): point = 694
   Insn 254(l0): point = 696
   Insn 253(l0): point = 698
   Insn 249(l0): point = 701
   Insn 246(l0): point = 704
   Insn 245(l0): point = 706
   Insn 244(l0): point = 708
   Insn 243(l0): point = 710
   Insn 242(l0): point = 712
   Insn 241(l0): point = 714
   Insn 240(l0): point = 716
   Insn 239(l0): point = 718
   Insn 238(l0): point = 720
   Insn 220(l0): point = 723
   Insn 219(l0): point = 725
   Insn 218(l0): point = 727
   Insn 217(l0): point = 729
   Insn 216(l0): point = 731
   Insn 215(l0): point = 733
   Insn 214(l0): point = 735
   Insn 213(l0): point = 737
   Insn 212(l0): point = 739
   Insn 233(l0): point = 742
   Insn 232(l0): point = 744
   Insn 231(l0): point = 746
   Insn 230(l0): point = 748
   Insn 229(l0): point = 750
   Insn 228(l0): point = 752
   Insn 227(l0): point = 754
   Insn 226(l0): point = 756
   Insn 225(l0): point = 758
   Insn 661(l0): point = 761
   Insn 202(l0): point = 763
   Insn 201(l0): point = 765
   Insn 200(l0): point = 767
   Insn 199(l0): point = 769
   Insn 198(l0): point = 771
   Insn 197(l0): point = 773
   Insn 196(l0): point = 775
   Insn 195(l0): point = 777
   Insn 194(l0): point = 779
   Insn 186(l0): point = 782
   Insn 185(l0): point = 784
   Insn 184(l0): point = 786
   Insn 183(l0): point = 788
   Insn 182(l0): point = 790
   Insn 181(l0): point = 792
   Insn 180(l0): point = 794
   Insn 179(l0): point = 796
   Insn 178(l0): point = 798
   Insn 177(l0): point = 800
   Insn 176(l0): point = 802
   Insn 175(l0): point = 804
   Insn 174(l0): point = 806
   Insn 173(l0): point = 808
   Insn 172(l0): point = 810
   Insn 171(l0): point = 812
   Insn 170(l0): point = 814
   Insn 169(l0): point = 816
   Insn 168(l0): point = 818
   Insn 167(l0): point = 820
   Insn 166(l0): point = 822
   Insn 165(l0): point = 824
   Insn 164(l0): point = 826
   Insn 163(l0): point = 828
   Insn 162(l0): point = 830
   Insn 161(l0): point = 832
   Insn 160(l0): point = 834
   Insn 159(l0): point = 836
   Insn 158(l0): point = 838
   Insn 157(l0): point = 840
   Insn 156(l0): point = 842
   Insn 155(l0): point = 844
   Insn 154(l0): point = 846
   Insn 153(l0): point = 848
   Insn 152(l0): point = 850
   Insn 151(l0): point = 852
   Insn 150(l0): point = 854
   Insn 149(l0): point = 856
   Insn 148(l0): point = 858
   Insn 147(l0): point = 860
   Insn 146(l0): point = 862
   Insn 145(l0): point = 864
   Insn 144(l0): point = 866
   Insn 143(l0): point = 868
   Insn 142(l0): point = 870
   Insn 141(l0): point = 872
   Insn 140(l0): point = 874
   Insn 139(l0): point = 876
   Insn 138(l0): point = 878
   Insn 137(l0): point = 880
   Insn 136(l0): point = 882
   Insn 135(l0): point = 884
   Insn 134(l0): point = 886
   Insn 133(l0): point = 888
   Insn 132(l0): point = 890
   Insn 131(l0): point = 892
   Insn 130(l0): point = 894
   Insn 129(l0): point = 896
   Insn 191(l0): point = 899
   Insn 190(l0): point = 901
   Insn 659(l0): point = 904
   Insn 125(l0): point = 906
   Insn 124(l0): point = 908
   Insn 123(l0): point = 910
   Insn 122(l0): point = 912
   Insn 121(l0): point = 914
   Insn 120(l0): point = 916
   Insn 119(l0): point = 918
   Insn 118(l0): point = 920
   Insn 117(l0): point = 922
   Insn 116(l0): point = 924
   Insn 115(l0): point = 926
   Insn 114(l0): point = 928
   Insn 113(l0): point = 930
   Insn 112(l0): point = 932
   Insn 111(l0): point = 934
   Insn 110(l0): point = 936
   Insn 109(l0): point = 938
   Insn 108(l0): point = 940
   Insn 107(l0): point = 942
   Insn 106(l0): point = 944
   Insn 105(l0): point = 946
   Insn 104(l0): point = 948
   Insn 103(l0): point = 950
   Insn 102(l0): point = 952
   Insn 101(l0): point = 954
   Insn 100(l0): point = 956
   Insn 99(l0): point = 958
   Insn 98(l0): point = 960
   Insn 97(l0): point = 962
   Insn 96(l0): point = 964
   Insn 95(l0): point = 966
   Insn 94(l0): point = 968
   Insn 93(l0): point = 970
   Insn 92(l0): point = 972
   Insn 91(l0): point = 974
   Insn 90(l0): point = 976
   Insn 89(l0): point = 978
   Insn 87(l0): point = 981
   Insn 86(l0): point = 983
   Insn 85(l0): point = 985
   Insn 84(l0): point = 987
   Insn 83(l0): point = 989
   Insn 82(l0): point = 991
   Insn 81(l0): point = 993
   Insn 80(l0): point = 995
   Insn 79(l0): point = 997
   Insn 70(l0): point = 1000
   Insn 69(l0): point = 1002
   Insn 68(l0): point = 1004
   Insn 67(l0): point = 1006
   Insn 66(l0): point = 1008
   Insn 65(l0): point = 1010
   Insn 64(l0): point = 1012
   Insn 63(l0): point = 1014
   Insn 62(l0): point = 1016
   Insn 61(l0): point = 1018
   Insn 60(l0): point = 1020
   Insn 59(l0): point = 1022
   Insn 58(l0): point = 1024
   Insn 57(l0): point = 1026
   Insn 56(l0): point = 1029
   Insn 55(l0): point = 1031
   Insn 54(l0): point = 1033
   Insn 53(l0): point = 1035
   Insn 52(l0): point = 1037
   Insn 51(l0): point = 1039
   Insn 50(l0): point = 1041
   Insn 49(l0): point = 1043
   Insn 48(l0): point = 1045
   Insn 47(l0): point = 1047
   Insn 46(l0): point = 1049
   Insn 45(l0): point = 1051
   Insn 44(l0): point = 1053
   Insn 77(l0): point = 1056
   Insn 76(l0): point = 1058
   Insn 657(l0): point = 1061
   Insn 40(l0): point = 1063
   Insn 39(l0): point = 1065
   Insn 38(l0): point = 1067
   Insn 37(l0): point = 1069
   Insn 36(l0): point = 1071
   Insn 35(l0): point = 1073
   Insn 34(l0): point = 1075
   Insn 33(l0): point = 1077
   Insn 32(l0): point = 1079
   Insn 31(l0): point = 1081
   Insn 30(l0): point = 1083
   Insn 29(l0): point = 1085
   Insn 28(l0): point = 1087
   Insn 27(l0): point = 1089
   Insn 26(l0): point = 1091
   Insn 25(l0): point = 1093
   Insn 24(l0): point = 1095
   Insn 23(l0): point = 1097
   Insn 22(l0): point = 1099
   Insn 21(l0): point = 1101
   Insn 20(l0): point = 1103
   Insn 19(l0): point = 1105
   Insn 18(l0): point = 1107
   Insn 17(l0): point = 1109
   Insn 16(l0): point = 1111
   Insn 13(l0): point = 1113
   Insn 11(l0): point = 1115
   Insn 10(l0): point = 1117
   Insn 9(l0): point = 1119
   Insn 8(l0): point = 1121
   Insn 7(l0): point = 1123
   Insn 6(l0): point = 1125
   Insn 5(l0): point = 1127
   Insn 4(l0): point = 1129
   Insn 3(l0): point = 1131
   Insn 2(l0): point = 1133
 a0(r262): [8..12] [3..4]
 a1(r421): [10..10]
 a2(r257): [13..14]
 a3(r418): [18..19]
 a4(r417): [30..31]
 a5(r416): [41..42]
 a6(r415): [47..48]
 a7(r414): [51..52]
 a8(r413): [55..56]
 a9(r412): [65..66]
 a10(r410): [72..73]
 a11(r254): [74..77]
 a12(r411): [74..75]
 a13(r256): [78..79]
 a14(r253): [84..85]
 a15(r252): [86..87]
 a16(r409): [88..89]
 a17(r251): [88..91]
 a18(r250): [92..93]
 a19(r249): [92..95]
 a20(r408): [96..97]
 a21(r248): [96..99]
 a22(r407): [100..101]
 a23(r247): [100..103]
 a24(r406): [109..110]
 a25(r246): [109..112]
 a26(r405): [113..114]
 a27(r245): [113..116]
 a28(r403): [119..120]
 a29(r255): [121..124]
 a30(r404): [121..122]
 a31(r244): [129..130]
 a32(r243): [131..132]
 a33(r402): [133..134]
 a34(r242): [133..136]
 a35(r241): [137..138]
 a36(r236): [137..152]
 a37(r240): [139..140]
 a38(r239): [141..142]
 a39(r401): [143..144]
 a40(r238): [143..146]
 a41(r237): [147..148]
 a42(r400): [149..150]
 a43(r235): [153..154]
 a44(r234): [153..156]
 a45(r399): [157..158]
 a46(r233): [157..160]
 a47(r232): [161..162]
 a48(r398): [163..164]
 a49(r397): [187..188]
 a50(r395): [560..561]
 a51(r231): [562..565]
 a52(r396): [562..563]
 a53(r394): [566..567]
 a54(r230): [566..569]
 a55(r393): [473..474]
 a56(r392): [483..484]
 a57(r391): [487..496]
 a58(r229): [489..500]
 a59(r390): [491..498]
 a60(r228): [495..504]
 a61(r389): [501..502]
 a62(r388): [505..506]
 a63(r227): [505..508]
 a64(r386): [511..512]
 a65(r261): [513..516]
 a66(r387): [513..514]
 a67(r226): [521..522]
 a68(r225): [523..524]
 a69(r385): [525..526]
 a70(r224): [525..528]
 a71(r223): [529..530]
 a72(r218): [529..544]
 a73(r222): [531..532]
 a74(r221): [533..534]
 a75(r384): [535..536]
 a76(r220): [535..538]
 a77(r219): [539..540]
 a78(r383): [541..542]
 a79(r217): [545..546]
 a80(r216): [545..548]
 a81(r382): [549..550]
 a82(r215): [549..552]
 a83(r214): [553..554]
 a84(r381): [555..556]
 a85(r213): [197..198]
 a86(r212): [199..200]
 a87(r380): [201..202]
 a88(r211): [201..204]
 a89(r210): [205..206]
 a90(r379): [207..208]
 a91(r377): [214..215]
 a92(r209): [216..219]
 a93(r378): [216..217]
 a94(r208): [220..221]
 a95(r207): [222..223]
 a96(r376): [224..225]
 a97(r206): [224..227]
 a98(r205): [228..229]
 a99(r204): [230..231]
 a100(r375): [232..233]
 a101(r374): [236..237]
 a102(r372): [240..241]
 a103(r260): [242..245]
 a104(r373): [242..243]
 a105(r203): [250..251]
 a106(r202): [252..253]
 a107(r371): [254..255]
 a108(r201): [254..257]
 a109(r200): [258..259]
 a110(r195): [258..273]
 a111(r199): [260..261]
 a112(r198): [262..263]
 a113(r370): [264..265]
 a114(r197): [264..267]
 a115(r196): [268..269]
 a116(r369): [270..271]
 a117(r194): [274..275]
 a118(r193): [274..277]
 a119(r368): [278..279]
 a120(r192): [278..281]
 a121(r191): [282..283]
 a122(r367): [284..285]
 a123(r366): [290..291]
 a124(r190): [461..462] [294..298]
 a125(r186): [461..462] [294..310]
 a126(r189): [299..300]
 a127(r365): [301..302]
 a128(r188): [301..304]
 a129(r187): [305..306]
 a130(r364): [307..308]
 a131(r363): [314..315]
 a132(r361): [320..321]
 a133(r259): [322..325]
 a134(r362): [322..323]
 a135(r185): [330..331]
 a136(r184): [332..333]
 a137(r360): [334..335]
 a138(r183): [334..337]
 a139(r182): [338..339]
 a140(r177): [338..353]
 a141(r181): [340..341]
 a142(r180): [342..343]
 a143(r359): [344..345]
 a144(r179): [344..347]
 a145(r178): [348..349]
 a146(r358): [350..351]
 a147(r176): [354..355]
 a148(r175): [354..357]
 a149(r357): [358..359]
 a150(r174): [358..361]
 a151(r173): [362..363]
 a152(r356): [364..365]
 a153(r355): [378..379]
 a154(r354): [382..391]
 a155(r172): [384..393]
 a156(r171): [390..397]
 a157(r353): [394..395]
 a158(r352): [398..399]
 a159(r170): [398..401]
 a160(r350): [405..406]
 a161(r169): [407..410]
 a162(r351): [407..408]
 a163(r258): [411..412]
 a164(r168): [417..418]
 a165(r167): [419..420]
 a166(r349): [421..422]
 a167(r166): [421..424]
 a168(r165): [425..426]
 a169(r164): [425..428]
 a170(r348): [429..430]
 a171(r163): [429..432]
 a172(r347): [433..434]
 a173(r162): [433..436]
 a174(r346): [442..443]
 a175(r161): [442..445]
 a176(r345): [446..447]
 a177(r160): [446..449]
 a178(r344): [454..455]
 a179(r159): [170..171]
 a180(r158): [172..173]
 a181(r343): [174..175]
 a182(r157): [174..177]
 a183(r156): [178..179]
 a184(r342): [180..181]
 a185(r341): [577..578]
 a186(r340): [581..582]
 a187(r339): [585..586]
 a188(r338): [589..590]
 a189(r337): [593..594]
 a190(r336): [621..622]
 a191(r155): [628..631]
 a192(r335): [628..629]
 a193(r334): [632..633]
 a194(r154): [632..635]
 a195(r153): [636..637]
 a196(r333): [638..639]
 a197(r151): [642..645]
 a198(r152): [642..643]
 a199(r147): [644..657]
 a200(r332): [646..647]
 a201(r150): [646..649]
 a202(r149): [650..651]
 a203(r148): [652..653]
 a204(r331): [654..655]
 a205(r330): [658..659]
 a206(r146): [658..661]
 a207(r145): [662..663]
 a208(r144): [664..665]
 a209(r329): [666..667]
 a210(r142): [670..673]
 a211(r143): [670..671]
 a212(r139): [672..683]
 a213(r328): [674..675]
 a214(r141): [674..677]
 a215(r140): [678..679]
 a216(r327): [680..681]
 a217(r326): [684..685]
 a218(r138): [684..687]
 a219(r137): [688..689]
 a220(r325): [690..691]
 a221(r324): [697..698]
 a222(r323): [705..706]
 a223(r322): [709..710]
 a224(r136): [711..712]
 a225(r321): [713..714]
 a226(r135): [713..716]
 a227(r134): [717..718]
 a228(r320): [719..720]
 a229(r319): [745..746]
 a230(r133): [745..748]
 a231(r132): [749..750]
 a232(r318): [751..752]
 a233(r131): [751..754]
 a234(r130): [755..756]
 a235(r317): [757..758]
 a236(r129): [726..729]
 a237(r316): [726..727]
 a238(r128): [730..731]
 a239(r315): [732..733]
 a240(r127): [732..735]
 a241(r126): [736..737]
 a242(r314): [738..739]
 a243(r313): [614..615]
 a244(r312): [766..767]
 a245(r125): [772..773]
 a246(r124): [774..775]
 a247(r123): [776..777]
 a248(r311): [778..779]
 a249(r310): [785..786]
 a250(r122): [791..796]
 a251(r309): [793..794]
 a252(r308): [797..798]
 a253(r120): [801..810]
 a254(r121): [801..802]
 a255(r307): [807..808]
 a256(r306): [811..812]
 a257(r119): [811..814]
 a258(r118): [815..816]
 a259(r117): [817..818]
 a260(r305): [819..820]
 a261(r304): [823..824]
 a262(r116): [829..834]
 a263(r303): [831..832]
 a264(r302): [835..836]
 a265(r114): [839..848]
 a266(r115): [839..840]
 a267(r301): [845..846]
 a268(r300): [849..850]
 a269(r113): [849..852]
 a270(r112): [853..854]
 a271(r299): [855..856]
 a272(r298): [859..860]
 a273(r297): [865..868]
 a274(r111): [867..870]
 a275(r110): [871..872]
 a276(r109): [873..874]
 a277(r296): [875..876]
 a278(r295): [883..884]
 a279(r294): [887..890]
 a280(r108): [889..892]
 a281(r107): [893..894]
 a282(r293): [895..896]
 a283(r292): [907..908]
 a284(r106): [913..918]
 a285(r291): [915..916]
 a286(r290): [919..920]
 a287(r104): [925..934]
 a288(r105): [925..926]
 a289(r289): [931..932]
 a290(r288): [935..936]
 a291(r103): [935..938]
 a292(r102): [939..940]
 a293(r287): [941..942]
 a294(r100): [947..956]
 a295(r101): [947..948]
 a296(r286): [953..954]
 a297(r285): [957..958]
 a298(r99): [957..960]
 a299(r98): [961..962]
 a300(r284): [963..964]
 a301(r283): [967..968]
 a302(r282): [973..976]
 a303(r281): [975..978]
 a304(r97): [984..985]
 a305(r280): [986..987]
 a306(r279): [992..993]
 a307(r278): [1007..1008]
 a308(r96): [1011..1014]
 a309(r92): [1013..1027]
 a310(r95): [1015..1016]
 a311(r277): [1017..1018]
 a312(r94): [1017..1020]
 a313(r93): [1021..1022]
 a314(r276): [1023..1024]
 a315(r91): [1027..1029]
 a316(r86): [1028..1043]
 a317(r90): [1030..1031]
 a318(r275): [1032..1033]
 a319(r89): [1032..1035]
 a320(r88): [1036..1037]
 a321(r87): [1038..1039]
 a322(r274): [1040..1041]
 a323(r85): [1044..1045]
 a324(r273): [1046..1047]
 a325(r84): [1046..1049]
 a326(r83): [1050..1051]
 a327(r272): [1052..1053]
 a328(r271): [1074..1075]
 a329(r270): [1078..1079]
 a330(r269): [1084..1085]
 a331(r268): [1090..1091]
 a332(r267): [1094..1095]
 a333(r266): [1100..1101]
 a334(r82): [1104..1105]
 a335(r265): [1110..1111]
 a336(r420): [1113..1113]
 a337(r264): [1116..1117]
 a338(r263): [1120..1121]
Compressing live ranges: from 1136 to 511 - 44%
Ranges after the compression:
 a0(r262): [0..4]
 a1(r421): [3..3]
 a2(r257): [5..6]
 a3(r418): [7..8]
 a4(r417): [9..10]
 a5(r416): [11..12]
 a6(r415): [13..14]
 a7(r414): [15..16]
 a8(r413): [17..18]
 a9(r412): [19..20]
 a10(r410): [21..22]
 a11(r254): [23..24]
 a12(r411): [23..24]
 a13(r256): [25..26]
 a14(r253): [27..28]
 a15(r252): [29..30]
 a16(r409): [31..32]
 a17(r251): [31..32]
 a18(r250): [33..34]
 a19(r249): [33..34]
 a20(r408): [35..36]
 a21(r248): [35..36]
 a22(r407): [37..38]
 a23(r247): [37..38]
 a24(r406): [39..40]
 a25(r246): [39..40]
 a26(r405): [41..42]
 a27(r245): [41..42]
 a28(r403): [43..44]
 a29(r255): [45..46]
 a30(r404): [45..46]
 a31(r244): [47..48]
 a32(r243): [49..50]
 a33(r402): [51..52]
 a34(r242): [51..52]
 a35(r241): [53..54]
 a36(r236): [53..64]
 a37(r240): [55..56]
 a38(r239): [57..58]
 a39(r401): [59..60]
 a40(r238): [59..60]
 a41(r237): [61..62]
 a42(r400): [63..64]
 a43(r235): [65..66]
 a44(r234): [65..66]
 a45(r399): [67..68]
 a46(r233): [67..68]
 a47(r232): [69..70]
 a48(r398): [71..72]
 a49(r397): [83..84]
 a50(r395): [261..262]
 a51(r231): [263..264]
 a52(r396): [263..264]
 a53(r394): [265..266]
 a54(r230): [265..266]
 a55(r393): [221..222]
 a56(r392): [223..224]
 a57(r391): [225..226]
 a58(r229): [225..226]
 a59(r390): [225..226]
 a60(r228): [225..228]
 a61(r389): [227..228]
 a62(r388): [229..230]
 a63(r227): [229..230]
 a64(r386): [231..232]
 a65(r261): [233..234]
 a66(r387): [233..234]
 a67(r226): [235..236]
 a68(r225): [237..238]
 a69(r385): [239..240]
 a70(r224): [239..240]
 a71(r223): [241..242]
 a72(r218): [241..252]
 a73(r222): [243..244]
 a74(r221): [245..246]
 a75(r384): [247..248]
 a76(r220): [247..248]
 a77(r219): [249..250]
 a78(r383): [251..252]
 a79(r217): [253..254]
 a80(r216): [253..254]
 a81(r382): [255..256]
 a82(r215): [255..256]
 a83(r214): [257..258]
 a84(r381): [259..260]
 a85(r213): [85..86]
 a86(r212): [87..88]
 a87(r380): [89..90]
 a88(r211): [89..90]
 a89(r210): [91..92]
 a90(r379): [93..94]
 a91(r377): [95..96]
 a92(r209): [97..98]
 a93(r378): [97..98]
 a94(r208): [99..100]
 a95(r207): [101..102]
 a96(r376): [103..104]
 a97(r206): [103..104]
 a98(r205): [105..106]
 a99(r204): [107..108]
 a100(r375): [109..110]
 a101(r374): [111..112]
 a102(r372): [113..114]
 a103(r260): [115..116]
 a104(r373): [115..116]
 a105(r203): [117..118]
 a106(r202): [119..120]
 a107(r371): [121..122]
 a108(r201): [121..122]
 a109(r200): [123..124]
 a110(r195): [123..134]
 a111(r199): [125..126]
 a112(r198): [127..128]
 a113(r370): [129..130]
 a114(r197): [129..130]
 a115(r196): [131..132]
 a116(r369): [133..134]
 a117(r194): [135..136]
 a118(r193): [135..136]
 a119(r368): [137..138]
 a120(r192): [137..138]
 a121(r191): [139..140]
 a122(r367): [141..142]
 a123(r366): [143..144]
 a124(r190): [219..220] [145..146]
 a125(r186): [219..220] [145..154]
 a126(r189): [147..148]
 a127(r365): [149..150]
 a128(r188): [149..150]
 a129(r187): [151..152]
 a130(r364): [153..154]
 a131(r363): [155..156]
 a132(r361): [157..158]
 a133(r259): [159..160]
 a134(r362): [159..160]
 a135(r185): [161..162]
 a136(r184): [163..164]
 a137(r360): [165..166]
 a138(r183): [165..166]
 a139(r182): [167..168]
 a140(r177): [167..178]
 a141(r181): [169..170]
 a142(r180): [171..172]
 a143(r359): [173..174]
 a144(r179): [173..174]
 a145(r178): [175..176]
 a146(r358): [177..178]
 a147(r176): [179..180]
 a148(r175): [179..180]
 a149(r357): [181..182]
 a150(r174): [181..182]
 a151(r173): [183..184]
 a152(r356): [185..186]
 a153(r355): [187..188]
 a154(r354): [189..190]
 a155(r172): [189..190]
 a156(r171): [189..192]
 a157(r353): [191..192]
 a158(r352): [193..194]
 a159(r170): [193..194]
 a160(r350): [195..196]
 a161(r169): [197..198]
 a162(r351): [197..198]
 a163(r258): [199..200]
 a164(r168): [201..202]
 a165(r167): [203..204]
 a166(r349): [205..206]
 a167(r166): [205..206]
 a168(r165): [207..208]
 a169(r164): [207..208]
 a170(r348): [209..210]
 a171(r163): [209..210]
 a172(r347): [211..212]
 a173(r162): [211..212]
 a174(r346): [213..214]
 a175(r161): [213..214]
 a176(r345): [215..216]
 a177(r160): [215..216]
 a178(r344): [217..218]
 a179(r159): [73..74]
 a180(r158): [75..76]
 a181(r343): [77..78]
 a182(r157): [77..78]
 a183(r156): [79..80]
 a184(r342): [81..82]
 a185(r341): [267..268]
 a186(r340): [269..270]
 a187(r339): [271..272]
 a188(r338): [273..274]
 a189(r337): [275..276]
 a190(r336): [279..280]
 a191(r155): [281..282]
 a192(r335): [281..282]
 a193(r334): [283..284]
 a194(r154): [283..284]
 a195(r153): [285..286]
 a196(r333): [287..288]
 a197(r151): [289..292]
 a198(r152): [289..290]
 a199(r147): [291..300]
 a200(r332): [293..294]
 a201(r150): [293..294]
 a202(r149): [295..296]
 a203(r148): [297..298]
 a204(r331): [299..300]
 a205(r330): [301..302]
 a206(r146): [301..302]
 a207(r145): [303..304]
 a208(r144): [305..306]
 a209(r329): [307..308]
 a210(r142): [309..312]
 a211(r143): [309..310]
 a212(r139): [311..318]
 a213(r328): [313..314]
 a214(r141): [313..314]
 a215(r140): [315..316]
 a216(r327): [317..318]
 a217(r326): [319..320]
 a218(r138): [319..320]
 a219(r137): [321..322]
 a220(r325): [323..324]
 a221(r324): [325..326]
 a222(r323): [327..328]
 a223(r322): [329..330]
 a224(r136): [331..332]
 a225(r321): [333..334]
 a226(r135): [333..334]
 a227(r134): [335..336]
 a228(r320): [337..338]
 a229(r319): [349..350]
 a230(r133): [349..350]
 a231(r132): [351..352]
 a232(r318): [353..354]
 a233(r131): [353..354]
 a234(r130): [355..356]
 a235(r317): [357..358]
 a236(r129): [339..340]
 a237(r316): [339..340]
 a238(r128): [341..342]
 a239(r315): [343..344]
 a240(r127): [343..344]
 a241(r126): [345..346]
 a242(r314): [347..348]
 a243(r313): [277..278]
 a244(r312): [359..360]
 a245(r125): [361..362]
 a246(r124): [363..364]
 a247(r123): [365..366]
 a248(r311): [367..368]
 a249(r310): [369..370]
 a250(r122): [371..372]
 a251(r309): [371..372]
 a252(r308): [373..374]
 a253(r120): [375..378]
 a254(r121): [375..376]
 a255(r307): [377..378]
 a256(r306): [379..380]
 a257(r119): [379..380]
 a258(r118): [381..382]
 a259(r117): [383..384]
 a260(r305): [385..386]
 a261(r304): [387..388]
 a262(r116): [389..390]
 a263(r303): [389..390]
 a264(r302): [391..392]
 a265(r114): [393..396]
 a266(r115): [393..394]
 a267(r301): [395..396]
 a268(r300): [397..398]
 a269(r113): [397..398]
 a270(r112): [399..400]
 a271(r299): [401..402]
 a272(r298): [403..404]
 a273(r297): [405..406]
 a274(r111): [405..406]
 a275(r110): [407..408]
 a276(r109): [409..410]
 a277(r296): [411..412]
 a278(r295): [413..414]
 a279(r294): [415..416]
 a280(r108): [415..416]
 a281(r107): [417..418]
 a282(r293): [419..420]
 a283(r292): [421..422]
 a284(r106): [423..424]
 a285(r291): [423..424]
 a286(r290): [425..426]
 a287(r104): [427..430]
 a288(r105): [427..428]
 a289(r289): [429..430]
 a290(r288): [431..432]
 a291(r103): [431..432]
 a292(r102): [433..434]
 a293(r287): [435..436]
 a294(r100): [437..440]
 a295(r101): [437..438]
 a296(r286): [439..440]
 a297(r285): [441..442]
 a298(r99): [441..442]
 a299(r98): [443..444]
 a300(r284): [445..446]
 a301(r283): [447..448]
 a302(r282): [449..450]
 a303(r281): [449..450]
 a304(r97): [451..452]
 a305(r280): [453..454]
 a306(r279): [455..456]
 a307(r278): [457..458]
 a308(r96): [459..460]
 a309(r92): [459..469]
 a310(r95): [461..462]
 a311(r277): [463..464]
 a312(r94): [463..464]
 a313(r93): [465..466]
 a314(r276): [467..468]
 a315(r91): [469..471]
 a316(r86): [470..481]
 a317(r90): [472..473]
 a318(r275): [474..475]
 a319(r89): [474..475]
 a320(r88): [476..477]
 a321(r87): [478..479]
 a322(r274): [480..481]
 a323(r85): [482..483]
 a324(r273): [484..485]
 a325(r84): [484..485]
 a326(r83): [486..487]
 a327(r272): [488..489]
 a328(r271): [490..491]
 a329(r270): [492..493]
 a330(r269): [494..495]
 a331(r268): [496..497]
 a332(r267): [498..499]
 a333(r266): [500..501]
 a334(r82): [502..503]
 a335(r265): [504..505]
 a336(r420): [506..506]
 a337(r264): [507..508]
 a338(r263): [509..510]
  pref0:a5(r416)<-hr5@1500
  pref1:a6(r415)<-hr5@1500
  pref2:a9(r412)<-hr5@1500
  pref3:a56(r392)<-hr5@1500
  pref4:a57(r391)<-hr20@2000
  pref5:a59(r390)<-hr1@1500
  pref6:a123(r366)<-hr5@1500
  pref7:a153(r355)<-hr5@1500
  pref8:a154(r354)<-hr20@2000
  pref9:a178(r344)<-hr5@1500
  pref10:a185(r341)<-hr5@1500
  pref11:a244(r312)<-hr0@1500
  pref12:a249(r310)<-hr0@1500
  pref13:a251(r309)<-hr4@1500
  pref14:a255(r307)<-hr5@1500
  pref15:a261(r304)<-hr0@1500
  pref16:a263(r303)<-hr4@1500
  pref17:a267(r301)<-hr5@1500
  pref18:a272(r298)<-hr0@1500
  pref19:a273(r297)<-hr5@1500
  pref20:a278(r295)<-hr5@1500
  pref21:a279(r294)<-hr4@1500
  pref22:a283(r292)<-hr0@1500
  pref23:a285(r291)<-hr4@1500
  pref24:a289(r289)<-hr5@1500
  pref25:a296(r286)<-hr5@1500
  pref26:a301(r283)<-hr0@1500
  pref27:a302(r282)<-hr5@1500
  pref28:a303(r281)<-hr4@1500
  pref29:a306(r279)<-hr0@1500
  pref30:a307(r278)<-hr5@1500
  pref31:a328(r271)<-hr5@1500
  pref32:a329(r270)<-hr20@2000
  pref33:a330(r269)<-hr20@2000
  pref34:a331(r268)<-hr5@1500
  pref35:a332(r267)<-hr20@2000
  pref36:a333(r266)<-hr5@1500
  pref37:a335(r265)<-hr5@1500
  pref38:a0(r262)<-hr20@1538
  pref39:a65(r261)<-hr20@1500
  pref40:a103(r260)<-hr20@1500
  pref41:a133(r259)<-hr20@1500
  pref42:a29(r255)<-hr20@1500
  pref43:a58(r229)<-hr4@1500
  pref44:a155(r172)<-hr4@1500
  pref45:a245(r125)<-hr5@1500
  pref46:a250(r122)<-hr5@1500
  pref47:a254(r121)<-hr20@2000
  pref48:a262(r116)<-hr5@1500
  pref49:a266(r115)<-hr20@2000
  pref50:a274(r111)<-hr4@1500
  pref51:a280(r108)<-hr1@1500
  pref52:a284(r106)<-hr5@1500
  pref53:a288(r105)<-hr20@2000
  pref54:a295(r101)<-hr20@2000
  pref55:a308(r96)<-hr4@1500
  pref56:a309(r92)<-hr1@1500
  regions=1, blocks=41, points=511
    allocnos=339 (big 0), copies=0, conflicts=0, ranges=341
Disposition:
  334:r82  l0    20  326:r83  l0     0  325:r84  l0     1  323:r85  l0     0
  316:r86  l0     0  321:r87  l0     1  320:r88  l0     1  319:r89  l0     2
  317:r90  l0     1  315:r91  l0     2  309:r92  l0     1  313:r93  l0     0
  312:r94  l0     2  310:r95  l0     0  308:r96  l0     0  304:r97  l0     0
  299:r98  l0     0  298:r99  l0     1  294:r100 l0     3  295:r101 l0     0
  292:r102 l0     0  291:r103 l0     1  287:r104 l0     3  288:r105 l0     0
  284:r106 l0     1  281:r107 l0     0  280:r108 l0     1  276:r109 l0     0
  275:r110 l0     0  274:r111 l0     1  270:r112 l0     0  269:r113 l0     1
  265:r114 l0     3  266:r115 l0     0  262:r116 l0     1  259:r117 l0     0
  258:r118 l0     0  257:r119 l0     1  253:r120 l0     3  254:r121 l0     0
  250:r122 l0     1  247:r123 l0     0  246:r124 l0     0  245:r125 l0     0
  241:r126 l0     0  240:r127 l0     1  238:r128 l0     0  236:r129 l0    21
  234:r130 l0     0  233:r131 l0     1  231:r132 l0     0  230:r133 l0    20
  227:r134 l0     0  226:r135 l0     1  224:r136 l0     0  219:r137 l0     0
  218:r138 l0     1  212:r139 l0     1  215:r140 l0     0  214:r141 l0     2
  210:r142 l0     0  211:r143 l0    20  208:r144 l0     0  207:r145 l0     0
  206:r146 l0     1  199:r147 l0     1  203:r148 l0     0  202:r149 l0     0
  201:r150 l0     2  197:r151 l0     0  198:r152 l0    20  195:r153 l0     0
  194:r154 l0     1  191:r155 l0     0  183:r156 l0     0  182:r157 l0     1
  180:r158 l0     0  179:r159 l0     0  177:r160 l0     9  175:r161 l0     9
  173:r162 l0     9  171:r163 l0     9  169:r164 l0     8  168:r165 l0     9
  167:r166 l0     9  165:r167 l0     8  164:r168 l0    20  161:r169 l0     9
  159:r170 l0     9  156:r171 l0     8  155:r172 l0     1  151:r173 l0     0
  150:r174 l0     9  148:r175 l0     8  147:r176 l0     9  140:r177 l0     9
  145:r178 l0     0  144:r179 l0     1  142:r180 l0     0  141:r181 l0     0
  139:r182 l0     8  138:r183 l0     9  136:r184 l0     8  135:r185 l0    20
  125:r186 l0    20  129:r187 l0     0  128:r188 l0     1  126:r189 l0     0
  124:r190 l0    21  121:r191 l0     0  120:r192 l0     9  118:r193 l0     8
  117:r194 l0     9  110:r195 l0     9  115:r196 l0     0  114:r197 l0     1
  112:r198 l0     0  111:r199 l0     0  109:r200 l0     8  108:r201 l0     9
  106:r202 l0     8  105:r203 l0    20   99:r204 l0     0   98:r205 l0     0
   97:r206 l0     1   95:r207 l0     0   94:r208 l0   mem   92:r209 l0     9
   89:r210 l0     0   88:r211 l0     1   86:r212 l0     0   85:r213 l0     0
   83:r214 l0     0   82:r215 l0     9   80:r216 l0     8   79:r217 l0     9
   72:r218 l0     9   77:r219 l0     0   76:r220 l0     1   74:r221 l0     0
   73:r222 l0     0   71:r223 l0     8   70:r224 l0     9   68:r225 l0     8
   67:r226 l0    20   63:r227 l0     9   60:r228 l0     8   58:r229 l0     2
   54:r230 l0     9   51:r231 l0     8   47:r232 l0     0   46:r233 l0     9
   44:r234 l0     8   43:r235 l0     9   36:r236 l0     9   41:r237 l0     0
   40:r238 l0     1   38:r239 l0     0   37:r240 l0     0   35:r241 l0     8
   34:r242 l0     9   32:r243 l0     8   31:r244 l0    20   27:r245 l0     9
   25:r246 l0     9   23:r247 l0     9   21:r248 l0     9   19:r249 l0     8
   18:r250 l0     9   17:r251 l0     9   15:r252 l0     8   14:r253 l0    20
   11:r254 l0     9   29:r255 l0    20   13:r256 l0   mem    2:r257 l0    20
  163:r258 l0   mem  133:r259 l0    20  103:r260 l0    20   65:r261 l0    20
    0:r262 l0     0  338:r263 l0     0  337:r264 l0     0  335:r265 l0     0
  333:r266 l0     0  332:r267 l0     0  331:r268 l0     0  330:r269 l0     0
  329:r270 l0     0  328:r271 l0     0  327:r272 l0     0  324:r273 l0     0
  322:r274 l0     1  318:r275 l0     1  314:r276 l0     0  311:r277 l0     0
  307:r278 l0     0  306:r279 l0     0  305:r280 l0     0  303:r281 l0     1
  302:r282 l0     0  301:r283 l0     0  300:r284 l0     0  297:r285 l0     0
  296:r286 l0     0  293:r287 l0     0  290:r288 l0     0  289:r289 l0     0
  286:r290 l0     0  285:r291 l0     0  283:r292 l0     0  282:r293 l0     0
  279:r294 l0     0  278:r295 l0     0  277:r296 l0     0  273:r297 l0     0
  272:r298 l0     0  271:r299 l0     0  268:r300 l0     0  267:r301 l0     0
  264:r302 l0     0  263:r303 l0     0  261:r304 l0     0  260:r305 l0     0
  256:r306 l0     0  255:r307 l0     0  252:r308 l0     0  251:r309 l0     0
  249:r310 l0     0  248:r311 l0     0  244:r312 l0     0  243:r313 l0    20
  242:r314 l0     0  239:r315 l0     0  237:r316 l0    20  235:r317 l0     0
  232:r318 l0     0  229:r319 l0    21  228:r320 l0     0  225:r321 l0     0
  223:r322 l0    20  222:r323 l0     0  221:r324 l0     0  220:r325 l0     0
  217:r326 l0     0  216:r327 l0     0  213:r328 l0     0  209:r329 l0     0
  205:r330 l0     0  204:r331 l0     0  200:r332 l0     0  196:r333 l0     0
  193:r334 l0     0  192:r335 l0    20  190:r336 l0     0  189:r337 l0     8
  188:r338 l0     8  187:r339 l0     8  186:r340 l0    20  185:r341 l0     0
  184:r342 l0     0  181:r343 l0     0  178:r344 l0     0  176:r345 l0     8
  174:r346 l0     8  172:r347 l0     8  170:r348 l0     8  166:r349 l0     8
  160:r350 l0     8  162:r351 l0     8  158:r352 l0     8  157:r353 l0     0
  154:r354 l0     0  153:r355 l0     0  152:r356 l0     0  149:r357 l0     8
  146:r358 l0     0  143:r359 l0     0  137:r360 l0     8  132:r361 l0    20
  134:r362 l0    21  131:r363 l0     0  130:r364 l0     0  127:r365 l0     0
  123:r366 l0     0  122:r367 l0     0  119:r368 l0     8  116:r369 l0     0
  113:r370 l0     0  107:r371 l0     8  102:r372 l0    20  104:r373 l0    21
  101:r374 l0     0  100:r375 l0     0   96:r376 l0     0   91:r377 l0     8
   93:r378 l0     8   90:r379 l0     0   87:r380 l0     0   84:r381 l0     0
   81:r382 l0     8   78:r383 l0     0   75:r384 l0     0   69:r385 l0     8
   64:r386 l0    20   66:r387 l0    21   62:r388 l0     8   61:r389 l0     0
   59:r390 l0     1   57:r391 l0     0   56:r392 l0     0   55:r393 l0     0
   53:r394 l0     8   50:r395 l0     8   52:r396 l0     9   49:r397 l0     0
   48:r398 l0     0   45:r399 l0     8   42:r400 l0     0   39:r401 l0     0
   33:r402 l0     8   28:r403 l0    20   30:r404 l0    21   26:r405 l0     8
   24:r406 l0     8   22:r407 l0     8   20:r408 l0     8   16:r409 l0     8
   10:r410 l0     8   12:r411 l0     8    9:r412 l0     0    8:r413 l0     8
    7:r414 l0     8    6:r415 l0     0    5:r416 l0     0    4:r417 l0    20
    3:r418 l0    20  336:r420 l0     0    1:r421 l0     1
+++Costs: overall 66000, reg 33000, mem 33000, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


vklad_not

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame] 20 [xmm0]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 20 [xmm0] 36 [r8] 37 [r9]
;;  ref usage 	r0={39d,13u} r1={36d,4u} r2={33d,1u} r4={42d,10u} r5={58d,26u} r6={1d,40u} r7={10d,84u} r8={32d} r9={32d} r10={32d} r11={32d} r12={32d} r13={32d} r14={32d} r15={32d} r16={1d,44u} r17={134d,18u} r18={32d} r19={1d,263u,40e} r20={43d,24u} r21={33d} r22={33d} r23={33d} r24={33d} r25={33d} r26={33d} r27={33d} r28={32d} r29={32d} r30={32d} r31={32d} r32={32d} r33={32d} r34={32d} r35={32d} r36={33d,1u} r37={33d,1u} r38={32d} r39={32d} r44={32d} r45={32d} r46={32d} r47={32d} r48={32d} r49={32d} r50={32d} r51={32d} r52={32d} r53={32d} r54={32d} r55={32d} r56={32d} r57={32d} r58={32d} r59={32d} r60={32d} r61={32d} r62={32d} r63={32d} r64={32d} r65={32d} r66={32d} r67={32d} r68={32d} r69={32d} r70={32d} r71={32d} r72={32d} r73={32d} r74={32d} r75={32d} r82={1d,1u} r83={1d,1u} r84={1d,1u,1e} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u,1e} r90={1d,1u} r91={1d,1u} r92={1d,1u} r93={1d,1u} r94={1d,1u,1e} r95={1d,1u} r96={1d,1u} r97={1d,1u} r98={1d,1u} r99={1d,1u,1e} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,1u,1e} r104={1d,1u} r105={1d,1u} r106={1d,1u} r107={1d,1u} r108={1d,1u} r109={1d,1u} r110={1d,1u} r111={1d,1u} r112={1d,1u} r113={1d,1u,1e} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u,1e} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u,1e} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u,1e} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u,1e} r136={1d,1u} r137={1d,1u} r138={1d,1u,1e} r139={1d,1u} r140={1d,1u} r141={1d,1u,1e} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u,1e} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u,1e} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u,1e} r155={1d,1u} r156={1d,1u} r157={1d,1u,1e} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={1d,1u,1e} r180={1d,1u} r181={1d,1u} r182={1d,1u} r183={1d,1u} r184={1d,1u} r185={1d,1u} r186={1d,2u} r187={1d,1u} r188={1d,1u,1e} r189={1d,1u} r190={1d,2u} r191={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,1u,1e} r198={1d,1u} r199={1d,1u} r200={1d,1u} r201={1d,1u} r202={1d,1u} r203={1d,1u} r204={1d,1u} r205={1d,1u} r206={1d,1u,1e} r207={1d,1u} r208={1d,1u} r209={1d,1u} r210={1d,1u} r211={1d,1u,1e} r212={1d,1u} r213={1d,1u} r214={1d,1u} r215={1d,1u} r216={1d,1u} r217={1d,1u} r218={1d,1u} r219={1d,1u} r220={1d,1u,1e} r221={1d,1u} r222={1d,1u} r223={1d,1u} r224={1d,1u} r225={1d,1u} r226={1d,1u} r227={1d,1u} r228={1d,1u} r229={1d,1u} r230={1d,1u} r231={1d,1u} r232={1d,1u} r233={1d,1u} r234={1d,1u} r235={1d,1u} r236={1d,1u} r237={1d,1u} r238={1d,1u,1e} r239={1d,1u} r240={1d,1u} r241={1d,1u} r242={1d,1u} r243={1d,1u} r244={1d,1u} r245={1d,1u} r246={1d,1u} r247={1d,1u} r248={1d,1u} r249={1d,1u} r250={1d,1u} r251={1d,1u} r252={1d,1u} r253={1d,1u} r254={1d,1u} r255={1d,1u} r256={1d,1u} r257={1d,1u} r258={1d,1u} r259={1d,1u} r260={1d,1u} r261={1d,1u} r262={1d,1u} r263={1d,1u} r264={1d,1u} r265={1d,1u} r266={1d,1u} r267={1d,1u} r268={1d,1u} r269={1d,1u} r270={1d,1u} r271={1d,1u} r272={1d,1u} r273={1d,1u} r274={1d,1u} r275={1d,1u} r276={1d,1u} r277={1d,1u} r278={1d,1u} r279={1d,1u} r280={1d,1u} r281={1d,1u} r282={1d,1u} r283={1d,1u} r284={1d,1u} r285={1d,1u} r286={1d,1u} r287={1d,1u} r288={1d,1u} r289={1d,1u} r290={1d,1u} r291={1d,1u} r292={1d,1u} r293={1d,1u} r294={1d,1u} r295={1d,1u} r296={1d,1u} r297={1d,1u} r298={1d,1u} r299={1d,1u} r300={1d,1u} r301={1d,1u} r302={1d,1u} r303={1d,1u} r304={1d,1u} r305={1d,1u} r306={1d,1u} r307={1d,1u} r308={1d,1u} r309={1d,1u} r310={1d,1u} r311={1d,1u} r312={1d,1u} r313={1d,1u} r314={1d,1u} r315={1d,1u} r316={1d,1u} r317={1d,1u} r318={1d,1u} r319={1d,1u} r320={1d,1u} r321={1d,1u} r322={1d,1u} r323={1d,1u} r324={1d,1u} r325={1d,1u} r326={1d,1u} r327={1d,1u} r328={1d,1u} r329={1d,1u} r330={1d,1u} r331={1d,1u} r332={1d,1u} r333={1d,1u} r334={1d,1u} r335={1d,1u} r336={1d,1u} r337={1d,1u} r338={1d,1u} r339={1d,1u} r340={1d,1u} r341={1d,1u} r342={1d,1u} r343={1d,1u} r344={1d,1u} r345={1d,1u} r346={1d,1u} r347={1d,1u} r348={1d,1u} r349={1d,1u} r350={1d,1u} r351={1d,1u} r352={1d,1u} r353={1d,1u} r354={1d,1u} r355={1d,1u} r356={1d,1u} r357={1d,1u} r358={1d,1u} r359={1d,1u} r360={1d,1u} r361={1d,1u} r362={1d,1u} r363={1d,1u} r364={1d,1u} r365={1d,1u} r366={1d,1u} r367={1d,1u} r368={1d,1u} r369={1d,1u} r370={1d,1u} r371={1d,1u} r372={1d,1u} r373={1d,1u} r374={1d,1u} r375={1d,1u} r376={1d,1u} r377={1d,1u} r378={1d,1u} r379={1d,1u} r380={1d,1u} r381={1d,1u} r382={1d,1u} r383={1d,1u} r384={1d,1u} r385={1d,1u} r386={1d,1u} r387={1d,1u} r388={1d,1u} r389={1d,1u} r390={1d,1u} r391={1d,1u} r392={1d,1u} r393={1d,1u} r394={1d,1u} r395={1d,1u} r396={1d,1u} r397={1d,1u} r398={1d,1u} r399={1d,1u} r400={1d,1u} r401={1d,1u} r402={1d,1u} r403={1d,1u} r404={1d,1u} r405={1d,1u} r406={1d,1u} r407={1d,1u} r408={1d,1u} r409={1d,1u} r410={1d,1u} r411={1d,1u} r412={1d,1u} r413={1d,1u} r414={1d,1u} r415={1d,1u} r416={1d,1u} r417={1d,1u} r418={1d,1u} r420={1d} r421={1d} 
;;    total ref usage 3597{2666d,868u,63e} in 548{516 regular + 32 call} insns.
(note 1 0 14 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8] 37 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 36 [r8] 37 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 82 263 264 265 266 267 268 269 270 271 420
(note 14 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 14 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -216 [0xffffffffffffff28])) [1 summ_c+0 S8 A64])
        (reg:DI 5 di [ summ_c ])) "calc.c":276:1 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ summ_c ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -220 [0xffffffffffffff24])) [5 days+0 S4 A32])
        (reg:SI 4 si [ days ])) "calc.c":276:1 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ days ])
        (nil)))
(insn 4 3 5 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -232 [0xffffffffffffff18])) [1 percent_c+0 S8 A64])
        (reg:DI 1 dx [ percent_c ])) "calc.c":276:1 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ percent_c ])
        (nil)))
(insn 5 4 6 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -240 [0xffffffffffffff10])) [1 history+0 S8 A64])
        (reg:DI 2 cx [ history ])) "calc.c":276:1 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [ history ])
        (nil)))
(insn 6 5 7 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -248 [0xffffffffffffff08])) [15 capital+0 S8 A64])
        (reg:DI 36 r8 [ capital ])) "calc.c":276:1 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 36 r8 [ capital ])
        (nil)))
(insn 7 6 8 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -256 [0xffffffffffffff00])) [15 nalog_date+0 S8 A64])
        (reg:DI 37 r9 [ nalog_date ])) "calc.c":276:1 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 37 r9 [ nalog_date ])
        (nil)))
(insn 8 7 9 2 (set (reg/f:DI 263)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 8 [0x8])) [1 nal_per_c+0 S8 A64])) "calc.c":276:1 74 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -264 [0xfffffffffffffef8])) [1 nal_per_c+0 S8 A64])
        (reg/f:DI 263)) "calc.c":276:1 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 263)
        (nil)))
(insn 10 9 11 2 (set (reg/f:DI 264)
        (mem/f/c:DI (plus:DI (reg/f:DI 16 argp)
                (const_int 16 [0x10])) [15 new_year+0 S8 A64])) "calc.c":276:1 74 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -272 [0xfffffffffffffef0])) [15 new_year+0 S8 A64])
        (reg/f:DI 264)) "calc.c":276:1 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 264)
        (nil)))
(note 12 11 13 2 NOTE_INSN_FUNCTION_BEG)
(insn 13 12 16 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 19 frame)
                        (const_int -8 [0xfffffffffffffff8])) [8 D.4788+0 S8 A64])
                (unspec:DI [
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_SET))
            (set (reg:DI 420)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":276:1 1159 {stack_protect_set_1_di}
     (expr_list:REG_UNUSED (reg:DI 420)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 16 13 17 2 (set (reg:DI 265)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -216 [0xffffffffffffff28])) [1 summ_c+0 S8 A64])) "calc.c":281:23 74 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg:DI 5 di)
        (reg:DI 265)) "calc.c":281:23 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 265)
        (nil)))
(call_insn/i 18 17 19 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":281:23 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 19 18 20 2 (set (reg:DF 82 [ _1 ])
        (reg:DF 20 xmm0)) "calc.c":281:23 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 20 19 21 2 (set (mem/c:XF (plus:DI (reg/f:DI 19 frame)
                (const_int -80 [0xffffffffffffffb0])) [14 sum+0 S16 A128])
        (float_extend:XF (reg:DF 82 [ _1 ]))) "calc.c":281:17 158 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 82 [ _1 ])
        (nil)))
(insn 21 20 22 2 (set (reg:DI 266)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -232 [0xffffffffffffff18])) [1 percent_c+0 S8 A64])) "calc.c":282:22 74 {*movdi_internal}
     (nil))
(insn 22 21 23 2 (set (reg:DI 5 di)
        (reg:DI 266)) "calc.c":282:22 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 266)
        (nil)))
(call_insn/i 23 22 24 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":282:22 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 24 23 25 2 (set (reg:DF 267)
        (reg:DF 20 xmm0)) "calc.c":282:22 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 25 24 26 2 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -120 [0xffffffffffffff88])) [2 percent+0 S8 A64])
        (reg:DF 267)) "calc.c":282:22 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 267)
        (nil)))
(insn 26 25 27 2 (set (reg:DI 268)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -264 [0xfffffffffffffef8])) [1 nal_per_c+0 S8 A64])) "calc.c":282:53 74 {*movdi_internal}
     (nil))
(insn 27 26 28 2 (set (reg:DI 5 di)
        (reg:DI 268)) "calc.c":282:53 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 268)
        (nil)))
(call_insn/i 28 27 29 2 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":282:53 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 29 28 30 2 (set (reg:DF 269)
        (reg:DF 20 xmm0)) "calc.c":282:53 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 30 29 31 2 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -112 [0xffffffffffffff90])) [2 nal_percent+0 S8 A128])
        (reg:DF 269)) "calc.c":282:53 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 269)
        (nil)))
(insn 31 30 32 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -144 [0xffffffffffffff70])) [1 token+0 S8 A128])
        (const_int 0 [0])) "calc.c":284:11 74 {*movdi_internal}
     (nil))
(insn 32 31 33 2 (set (reg:DF 270)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -112 [0xffffffffffffff90])) [2 nal_percent+0 S8 A128])) "calc.c":285:5 135 {*movdf_internal}
     (nil))
(insn 33 32 34 2 (set (reg:DF 20 xmm0)
        (reg:DF 270)) "calc.c":285:5 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 270)
        (nil)))
(insn 34 33 35 2 (set (reg:DI 271)
        (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7f09f171db40 *.LC25>)) "calc.c":285:5 74 {*movdi_internal}
     (nil))
(insn 35 34 36 2 (set (reg:DI 5 di)
        (reg:DI 271)) "calc.c":285:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 271)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC25") [flags 0x2]  <var_decl 0x7f09f171db40 *.LC25>)
            (nil))))
(insn 36 35 37 2 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) "calc.c":285:5 77 {*movqi_internal}
     (nil))
(call_insn 37 36 38 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f09f183f100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "calc.c":285:5 824 {*call_value}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DF (use (reg:DF 20 xmm0))
                (nil)))))
(insn 38 37 39 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -13 [0xfffffffffffffff3])) [0 sep+0 S4 A8])
        (const_int 2592 [0xa20])) "calc.c":286:10 75 {*movsi_internal}
     (nil))
(insn 39 38 40 2 (set (mem/c:QI (plus:DI (reg/f:DI 19 frame)
                (const_int -9 [0xfffffffffffffff7])) [0 sep+4 S1 A8])
        (const_int 0 [0])) "calc.c":286:10 77 {*movqi_internal}
     (nil))
(insn 40 39 657 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -196 [0xffffffffffffff3c])) [5 i+0 S4 A32])
        (const_int 1 [0x1])) "calc.c":287:14 75 {*movsi_internal}
     (nil))
(jump_insn 657 40 658 2 (set (pc)
        (label_ref 71)) "calc.c":287:5 807 {jump}
     (nil)
 -> 71)
;;  succ:       4 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 658 657 73)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 83 84 85 86 87 88 89 90 91 92 93 94 95 96 272 273 274 275 276 277 278
(code_label 73 658 43 3 90 (nil) [1 uses])
(note 43 73 44 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 3 (set (reg:SI 272)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -196 [0xffffffffffffff3c])) [5 i+0 S4 A32])) "calc.c":289:46 75 {*movsi_internal}
     (nil))
(insn 45 44 46 3 (set (reg:DI 83 [ _2 ])
        (sign_extend:DI (reg:SI 272))) "calc.c":289:46 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 272)
        (nil)))
(insn 46 45 47 3 (parallel [
            (set (reg:DI 84 [ _3 ])
                (ashift:DI (reg:DI 83 [ _2 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":289:46 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 83 [ _2 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 47 46 48 3 (set (reg/f:DI 273)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -248 [0xffffffffffffff08])) [15 capital+0 S8 A64])) "calc.c":289:46 74 {*movdi_internal}
     (nil))
(insn 48 47 49 3 (parallel [
            (set (reg/f:DI 85 [ _4 ])
                (plus:DI (reg:DI 84 [ _3 ])
                    (reg/f:DI 273)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":289:46 210 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 273)
        (expr_list:REG_DEAD (reg:DI 84 [ _3 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -248 [0xffffffffffffff08])) [15 capital+0 S8 A64])
                        (reg:DI 84 [ _3 ]))
                    (nil))))))
(insn 49 48 50 3 (set (reg:SI 86 [ _5 ])
        (mem:SI (reg/f:DI 85 [ _4 ]) [5 *_4+0 S4 A32])) "calc.c":289:46 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 85 [ _4 ])
        (nil)))
(insn 50 49 51 3 (set (reg:SI 274)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -196 [0xffffffffffffff3c])) [5 i+0 S4 A32])) "calc.c":289:59 75 {*movsi_internal}
     (nil))
(insn 51 50 52 3 (set (reg:DI 87 [ _6 ])
        (sign_extend:DI (reg:SI 274))) "calc.c":289:59 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 274)
        (nil)))
(insn 52 51 53 3 (parallel [
            (set (reg:DI 88 [ _7 ])
                (ashift:DI (reg:DI 87 [ _6 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":289:59 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 87 [ _6 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 53 52 54 3 (parallel [
            (set (reg:DI 89 [ _8 ])
                (plus:DI (reg:DI 88 [ _7 ])
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":289:59 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 88 [ _7 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 54 53 55 3 (set (reg/f:DI 275)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -248 [0xffffffffffffff08])) [15 capital+0 S8 A64])) "calc.c":289:59 74 {*movdi_internal}
     (nil))
(insn 55 54 56 3 (parallel [
            (set (reg/f:DI 90 [ _9 ])
                (plus:DI (reg:DI 89 [ _8 ])
                    (reg/f:DI 275)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":289:59 210 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 275)
        (expr_list:REG_DEAD (reg:DI 89 [ _8 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -248 [0xffffffffffffff08])) [15 capital+0 S8 A64])
                        (reg:DI 89 [ _8 ]))
                    (nil))))))
(insn 56 55 57 3 (set (reg:SI 91 [ _10 ])
        (mem:SI (reg/f:DI 90 [ _9 ]) [5 *_9+0 S4 A32])) "calc.c":289:59 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 90 [ _9 ])
        (nil)))
(insn 57 56 58 3 (parallel [
            (set (reg:SI 92 [ _11 ])
                (minus:SI (reg:SI 86 [ _5 ])
                    (reg:SI 91 [ _10 ])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":289:9 282 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 91 [ _10 ])
        (expr_list:REG_DEAD (reg:SI 86 [ _5 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (nil)))))
(insn 58 57 59 3 (set (reg:SI 276)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -196 [0xffffffffffffff3c])) [5 i+0 S4 A32])) "calc.c":289:34 75 {*movsi_internal}
     (nil))
(insn 59 58 60 3 (set (reg:DI 93 [ _12 ])
        (sign_extend:DI (reg:SI 276))) "calc.c":289:34 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 276)
        (nil)))
(insn 60 59 61 3 (parallel [
            (set (reg:DI 94 [ _13 ])
                (ashift:DI (reg:DI 93 [ _12 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":289:34 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 93 [ _12 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 61 60 62 3 (set (reg/f:DI 277)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -248 [0xffffffffffffff08])) [15 capital+0 S8 A64])) "calc.c":289:34 74 {*movdi_internal}
     (nil))
(insn 62 61 63 3 (parallel [
            (set (reg/f:DI 95 [ _14 ])
                (plus:DI (reg:DI 94 [ _13 ])
                    (reg/f:DI 277)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":289:34 210 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 277)
        (expr_list:REG_DEAD (reg:DI 94 [ _13 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -248 [0xffffffffffffff08])) [15 capital+0 S8 A64])
                        (reg:DI 94 [ _13 ]))
                    (nil))))))
(insn 63 62 64 3 (set (reg:SI 96 [ _15 ])
        (mem:SI (reg/f:DI 95 [ _14 ]) [5 *_14+0 S4 A32])) "calc.c":289:9 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 95 [ _14 ])
        (nil)))
(insn 64 63 65 3 (set (reg:SI 1 dx)
        (reg:SI 92 [ _11 ])) "calc.c":289:9 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 92 [ _11 ])
        (nil)))
(insn 65 64 66 3 (set (reg:SI 4 si)
        (reg:SI 96 [ _15 ])) "calc.c":289:9 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 96 [ _15 ])
        (nil)))
(insn 66 65 67 3 (set (reg:DI 278)
        (symbol_ref/f:DI ("*.LC26") [flags 0x2]  <var_decl 0x7f09f171dbd0 *.LC26>)) "calc.c":289:9 74 {*movdi_internal}
     (nil))
(insn 67 66 68 3 (set (reg:DI 5 di)
        (reg:DI 278)) "calc.c":289:9 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 278)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC26") [flags 0x2]  <var_decl 0x7f09f171dbd0 *.LC26>)
            (nil))))
(insn 68 67 69 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) "calc.c":289:9 77 {*movqi_internal}
     (nil))
(call_insn 69 68 70 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f09f183f100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "calc.c":289:9 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 70 69 71 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                        (const_int -196 [0xffffffffffffff3c])) [5 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -196 [0xffffffffffffff3c])) [5 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":287:30 209 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 71 70 72 4 89 (nil) [1 uses])
(note 72 71 76 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 76 72 77 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -196 [0xffffffffffffff3c])) [5 i+0 S4 A32])
            (const_int 59 [0x3b]))) "calc.c":287:23 11 {*cmpsi_1}
     (nil))
(jump_insn 77 76 78 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 73)
            (pc))) "calc.c":287:23 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 73)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 97 279 280
(note 78 77 79 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 5 (set (reg:DI 5 di)
        (const_int 16 [0x10])) "calc.c":291:32 74 {*movdi_internal}
     (nil))
(call_insn 80 79 81 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f09f185e800 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) "calc.c":291:32 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 81 80 82 5 (set (reg/f:DI 279)
        (reg:DI 0 ax)) "calc.c":291:32 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 279)
            (nil))))
(insn 82 81 83 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])
        (reg/f:DI 279)) "calc.c":291:32 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 279)
        (nil)))
(insn 83 82 84 5 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -192 [0xffffffffffffff40])) [5 num+0 S4 A128])
        (const_int 0 [0])) "calc.c":292:9 75 {*movsi_internal}
     (nil))
(insn 84 83 85 5 (set (reg/f:DI 280)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -240 [0xffffffffffffff10])) [1 history+0 S8 A64])) "calc.c":293:16 74 {*movdi_internal}
     (nil))
(insn 85 84 86 5 (set (reg:QI 97 [ _16 ])
        (mem:QI (reg/f:DI 280) [0 *history_241(D)+0 S1 A8])) "calc.c":293:16 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 280)
        (nil)))
(insn 86 85 87 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 97 [ _16 ])
            (const_int 0 [0]))) "calc.c":293:8 5 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 97 [ _16 ])
        (nil)))
(jump_insn 87 86 88 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 192)
            (pc))) "calc.c":293:8 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 192)
;;  succ:       6 (FALLTHRU)
;;              9
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 98 99 100 101 102 103 104 105 106 281 282 283 284 285 286 287 288 289 290 291 292
(note 88 87 89 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 89 88 90 6 (parallel [
            (set (reg:DI 281)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -13 [0xfffffffffffffff3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":295:17 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 90 89 91 6 (set (reg:DI 282)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -240 [0xffffffffffffff10])) [1 history+0 S8 A64])) "calc.c":295:17 74 {*movdi_internal}
     (nil))
(insn 91 90 92 6 (set (reg:DI 4 si)
        (reg:DI 281)) "calc.c":295:17 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 281)
        (nil)))
(insn 92 91 93 6 (set (reg:DI 5 di)
        (reg:DI 282)) "calc.c":295:17 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 282)
        (nil)))
(call_insn/i 93 92 94 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strpbrk") [flags 0x41]  <function_decl 0x7f09f183b300 strpbrk>) [0 __builtin_strpbrk S1 A8])
            (const_int 0 [0]))) "calc.c":295:17 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 94 93 95 6 (set (reg:DI 283)
        (reg:DI 0 ax)) "calc.c":295:17 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 95 94 96 6 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -144 [0xffffffffffffff70])) [1 token+0 S8 A128])
        (reg:DI 283)) "calc.c":295:17 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 283)
        (nil)))
(insn 96 95 97 6 (set (reg:SI 284)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -192 [0xffffffffffffff40])) [5 num+0 S4 A128])) "calc.c":296:15 75 {*movsi_internal}
     (nil))
(insn 97 96 98 6 (set (reg:DI 98 [ _17 ])
        (sign_extend:DI (reg:SI 284))) "calc.c":296:15 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 284)
        (nil)))
(insn 98 97 99 6 (parallel [
            (set (reg:DI 99 [ _18 ])
                (ashift:DI (reg:DI 98 [ _17 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":296:15 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 98 [ _17 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 99 98 100 6 (set (reg/f:DI 285)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])) "calc.c":296:15 74 {*movdi_internal}
     (nil))
(insn 100 99 101 6 (parallel [
            (set (reg/f:DI 100 [ _19 ])
                (plus:DI (reg:DI 99 [ _18 ])
                    (reg/f:DI 285)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":296:15 210 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 285)
        (expr_list:REG_DEAD (reg:DI 99 [ _18 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])
                        (reg:DI 99 [ _18 ]))
                    (nil))))))
(insn 101 100 102 6 (set (reg:DI 286)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -240 [0xffffffffffffff10])) [1 history+0 S8 A64])) "calc.c":296:23 74 {*movdi_internal}
     (nil))
(insn 102 101 103 6 (set (reg:DI 5 di)
        (reg:DI 286)) "calc.c":296:23 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 286)
        (nil)))
(call_insn/i 103 102 104 6 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":296:23 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 104 103 105 6 (set (reg:DF 101 [ _20 ])
        (reg:DF 20 xmm0)) "calc.c":296:23 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 105 104 106 6 (set (mem:DF (reg/f:DI 100 [ _19 ]) [2 *_19+0 S8 A64])
        (reg:DF 101 [ _20 ])) "calc.c":296:21 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 101 [ _20 ])
        (expr_list:REG_DEAD (reg/f:DI 100 [ _19 ])
            (nil))))
(insn 106 105 107 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                        (const_int -192 [0xffffffffffffff40])) [5 num+0 S4 A128])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -192 [0xffffffffffffff40])) [5 num+0 S4 A128])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":297:12 209 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 107 106 108 6 (set (reg:SI 287)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -192 [0xffffffffffffff40])) [5 num+0 S4 A128])) "calc.c":298:15 75 {*movsi_internal}
     (nil))
(insn 108 107 109 6 (set (reg:DI 102 [ _21 ])
        (sign_extend:DI (reg:SI 287))) "calc.c":298:15 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 287)
        (nil)))
(insn 109 108 110 6 (parallel [
            (set (reg:DI 103 [ _22 ])
                (ashift:DI (reg:DI 102 [ _21 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":298:15 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 102 [ _21 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 110 109 111 6 (set (reg/f:DI 288)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])) "calc.c":298:15 74 {*movdi_internal}
     (nil))
(insn 111 110 112 6 (parallel [
            (set (reg/f:DI 104 [ _23 ])
                (plus:DI (reg:DI 103 [ _22 ])
                    (reg/f:DI 288)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":298:15 210 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 288)
        (expr_list:REG_DEAD (reg:DI 103 [ _22 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])
                        (reg:DI 103 [ _22 ]))
                    (nil))))))
(insn 112 111 113 6 (set (reg:DI 289)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -144 [0xffffffffffffff70])) [1 token+0 S8 A128])) "calc.c":298:23 74 {*movdi_internal}
     (nil))
(insn 113 112 114 6 (set (reg:DI 5 di)
        (reg:DI 289)) "calc.c":298:23 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 289)
        (nil)))
(call_insn/i 114 113 115 6 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":298:23 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 115 114 116 6 (set (reg:DF 105 [ _24 ])
        (reg:DF 20 xmm0)) "calc.c":298:23 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 116 115 117 6 (set (mem:DF (reg/f:DI 104 [ _23 ]) [2 *_23+0 S8 A64])
        (reg:DF 105 [ _24 ])) "calc.c":298:21 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 105 [ _24 ])
        (expr_list:REG_DEAD (reg/f:DI 104 [ _23 ])
            (nil))))
(insn 117 116 118 6 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                        (const_int -192 [0xffffffffffffff40])) [5 num+0 S4 A128])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -192 [0xffffffffffffff40])) [5 num+0 S4 A128])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":299:12 209 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 118 117 119 6 (set (reg/f:DI 290)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -144 [0xffffffffffffff70])) [1 token+0 S8 A128])) "calc.c":300:31 74 {*movdi_internal}
     (nil))
(insn 119 118 120 6 (parallel [
            (set (reg/f:DI 106 [ _25 ])
                (plus:DI (reg/f:DI 290)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":300:31 210 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 290)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -144 [0xffffffffffffff70])) [1 token+0 S8 A128])
                    (const_int 1 [0x1]))
                (nil)))))
(insn 120 119 121 6 (parallel [
            (set (reg:DI 291)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -13 [0xfffffffffffffff3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":300:17 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 121 120 122 6 (set (reg:DI 4 si)
        (reg:DI 291)) "calc.c":300:17 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 291)
        (nil)))
(insn 122 121 123 6 (set (reg:DI 5 di)
        (reg/f:DI 106 [ _25 ])) "calc.c":300:17 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 106 [ _25 ])
        (nil)))
(call_insn/i 123 122 124 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strpbrk") [flags 0x41]  <function_decl 0x7f09f183b300 strpbrk>) [0 __builtin_strpbrk S1 A8])
            (const_int 0 [0]))) "calc.c":300:17 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 124 123 125 6 (set (reg:DI 292)
        (reg:DI 0 ax)) "calc.c":300:17 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 125 124 659 6 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -144 [0xffffffffffffff70])) [1 token+0 S8 A128])
        (reg:DI 292)) "calc.c":300:17 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 292)
        (nil)))
(jump_insn 659 125 660 6 (set (pc)
        (label_ref 187)) "calc.c":301:15 807 {jump}
     (nil)
 -> 187)
;;  succ:       8 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 660 659 189)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       8
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310
(code_label 189 660 128 7 93 (nil) [1 uses])
(note 128 189 129 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 129 128 130 7 (set (reg/f:DI 293)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -144 [0xffffffffffffff70])) [1 token+0 S8 A128])) "calc.c":303:53 74 {*movdi_internal}
     (nil))
(insn 130 129 131 7 (set (reg:QI 107 [ _26 ])
        (mem:QI (reg/f:DI 293) [0 *token_183+0 S1 A8])) "calc.c":303:53 77 {*movqi_internal}
     (expr_list:REG_DEAD (reg/f:DI 293)
        (nil)))
(insn 131 130 132 7 (set (reg:SI 108 [ _27 ])
        (sign_extend:SI (reg:QI 107 [ _26 ]))) "calc.c":303:13 153 {extendqisi2}
     (expr_list:REG_DEAD (reg:QI 107 [ _26 ])
        (nil)))
(insn 132 131 133 7 (set (reg:DI 294)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -144 [0xffffffffffffff70])) [1 token+0 S8 A128])) "calc.c":303:13 74 {*movdi_internal}
     (nil))
(insn 133 132 134 7 (set (reg:SI 1 dx)
        (reg:SI 108 [ _27 ])) "calc.c":303:13 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 108 [ _27 ])
        (nil)))
(insn 134 133 135 7 (set (reg:DI 4 si)
        (reg:DI 294)) "calc.c":303:13 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 294)
        (nil)))
(insn 135 134 136 7 (set (reg:DI 295)
        (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x7f09f171dc60 *.LC27>)) "calc.c":303:13 74 {*movdi_internal}
     (nil))
(insn 136 135 137 7 (set (reg:DI 5 di)
        (reg:DI 295)) "calc.c":303:13 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 295)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC27") [flags 0x2]  <var_decl 0x7f09f171dc60 *.LC27>)
            (nil))))
(insn 137 136 138 7 (set (reg:QI 0 ax)
        (const_int 0 [0])) "calc.c":303:13 77 {*movqi_internal}
     (nil))
(call_insn 138 137 139 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f09f183f100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "calc.c":303:13 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 139 138 140 7 (set (reg:SI 296)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -192 [0xffffffffffffff40])) [5 num+0 S4 A128])) "calc.c":304:53 75 {*movsi_internal}
     (nil))
(insn 140 139 141 7 (parallel [
            (set (reg:SI 109 [ _28 ])
                (plus:SI (reg:SI 296)
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":304:53 209 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 296)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -192 [0xffffffffffffff40])) [5 num+0 S4 A128])
                    (const_int 3 [0x3]))
                (nil)))))
(insn 141 140 142 7 (set (reg:DI 110 [ _29 ])
        (sign_extend:DI (reg:SI 109 [ _28 ]))) "calc.c":304:53 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 109 [ _28 ])
        (nil)))
(insn 142 141 143 7 (parallel [
            (set (reg:DI 111 [ _30 ])
                (ashift:DI (reg:DI 110 [ _29 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":304:32 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 110 [ _29 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 143 142 144 7 (set (reg:DI 297)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])) "calc.c":304:32 74 {*movdi_internal}
     (nil))
(insn 144 143 145 7 (set (reg:DI 4 si)
        (reg:DI 111 [ _30 ])) "calc.c":304:32 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 111 [ _30 ])
        (nil)))
(insn 145 144 146 7 (set (reg:DI 5 di)
        (reg:DI 297)) "calc.c":304:32 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 297)
        (nil)))
(call_insn 146 145 147 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7f09f1861600 realloc>) [0 __builtin_realloc S1 A8])
            (const_int 0 [0]))) "calc.c":304:32 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 147 146 148 7 (set (reg:DI 298)
        (reg:DI 0 ax)) "calc.c":304:32 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 148 147 149 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])
        (reg:DI 298)) "calc.c":304:32 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 298)
        (nil)))
(insn 149 148 150 7 (set (reg:SI 299)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -192 [0xffffffffffffff40])) [5 num+0 S4 A128])) "calc.c":305:19 75 {*movsi_internal}
     (nil))
(insn 150 149 151 7 (set (reg:DI 112 [ _31 ])
        (sign_extend:DI (reg:SI 299))) "calc.c":305:19 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 299)
        (nil)))
(insn 151 150 152 7 (parallel [
            (set (reg:DI 113 [ _32 ])
                (ashift:DI (reg:DI 112 [ _31 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":305:19 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 112 [ _31 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 152 151 153 7 (set (reg/f:DI 300)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])) "calc.c":305:19 74 {*movdi_internal}
     (nil))
(insn 153 152 154 7 (parallel [
            (set (reg/f:DI 114 [ _33 ])
                (plus:DI (reg:DI 113 [ _32 ])
                    (reg/f:DI 300)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":305:19 210 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 300)
        (expr_list:REG_DEAD (reg:DI 113 [ _32 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])
                        (reg:DI 113 [ _32 ]))
                    (nil))))))
(insn 154 153 155 7 (set (reg:DI 301)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -144 [0xffffffffffffff70])) [1 token+0 S8 A128])) "calc.c":305:27 74 {*movdi_internal}
     (nil))
(insn 155 154 156 7 (set (reg:DI 5 di)
        (reg:DI 301)) "calc.c":305:27 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 301)
        (nil)))
(call_insn/i 156 155 157 7 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":305:27 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 157 156 158 7 (set (reg:DF 115 [ _34 ])
        (reg:DF 20 xmm0)) "calc.c":305:27 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 158 157 159 7 (set (mem:DF (reg/f:DI 114 [ _33 ]) [2 *_33+0 S8 A64])
        (reg:DF 115 [ _34 ])) "calc.c":305:25 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 115 [ _34 ])
        (expr_list:REG_DEAD (reg/f:DI 114 [ _33 ])
            (nil))))
(insn 159 158 160 7 (set (reg/f:DI 302)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -144 [0xffffffffffffff70])) [1 token+0 S8 A128])) "calc.c":306:35 74 {*movdi_internal}
     (nil))
(insn 160 159 161 7 (parallel [
            (set (reg/f:DI 116 [ _35 ])
                (plus:DI (reg/f:DI 302)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":306:35 210 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 302)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -144 [0xffffffffffffff70])) [1 token+0 S8 A128])
                    (const_int 1 [0x1]))
                (nil)))))
(insn 161 160 162 7 (parallel [
            (set (reg:DI 303)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -13 [0xfffffffffffffff3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":306:21 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 162 161 163 7 (set (reg:DI 4 si)
        (reg:DI 303)) "calc.c":306:21 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 303)
        (nil)))
(insn 163 162 164 7 (set (reg:DI 5 di)
        (reg/f:DI 116 [ _35 ])) "calc.c":306:21 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 116 [ _35 ])
        (nil)))
(call_insn/i 164 163 165 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strpbrk") [flags 0x41]  <function_decl 0x7f09f183b300 strpbrk>) [0 __builtin_strpbrk S1 A8])
            (const_int 0 [0]))) "calc.c":306:21 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 165 164 166 7 (set (reg:DI 304)
        (reg:DI 0 ax)) "calc.c":306:21 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 166 165 167 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -144 [0xffffffffffffff70])) [1 token+0 S8 A128])
        (reg:DI 304)) "calc.c":306:21 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 304)
        (nil)))
(insn 167 166 168 7 (set (reg:SI 305)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -192 [0xffffffffffffff40])) [5 num+0 S4 A128])) "calc.c":307:19 75 {*movsi_internal}
     (nil))
(insn 168 167 169 7 (set (reg:DI 117 [ _36 ])
        (sign_extend:DI (reg:SI 305))) "calc.c":307:19 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 305)
        (nil)))
(insn 169 168 170 7 (parallel [
            (set (reg:DI 118 [ _37 ])
                (plus:DI (reg:DI 117 [ _36 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":307:19 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 117 [ _36 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 170 169 171 7 (parallel [
            (set (reg:DI 119 [ _38 ])
                (ashift:DI (reg:DI 118 [ _37 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":307:19 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 118 [ _37 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 171 170 172 7 (set (reg/f:DI 306)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])) "calc.c":307:19 74 {*movdi_internal}
     (nil))
(insn 172 171 173 7 (parallel [
            (set (reg/f:DI 120 [ _39 ])
                (plus:DI (reg:DI 119 [ _38 ])
                    (reg/f:DI 306)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":307:19 210 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 306)
        (expr_list:REG_DEAD (reg:DI 119 [ _38 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])
                        (reg:DI 119 [ _38 ]))
                    (nil))))))
(insn 173 172 174 7 (set (reg:DI 307)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -144 [0xffffffffffffff70])) [1 token+0 S8 A128])) "calc.c":307:31 74 {*movdi_internal}
     (nil))
(insn 174 173 175 7 (set (reg:DI 5 di)
        (reg:DI 307)) "calc.c":307:31 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 307)
        (nil)))
(call_insn/i 175 174 176 7 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("atof") [flags 0x41]  <function_decl 0x7f09f1941700 atof>) [0 atof S1 A8])
            (const_int 0 [0]))) "calc.c":307:31 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 176 175 177 7 (set (reg:DF 121 [ _40 ])
        (reg:DF 20 xmm0)) "calc.c":307:31 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 177 176 178 7 (set (mem:DF (reg/f:DI 120 [ _39 ]) [2 *_39+0 S8 A64])
        (reg:DF 121 [ _40 ])) "calc.c":307:29 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 121 [ _40 ])
        (expr_list:REG_DEAD (reg/f:DI 120 [ _39 ])
            (nil))))
(insn 178 177 179 7 (set (reg/f:DI 308)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -144 [0xffffffffffffff70])) [1 token+0 S8 A128])) "calc.c":308:35 74 {*movdi_internal}
     (nil))
(insn 179 178 180 7 (parallel [
            (set (reg/f:DI 122 [ _41 ])
                (plus:DI (reg/f:DI 308)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":308:35 210 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 308)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                            (const_int -144 [0xffffffffffffff70])) [1 token+0 S8 A128])
                    (const_int 1 [0x1]))
                (nil)))))
(insn 180 179 181 7 (parallel [
            (set (reg:DI 309)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -13 [0xfffffffffffffff3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":308:21 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 181 180 182 7 (set (reg:DI 4 si)
        (reg:DI 309)) "calc.c":308:21 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 309)
        (nil)))
(insn 182 181 183 7 (set (reg:DI 5 di)
        (reg/f:DI 122 [ _41 ])) "calc.c":308:21 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 122 [ _41 ])
        (nil)))
(call_insn/i 183 182 184 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strpbrk") [flags 0x41]  <function_decl 0x7f09f183b300 strpbrk>) [0 __builtin_strpbrk S1 A8])
            (const_int 0 [0]))) "calc.c":308:21 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 184 183 185 7 (set (reg:DI 310)
        (reg:DI 0 ax)) "calc.c":308:21 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn 185 184 186 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -144 [0xffffffffffffff70])) [1 token+0 S8 A128])
        (reg:DI 310)) "calc.c":308:21 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 310)
        (nil)))
(insn 186 185 187 7 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                        (const_int -192 [0xffffffffffffff40])) [5 num+0 S4 A128])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -192 [0xffffffffffffff40])) [5 num+0 S4 A128])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":309:17 209 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              6 [always] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 187 186 188 8 92 (nil) [1 uses])
(note 188 187 190 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 190 188 191 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                    (const_int -144 [0xffffffffffffff70])) [1 token+0 S8 A128])
            (const_int 0 [0]))) "calc.c":301:22 8 {*cmpdi_ccno_1}
     (nil))
(jump_insn 191 190 192 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 189)
            (pc))) "calc.c":301:22 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 189)
;;  succ:       7
;;              9 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       5
;;              8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 123 124 125 311 312
(code_label 192 191 193 9 91 (nil) [1 uses])
(note 193 192 194 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 194 193 195 9 (set (reg:SI 311)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -192 [0xffffffffffffff40])) [5 num+0 S4 A128])) "calc.c":313:49 75 {*movsi_internal}
     (nil))
(insn 195 194 196 9 (parallel [
            (set (reg:SI 123 [ _42 ])
                (plus:SI (reg:SI 311)
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":313:49 209 {*addsi_1}
     (expr_list:REG_DEAD (reg:SI 311)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -192 [0xffffffffffffff40])) [5 num+0 S4 A128])
                    (const_int 1 [0x1]))
                (nil)))))
(insn 196 195 197 9 (set (reg:DI 124 [ _43 ])
        (sign_extend:DI (reg:SI 123 [ _42 ]))) "calc.c":313:49 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 123 [ _42 ])
        (nil)))
(insn 197 196 198 9 (parallel [
            (set (reg:DI 125 [ _44 ])
                (ashift:DI (reg:DI 124 [ _43 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":313:37 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 124 [ _43 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 198 197 199 9 (set (reg:DI 5 di)
        (reg:DI 125 [ _44 ])) "calc.c":313:37 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 125 [ _44 ])
        (nil)))
(call_insn 199 198 200 9 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7f09f185e800 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) "calc.c":313:37 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 200 199 201 9 (set (reg/f:DI 312)
        (reg:DI 0 ax)) "calc.c":313:37 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (expr_list:REG_NOALIAS (reg/f:DI 312)
            (nil))))
(insn 201 200 202 9 (set (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -104 [0xffffffffffffff98])) [10 sort_change+0 S8 A64])
        (reg/f:DI 312)) "calc.c":313:37 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 312)
        (nil)))
(insn 202 201 661 9 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -188 [0xffffffffffffff44])) [5 i+0 S4 A32])
        (const_int 0 [0])) "calc.c":314:14 75 {*movsi_internal}
     (nil))
(jump_insn 661 202 662 9 (set (pc)
        (label_ref 291)) "calc.c":314:5 807 {jump}
     (nil)
 -> 291)
;;  succ:       17 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 662 661 293)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       17
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 313
(code_label 293 662 205 10 100 (nil) [1 uses])
(note 205 293 206 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 206 205 207 10 (set (reg:DF 313)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC28") [flags 0x2]) [0  S8 A64])) "calc.c":316:16 135 {*movdf_internal}
     (nil))
(insn 207 206 208 10 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -128 [0xffffffffffffff80])) [2 min+0 S8 A128])
        (reg:DF 313)) "calc.c":316:16 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 313)
        (nil)))
(insn 208 207 663 10 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -180 [0xffffffffffffff4c])) [5 j+0 S4 A32])
        (const_int 0 [0])) "calc.c":318:18 75 {*movsi_internal}
     (nil))
(jump_insn 663 208 664 10 (set (pc)
        (label_ref 250)) "calc.c":318:9 807 {jump}
     (nil)
 -> 250)
;;  succ:       15 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 664 663 252)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       15
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 126 127 128 129 314 315 316
(code_label 252 664 211 11 99 (nil) [1 uses])
(note 211 252 212 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 212 211 213 11 (set (reg:SI 314)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -180 [0xffffffffffffff4c])) [5 j+0 S4 A32])) "calc.c":320:23 75 {*movsi_internal}
     (nil))
(insn 213 212 214 11 (set (reg:DI 126 [ _45 ])
        (sign_extend:DI (reg:SI 314))) "calc.c":320:23 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 314)
        (nil)))
(insn 214 213 215 11 (parallel [
            (set (reg:DI 127 [ _46 ])
                (ashift:DI (reg:DI 126 [ _45 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":320:23 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 126 [ _45 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 215 214 216 11 (set (reg/f:DI 315)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])) "calc.c":320:23 74 {*movdi_internal}
     (nil))
(insn 216 215 217 11 (parallel [
            (set (reg/f:DI 128 [ _47 ])
                (plus:DI (reg:DI 127 [ _46 ])
                    (reg/f:DI 315)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":320:23 210 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 315)
        (expr_list:REG_DEAD (reg:DI 127 [ _46 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])
                        (reg:DI 127 [ _46 ]))
                    (nil))))))
(insn 217 216 218 11 (set (reg:DF 129 [ _48 ])
        (mem:DF (reg/f:DI 128 [ _47 ]) [2 *_47+0 S8 A64])) "calc.c":320:23 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg/f:DI 128 [ _47 ])
        (nil)))
(insn 218 217 219 11 (set (reg:DF 316)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -128 [0xffffffffffffff80])) [2 min+0 S8 A128])) "calc.c":320:16 135 {*movdf_internal}
     (nil))
(insn 219 218 220 11 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:DF 316)
            (reg:DF 129 [ _48 ]))) "calc.c":320:16 46 {*cmpidf}
     (expr_list:REG_DEAD (reg:DF 316)
        (expr_list:REG_DEAD (reg:DF 129 [ _48 ])
            (nil))))
(jump_insn 220 219 224 11 (set (pc)
        (if_then_else (unle (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 247)
            (pc))) "calc.c":320:16 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCFP 17 flags)
        (nil))
 -> 247)
;;  succ:       12 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 130 131 132 133 317 318 319
(note 224 220 225 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 225 224 226 12 (set (reg:SI 317)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -180 [0xffffffffffffff4c])) [5 j+0 S4 A32])) "calc.c":320:42 75 {*movsi_internal}
     (nil))
(insn 226 225 227 12 (set (reg:DI 130 [ _49 ])
        (sign_extend:DI (reg:SI 317))) "calc.c":320:42 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 317)
        (nil)))
(insn 227 226 228 12 (parallel [
            (set (reg:DI 131 [ _50 ])
                (ashift:DI (reg:DI 130 [ _49 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":320:42 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 130 [ _49 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 228 227 229 12 (set (reg/f:DI 318)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])) "calc.c":320:42 74 {*movdi_internal}
     (nil))
(insn 229 228 230 12 (parallel [
            (set (reg/f:DI 132 [ _51 ])
                (plus:DI (reg:DI 131 [ _50 ])
                    (reg/f:DI 318)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":320:42 210 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 318)
        (expr_list:REG_DEAD (reg:DI 131 [ _50 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])
                        (reg:DI 131 [ _50 ]))
                    (nil))))))
(insn 230 229 231 12 (set (reg:DF 133 [ _52 ])
        (mem:DF (reg/f:DI 132 [ _51 ]) [2 *_51+0 S8 A64])) "calc.c":320:42 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg/f:DI 132 [ _51 ])
        (nil)))
(insn 231 230 232 12 (set (reg:DF 319)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC29") [flags 0x2]) [0  S8 A64])) "calc.c":320:33 135 {*movdf_internal}
     (expr_list:REG_EQUAL (const_double:DF 0.0 [0x0.0p+0])
        (nil)))
(insn 232 231 233 12 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:DF 133 [ _52 ])
            (reg:DF 319))) "calc.c":320:33 46 {*cmpidf}
     (expr_list:REG_DEAD (reg:DF 319)
        (expr_list:REG_DEAD (reg:DF 133 [ _52 ])
            (nil))))
(jump_insn 233 232 237 12 (set (pc)
        (if_then_else (unlt (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 247)
            (pc))) "calc.c":320:33 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCFP 17 flags)
        (nil))
 -> 247)
;;  succ:       13 (FALLTHRU)
;;              14
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 134 135 136 320 321 322 323
(note 237 233 238 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 238 237 239 13 (set (reg:SI 320)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -180 [0xffffffffffffff4c])) [5 j+0 S4 A32])) "calc.c":322:29 75 {*movsi_internal}
     (nil))
(insn 239 238 240 13 (set (reg:DI 134 [ _53 ])
        (sign_extend:DI (reg:SI 320))) "calc.c":322:29 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 320)
        (nil)))
(insn 240 239 241 13 (parallel [
            (set (reg:DI 135 [ _54 ])
                (ashift:DI (reg:DI 134 [ _53 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":322:29 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 134 [ _53 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 241 240 242 13 (set (reg/f:DI 321)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])) "calc.c":322:29 74 {*movdi_internal}
     (nil))
(insn 242 241 243 13 (parallel [
            (set (reg/f:DI 136 [ _55 ])
                (plus:DI (reg:DI 135 [ _54 ])
                    (reg/f:DI 321)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":322:29 210 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 321)
        (expr_list:REG_DEAD (reg:DI 135 [ _54 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])
                        (reg:DI 135 [ _54 ]))
                    (nil))))))
(insn 243 242 244 13 (set (reg:DF 322)
        (mem:DF (reg/f:DI 136 [ _55 ]) [2 *_55+0 S8 A64])) "calc.c":322:21 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg/f:DI 136 [ _55 ])
        (nil)))
(insn 244 243 245 13 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -128 [0xffffffffffffff80])) [2 min+0 S8 A128])
        (reg:DF 322)) "calc.c":322:21 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 322)
        (nil)))
(insn 245 244 246 13 (set (reg:SI 323)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -180 [0xffffffffffffff4c])) [5 j+0 S4 A32])) "calc.c":323:30 75 {*movsi_internal}
     (nil))
(insn 246 245 247 13 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -184 [0xffffffffffffff48])) [5 point_of_min+0 S4 A64])
        (reg:SI 323)) "calc.c":323:30 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 323)
        (nil)))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       13 (FALLTHRU)
;;              11
;;              12
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 247 246 248 14 96 (nil) [2 uses])
(note 248 247 249 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 249 248 250 14 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                        (const_int -180 [0xffffffffffffff4c])) [5 j+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -180 [0xffffffffffffff4c])) [5 j+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":318:36 209 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       15 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       14 (FALLTHRU,DFS_BACK)
;;              10 [always] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 324
(code_label 250 249 251 15 95 (nil) [1 uses])
(note 251 250 253 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 253 251 254 15 (set (reg:SI 324)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -180 [0xffffffffffffff4c])) [5 j+0 S4 A32])) "calc.c":318:27 75 {*movsi_internal}
     (nil))
(insn 254 253 255 15 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 324)
            (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -192 [0xffffffffffffff40])) [5 num+0 S4 A128]))) "calc.c":318:27 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 324)
        (nil)))
(jump_insn 255 254 256 15 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 252)
            (pc))) "calc.c":318:27 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 252)
;;  succ:       11
;;              16 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 325 326 327 328 329 330 331 332 333 334 335
(note 256 255 257 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 257 256 258 16 (set (reg:SI 325)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -184 [0xffffffffffffff48])) [5 point_of_min+0 S4 A64])) "calc.c":326:32 75 {*movsi_internal}
     (nil))
(insn 258 257 259 16 (set (reg:DI 137 [ _56 ])
        (sign_extend:DI (reg:SI 325))) "calc.c":326:32 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 325)
        (nil)))
(insn 259 258 260 16 (parallel [
            (set (reg:DI 138 [ _57 ])
                (ashift:DI (reg:DI 137 [ _56 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":326:32 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 137 [ _56 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 260 259 261 16 (set (reg/f:DI 326)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])) "calc.c":326:32 74 {*movdi_internal}
     (nil))
(insn 261 260 262 16 (parallel [
            (set (reg/f:DI 139 [ _58 ])
                (plus:DI (reg:DI 138 [ _57 ])
                    (reg/f:DI 326)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":326:32 210 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 326)
        (expr_list:REG_DEAD (reg:DI 138 [ _57 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])
                        (reg:DI 138 [ _57 ]))
                    (nil))))))
(insn 262 261 263 16 (set (reg:SI 327)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -188 [0xffffffffffffff44])) [5 i+0 S4 A32])) "calc.c":326:20 75 {*movsi_internal}
     (nil))
(insn 263 262 264 16 (set (reg:DI 140 [ _59 ])
        (sign_extend:DI (reg:SI 327))) "calc.c":326:20 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 327)
        (nil)))
(insn 264 263 265 16 (parallel [
            (set (reg:DI 141 [ _60 ])
                (ashift:DI (reg:DI 140 [ _59 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":326:20 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 140 [ _59 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 265 264 266 16 (set (reg/f:DI 328)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -104 [0xffffffffffffff98])) [10 sort_change+0 S8 A64])) "calc.c":326:20 74 {*movdi_internal}
     (nil))
(insn 266 265 267 16 (parallel [
            (set (reg/f:DI 142 [ _61 ])
                (plus:DI (reg:DI 141 [ _60 ])
                    (reg/f:DI 328)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":326:20 210 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 328)
        (expr_list:REG_DEAD (reg:DI 141 [ _60 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -104 [0xffffffffffffff98])) [10 sort_change+0 S8 A64])
                        (reg:DI 141 [ _60 ]))
                    (nil))))))
(insn 267 266 268 16 (set (reg:DF 143 [ _62 ])
        (mem:DF (reg/f:DI 139 [ _58 ]) [2 *_58+0 S8 A64])) "calc.c":326:32 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg/f:DI 139 [ _58 ])
        (nil)))
(insn 268 267 269 16 (set (mem:DF (reg/f:DI 142 [ _61 ]) [2 *_61+0 S8 A64])
        (reg:DF 143 [ _62 ])) "calc.c":326:24 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 143 [ _62 ])
        (expr_list:REG_DEAD (reg/f:DI 142 [ _61 ])
            (nil))))
(insn 269 268 270 16 (set (reg:SI 329)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -184 [0xffffffffffffff48])) [5 point_of_min+0 S4 A64])) "calc.c":327:36 75 {*movsi_internal}
     (nil))
(insn 270 269 271 16 (set (reg:DI 144 [ _63 ])
        (sign_extend:DI (reg:SI 329))) "calc.c":327:36 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 329)
        (nil)))
(insn 271 270 272 16 (parallel [
            (set (reg:DI 145 [ _64 ])
                (plus:DI (reg:DI 144 [ _63 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":327:36 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 144 [ _63 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 272 271 273 16 (parallel [
            (set (reg:DI 146 [ _65 ])
                (ashift:DI (reg:DI 145 [ _64 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":327:36 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 145 [ _64 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 273 272 274 16 (set (reg/f:DI 330)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])) "calc.c":327:36 74 {*movdi_internal}
     (nil))
(insn 274 273 275 16 (parallel [
            (set (reg/f:DI 147 [ _66 ])
                (plus:DI (reg:DI 146 [ _65 ])
                    (reg/f:DI 330)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":327:36 210 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 330)
        (expr_list:REG_DEAD (reg:DI 146 [ _65 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])
                        (reg:DI 146 [ _65 ]))
                    (nil))))))
(insn 275 274 276 16 (set (reg:SI 331)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -188 [0xffffffffffffff44])) [5 i+0 S4 A32])) "calc.c":327:20 75 {*movsi_internal}
     (nil))
(insn 276 275 277 16 (set (reg:DI 148 [ _67 ])
        (sign_extend:DI (reg:SI 331))) "calc.c":327:20 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 331)
        (nil)))
(insn 277 276 278 16 (parallel [
            (set (reg:DI 149 [ _68 ])
                (plus:DI (reg:DI 148 [ _67 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":327:20 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 148 [ _67 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 278 277 279 16 (parallel [
            (set (reg:DI 150 [ _69 ])
                (ashift:DI (reg:DI 149 [ _68 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":327:20 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 149 [ _68 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 279 278 280 16 (set (reg/f:DI 332)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -104 [0xffffffffffffff98])) [10 sort_change+0 S8 A64])) "calc.c":327:20 74 {*movdi_internal}
     (nil))
(insn 280 279 281 16 (parallel [
            (set (reg/f:DI 151 [ _70 ])
                (plus:DI (reg:DI 150 [ _69 ])
                    (reg/f:DI 332)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":327:20 210 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 332)
        (expr_list:REG_DEAD (reg:DI 150 [ _69 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -104 [0xffffffffffffff98])) [10 sort_change+0 S8 A64])
                        (reg:DI 150 [ _69 ]))
                    (nil))))))
(insn 281 280 282 16 (set (reg:DF 152 [ _71 ])
        (mem:DF (reg/f:DI 147 [ _66 ]) [2 *_66+0 S8 A64])) "calc.c":327:36 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg/f:DI 147 [ _66 ])
        (nil)))
(insn 282 281 283 16 (set (mem:DF (reg/f:DI 151 [ _70 ]) [2 *_70+0 S8 A64])
        (reg:DF 152 [ _71 ])) "calc.c":327:28 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 152 [ _71 ])
        (expr_list:REG_DEAD (reg/f:DI 151 [ _70 ])
            (nil))))
(insn 283 282 284 16 (set (reg:SI 333)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -184 [0xffffffffffffff48])) [5 point_of_min+0 S4 A64])) "calc.c":328:15 75 {*movsi_internal}
     (nil))
(insn 284 283 285 16 (set (reg:DI 153 [ _72 ])
        (sign_extend:DI (reg:SI 333))) "calc.c":328:15 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 333)
        (nil)))
(insn 285 284 286 16 (parallel [
            (set (reg:DI 154 [ _73 ])
                (ashift:DI (reg:DI 153 [ _72 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":328:15 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 153 [ _72 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 286 285 287 16 (set (reg/f:DI 334)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])) "calc.c":328:15 74 {*movdi_internal}
     (nil))
(insn 287 286 288 16 (parallel [
            (set (reg/f:DI 155 [ _74 ])
                (plus:DI (reg:DI 154 [ _73 ])
                    (reg/f:DI 334)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":328:15 210 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 334)
        (expr_list:REG_DEAD (reg:DI 154 [ _73 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])
                        (reg:DI 154 [ _73 ]))
                    (nil))))))
(insn 288 287 289 16 (set (reg:DF 335)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC30") [flags 0x2]) [0  S8 A64])) "calc.c":328:30 135 {*movdf_internal}
     (nil))
(insn 289 288 290 16 (set (mem:DF (reg/f:DI 155 [ _74 ]) [2 *_74+0 S8 A64])
        (reg:DF 335)) "calc.c":328:30 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 335)
        (expr_list:REG_DEAD (reg/f:DI 155 [ _74 ])
            (nil))))
(insn 290 289 291 16 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                        (const_int -188 [0xffffffffffffff44])) [5 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -188 [0xffffffffffffff44])) [5 i+0 S4 A32])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":314:32 209 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       17 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL)
;;  pred:       16 (FALLTHRU,DFS_BACK)
;;              9 [always] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 336
(code_label 291 290 292 17 94 (nil) [1 uses])
(note 292 291 294 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 294 292 295 17 (set (reg:SI 336)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -188 [0xffffffffffffff44])) [5 i+0 S4 A32])) "calc.c":314:23 75 {*movsi_internal}
     (nil))
(insn 295 294 296 17 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 336)
            (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -192 [0xffffffffffffff40])) [5 num+0 S4 A128]))) "calc.c":314:23 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 336)
        (nil)))
(jump_insn 296 295 297 17 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 293)
            (pc))) "calc.c":314:23 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 293)
;;  succ:       10
;;              18 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 337 338 339 340 341
(note 297 296 298 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 298 297 299 18 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -176 [0xffffffffffffff50])) [5 current_day+0 S4 A128])
        (const_int 0 [0])) "calc.c":331:9 75 {*movsi_internal}
     (nil))
(insn 299 298 300 18 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -172 [0xffffffffffffff54])) [5 last_day+0 S4 A32])
        (const_int 0 [0])) "calc.c":331:26 75 {*movsi_internal}
     (nil))
(insn 300 299 301 18 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -168 [0xffffffffffffff58])) [5 cur_change+0 S4 A64])
        (const_int 0 [0])) "calc.c":331:40 75 {*movsi_internal}
     (nil))
(insn 301 300 302 18 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -164 [0xffffffffffffff5c])) [5 cur_capit+0 S4 A32])
        (const_int 0 [0])) "calc.c":331:56 75 {*movsi_internal}
     (nil))
(insn 302 301 303 18 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -160 [0xffffffffffffff60])) [5 cur_nal+0 S4 A128])
        (const_int 0 [0])) "calc.c":331:71 75 {*movsi_internal}
     (nil))
(insn 303 302 304 18 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -156 [0xffffffffffffff64])) [5 cur_year+0 S4 A32])
        (const_int 0 [0])) "calc.c":331:84 75 {*movsi_internal}
     (nil))
(insn 304 303 305 18 (set (reg:XF 337)
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC31") [flags 0x2]) [0  S16 A128])) "calc.c":332:17 134 {*movxf_internal}
     (nil))
(insn 305 304 306 18 (set (mem/c:XF (plus:DI (reg/f:DI 19 frame)
                (const_int -64 [0xffffffffffffffc0])) [14 res_capit+0 S16 A128])
        (reg:XF 337)) "calc.c":332:17 134 {*movxf_internal}
     (expr_list:REG_DEAD (reg:XF 337)
        (nil)))
(insn 306 305 307 18 (set (reg:XF 338)
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC31") [flags 0x2]) [0  S16 A128])) "calc.c":332:32 134 {*movxf_internal}
     (nil))
(insn 307 306 308 18 (set (mem/c:XF (plus:DI (reg/f:DI 19 frame)
                (const_int -48 [0xffffffffffffffd0])) [14 sum_nal+0 S16 A128])
        (reg:XF 338)) "calc.c":332:32 134 {*movxf_internal}
     (expr_list:REG_DEAD (reg:XF 338)
        (nil)))
(insn 308 307 309 18 (set (reg:XF 339)
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC31") [flags 0x2]) [0  S16 A128])) "calc.c":332:45 134 {*movxf_internal}
     (nil))
(insn 309 308 310 18 (set (mem/c:XF (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [14 last_nal+0 S16 A128])
        (reg:XF 339)) "calc.c":332:45 134 {*movxf_internal}
     (expr_list:REG_DEAD (reg:XF 339)
        (nil)))
(insn 310 309 311 18 (set (reg:DF 340)
        (mem/u/c:DF (symbol_ref/u:DI ("*.LC29") [flags 0x2]) [0  S8 A64])) "calc.c":333:9 135 {*movdf_internal}
     (nil))
(insn 311 310 312 18 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -152 [0xffffffffffffff68])) [2 res+0 S8 A64])
        (reg:DF 340)) "calc.c":333:9 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 340)
        (nil)))
(insn 312 311 313 18 (set (reg:DI 341)
        (symbol_ref/f:DI ("*.LC32") [flags 0x2]  <var_decl 0x7f09f171dcf0 *.LC32>)) "calc.c":334:5 74 {*movdi_internal}
     (nil))
(insn 313 312 314 18 (set (reg:DI 5 di)
        (reg:DI 341)) "calc.c":334:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 341)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC32") [flags 0x2]  <var_decl 0x7f09f171dcf0 *.LC32>)
            (nil))))
(call_insn 314 313 665 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f09f183f800 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "calc.c":334:5 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 665 314 666 18 (set (pc)
        (label_ref 532)) "calc.c":336:5 807 {jump}
     (nil)
 -> 532)
;;  succ:       31 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 666 665 534)
;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL)
;;  pred:       31
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 156 157 158 159 342 343
(code_label 534 666 317 19 109 (nil) [1 uses])
(note 317 534 318 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 318 317 319 19 (set (reg:SI 342)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -160 [0xffffffffffffff60])) [5 cur_nal+0 S4 A128])) "calc.c":339:38 75 {*movsi_internal}
     (nil))
(insn 319 318 320 19 (set (reg:DI 156 [ _75 ])
        (sign_extend:DI (reg:SI 342))) "calc.c":339:38 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 342)
        (nil)))
(insn 320 319 321 19 (parallel [
            (set (reg:DI 157 [ _76 ])
                (ashift:DI (reg:DI 156 [ _75 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":339:38 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 156 [ _75 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 321 320 322 19 (set (reg/f:DI 343)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -256 [0xffffffffffffff00])) [15 nalog_date+0 S8 A64])) "calc.c":339:38 74 {*movdi_internal}
     (nil))
(insn 322 321 323 19 (parallel [
            (set (reg/f:DI 158 [ _77 ])
                (plus:DI (reg:DI 157 [ _76 ])
                    (reg/f:DI 343)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":339:38 210 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 343)
        (expr_list:REG_DEAD (reg:DI 157 [ _76 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -256 [0xffffffffffffff00])) [15 nalog_date+0 S8 A64])
                        (reg:DI 157 [ _76 ]))
                    (nil))))))
(insn 323 322 324 19 (set (reg:SI 159 [ _78 ])
        (mem:SI (reg/f:DI 158 [ _77 ]) [5 *_77+0 S4 A32])) "calc.c":339:38 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 158 [ _77 ])
        (nil)))
(insn 324 323 325 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -176 [0xffffffffffffff50])) [5 current_day+0 S4 A128])
            (reg:SI 159 [ _78 ]))) "calc.c":339:12 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 159 [ _78 ])
        (nil)))
(jump_insn 325 324 326 19 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 404)
            (pc))) "calc.c":339:12 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 404)
;;  succ:       20 (FALLTHRU)
;;              23
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 160 161 344 345 346
(note 326 325 327 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 327 326 328 20 (set (reg:DI 344)
        (symbol_ref/f:DI ("*.LC33") [flags 0x2]  <var_decl 0x7f09f171dd80 *.LC33>)) "calc.c":341:13 74 {*movdi_internal}
     (nil))
(insn 328 327 329 20 (set (reg:DI 5 di)
        (reg:DI 344)) "calc.c":341:13 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 344)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC33") [flags 0x2]  <var_decl 0x7f09f171dd80 *.LC33>)
            (nil))))
(call_insn 329 328 330 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f09f183f800 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "calc.c":341:13 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 330 329 331 20 (set (reg:XF 160 [ _79 ])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                    (const_int -152 [0xffffffffffffff68])) [2 res+0 S8 A64]))) "calc.c":344:21 158 {*extenddfxf2_i387}
     (nil))
(insn 331 330 332 20 (set (reg:XF 345)
        (mem/c:XF (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [14 last_nal+0 S16 A128])) "calc.c":344:21 134 {*movxf_internal}
     (nil))
(insn 332 331 333 20 (set (reg:XF 161 [ _80 ])
        (minus:XF (reg:XF 160 [ _79 ])
            (reg:XF 345))) "calc.c":344:21 983 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 345)
        (expr_list:REG_DEAD (reg:XF 160 [ _79 ])
            (nil))))
(insn 333 332 334 20 (set (reg:XF 346)
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC34") [flags 0x2]) [0  S16 A128])) "calc.c":344:16 134 {*movxf_internal}
     (expr_list:REG_EQUAL (const_double:XF 1.2e+5 [0x0.ea6p+17])
        (nil)))
(insn 334 333 335 20 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:XF 161 [ _80 ])
            (reg:XF 346))) "calc.c":344:16 42 {*cmpixf_i387}
     (expr_list:REG_DEAD (reg:XF 346)
        (expr_list:REG_DEAD (reg:XF 161 [ _80 ])
            (nil))))
(jump_insn 335 334 339 20 (set (pc)
        (if_then_else (unle (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 357)
            (pc))) "calc.c":344:16 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCFP 17 flags)
        (nil))
 -> 357)
;;  succ:       21 (FALLTHRU)
;;              22
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL)
;;  pred:       20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 162 163 164 165 166 167 168 169 258 347 348 349 350 351
(note 339 335 340 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 340 339 341 21 (set (reg:XF 162 [ _81 ])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                    (const_int -152 [0xffffffffffffff68])) [2 res+0 S8 A64]))) "calc.c":346:43 158 {*extenddfxf2_i387}
     (nil))
(insn 341 340 342 21 (set (reg:XF 347)
        (mem/c:XF (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [14 last_nal+0 S16 A128])) "calc.c":346:43 134 {*movxf_internal}
     (nil))
(insn 342 341 343 21 (set (reg:XF 163 [ _82 ])
        (minus:XF (reg:XF 162 [ _81 ])
            (reg:XF 347))) "calc.c":346:43 983 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 347)
        (expr_list:REG_DEAD (reg:XF 162 [ _81 ])
            (nil))))
(insn 343 342 344 21 (set (reg:XF 348)
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC34") [flags 0x2]) [0  S16 A128])) "calc.c":346:54 134 {*movxf_internal}
     (expr_list:REG_EQUAL (const_double:XF 1.2e+5 [0x0.ea6p+17])
        (nil)))
(insn 344 343 345 21 (set (reg:XF 164 [ _83 ])
        (minus:XF (reg:XF 163 [ _82 ])
            (reg:XF 348))) "calc.c":346:54 983 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 348)
        (expr_list:REG_DEAD (reg:XF 163 [ _82 ])
            (nil))))
(insn 345 344 346 21 (set (reg:XF 165 [ _84 ])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                    (const_int -112 [0xffffffffffffff90])) [2 nal_percent+0 S8 A128]))) "calc.c":346:72 158 {*extenddfxf2_i387}
     (nil))
(insn 346 345 347 21 (set (reg:XF 166 [ _85 ])
        (mult:XF (reg:XF 164 [ _83 ])
            (reg:XF 165 [ _84 ]))) "calc.c":346:72 979 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 165 [ _84 ])
        (expr_list:REG_DEAD (reg:XF 164 [ _83 ])
            (nil))))
(insn 347 346 348 21 (set (reg:XF 349)
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC35") [flags 0x2]) [0  S16 A128])) "calc.c":346:86 134 {*movxf_internal}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+2 [0x0.c8p+7])
        (nil)))
(insn 348 347 349 21 (set (reg:XF 167 [ _86 ])
        (div:XF (reg:XF 166 [ _85 ])
            (reg:XF 349))) "calc.c":346:86 983 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 349)
        (expr_list:REG_DEAD (reg:XF 166 [ _85 ])
            (nil))))
(insn 349 348 350 21 (set (reg:DF 168 [ _87 ])
        (float_truncate:DF (reg:XF 167 [ _86 ]))) "calc.c":346:28 161 {truncxfdf2}
     (expr_list:REG_DEAD (reg:XF 167 [ _86 ])
        (nil)))
(insn 350 349 351 21 (set (reg:DF 20 xmm0)
        (reg:DF 168 [ _87 ])) "calc.c":346:28 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 168 [ _87 ])
        (nil)))
(call_insn 351 350 352 21 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("precision") [flags 0x3]  <function_decl 0x7f09f1657200 precision>) [0 precision S1 A8])
            (const_int 0 [0]))) "calc.c":346:28 824 {*call_value}
     (nil)
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 352 351 353 21 (set (reg:DF 258 [ _292 ])
        (reg:DF 20 xmm0)) "calc.c":346:28 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 353 352 354 21 (set (reg:XF 169 [ _88 ])
        (float_extend:XF (reg:DF 258 [ _292 ]))) "calc.c":346:28 158 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 258 [ _292 ])
        (nil)))
(insn 354 353 355 21 (set (reg:XF 351)
        (mem/c:XF (plus:DI (reg/f:DI 19 frame)
                (const_int -48 [0xffffffffffffffd0])) [14 sum_nal+0 S16 A128])) "calc.c":346:25 134 {*movxf_internal}
     (nil))
(insn 355 354 356 21 (set (reg:XF 350)
        (plus:XF (reg:XF 351)
            (reg:XF 169 [ _88 ]))) "calc.c":346:25 979 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 351)
        (expr_list:REG_DEAD (reg:XF 169 [ _88 ])
            (nil))))
(insn 356 355 357 21 (set (mem/c:XF (plus:DI (reg/f:DI 19 frame)
                (const_int -48 [0xffffffffffffffd0])) [14 sum_nal+0 S16 A128])
        (reg:XF 350)) "calc.c":346:25 134 {*movxf_internal}
     (expr_list:REG_DEAD (reg:XF 350)
        (nil)))
;;  succ:       22 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL)
;;  pred:       21 (FALLTHRU)
;;              20
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 259 352 353 354 355 356 357 358 359 360 361 362 363
(code_label 357 356 358 22 103 (nil) [1 uses])
(note 358 357 359 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 359 358 360 22 (set (reg:XF 170 [ _89 ])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                    (const_int -152 [0xffffffffffffff68])) [2 res+0 S8 A64]))) "calc.c":349:13 158 {*extenddfxf2_i387}
     (nil))
(insn 360 359 361 22 (set (reg:XF 352)
        (mem/c:XF (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [14 last_nal+0 S16 A128])) "calc.c":349:13 134 {*movxf_internal}
     (nil))
(insn 361 360 362 22 (set (reg:XF 171 [ _90 ])
        (minus:XF (reg:XF 170 [ _89 ])
            (reg:XF 352))) "calc.c":349:13 983 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 352)
        (expr_list:REG_DEAD (reg:XF 170 [ _89 ])
            (nil))))
(insn 362 361 363 22 (set (reg:SI 353)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -176 [0xffffffffffffff50])) [5 current_day+0 S4 A128])) "calc.c":349:13 75 {*movsi_internal}
     (nil))
(insn 363 362 364 22 (parallel [
            (set (reg:SI 172 [ _91 ])
                (minus:SI (reg:SI 353)
                    (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -172 [0xffffffffffffff54])) [5 last_day+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":349:13 282 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 353)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -176 [0xffffffffffffff50])) [5 current_day+0 S4 A128])
                    (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -172 [0xffffffffffffff54])) [5 last_day+0 S4 A32]))
                (nil)))))
(insn 364 363 365 22 (set (reg:DF 354)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -152 [0xffffffffffffff68])) [2 res+0 S8 A64])) "calc.c":349:13 135 {*movdf_internal}
     (nil))
(insn 365 364 366 22 (set (mem:XF (pre_dec:DI (reg/f:DI 7 sp)) [14  S16 A128])
        (reg:XF 171 [ _90 ])) "calc.c":349:13 129 {*pushxf}
     (expr_list:REG_DEAD (reg:XF 171 [ _90 ])
        (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
            (nil))))
(insn 366 365 367 22 (set (mem:XF (pre_dec:DI (reg/f:DI 7 sp)) [14  S16 A128])
        (mem/c:XF (plus:DI (reg/f:DI 19 frame)
                (const_int -48 [0xffffffffffffffd0])) [14 sum_nal+0 S16 A128])) "calc.c":349:13 129 {*pushxf}
     (expr_list:REG_ARGS_SIZE (const_int 32 [0x20])
        (nil)))
(insn 367 366 368 22 (set (mem:XF (pre_dec:DI (reg/f:DI 7 sp)) [14  S16 A128])
        (mem/c:XF (plus:DI (reg/f:DI 19 frame)
                (const_int -80 [0xffffffffffffffb0])) [14 sum+0 S16 A128])) "calc.c":349:13 129 {*pushxf}
     (expr_list:REG_ARGS_SIZE (const_int 48 [0x30])
        (nil)))
(insn 368 367 369 22 (set (reg:SI 4 si)
        (reg:SI 172 [ _91 ])) "calc.c":349:13 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 172 [ _91 ])
        (nil)))
(insn 369 368 370 22 (set (reg:DF 20 xmm0)
        (reg:DF 354)) "calc.c":349:13 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 354)
        (nil)))
(insn 370 369 371 22 (set (reg:DI 355)
        (symbol_ref/f:DI ("*.LC36") [flags 0x2]  <var_decl 0x7f09f171de10 *.LC36>)) "calc.c":349:13 74 {*movdi_internal}
     (nil))
(insn 371 370 372 22 (set (reg:DI 5 di)
        (reg:DI 355)) "calc.c":349:13 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 355)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC36") [flags 0x2]  <var_decl 0x7f09f171de10 *.LC36>)
            (nil))))
(insn 372 371 373 22 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) "calc.c":349:13 77 {*movqi_internal}
     (nil))
(call_insn 373 372 374 22 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f09f183f100 printf>) [0 __builtin_printf S1 A8])
            (const_int 48 [0x30]))) "calc.c":349:13 824 {*call_value}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:SI 4 si)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (nil)))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DF (use (reg:DF 20 xmm0))
                (expr_list:SI (use (reg:SI 4 si))
                    (nil))))))
(insn 374 373 375 22 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 48 [0x30])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":349:13 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (nil))))
(insn 375 374 376 22 (set (mem/c:XF (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [14 last_nal+0 S16 A128])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                    (const_int -152 [0xffffffffffffff68])) [2 res+0 S8 A64]))) "calc.c":350:22 158 {*extenddfxf2_i387}
     (nil))
(insn 376 375 377 22 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                        (const_int -160 [0xffffffffffffff60])) [5 cur_nal+0 S4 A128])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -160 [0xffffffffffffff60])) [5 cur_nal+0 S4 A128])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":352:20 209 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 377 376 378 22 (set (reg:SI 356)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -176 [0xffffffffffffff50])) [5 current_day+0 S4 A128])) "calc.c":353:49 75 {*movsi_internal}
     (nil))
(insn 378 377 379 22 (parallel [
            (set (reg:SI 173 [ _92 ])
                (minus:SI (reg:SI 356)
                    (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -172 [0xffffffffffffff54])) [5 last_day+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":353:49 282 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 356)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -176 [0xffffffffffffff50])) [5 current_day+0 S4 A128])
                    (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -172 [0xffffffffffffff54])) [5 last_day+0 S4 A32]))
                (nil)))))
(insn 379 378 380 22 (set (reg:XF 174 [ _93 ])
        (float:XF (reg:SI 173 [ _92 ]))) "calc.c":353:34 187 {floatsixf2}
     (expr_list:REG_DEAD (reg:SI 173 [ _92 ])
        (nil)))
(insn 380 379 381 22 (set (reg:XF 357)
        (mem/c:XF (plus:DI (reg/f:DI 19 frame)
                (const_int -80 [0xffffffffffffffb0])) [14 sum+0 S16 A128])) "calc.c":353:34 134 {*movxf_internal}
     (nil))
(insn 381 380 382 22 (set (reg:XF 175 [ _94 ])
        (mult:XF (reg:XF 174 [ _93 ])
            (reg:XF 357))) "calc.c":353:34 979 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 357)
        (expr_list:REG_DEAD (reg:XF 174 [ _93 ])
            (nil))))
(insn 382 381 383 22 (set (reg:XF 176 [ _95 ])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                    (const_int -120 [0xffffffffffffff88])) [2 percent+0 S8 A64]))) "calc.c":353:61 158 {*extenddfxf2_i387}
     (nil))
(insn 383 382 384 22 (set (reg:XF 177 [ _96 ])
        (mult:XF (reg:XF 175 [ _94 ])
            (reg:XF 176 [ _95 ]))) "calc.c":353:61 979 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 176 [ _95 ])
        (expr_list:REG_DEAD (reg:XF 175 [ _94 ])
            (nil))))
(insn 384 383 385 22 (set (reg:SI 358)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -156 [0xffffffffffffff64])) [5 cur_year+0 S4 A32])) "calc.c":353:81 75 {*movsi_internal}
     (nil))
(insn 385 384 386 22 (set (reg:DI 178 [ _97 ])
        (sign_extend:DI (reg:SI 358))) "calc.c":353:81 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 358)
        (nil)))
(insn 386 385 387 22 (parallel [
            (set (reg:DI 179 [ _98 ])
                (ashift:DI (reg:DI 178 [ _97 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":353:81 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 178 [ _97 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 387 386 388 22 (set (reg/f:DI 359)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -272 [0xfffffffffffffef0])) [15 new_year+0 S8 A64])) "calc.c":353:81 74 {*movdi_internal}
     (nil))
(insn 388 387 389 22 (parallel [
            (set (reg/f:DI 180 [ _99 ])
                (plus:DI (reg:DI 179 [ _98 ])
                    (reg/f:DI 359)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":353:81 210 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 359)
        (expr_list:REG_DEAD (reg:DI 179 [ _98 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -272 [0xfffffffffffffef0])) [15 new_year+0 S8 A64])
                        (reg:DI 179 [ _98 ]))
                    (nil))))))
(insn 389 388 390 22 (set (reg:SI 181 [ _100 ])
        (mem:SI (reg/f:DI 180 [ _99 ]) [5 *_99+0 S4 A32])) "calc.c":353:81 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 180 [ _99 ])
        (nil)))
(insn 390 389 391 22 (set (reg:XF 182 [ _101 ])
        (float:XF (reg:SI 181 [ _100 ]))) "calc.c":353:71 187 {floatsixf2}
     (expr_list:REG_DEAD (reg:SI 181 [ _100 ])
        (nil)))
(insn 391 390 392 22 (set (reg:XF 183 [ _102 ])
        (div:XF (reg:XF 177 [ _96 ])
            (reg:XF 182 [ _101 ]))) "calc.c":353:71 983 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 182 [ _101 ])
        (expr_list:REG_DEAD (reg:XF 177 [ _96 ])
            (nil))))
(insn 392 391 393 22 (set (reg:XF 360)
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC35") [flags 0x2]) [0  S16 A128])) "calc.c":353:92 134 {*movxf_internal}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+2 [0x0.c8p+7])
        (nil)))
(insn 393 392 394 22 (set (reg:XF 184 [ _103 ])
        (div:XF (reg:XF 183 [ _102 ])
            (reg:XF 360))) "calc.c":353:92 983 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 360)
        (expr_list:REG_DEAD (reg:XF 183 [ _102 ])
            (nil))))
(insn 394 393 395 22 (set (reg:DF 185 [ _104 ])
        (float_truncate:DF (reg:XF 184 [ _103 ]))) "calc.c":353:20 161 {truncxfdf2}
     (expr_list:REG_DEAD (reg:XF 184 [ _103 ])
        (nil)))
(insn 395 394 396 22 (set (reg:DF 20 xmm0)
        (reg:DF 185 [ _104 ])) "calc.c":353:20 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 185 [ _104 ])
        (nil)))
(call_insn 396 395 397 22 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("precision") [flags 0x3]  <function_decl 0x7f09f1657200 precision>) [0 precision S1 A8])
            (const_int 0 [0]))) "calc.c":353:20 824 {*call_value}
     (nil)
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 397 396 398 22 (set (reg:DF 259 [ _298 ])
        (reg:DF 20 xmm0)) "calc.c":353:20 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 398 397 399 22 (set (reg:DF 362)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -152 [0xffffffffffffff68])) [2 res+0 S8 A64])) "calc.c":353:17 135 {*movdf_internal}
     (nil))
(insn 399 398 400 22 (set (reg:DF 361)
        (plus:DF (reg:DF 362)
            (reg:DF 259 [ _298 ]))) "calc.c":353:17 981 {*fop_df_comm}
     (expr_list:REG_DEAD (reg:DF 362)
        (expr_list:REG_DEAD (reg:DF 259 [ _298 ])
            (nil))))
(insn 400 399 401 22 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -152 [0xffffffffffffff68])) [2 res+0 S8 A64])
        (reg:DF 361)) "calc.c":353:17 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 361)
        (nil)))
(insn 401 400 402 22 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                        (const_int -156 [0xffffffffffffff64])) [5 cur_year+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -156 [0xffffffffffffff64])) [5 cur_year+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":354:21 209 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 402 401 403 22 (set (reg:SI 363)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -176 [0xffffffffffffff50])) [5 current_day+0 S4 A128])) "calc.c":355:22 75 {*movsi_internal}
     (nil))
(insn 403 402 404 22 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -172 [0xffffffffffffff54])) [5 last_day+0 S4 A32])
        (reg:SI 363)) "calc.c":355:22 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 363)
        (nil)))
;;  succ:       23 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL)
;;  pred:       19
;;              22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 186 187 188 189 190 364 365
(code_label 404 403 405 23 102 (nil) [1 uses])
(note 405 404 406 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 406 405 407 23 (set (reg:DF 186 [ _105 ])
        (float:DF (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -176 [0xffffffffffffff50])) [5 current_day+0 S4 A128]))) "calc.c":357:25 191 {*floatsidf2}
     (nil))
(insn 407 406 408 23 (set (reg:SI 364)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -168 [0xffffffffffffff58])) [5 cur_change+0 S4 A64])) "calc.c":357:39 75 {*movsi_internal}
     (nil))
(insn 408 407 409 23 (set (reg:DI 187 [ _106 ])
        (sign_extend:DI (reg:SI 364))) "calc.c":357:39 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 364)
        (nil)))
(insn 409 408 410 23 (parallel [
            (set (reg:DI 188 [ _107 ])
                (ashift:DI (reg:DI 187 [ _106 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":357:39 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 187 [ _106 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 410 409 411 23 (set (reg/f:DI 365)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -104 [0xffffffffffffff98])) [10 sort_change+0 S8 A64])) "calc.c":357:39 74 {*movdi_internal}
     (nil))
(insn 411 410 412 23 (parallel [
            (set (reg/f:DI 189 [ _108 ])
                (plus:DI (reg:DI 188 [ _107 ])
                    (reg/f:DI 365)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":357:39 210 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 365)
        (expr_list:REG_DEAD (reg:DI 188 [ _107 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -104 [0xffffffffffffff98])) [10 sort_change+0 S8 A64])
                        (reg:DI 188 [ _107 ]))
                    (nil))))))
(insn 412 411 413 23 (set (reg:DF 190 [ _109 ])
        (mem:DF (reg/f:DI 189 [ _108 ]) [2 *_108+0 S8 A64])) "calc.c":357:39 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg/f:DI 189 [ _108 ])
        (nil)))
(insn 413 412 414 23 (set (reg:CCFP 17 flags)
        (unspec:CCFP [
                (compare:CCFP (reg:DF 186 [ _105 ])
                    (reg:DF 190 [ _109 ]))
            ] UNSPEC_NOTRAP)) "calc.c":357:12 47 {*cmpiudf}
     (nil))
(jump_insn 414 413 645 23 (set (pc)
        (if_then_else (unordered (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref 462)
            (pc))) "calc.c":357:12 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCFP 17 flags)
        (nil))
 -> 462)
;;  succ:       26
;;              24 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 186 190

;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 186 190
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 186 190
;; lr  def 	 17 [flags]
(note 645 414 415 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 415 645 416 24 (set (reg:CCFP 17 flags)
        (unspec:CCFP [
                (compare:CCFP (reg:DF 186 [ _105 ])
                    (reg:DF 190 [ _109 ]))
            ] UNSPEC_NOTRAP)) "calc.c":357:12 47 {*cmpiudf}
     (expr_list:REG_DEAD (reg:DF 190 [ _109 ])
        (expr_list:REG_DEAD (reg:DF 186 [ _105 ])
            (nil))))
(jump_insn 416 415 420 24 (set (pc)
        (if_then_else (ltgt (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 462)
            (pc))) "calc.c":357:12 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCFP 17 flags)
        (nil))
 -> 462)
;;  succ:       25 (FALLTHRU)
;;              26
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 260 366 367 368 369 370 371 372 373 374 375 376 377 378
(note 420 416 421 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 421 420 422 25 (set (reg:DI 366)
        (symbol_ref/f:DI ("*.LC37") [flags 0x2]  <var_decl 0x7f09f171dea0 *.LC37>)) "calc.c":359:13 74 {*movdi_internal}
     (nil))
(insn 422 421 423 25 (set (reg:DI 5 di)
        (reg:DI 366)) "calc.c":359:13 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 366)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC37") [flags 0x2]  <var_decl 0x7f09f171dea0 *.LC37>)
            (nil))))
(call_insn 423 422 424 25 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("puts") [flags 0x41]  <function_decl 0x7f09f183f800 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 0 [0]))) "calc.c":359:13 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 424 423 425 25 (set (reg:SI 367)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -176 [0xffffffffffffff50])) [5 current_day+0 S4 A128])) "calc.c":360:49 75 {*movsi_internal}
     (nil))
(insn 425 424 426 25 (parallel [
            (set (reg:SI 191 [ _110 ])
                (minus:SI (reg:SI 367)
                    (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -172 [0xffffffffffffff54])) [5 last_day+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":360:49 282 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 367)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -176 [0xffffffffffffff50])) [5 current_day+0 S4 A128])
                    (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -172 [0xffffffffffffff54])) [5 last_day+0 S4 A32]))
                (nil)))))
(insn 426 425 427 25 (set (reg:XF 192 [ _111 ])
        (float:XF (reg:SI 191 [ _110 ]))) "calc.c":360:34 187 {floatsixf2}
     (expr_list:REG_DEAD (reg:SI 191 [ _110 ])
        (nil)))
(insn 427 426 428 25 (set (reg:XF 368)
        (mem/c:XF (plus:DI (reg/f:DI 19 frame)
                (const_int -80 [0xffffffffffffffb0])) [14 sum+0 S16 A128])) "calc.c":360:34 134 {*movxf_internal}
     (nil))
(insn 428 427 429 25 (set (reg:XF 193 [ _112 ])
        (mult:XF (reg:XF 192 [ _111 ])
            (reg:XF 368))) "calc.c":360:34 979 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 368)
        (expr_list:REG_DEAD (reg:XF 192 [ _111 ])
            (nil))))
(insn 429 428 430 25 (set (reg:XF 194 [ _113 ])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                    (const_int -120 [0xffffffffffffff88])) [2 percent+0 S8 A64]))) "calc.c":360:61 158 {*extenddfxf2_i387}
     (nil))
(insn 430 429 431 25 (set (reg:XF 195 [ _114 ])
        (mult:XF (reg:XF 193 [ _112 ])
            (reg:XF 194 [ _113 ]))) "calc.c":360:61 979 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 194 [ _113 ])
        (expr_list:REG_DEAD (reg:XF 193 [ _112 ])
            (nil))))
(insn 431 430 432 25 (set (reg:SI 369)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -156 [0xffffffffffffff64])) [5 cur_year+0 S4 A32])) "calc.c":360:81 75 {*movsi_internal}
     (nil))
(insn 432 431 433 25 (set (reg:DI 196 [ _115 ])
        (sign_extend:DI (reg:SI 369))) "calc.c":360:81 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 369)
        (nil)))
(insn 433 432 434 25 (parallel [
            (set (reg:DI 197 [ _116 ])
                (ashift:DI (reg:DI 196 [ _115 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":360:81 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 196 [ _115 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 434 433 435 25 (set (reg/f:DI 370)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -272 [0xfffffffffffffef0])) [15 new_year+0 S8 A64])) "calc.c":360:81 74 {*movdi_internal}
     (nil))
(insn 435 434 436 25 (parallel [
            (set (reg/f:DI 198 [ _117 ])
                (plus:DI (reg:DI 197 [ _116 ])
                    (reg/f:DI 370)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":360:81 210 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 370)
        (expr_list:REG_DEAD (reg:DI 197 [ _116 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -272 [0xfffffffffffffef0])) [15 new_year+0 S8 A64])
                        (reg:DI 197 [ _116 ]))
                    (nil))))))
(insn 436 435 437 25 (set (reg:SI 199 [ _118 ])
        (mem:SI (reg/f:DI 198 [ _117 ]) [5 *_117+0 S4 A32])) "calc.c":360:81 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 198 [ _117 ])
        (nil)))
(insn 437 436 438 25 (set (reg:XF 200 [ _119 ])
        (float:XF (reg:SI 199 [ _118 ]))) "calc.c":360:71 187 {floatsixf2}
     (expr_list:REG_DEAD (reg:SI 199 [ _118 ])
        (nil)))
(insn 438 437 439 25 (set (reg:XF 201 [ _120 ])
        (div:XF (reg:XF 195 [ _114 ])
            (reg:XF 200 [ _119 ]))) "calc.c":360:71 983 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 200 [ _119 ])
        (expr_list:REG_DEAD (reg:XF 195 [ _114 ])
            (nil))))
(insn 439 438 440 25 (set (reg:XF 371)
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC35") [flags 0x2]) [0  S16 A128])) "calc.c":360:92 134 {*movxf_internal}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+2 [0x0.c8p+7])
        (nil)))
(insn 440 439 441 25 (set (reg:XF 202 [ _121 ])
        (div:XF (reg:XF 201 [ _120 ])
            (reg:XF 371))) "calc.c":360:92 983 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 371)
        (expr_list:REG_DEAD (reg:XF 201 [ _120 ])
            (nil))))
(insn 441 440 442 25 (set (reg:DF 203 [ _122 ])
        (float_truncate:DF (reg:XF 202 [ _121 ]))) "calc.c":360:20 161 {truncxfdf2}
     (expr_list:REG_DEAD (reg:XF 202 [ _121 ])
        (nil)))
(insn 442 441 443 25 (set (reg:DF 20 xmm0)
        (reg:DF 203 [ _122 ])) "calc.c":360:20 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 203 [ _122 ])
        (nil)))
(call_insn 443 442 444 25 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("precision") [flags 0x3]  <function_decl 0x7f09f1657200 precision>) [0 precision S1 A8])
            (const_int 0 [0]))) "calc.c":360:20 824 {*call_value}
     (nil)
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 444 443 445 25 (set (reg:DF 260 [ _304 ])
        (reg:DF 20 xmm0)) "calc.c":360:20 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 445 444 446 25 (set (reg:DF 373)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -152 [0xffffffffffffff68])) [2 res+0 S8 A64])) "calc.c":360:17 135 {*movdf_internal}
     (nil))
(insn 446 445 447 25 (set (reg:DF 372)
        (plus:DF (reg:DF 373)
            (reg:DF 260 [ _304 ]))) "calc.c":360:17 981 {*fop_df_comm}
     (expr_list:REG_DEAD (reg:DF 373)
        (expr_list:REG_DEAD (reg:DF 260 [ _304 ])
            (nil))))
(insn 447 446 448 25 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -152 [0xffffffffffffff68])) [2 res+0 S8 A64])
        (reg:DF 372)) "calc.c":360:17 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 372)
        (nil)))
(insn 448 447 449 25 (set (reg:SI 374)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -176 [0xffffffffffffff50])) [5 current_day+0 S4 A128])) "calc.c":361:22 75 {*movsi_internal}
     (nil))
(insn 449 448 450 25 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -172 [0xffffffffffffff54])) [5 last_day+0 S4 A32])
        (reg:SI 374)) "calc.c":361:22 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 374)
        (nil)))
(insn 450 449 451 25 (set (reg:SI 375)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -168 [0xffffffffffffff58])) [5 cur_change+0 S4 A64])) "calc.c":362:31 75 {*movsi_internal}
     (nil))
(insn 451 450 452 25 (set (reg:DI 204 [ _123 ])
        (sign_extend:DI (reg:SI 375))) "calc.c":362:31 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 375)
        (nil)))
(insn 452 451 453 25 (parallel [
            (set (reg:DI 205 [ _124 ])
                (plus:DI (reg:DI 204 [ _123 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":362:31 210 {*adddi_1}
     (expr_list:REG_DEAD (reg:DI 204 [ _123 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 453 452 454 25 (parallel [
            (set (reg:DI 206 [ _125 ])
                (ashift:DI (reg:DI 205 [ _124 ])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":362:31 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 205 [ _124 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 454 453 455 25 (set (reg/f:DI 376)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -104 [0xffffffffffffff98])) [10 sort_change+0 S8 A64])) "calc.c":362:31 74 {*movdi_internal}
     (nil))
(insn 455 454 456 25 (parallel [
            (set (reg/f:DI 207 [ _126 ])
                (plus:DI (reg:DI 206 [ _125 ])
                    (reg/f:DI 376)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":362:31 210 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 376)
        (expr_list:REG_DEAD (reg:DI 206 [ _125 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -104 [0xffffffffffffff98])) [10 sort_change+0 S8 A64])
                        (reg:DI 206 [ _125 ]))
                    (nil))))))
(insn 456 455 457 25 (set (reg:DF 208 [ _127 ])
        (mem:DF (reg/f:DI 207 [ _126 ]) [2 *_126+0 S8 A64])) "calc.c":362:31 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg/f:DI 207 [ _126 ])
        (nil)))
(insn 457 456 458 25 (set (reg:XF 209 [ _128 ])
        (float_extend:XF (reg:DF 208 [ _127 ]))) "calc.c":362:31 158 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 208 [ _127 ])
        (nil)))
(insn 458 457 459 25 (set (reg:XF 378)
        (mem/c:XF (plus:DI (reg/f:DI 19 frame)
                (const_int -80 [0xffffffffffffffb0])) [14 sum+0 S16 A128])) "calc.c":362:17 134 {*movxf_internal}
     (nil))
(insn 459 458 460 25 (set (reg:XF 377)
        (plus:XF (reg:XF 378)
            (reg:XF 209 [ _128 ]))) "calc.c":362:17 979 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 378)
        (expr_list:REG_DEAD (reg:XF 209 [ _128 ])
            (nil))))
(insn 460 459 461 25 (set (mem/c:XF (plus:DI (reg/f:DI 19 frame)
                (const_int -80 [0xffffffffffffffb0])) [14 sum+0 S16 A128])
        (reg:XF 377)) "calc.c":362:17 134 {*movxf_internal}
     (expr_list:REG_DEAD (reg:XF 377)
        (nil)))
(insn 461 460 462 25 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                        (const_int -168 [0xffffffffffffff58])) [5 cur_change+0 S4 A64])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -168 [0xffffffffffffff58])) [5 cur_change+0 S4 A64])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":363:24 209 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       26 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL)
;;  pred:       25 (FALLTHRU)
;;              23
;;              24
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 210 211 212 213 379 380
(code_label 462 461 463 26 105 (nil) [2 uses])
(note 463 462 464 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 464 463 465 26 (set (reg:SI 379)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -164 [0xffffffffffffff5c])) [5 cur_capit+0 S4 A32])) "calc.c":365:35 75 {*movsi_internal}
     (nil))
(insn 465 464 466 26 (set (reg:DI 210 [ _129 ])
        (sign_extend:DI (reg:SI 379))) "calc.c":365:35 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 379)
        (nil)))
(insn 466 465 467 26 (parallel [
            (set (reg:DI 211 [ _130 ])
                (ashift:DI (reg:DI 210 [ _129 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":365:35 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 210 [ _129 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 467 466 468 26 (set (reg/f:DI 380)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -248 [0xffffffffffffff08])) [15 capital+0 S8 A64])) "calc.c":365:35 74 {*movdi_internal}
     (nil))
(insn 468 467 469 26 (parallel [
            (set (reg/f:DI 212 [ _131 ])
                (plus:DI (reg:DI 211 [ _130 ])
                    (reg/f:DI 380)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":365:35 210 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 380)
        (expr_list:REG_DEAD (reg:DI 211 [ _130 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -248 [0xffffffffffffff08])) [15 capital+0 S8 A64])
                        (reg:DI 211 [ _130 ]))
                    (nil))))))
(insn 469 468 470 26 (set (reg:SI 213 [ _132 ])
        (mem:SI (reg/f:DI 212 [ _131 ]) [5 *_131+0 S4 A32])) "calc.c":365:35 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 212 [ _131 ])
        (nil)))
(insn 470 469 471 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -176 [0xffffffffffffff50])) [5 current_day+0 S4 A128])
            (reg:SI 213 [ _132 ]))) "calc.c":365:12 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 213 [ _132 ])
        (nil)))
(jump_insn 471 470 472 26 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 529)
            (pc))) "calc.c":365:12 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 529)
;;  succ:       27 (FALLTHRU)
;;              30
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 27, loop depth 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 261 381 382 383 384 385 386 387 388 389 390 391 392 393
(note 472 471 473 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 473 472 474 27 (set (reg:SI 381)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -176 [0xffffffffffffff50])) [5 current_day+0 S4 A128])) "calc.c":367:49 75 {*movsi_internal}
     (nil))
(insn 474 473 475 27 (parallel [
            (set (reg:SI 214 [ _133 ])
                (minus:SI (reg:SI 381)
                    (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -172 [0xffffffffffffff54])) [5 last_day+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":367:49 282 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 381)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -176 [0xffffffffffffff50])) [5 current_day+0 S4 A128])
                    (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -172 [0xffffffffffffff54])) [5 last_day+0 S4 A32]))
                (nil)))))
(insn 475 474 476 27 (set (reg:XF 215 [ _134 ])
        (float:XF (reg:SI 214 [ _133 ]))) "calc.c":367:34 187 {floatsixf2}
     (expr_list:REG_DEAD (reg:SI 214 [ _133 ])
        (nil)))
(insn 476 475 477 27 (set (reg:XF 382)
        (mem/c:XF (plus:DI (reg/f:DI 19 frame)
                (const_int -80 [0xffffffffffffffb0])) [14 sum+0 S16 A128])) "calc.c":367:34 134 {*movxf_internal}
     (nil))
(insn 477 476 478 27 (set (reg:XF 216 [ _135 ])
        (mult:XF (reg:XF 215 [ _134 ])
            (reg:XF 382))) "calc.c":367:34 979 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 382)
        (expr_list:REG_DEAD (reg:XF 215 [ _134 ])
            (nil))))
(insn 478 477 479 27 (set (reg:XF 217 [ _136 ])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                    (const_int -120 [0xffffffffffffff88])) [2 percent+0 S8 A64]))) "calc.c":367:61 158 {*extenddfxf2_i387}
     (nil))
(insn 479 478 480 27 (set (reg:XF 218 [ _137 ])
        (mult:XF (reg:XF 216 [ _135 ])
            (reg:XF 217 [ _136 ]))) "calc.c":367:61 979 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 217 [ _136 ])
        (expr_list:REG_DEAD (reg:XF 216 [ _135 ])
            (nil))))
(insn 480 479 481 27 (set (reg:SI 383)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -156 [0xffffffffffffff64])) [5 cur_year+0 S4 A32])) "calc.c":367:81 75 {*movsi_internal}
     (nil))
(insn 481 480 482 27 (set (reg:DI 219 [ _138 ])
        (sign_extend:DI (reg:SI 383))) "calc.c":367:81 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 383)
        (nil)))
(insn 482 481 483 27 (parallel [
            (set (reg:DI 220 [ _139 ])
                (ashift:DI (reg:DI 219 [ _138 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":367:81 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 219 [ _138 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 483 482 484 27 (set (reg/f:DI 384)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -272 [0xfffffffffffffef0])) [15 new_year+0 S8 A64])) "calc.c":367:81 74 {*movdi_internal}
     (nil))
(insn 484 483 485 27 (parallel [
            (set (reg/f:DI 221 [ _140 ])
                (plus:DI (reg:DI 220 [ _139 ])
                    (reg/f:DI 384)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":367:81 210 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 384)
        (expr_list:REG_DEAD (reg:DI 220 [ _139 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -272 [0xfffffffffffffef0])) [15 new_year+0 S8 A64])
                        (reg:DI 220 [ _139 ]))
                    (nil))))))
(insn 485 484 486 27 (set (reg:SI 222 [ _141 ])
        (mem:SI (reg/f:DI 221 [ _140 ]) [5 *_140+0 S4 A32])) "calc.c":367:81 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 221 [ _140 ])
        (nil)))
(insn 486 485 487 27 (set (reg:XF 223 [ _142 ])
        (float:XF (reg:SI 222 [ _141 ]))) "calc.c":367:71 187 {floatsixf2}
     (expr_list:REG_DEAD (reg:SI 222 [ _141 ])
        (nil)))
(insn 487 486 488 27 (set (reg:XF 224 [ _143 ])
        (div:XF (reg:XF 218 [ _137 ])
            (reg:XF 223 [ _142 ]))) "calc.c":367:71 983 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 223 [ _142 ])
        (expr_list:REG_DEAD (reg:XF 218 [ _137 ])
            (nil))))
(insn 488 487 489 27 (set (reg:XF 385)
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC35") [flags 0x2]) [0  S16 A128])) "calc.c":367:92 134 {*movxf_internal}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+2 [0x0.c8p+7])
        (nil)))
(insn 489 488 490 27 (set (reg:XF 225 [ _144 ])
        (div:XF (reg:XF 224 [ _143 ])
            (reg:XF 385))) "calc.c":367:92 983 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 385)
        (expr_list:REG_DEAD (reg:XF 224 [ _143 ])
            (nil))))
(insn 490 489 491 27 (set (reg:DF 226 [ _145 ])
        (float_truncate:DF (reg:XF 225 [ _144 ]))) "calc.c":367:20 161 {truncxfdf2}
     (expr_list:REG_DEAD (reg:XF 225 [ _144 ])
        (nil)))
(insn 491 490 492 27 (set (reg:DF 20 xmm0)
        (reg:DF 226 [ _145 ])) "calc.c":367:20 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 226 [ _145 ])
        (nil)))
(call_insn 492 491 493 27 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("precision") [flags 0x3]  <function_decl 0x7f09f1657200 precision>) [0 precision S1 A8])
            (const_int 0 [0]))) "calc.c":367:20 824 {*call_value}
     (nil)
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 493 492 494 27 (set (reg:DF 261 [ _311 ])
        (reg:DF 20 xmm0)) "calc.c":367:20 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 494 493 495 27 (set (reg:DF 387)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -152 [0xffffffffffffff68])) [2 res+0 S8 A64])) "calc.c":367:17 135 {*movdf_internal}
     (nil))
(insn 495 494 496 27 (set (reg:DF 386)
        (plus:DF (reg:DF 387)
            (reg:DF 261 [ _311 ]))) "calc.c":367:17 981 {*fop_df_comm}
     (expr_list:REG_DEAD (reg:DF 387)
        (expr_list:REG_DEAD (reg:DF 261 [ _311 ])
            (nil))))
(insn 496 495 497 27 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -152 [0xffffffffffffff68])) [2 res+0 S8 A64])
        (reg:DF 386)) "calc.c":367:17 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 386)
        (nil)))
(insn 497 496 498 27 (set (reg:XF 227 [ _146 ])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                    (const_int -152 [0xffffffffffffff68])) [2 res+0 S8 A64]))) "calc.c":368:13 158 {*extenddfxf2_i387}
     (nil))
(insn 498 497 499 27 (set (reg:XF 388)
        (mem/c:XF (plus:DI (reg/f:DI 19 frame)
                (const_int -64 [0xffffffffffffffc0])) [14 res_capit+0 S16 A128])) "calc.c":368:13 134 {*movxf_internal}
     (nil))
(insn 499 498 500 27 (set (reg:XF 228 [ _147 ])
        (minus:XF (reg:XF 227 [ _146 ])
            (reg:XF 388))) "calc.c":368:13 983 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 388)
        (expr_list:REG_DEAD (reg:XF 227 [ _146 ])
            (nil))))
(insn 500 499 501 27 (set (reg:SI 389)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -176 [0xffffffffffffff50])) [5 current_day+0 S4 A128])) "calc.c":368:13 75 {*movsi_internal}
     (nil))
(insn 501 500 502 27 (parallel [
            (set (reg:SI 229 [ _148 ])
                (minus:SI (reg:SI 389)
                    (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -172 [0xffffffffffffff54])) [5 last_day+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":368:13 282 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 389)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -176 [0xffffffffffffff50])) [5 current_day+0 S4 A128])
                    (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -172 [0xffffffffffffff54])) [5 last_day+0 S4 A32]))
                (nil)))))
(insn 502 501 503 27 (set (reg:SI 390)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -164 [0xffffffffffffff5c])) [5 cur_capit+0 S4 A32])) "calc.c":368:13 75 {*movsi_internal}
     (nil))
(insn 503 502 504 27 (set (reg:DF 391)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -152 [0xffffffffffffff68])) [2 res+0 S8 A64])) "calc.c":368:13 135 {*movdf_internal}
     (nil))
(insn 504 503 505 27 (set (mem:XF (pre_dec:DI (reg/f:DI 7 sp)) [14  S16 A128])
        (reg:XF 228 [ _147 ])) "calc.c":368:13 129 {*pushxf}
     (expr_list:REG_DEAD (reg:XF 228 [ _147 ])
        (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
            (nil))))
(insn 505 504 506 27 (set (mem:XF (pre_dec:DI (reg/f:DI 7 sp)) [14  S16 A128])
        (mem/c:XF (plus:DI (reg/f:DI 19 frame)
                (const_int -80 [0xffffffffffffffb0])) [14 sum+0 S16 A128])) "calc.c":368:13 129 {*pushxf}
     (expr_list:REG_ARGS_SIZE (const_int 32 [0x20])
        (nil)))
(insn 506 505 507 27 (set (reg:SI 1 dx)
        (reg:SI 390)) "calc.c":368:13 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 390)
        (nil)))
(insn 507 506 508 27 (set (reg:SI 4 si)
        (reg:SI 229 [ _148 ])) "calc.c":368:13 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 229 [ _148 ])
        (nil)))
(insn 508 507 509 27 (set (reg:DF 20 xmm0)
        (reg:DF 391)) "calc.c":368:13 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 391)
        (nil)))
(insn 509 508 510 27 (set (reg:DI 392)
        (symbol_ref/f:DI ("*.LC38") [flags 0x2]  <var_decl 0x7f09f171df30 *.LC38>)) "calc.c":368:13 74 {*movdi_internal}
     (nil))
(insn 510 509 511 27 (set (reg:DI 5 di)
        (reg:DI 392)) "calc.c":368:13 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 392)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC38") [flags 0x2]  <var_decl 0x7f09f171df30 *.LC38>)
            (nil))))
(insn 511 510 512 27 (set (reg:QI 0 ax)
        (const_int 1 [0x1])) "calc.c":368:13 77 {*movqi_internal}
     (nil))
(call_insn 512 511 513 27 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f09f183f100 printf>) [0 __builtin_printf S1 A8])
            (const_int 32 [0x20]))) "calc.c":368:13 824 {*call_value}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:SI 4 si)
                (expr_list:REG_DEAD (reg:SI 1 dx)
                    (expr_list:REG_UNUSED (reg:SI 0 ax)
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DF (use (reg:DF 20 xmm0))
                (expr_list:SI (use (reg:SI 4 si))
                    (expr_list:SI (use (reg:SI 1 dx))
                        (nil)))))))
(insn 513 512 514 27 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":368:13 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (nil))))
(insn 514 513 515 27 (set (reg:SI 393)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -176 [0xffffffffffffff50])) [5 current_day+0 S4 A128])) "calc.c":369:22 75 {*movsi_internal}
     (nil))
(insn 515 514 516 27 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -172 [0xffffffffffffff54])) [5 last_day+0 S4 A32])
        (reg:SI 393)) "calc.c":369:22 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 393)
        (nil)))
(insn 516 515 517 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 16 argp)
                    (const_int 32 [0x20])) [5 flag_capital+0 S4 A64])
            (const_int 1 [0x1]))) "calc.c":370:16 11 {*cmpsi_1}
     (nil))
(jump_insn 517 516 518 27 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 525)
            (pc))) "calc.c":370:16 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 525)
;;  succ:       28 (FALLTHRU)
;;              29
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 28, loop depth 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 230 231 394 395 396
(note 518 517 519 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 519 518 520 28 (set (reg:XF 230 [ _149 ])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                    (const_int -152 [0xffffffffffffff68])) [2 res+0 S8 A64]))) "calc.c":371:28 158 {*extenddfxf2_i387}
     (nil))
(insn 520 519 521 28 (set (reg:XF 394)
        (mem/c:XF (plus:DI (reg/f:DI 19 frame)
                (const_int -64 [0xffffffffffffffc0])) [14 res_capit+0 S16 A128])) "calc.c":371:28 134 {*movxf_internal}
     (nil))
(insn 521 520 522 28 (set (reg:XF 231 [ _150 ])
        (minus:XF (reg:XF 230 [ _149 ])
            (reg:XF 394))) "calc.c":371:28 983 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 394)
        (expr_list:REG_DEAD (reg:XF 230 [ _149 ])
            (nil))))
(insn 522 521 523 28 (set (reg:XF 396)
        (mem/c:XF (plus:DI (reg/f:DI 19 frame)
                (const_int -80 [0xffffffffffffffb0])) [14 sum+0 S16 A128])) "calc.c":371:21 134 {*movxf_internal}
     (nil))
(insn 523 522 524 28 (set (reg:XF 395)
        (plus:XF (reg:XF 396)
            (reg:XF 231 [ _150 ]))) "calc.c":371:21 979 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 396)
        (expr_list:REG_DEAD (reg:XF 231 [ _150 ])
            (nil))))
(insn 524 523 525 28 (set (mem/c:XF (plus:DI (reg/f:DI 19 frame)
                (const_int -80 [0xffffffffffffffb0])) [14 sum+0 S16 A128])
        (reg:XF 395)) "calc.c":371:21 134 {*movxf_internal}
     (expr_list:REG_DEAD (reg:XF 395)
        (nil)))
;;  succ:       29 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 29, loop depth 0, maybe hot
;;  prev block 28, next block 30, flags: (RTL)
;;  pred:       27
;;              28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 525 524 526 29 108 (nil) [1 uses])
(note 526 525 527 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 527 526 528 29 (set (mem/c:XF (plus:DI (reg/f:DI 19 frame)
                (const_int -64 [0xffffffffffffffc0])) [14 res_capit+0 S16 A128])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                    (const_int -152 [0xffffffffffffff68])) [2 res+0 S8 A64]))) "calc.c":372:23 158 {*extenddfxf2_i387}
     (nil))
(insn 528 527 529 29 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                        (const_int -164 [0xffffffffffffff5c])) [5 cur_capit+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -164 [0xffffffffffffff5c])) [5 cur_capit+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":373:22 209 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       30 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 30, loop depth 0, maybe hot
;;  prev block 29, next block 31, flags: (RTL)
;;  pred:       26
;;              29 (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 529 528 530 30 107 (nil) [1 uses])
(note 530 529 531 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 531 530 532 30 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                        (const_int -176 [0xffffffffffffff50])) [5 current_day+0 S4 A128])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -176 [0xffffffffffffff50])) [5 current_day+0 S4 A128])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":336:44 209 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
;;  succ:       31 (FALLTHRU,DFS_BACK)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 31, loop depth 0, maybe hot
;;  prev block 30, next block 32, flags: (RTL)
;;  pred:       30 (FALLTHRU,DFS_BACK)
;;              18 [always] 
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 397
(code_label 532 531 533 31 101 (nil) [1 uses])
(note 533 532 535 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 535 533 536 31 (set (reg:SI 397)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -176 [0xffffffffffffff50])) [5 current_day+0 S4 A128])) "calc.c":336:24 75 {*movsi_internal}
     (nil))
(insn 536 535 537 31 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 397)
            (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -220 [0xffffffffffffff24])) [5 days+0 S4 A32]))) "calc.c":336:24 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 397)
        (nil)))
(jump_insn 537 536 538 31 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 534)
            (pc))) "calc.c":336:24 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 534)
;;  succ:       19
;;              32 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 32, loop depth 0, maybe hot
;;  prev block 31, next block 33, flags: (RTL)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 255 398 399 400 401 402 403 404 405 406
(note 538 537 539 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 539 538 540 32 (set (reg:SI 398)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -220 [0xffffffffffffff24])) [5 days+0 S4 A32])) "calc.c":376:34 75 {*movsi_internal}
     (nil))
(insn 540 539 541 32 (parallel [
            (set (reg:SI 232 [ _151 ])
                (minus:SI (reg:SI 398)
                    (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -172 [0xffffffffffffff54])) [5 last_day+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":376:34 282 {*subsi_1}
     (expr_list:REG_DEAD (reg:SI 398)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (expr_list:REG_EQUAL (minus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -220 [0xffffffffffffff24])) [5 days+0 S4 A32])
                    (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -172 [0xffffffffffffff54])) [5 last_day+0 S4 A32]))
                (nil)))))
(insn 541 540 542 32 (set (reg:XF 233 [ _152 ])
        (float:XF (reg:SI 232 [ _151 ]))) "calc.c":376:26 187 {floatsixf2}
     (expr_list:REG_DEAD (reg:SI 232 [ _151 ])
        (nil)))
(insn 542 541 543 32 (set (reg:XF 399)
        (mem/c:XF (plus:DI (reg/f:DI 19 frame)
                (const_int -80 [0xffffffffffffffb0])) [14 sum+0 S16 A128])) "calc.c":376:26 134 {*movxf_internal}
     (nil))
(insn 543 542 544 32 (set (reg:XF 234 [ _153 ])
        (mult:XF (reg:XF 233 [ _152 ])
            (reg:XF 399))) "calc.c":376:26 979 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 399)
        (expr_list:REG_DEAD (reg:XF 233 [ _152 ])
            (nil))))
(insn 544 543 545 32 (set (reg:XF 235 [ _154 ])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                    (const_int -120 [0xffffffffffffff88])) [2 percent+0 S8 A64]))) "calc.c":376:46 158 {*extenddfxf2_i387}
     (nil))
(insn 545 544 546 32 (set (reg:XF 236 [ _155 ])
        (mult:XF (reg:XF 234 [ _153 ])
            (reg:XF 235 [ _154 ]))) "calc.c":376:46 979 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 235 [ _154 ])
        (expr_list:REG_DEAD (reg:XF 234 [ _153 ])
            (nil))))
(insn 546 545 547 32 (set (reg:SI 400)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -156 [0xffffffffffffff64])) [5 cur_year+0 S4 A32])) "calc.c":376:66 75 {*movsi_internal}
     (nil))
(insn 547 546 548 32 (set (reg:DI 237 [ _156 ])
        (sign_extend:DI (reg:SI 400))) "calc.c":376:66 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 400)
        (nil)))
(insn 548 547 549 32 (parallel [
            (set (reg:DI 238 [ _157 ])
                (ashift:DI (reg:DI 237 [ _156 ])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":376:66 656 {*ashldi3_1}
     (expr_list:REG_DEAD (reg:DI 237 [ _156 ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 549 548 550 32 (set (reg/f:DI 401)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -272 [0xfffffffffffffef0])) [15 new_year+0 S8 A64])) "calc.c":376:66 74 {*movdi_internal}
     (nil))
(insn 550 549 551 32 (parallel [
            (set (reg/f:DI 239 [ _158 ])
                (plus:DI (reg:DI 238 [ _157 ])
                    (reg/f:DI 401)))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":376:66 210 {*adddi_1}
     (expr_list:REG_DEAD (reg/f:DI 401)
        (expr_list:REG_DEAD (reg:DI 238 [ _157 ])
            (expr_list:REG_UNUSED (reg:CC 17 flags)
                (expr_list:REG_EQUAL (plus:DI (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -272 [0xfffffffffffffef0])) [15 new_year+0 S8 A64])
                        (reg:DI 238 [ _157 ]))
                    (nil))))))
(insn 551 550 552 32 (set (reg:SI 240 [ _159 ])
        (mem:SI (reg/f:DI 239 [ _158 ]) [5 *_158+0 S4 A32])) "calc.c":376:66 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/f:DI 239 [ _158 ])
        (nil)))
(insn 552 551 553 32 (set (reg:XF 241 [ _160 ])
        (float:XF (reg:SI 240 [ _159 ]))) "calc.c":376:56 187 {floatsixf2}
     (expr_list:REG_DEAD (reg:SI 240 [ _159 ])
        (nil)))
(insn 553 552 554 32 (set (reg:XF 242 [ _161 ])
        (div:XF (reg:XF 236 [ _155 ])
            (reg:XF 241 [ _160 ]))) "calc.c":376:56 983 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 241 [ _160 ])
        (expr_list:REG_DEAD (reg:XF 236 [ _155 ])
            (nil))))
(insn 554 553 555 32 (set (reg:XF 402)
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC35") [flags 0x2]) [0  S16 A128])) "calc.c":376:77 134 {*movxf_internal}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+2 [0x0.c8p+7])
        (nil)))
(insn 555 554 556 32 (set (reg:XF 243 [ _162 ])
        (div:XF (reg:XF 242 [ _161 ])
            (reg:XF 402))) "calc.c":376:77 983 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 402)
        (expr_list:REG_DEAD (reg:XF 242 [ _161 ])
            (nil))))
(insn 556 555 557 32 (set (reg:DF 244 [ _163 ])
        (float_truncate:DF (reg:XF 243 [ _162 ]))) "calc.c":376:12 161 {truncxfdf2}
     (expr_list:REG_DEAD (reg:XF 243 [ _162 ])
        (nil)))
(insn 557 556 558 32 (set (reg:DF 20 xmm0)
        (reg:DF 244 [ _163 ])) "calc.c":376:12 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 244 [ _163 ])
        (nil)))
(call_insn 558 557 559 32 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("precision") [flags 0x3]  <function_decl 0x7f09f1657200 precision>) [0 precision S1 A8])
            (const_int 0 [0]))) "calc.c":376:12 824 {*call_value}
     (nil)
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 559 558 560 32 (set (reg:DF 255 [ _274 ])
        (reg:DF 20 xmm0)) "calc.c":376:12 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 560 559 561 32 (set (reg:DF 404)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -152 [0xffffffffffffff68])) [2 res+0 S8 A64])) "calc.c":376:9 135 {*movdf_internal}
     (nil))
(insn 561 560 562 32 (set (reg:DF 403)
        (plus:DF (reg:DF 404)
            (reg:DF 255 [ _274 ]))) "calc.c":376:9 981 {*fop_df_comm}
     (expr_list:REG_DEAD (reg:DF 404)
        (expr_list:REG_DEAD (reg:DF 255 [ _274 ])
            (nil))))
(insn 562 561 563 32 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -152 [0xffffffffffffff68])) [2 res+0 S8 A64])
        (reg:DF 403)) "calc.c":376:9 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 403)
        (nil)))
(insn 563 562 564 32 (set (reg:XF 245 [ _164 ])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                    (const_int -152 [0xffffffffffffff68])) [2 res+0 S8 A64]))) "calc.c":377:13 158 {*extenddfxf2_i387}
     (nil))
(insn 564 563 565 32 (set (reg:XF 405)
        (mem/c:XF (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [14 last_nal+0 S16 A128])) "calc.c":377:13 134 {*movxf_internal}
     (nil))
(insn 565 564 566 32 (set (reg:XF 246 [ _165 ])
        (minus:XF (reg:XF 245 [ _164 ])
            (reg:XF 405))) "calc.c":377:13 983 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 405)
        (expr_list:REG_DEAD (reg:XF 245 [ _164 ])
            (nil))))
(insn 566 565 567 32 (set (reg:XF 406)
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC34") [flags 0x2]) [0  S16 A128])) "calc.c":377:8 134 {*movxf_internal}
     (expr_list:REG_EQUAL (const_double:XF 1.2e+5 [0x0.ea6p+17])
        (nil)))
(insn 567 566 568 32 (set (reg:CCFP 17 flags)
        (compare:CCFP (reg:XF 246 [ _165 ])
            (reg:XF 406))) "calc.c":377:8 42 {*cmpixf_i387}
     (expr_list:REG_DEAD (reg:XF 406)
        (expr_list:REG_DEAD (reg:XF 246 [ _165 ])
            (nil))))
(jump_insn 568 567 572 32 (set (pc)
        (if_then_else (unle (reg:CCFP 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 590)
            (pc))) "calc.c":377:8 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCFP 17 flags)
        (nil))
 -> 590)
;;  succ:       33 (FALLTHRU)
;;              34
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 33, loop depth 0, maybe hot
;;  prev block 32, next block 34, flags: (RTL)
;;  pred:       32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 247 248 249 250 251 252 253 254 256 407 408 409 410 411
(note 572 568 573 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 573 572 574 33 (set (reg:XF 247 [ _166 ])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                    (const_int -152 [0xffffffffffffff68])) [2 res+0 S8 A64]))) "calc.c":378:35 158 {*extenddfxf2_i387}
     (nil))
(insn 574 573 575 33 (set (reg:XF 407)
        (mem/c:XF (plus:DI (reg/f:DI 19 frame)
                (const_int -32 [0xffffffffffffffe0])) [14 last_nal+0 S16 A128])) "calc.c":378:35 134 {*movxf_internal}
     (nil))
(insn 575 574 576 33 (set (reg:XF 248 [ _167 ])
        (minus:XF (reg:XF 247 [ _166 ])
            (reg:XF 407))) "calc.c":378:35 983 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 407)
        (expr_list:REG_DEAD (reg:XF 247 [ _166 ])
            (nil))))
(insn 576 575 577 33 (set (reg:XF 408)
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC34") [flags 0x2]) [0  S16 A128])) "calc.c":378:46 134 {*movxf_internal}
     (expr_list:REG_EQUAL (const_double:XF 1.2e+5 [0x0.ea6p+17])
        (nil)))
(insn 577 576 578 33 (set (reg:XF 249 [ _168 ])
        (minus:XF (reg:XF 248 [ _167 ])
            (reg:XF 408))) "calc.c":378:46 983 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 408)
        (expr_list:REG_DEAD (reg:XF 248 [ _167 ])
            (nil))))
(insn 578 577 579 33 (set (reg:XF 250 [ _169 ])
        (float_extend:XF (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                    (const_int -112 [0xffffffffffffff90])) [2 nal_percent+0 S8 A128]))) "calc.c":378:64 158 {*extenddfxf2_i387}
     (nil))
(insn 579 578 580 33 (set (reg:XF 251 [ _170 ])
        (mult:XF (reg:XF 249 [ _168 ])
            (reg:XF 250 [ _169 ]))) "calc.c":378:64 979 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 250 [ _169 ])
        (expr_list:REG_DEAD (reg:XF 249 [ _168 ])
            (nil))))
(insn 580 579 581 33 (set (reg:XF 409)
        (mem/u/c:XF (symbol_ref/u:DI ("*.LC35") [flags 0x2]) [0  S16 A128])) "calc.c":378:78 134 {*movxf_internal}
     (expr_list:REG_EQUAL (const_double:XF 1.0e+2 [0x0.c8p+7])
        (nil)))
(insn 581 580 582 33 (set (reg:XF 252 [ _171 ])
        (div:XF (reg:XF 251 [ _170 ])
            (reg:XF 409))) "calc.c":378:78 983 {*fop_xf_1_i387}
     (expr_list:REG_DEAD (reg:XF 409)
        (expr_list:REG_DEAD (reg:XF 251 [ _170 ])
            (nil))))
(insn 582 581 583 33 (set (reg:DF 253 [ _172 ])
        (float_truncate:DF (reg:XF 252 [ _171 ]))) "calc.c":378:20 161 {truncxfdf2}
     (expr_list:REG_DEAD (reg:XF 252 [ _171 ])
        (nil)))
(insn 583 582 584 33 (set (reg:DF 20 xmm0)
        (reg:DF 253 [ _172 ])) "calc.c":378:20 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 253 [ _172 ])
        (nil)))
(call_insn 584 583 585 33 (set (reg:DF 20 xmm0)
        (call (mem:QI (symbol_ref:DI ("precision") [flags 0x3]  <function_decl 0x7f09f1657200 precision>) [0 precision S1 A8])
            (const_int 0 [0]))) "calc.c":378:20 824 {*call_value}
     (nil)
    (expr_list:DF (use (reg:DF 20 xmm0))
        (nil)))
(insn 585 584 586 33 (set (reg:DF 256 [ _277 ])
        (reg:DF 20 xmm0)) "calc.c":378:20 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 20 xmm0)
        (nil)))
(insn 586 585 587 33 (set (reg:XF 254 [ _173 ])
        (float_extend:XF (reg:DF 256 [ _277 ]))) "calc.c":378:20 158 {*extenddfxf2_i387}
     (expr_list:REG_DEAD (reg:DF 256 [ _277 ])
        (nil)))
(insn 587 586 588 33 (set (reg:XF 411)
        (mem/c:XF (plus:DI (reg/f:DI 19 frame)
                (const_int -48 [0xffffffffffffffd0])) [14 sum_nal+0 S16 A128])) "calc.c":378:17 134 {*movxf_internal}
     (nil))
(insn 588 587 589 33 (set (reg:XF 410)
        (plus:XF (reg:XF 411)
            (reg:XF 254 [ _173 ]))) "calc.c":378:17 979 {*fop_xf_comm_i387}
     (expr_list:REG_DEAD (reg:XF 411)
        (expr_list:REG_DEAD (reg:XF 254 [ _173 ])
            (nil))))
(insn 589 588 590 33 (set (mem/c:XF (plus:DI (reg/f:DI 19 frame)
                (const_int -48 [0xffffffffffffffd0])) [14 sum_nal+0 S16 A128])
        (reg:XF 410)) "calc.c":378:17 134 {*movxf_internal}
     (expr_list:REG_DEAD (reg:XF 410)
        (nil)))
;;  succ:       34 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 34, loop depth 0, maybe hot
;;  prev block 33, next block 35, flags: (RTL)
;;  pred:       33 (FALLTHRU)
;;              32
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7] 412 413 414 415 416
(code_label 590 589 591 34 110 (nil) [1 uses])
(note 591 590 592 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 592 591 593 34 (set (mem:XF (pre_dec:DI (reg/f:DI 7 sp)) [14  S16 A128])
        (mem/c:XF (plus:DI (reg/f:DI 19 frame)
                (const_int -48 [0xffffffffffffffd0])) [14 sum_nal+0 S16 A128])) "calc.c":379:5 129 {*pushxf}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(insn 593 592 594 34 (set (reg:DI 412)
        (symbol_ref/f:DI ("*.LC39") [flags 0x2]  <var_decl 0x7f09f12af000 *.LC39>)) "calc.c":379:5 74 {*movdi_internal}
     (nil))
(insn 594 593 595 34 (set (reg:DI 5 di)
        (reg:DI 412)) "calc.c":379:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 412)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC39") [flags 0x2]  <var_decl 0x7f09f12af000 *.LC39>)
            (nil))))
(insn 595 594 596 34 (set (reg:QI 0 ax)
        (const_int 0 [0])) "calc.c":379:5 77 {*movqi_internal}
     (nil))
(call_insn 596 595 597 34 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f09f183f100 printf>) [0 __builtin_printf S1 A8])
            (const_int 16 [0x10]))) "calc.c":379:5 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (nil)))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (nil))))
(insn 597 596 598 34 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) "calc.c":379:5 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (nil))))
(insn 598 597 599 34 (set (reg:XF 413)
        (mem/c:XF (plus:DI (reg/f:DI 19 frame)
                (const_int -80 [0xffffffffffffffb0])) [14 sum+0 S16 A128])) "calc.c":381:13 134 {*movxf_internal}
     (nil))
(insn 599 598 600 34 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -96 [0xffffffffffffffa0])) [2 sum_res+0 S8 A128])
        (float_truncate:DF (reg:XF 413))) "calc.c":381:13 161 {truncxfdf2}
     (expr_list:REG_DEAD (reg:XF 413)
        (nil)))
(insn 600 599 601 34 (set (reg:XF 414)
        (mem/c:XF (plus:DI (reg/f:DI 19 frame)
                (const_int -48 [0xffffffffffffffd0])) [14 sum_nal+0 S16 A128])) "calc.c":382:15 134 {*movxf_internal}
     (nil))
(insn 601 600 602 34 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -88 [0xffffffffffffffa8])) [2 nalog_res+0 S8 A64])
        (float_truncate:DF (reg:XF 414))) "calc.c":382:15 161 {truncxfdf2}
     (expr_list:REG_DEAD (reg:XF 414)
        (nil)))
(insn 602 601 603 34 (set (reg:DI 415)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -136 [0xffffffffffffff78])) [10 change+0 S8 A64])) "calc.c":384:5 74 {*movdi_internal}
     (nil))
(insn 603 602 604 34 (set (reg:DI 5 di)
        (reg:DI 415)) "calc.c":384:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 415)
        (nil)))
(call_insn 604 603 605 34 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f09f1857d00 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "calc.c":384:5 813 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 605 604 606 34 (set (reg:DI 416)
        (mem/f/c:DI (plus:DI (reg/f:DI 19 frame)
                (const_int -104 [0xffffffffffffff98])) [10 sort_change+0 S8 A64])) "calc.c":385:5 74 {*movdi_internal}
     (nil))
(insn 606 605 607 34 (set (reg:DI 5 di)
        (reg:DI 416)) "calc.c":385:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 416)
        (nil)))
(call_insn 607 606 608 34 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7f09f1857d00 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) "calc.c":385:5 813 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 608 607 609 34 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 16 argp)
                    (const_int 24 [0x18])) [5 flag+0 S4 A64])
            (const_int 3 [0x3]))) "calc.c":387:8 11 {*cmpsi_1}
     (nil))
(jump_insn 609 608 610 34 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 615)
            (pc))) "calc.c":387:8 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 615)
;;  succ:       35 (FALLTHRU)
;;              36
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 35, loop depth 0, maybe hot
;;  prev block 34, next block 36, flags: (RTL)
;;  pred:       34 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 417
(note 610 609 611 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 611 610 612 35 (set (reg:DF 417)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -96 [0xffffffffffffffa0])) [2 sum_res+0 S8 A128])) "calc.c":389:13 135 {*movdf_internal}
     (nil))
(insn 612 611 667 35 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -152 [0xffffffffffffff68])) [2 res+0 S8 A64])
        (reg:DF 417)) "calc.c":389:13 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 417)
        (nil)))
(jump_insn 667 612 668 35 (set (pc)
        (label_ref 622)) 807 {jump}
     (nil)
 -> 622)
;;  succ:       38 [always] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

(barrier 668 667 615)
;; basic block 36, loop depth 0, maybe hot
;;  prev block 35, next block 37, flags: (RTL)
;;  pred:       34
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags]
(code_label 615 668 616 36 112 (nil) [1 uses])
(note 616 615 617 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 617 616 618 36 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c:SI (plus:DI (reg/f:DI 16 argp)
                    (const_int 24 [0x18])) [5 flag+0 S4 A64])
            (const_int 2 [0x2]))) "calc.c":391:13 11 {*cmpsi_1}
     (nil))
(jump_insn 618 617 619 36 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 622)
            (pc))) "calc.c":391:13 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 622)
;;  succ:       37 (FALLTHRU)
;;              38
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 37, loop depth 0, maybe hot
;;  prev block 36, next block 38, flags: (RTL)
;;  pred:       36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 418
(note 619 618 620 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 620 619 621 37 (set (reg:DF 418)
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -88 [0xffffffffffffffa8])) [2 nalog_res+0 S8 A64])) "calc.c":393:13 135 {*movdf_internal}
     (nil))
(insn 621 620 622 37 (set (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -152 [0xffffffffffffff68])) [2 res+0 S8 A64])
        (reg:DF 418)) "calc.c":393:13 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 418)
        (nil)))
;;  succ:       38 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]

;; basic block 38, loop depth 0, maybe hot
;;  prev block 37, next block 39, flags: (RTL, MODIFIED)
;;  pred:       37 (FALLTHRU)
;;              36
;;              35 [always] 
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 17 [flags] 257 262 421
(code_label 622 621 623 38 113 (nil) [2 uses])
(note 623 622 624 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 624 623 627 38 (set (reg:DF 257 [ _287 ])
        (mem/c:DF (plus:DI (reg/f:DI 19 frame)
                (const_int -152 [0xffffffffffffff68])) [2 res+0 S8 A64])) "calc.c":395:12 135 {*movdf_internal}
     (nil))
(insn 627 624 631 38 (set (reg:DF 262 [ <retval> ])
        (reg:DF 257 [ _287 ])) "calc.c":395:12 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 257 [ _287 ])
        (nil)))
(insn 631 627 632 38 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -8 [0xfffffffffffffff8])) [8 D.4788+0 S8 A64])
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_TEST))
            (clobber (reg:DI 421))
        ]) "calc.c":396:1 1164 {stack_protect_test_1_di}
     (expr_list:REG_UNUSED (reg:DI 421)
        (nil)))
(jump_insn 632 631 650 38 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 635)
            (pc))) "calc.c":396:1 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 635)
;;  succ:       40
;;              39 (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 262

;; basic block 39, loop depth 0, maybe hot
;;  prev block 38, next block 40, flags: (RTL)
;;  pred:       38 (FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
(note 650 632 633 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(call_insn 633 650 634 39 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f09f16df600 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "calc.c":396:1 813 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 19 [frame]

(barrier 634 633 635)
;; basic block 40, loop depth 0, maybe hot
;;  prev block 39, next block 1, flags: (RTL)
;;  pred:       38
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 262
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 262
;; lr  def 	 20 [xmm0]
(code_label 635 634 651 40 115 (nil) [1 uses])
(note 651 635 636 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 636 651 637 40 (set (reg/i:DF 20 xmm0)
        (reg:DF 262 [ <retval> ])) "calc.c":396:1 135 {*movdf_internal}
     (expr_list:REG_DEAD (reg:DF 262 [ <retval> ])
        (nil)))
(insn 637 636 0 40 (use (reg/i:DF 20 xmm0)) "calc.c":396:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0]


;; Function main (main, funcdef_no=15, decl_uid=4628, cgraph_uid=16, symbol_order=15)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r83: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r83,l0) best AREG, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r83,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a1(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000

   Insn 13(l0): point = 0
   Insn 12(l0): point = 2
   Insn 8(l0): point = 4
   Insn 5(l0): point = 6
 a0(r83): [3..4]
 a1(r82): [5..6]
Compressing live ranges: from 9 to 4 - 44%
Ranges after the compression:
 a0(r83): [0..1]
 a1(r82): [2..3]
  pref0:a0(r83)<-hr0@1500
  regions=1, blocks=3, points=4
    allocnos=2 (big 0), copies=0, conflicts=0, ranges=2
Disposition:
    1:r82  l0     0    0:r83  l0     0
+++Costs: overall -1000, reg -1000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


main

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 6 [bp]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d} r6={1d,2u} r7={1d,2u} r16={1d,1u} r19={1d,2u} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r36={1d} r37={1d} r82={1d,1u} r83={1d,1u} 
;;    total ref usage 33{22d,11u,0e} in 4{4 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }u-1(16){ }u-1(19){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;; lr  def 	 0 [ax] 82 83
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 8 2 (set (reg:SI 82 [ _1 ])
        (const_int 0 [0])) "<built-in>":0:0 75 {*movsi_internal}
     (nil))
(insn 8 5 12 2 (set (reg:SI 83 [ <retval> ])
        (reg:SI 82 [ _1 ])) "<built-in>":0:0 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 82 [ _1 ])
        (nil)))
(insn 12 8 13 2 (set (reg/i:SI 0 ax)
        (reg:SI 83 [ <retval> ])) "calc.c":401:1 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 83 [ <retval> ])
        (nil)))
(insn 13 12 0 2 (use (reg/i:SI 0 ax)) "calc.c":401:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 19 [frame]

